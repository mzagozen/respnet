import yang.adata
import orchestron.ttt
from orchestron.device import UnsupportedDevice

import respnet.layers.base_2 as base

import respnet.devices.CiscoIosXr_24_1_ncs55a1 as xr24
import respnet.devices.JuniperCRPD_23_4R1_9 as crpd23


def prefix_length_to_netmask(prefix_length):
    binary_netmask = ("1" * prefix_length).ljust(32, "0")
    octets = []
    for i in range(0, 32, 8):
        bit = int(binary_netmask[i:i + 8], 2)
        octets.append(bit)
    return ".".join(map(str, octets))


class BaseConfig(base.BaseConfig):
    def transform(self, i, di):
        print("RFS /rfs{%s}/base-config transform running" % (di.name))

        if "Cisco-IOS-XR-um-hostname-cfg" in di.modules:
            dev = xr24.root()
            dev.hostname.system_network_name = di.name
            intf = dev.interfaces.interface.create("Loopback0")
            intf.ipv4.addresses.create_address(i.ipv4_address, "255.255.255.255")
            return dev
        elif "http://xml.juniper.net/netconf/junos/1.0" in di.modules:
            dev = crpd23.root()
            dev.configuration.system.host_name = di.name
            unit = dev.configuration.interfaces.interface.create("lo0").unit.create("0")
            unit.family.create_inet().address.create("%s/32" % (i.ipv4_address))
            return dev

        raise UnsupportedDevice()


class BBInterface(base.BBInterface):
    def transform(self, i, di):
        print("RFS /rfs{%s}/backbone-interface transform running [%s] <-> %s [%s]" % (di.name, i.name, i.remote.device, i.remote.interface))

        if "Cisco-IOS-XR-um-hostname-cfg" in di.modules:
            dev = xr24.root()
            intf = dev.interfaces.interface.create(i.name)
            intf.description = "Link to %s [%s]" % (i.remote.device, i.remote.interface)
            intf.shutdown = False
            ipv4_address = i.ipv4_address
            if ipv4_address != None:
                intf.ipv4.addresses.create_address(ipv4_address, prefix_length_to_netmask(i.ipv4_prefix_length))
            return dev
        elif "http://xml.juniper.net/netconf/junos/1.0" in di.modules:
            dev = crpd23.root()
            unit = dev.configuration.interfaces.interface.create(i.name).unit.create("0")
            unit.description = "Link to %s [%s]" % (i.remote.device, i.remote.interface)
            ipv4_address = i.ipv4_address
            if ipv4_address != None:
                unit.family.create_inet().address.create("%s/%s" % (ipv4_address, str(i.ipv4_prefix_length)))
            return dev

        raise UnsupportedDevice()


class Vrf(base.Vrf):
    def transform(self, i, di):
        print("RFS /rfs{%s}/vrf transform running %s" % (di.name, i.name))

        if "Cisco-IOS-XR-um-hostname-cfg" in di.modules:
            dev = xr24.root()
            vrf = dev.vrfs.vrf.create(i.name)
            vrf.description = i.description
            return dev
        elif "http://xml.juniper.net/netconf/junos/1.0" in di.modules:
            dev = crpd23.root()
            ri = dev.configuration.routing_instances.instance.create(i.name)
            ri.instance_type = "virtual-router"
            return dev

        raise UnsupportedDevice()


class VrfInterface(base.VrfInterface):
    def transform(self, i, di):
        print("RFS /rfs{%s}/vrf-interface transform running %s" % (di.name, i.name))

        if "Cisco-IOS-XR-um-hostname-cfg" in di.modules:
            dev = xr24.root()
            intf = dev.interfaces.interface.create(i.name)
            intf.description = i.description
            intf.shutdown = False
            ipv4_address = i.ipv4_address
            if ipv4_address != None:
                intf.ipv4.addresses.create_address(ipv4_address, prefix_length_to_netmask(i.ipv4_prefix_length))
            intf.vrf = i.vrf
            return dev
        elif "http://xml.juniper.net/netconf/junos/1.0" in di.modules:
            dev = crpd23.root()
            unit = dev.configuration.interfaces.interface.create(i.name).unit.create("0")
            unit.description = i.description
            ipv4_address = i.ipv4_address
            if ipv4_address != None:
                unit.family.create_inet().address.create("%s/%s" % (ipv4_address, str(i.ipv4_prefix_length)))
            ri = dev.configuration.routing_instances.instance.create(i.vrf)
            ri.interface.create(i.name)
            return dev

        raise UnsupportedDevice()
