import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4(yang.adata.MNode):
    unicast: str

    def __init__(self, unicast: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4', ns=self._ns)
        _unicast = self.unicast
        if _unicast is not None:
            res.children['unicast'] = yang.gdata.Leaf('unicast', 'enumeration', _unicast, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4(unicast=n.get_str("unicast"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4(unicast=yang.gdata.from_xml_str(n, "unicast"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4")


class Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6(yang.adata.MNode):
    unicast: str

    def __init__(self, unicast: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6', ns=self._ns)
        _unicast = self.unicast
        if _unicast is not None:
            res.children['unicast'] = yang.gdata.Leaf('unicast', 'enumeration', _unicast, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6(unicast=n.get_str("unicast"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6(unicast=yang.gdata.from_xml_str(n, "unicast"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6")


class Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6

    def __init__(self, ipv4: Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4, ipv6: Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.ipv4 = ipv4
        self.ipv4._parent = self
        self.ipv6 = ipv6
        self.ipv6._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address-family', ns=self._ns)
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family(ipv4=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4.from_gdata(n.get_container("ipv4")), ipv6=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6.from_gdata(n.get_container("ipv6")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family(ipv4=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv4.from_xml(yang.gdata.get_xml_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family__ipv6.from_xml(yang.gdata.get_xml_child(n, "ipv6")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family")


class Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family

    def __init__(self, address_family: Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.address_family = address_family
        self.address_family._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('role', ns=self._ns)
        _address_family = self.address_family
        if _address_family is not None:
            res.children['address-family'] = _address_family.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role(address_family=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family.from_gdata(n.get_container("address-family")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role(address_family=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role__address_family.from_xml(yang.gdata.get_xml_child(n, "address-family")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role")


class Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry(yang.adata.MNode):
    vrf_group_name: str

    def __init__(self, vrf_group_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_group_name = vrf_group_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.vrf_group_name)], ns=self._ns)
        _vrf_group_name = self.vrf_group_name
        if _vrf_group_name is not None:
            res.children['vrf-group-name'] = yang.gdata.Leaf('vrf-group-name', 'string', _vrf_group_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry(vrf_group_name=n.get_str("vrf-group-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry(vrf_group_name=yang.gdata.from_xml_str(n, "vrf-group-name"))

class Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf-group'
        self.elements = elements

    def create(self, vrf_group_name):
        for e in self.elements:
            match = True
            if e.vrf_group_name != vrf_group_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry(vrf_group_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('vrf-group', ['vrf-group-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups(yang.adata.MNode):
    vrf_group: Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group

    def __init__(self, vrf_group: list[Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_group = Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group(elements=vrf_group)
        self.vrf_group._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('vrf-groups', ns=self._ns)
        _vrf_group = self.vrf_group
        if _vrf_group is not None:
            res.children['vrf-group'] = _vrf_group.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups(vrf_group=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group.from_gdata(n.get_list("vrf-group")))
        return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups(vrf_group=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups__vrf_group.from_xml(yang.gdata.get_xml_children(n, "vrf-group")))
        return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups()


class Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download(yang.adata.MNode):
    role: ?Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role
    vrf_groups: Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups

    def __init__(self, role: ?Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role=None, vrf_groups: ?Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.role = role
        self_role = self.role
        if self_role is not None:
            self_role._parent = self
        if vrf_groups is not None:
            self.vrf_groups = vrf_groups
        else:
            self.vrf_groups = Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups()
        self_vrf_groups = self.vrf_groups
        if self_vrf_groups is not None:
            self_vrf_groups._parent = self

    def create_role(self, address_family):
        res = Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role(address_family)
        self.role = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('selective-vrf-download', ns=self._ns)
        _role = self.role
        _vrf_groups = self.vrf_groups
        if _role is not None:
            res.children['role'] = _role.to_gdata()
        if _vrf_groups is not None:
            res.children['vrf-groups'] = _vrf_groups.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download(role=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role.from_gdata(n.get_container("role")), vrf_groups=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups.from_gdata(n.get_opt_container("vrf-groups")))
        return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download(role=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__role.from_xml(yang.gdata.get_xml_child(n, "role")), vrf_groups=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download__vrf_groups.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-groups")))
        return Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download()


class Cisco_IOS_XR_um_location_cfg__locations__location_entry(yang.adata.MNode):
    location_name: str
    selective_vrf_download: ?Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download

    def __init__(self, location_name: str, selective_vrf_download: ?Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-location-cfg"
        self.location_name = location_name
        if selective_vrf_download is not None:
            self.selective_vrf_download = selective_vrf_download
        else:
            self.selective_vrf_download = Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download()
        self_selective_vrf_download = self.selective_vrf_download
        if self_selective_vrf_download is not None:
            self_selective_vrf_download._parent = self

    def create_selective_vrf_download(self, role):
        res = Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download(role)
        self.selective_vrf_download = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.location_name)], ns=self._ns)
        _location_name = self.location_name
        _selective_vrf_download = self.selective_vrf_download
        if _location_name is not None:
            res.children['location-name'] = yang.gdata.Leaf('location-name', 'string', _location_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-location-cfg')
        if _selective_vrf_download is not None:
            res.children['selective-vrf-download'] = _selective_vrf_download.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location_entry:
        return Cisco_IOS_XR_um_location_cfg__locations__location_entry(location_name=n.get_str("location-name"), selective_vrf_download=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download.from_gdata(n.get_opt_container("selective-vrf-download")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__location_entry:
        return Cisco_IOS_XR_um_location_cfg__locations__location_entry(location_name=yang.gdata.from_xml_str(n, "location-name"), selective_vrf_download=Cisco_IOS_XR_um_location_cfg__locations__location__selective_vrf_download.from_xml(yang.gdata.get_xml_opt_child(n, "selective-vrf-download")))

class Cisco_IOS_XR_um_location_cfg__locations__location(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_location_cfg__locations__location_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-location-cfg"
        self._name = 'location'
        self.elements = elements

    def create(self, location_name):
        for e in self.elements:
            match = True
            if e.location_name != location_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_location_cfg__locations__location_entry(location_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('location', ['location-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_location_cfg__locations__location_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_location_cfg__locations__location_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_location_cfg__locations__location_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_location_cfg__locations__location_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4(yang.adata.MNode):
    unicast: str

    def __init__(self, unicast: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4', ns=self._ns)
        _unicast = self.unicast
        if _unicast is not None:
            res.children['unicast'] = yang.gdata.Leaf('unicast', 'enumeration', _unicast, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4(unicast=n.get_str("unicast"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4(unicast=yang.gdata.from_xml_str(n, "unicast"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4")


class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6(yang.adata.MNode):
    unicast: str

    def __init__(self, unicast: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6', ns=self._ns)
        _unicast = self.unicast
        if _unicast is not None:
            res.children['unicast'] = yang.gdata.Leaf('unicast', 'enumeration', _unicast, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6(unicast=n.get_str("unicast"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6(unicast=yang.gdata.from_xml_str(n, "unicast"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6")


class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6

    def __init__(self, ipv4: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4, ipv6: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.ipv4 = ipv4
        self.ipv4._parent = self
        self.ipv6 = ipv6
        self.ipv6._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address-family', ns=self._ns)
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family(ipv4=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4.from_gdata(n.get_container("ipv4")), ipv6=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6.from_gdata(n.get_container("ipv6")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family(ipv4=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv4.from_xml(yang.gdata.get_xml_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family__ipv6.from_xml(yang.gdata.get_xml_child(n, "ipv6")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family")


class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family

    def __init__(self, address_family: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.address_family = address_family
        self.address_family._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('role', ns=self._ns)
        _address_family = self.address_family
        if _address_family is not None:
            res.children['address-family'] = _address_family.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role(address_family=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family.from_gdata(n.get_container("address-family")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role(address_family=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role__address_family.from_xml(yang.gdata.get_xml_child(n, "address-family")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role")


class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry(yang.adata.MNode):
    vrf_group_name: str

    def __init__(self, vrf_group_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_group_name = vrf_group_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.vrf_group_name)], ns=self._ns)
        _vrf_group_name = self.vrf_group_name
        if _vrf_group_name is not None:
            res.children['vrf-group-name'] = yang.gdata.Leaf('vrf-group-name', 'string', _vrf_group_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry(vrf_group_name=n.get_str("vrf-group-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry(vrf_group_name=yang.gdata.from_xml_str(n, "vrf-group-name"))

class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf-group'
        self.elements = elements

    def create(self, vrf_group_name):
        for e in self.elements:
            match = True
            if e.vrf_group_name != vrf_group_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry(vrf_group_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('vrf-group', ['vrf-group-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups(yang.adata.MNode):
    vrf_group: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group

    def __init__(self, vrf_group: list[Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_group = Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group(elements=vrf_group)
        self.vrf_group._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('vrf-groups', ns=self._ns)
        _vrf_group = self.vrf_group
        if _vrf_group is not None:
            res.children['vrf-group'] = _vrf_group.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups(vrf_group=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group.from_gdata(n.get_list("vrf-group")))
        return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups(vrf_group=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups__vrf_group.from_xml(yang.gdata.get_xml_children(n, "vrf-group")))
        return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups()


class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download(yang.adata.MNode):
    role: ?Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role
    vrf_groups: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups

    def __init__(self, role: ?Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role=None, vrf_groups: ?Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.role = role
        self_role = self.role
        if self_role is not None:
            self_role._parent = self
        if vrf_groups is not None:
            self.vrf_groups = vrf_groups
        else:
            self.vrf_groups = Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups()
        self_vrf_groups = self.vrf_groups
        if self_vrf_groups is not None:
            self_vrf_groups._parent = self

    def create_role(self, address_family):
        res = Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role(address_family)
        self.role = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('selective-vrf-download', ns=self._ns)
        _role = self.role
        _vrf_groups = self.vrf_groups
        if _role is not None:
            res.children['role'] = _role.to_gdata()
        if _vrf_groups is not None:
            res.children['vrf-groups'] = _vrf_groups.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download(role=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role.from_gdata(n.get_container("role")), vrf_groups=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups.from_gdata(n.get_opt_container("vrf-groups")))
        return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download(role=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__role.from_xml(yang.gdata.get_xml_child(n, "role")), vrf_groups=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download__vrf_groups.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-groups")))
        return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download()


class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry(yang.adata.MNode):
    location_name: str
    selective_vrf_download: ?Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download

    def __init__(self, location_name: str, selective_vrf_download: ?Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-location-cfg"
        self.location_name = location_name
        if selective_vrf_download is not None:
            self.selective_vrf_download = selective_vrf_download
        else:
            self.selective_vrf_download = Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download()
        self_selective_vrf_download = self.selective_vrf_download
        if self_selective_vrf_download is not None:
            self_selective_vrf_download._parent = self

    def create_selective_vrf_download(self, role):
        res = Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download(role)
        self.selective_vrf_download = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.location_name)], ns=self._ns)
        _location_name = self.location_name
        _selective_vrf_download = self.selective_vrf_download
        if _location_name is not None:
            res.children['location-name'] = yang.gdata.Leaf('location-name', 'string', _location_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-location-cfg')
        if _selective_vrf_download is not None:
            res.children['selective-vrf-download'] = _selective_vrf_download.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry:
        return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry(location_name=n.get_str("location-name"), selective_vrf_download=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download.from_gdata(n.get_opt_container("selective-vrf-download")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry:
        return Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry(location_name=yang.gdata.from_xml_str(n, "location-name"), selective_vrf_download=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location__selective_vrf_download.from_xml(yang.gdata.get_xml_opt_child(n, "selective-vrf-download")))

class Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-location-cfg"
        self._name = 'preconfigured-location'
        self.elements = elements

    def create(self, location_name):
        for e in self.elements:
            match = True
            if e.location_name != location_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry(location_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('preconfigured-location', ['location-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_location_cfg__locations(yang.adata.MNode):
    location: Cisco_IOS_XR_um_location_cfg__locations__location
    preconfigured_location: Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location

    def __init__(self, location: list[Cisco_IOS_XR_um_location_cfg__locations__location_entry]=[], preconfigured_location: list[Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-location-cfg"
        self.location = Cisco_IOS_XR_um_location_cfg__locations__location(elements=location)
        self.location._parent = self
        self.preconfigured_location = Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location(elements=preconfigured_location)
        self.preconfigured_location._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('locations', ns=self._ns)
        _location = self.location
        _preconfigured_location = self.preconfigured_location
        if _location is not None:
            res.children['location'] = _location.to_gdata()
        if _preconfigured_location is not None:
            res.children['preconfigured-location'] = _preconfigured_location.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_location_cfg__locations:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations(location=Cisco_IOS_XR_um_location_cfg__locations__location.from_gdata(n.get_list("location")), preconfigured_location=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location.from_gdata(n.get_list("preconfigured-location")))
        return Cisco_IOS_XR_um_location_cfg__locations()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_location_cfg__locations:
        if n != None:
            return Cisco_IOS_XR_um_location_cfg__locations(location=Cisco_IOS_XR_um_location_cfg__locations__location.from_xml(yang.gdata.get_xml_children(n, "location")), preconfigured_location=Cisco_IOS_XR_um_location_cfg__locations__preconfigured_location.from_xml(yang.gdata.get_xml_children(n, "preconfigured-location")))
        return Cisco_IOS_XR_um_location_cfg__locations()


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('unicast', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology_name = topology_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.topology_name)], ns=self._ns)
        _topology_name = self.topology_name
        if _topology_name is not None:
            res.children['topology-name'] = yang.gdata.Leaf('topology-name', 'string', _topology_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('topology', ['topology-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology

    def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('topologies', ns=self._ns)
        _topology = self.topology
        if _topology is not None:
            res.children['topology'] = _topology.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_gdata(n.get_list("topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies

    def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multicast', ns=self._ns)
        _topologies = self.topologies
        if _topologies is not None:
            res.children['topologies'] = _topologies.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast

    def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if unicast is not None:
            self.unicast = unicast
        else:
            self.unicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        self.unicast = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4', ns=self._ns)
        _unicast = self.unicast
        _multicast = self.multicast
        if _unicast is not None:
            res.children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            res.children['multicast'] = _multicast.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('unicast', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology_name = topology_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.topology_name)], ns=self._ns)
        _topology_name = self.topology_name
        if _topology_name is not None:
            res.children['topology-name'] = yang.gdata.Leaf('topology-name', 'string', _topology_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('topology', ['topology-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology

    def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('topologies', ns=self._ns)
        _topology = self.topology
        if _topology is not None:
            res.children['topology'] = _topology.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_gdata(n.get_list("topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies

    def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multicast', ns=self._ns)
        _topologies = self.topologies
        if _topologies is not None:
            res.children['topologies'] = _topologies.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast

    def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if unicast is not None:
            self.unicast = unicast
        else:
            self.unicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        self.unicast = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6', ns=self._ns)
        _unicast = self.unicast
        _multicast = self.multicast
        if _unicast is not None:
            res.children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            res.children['multicast'] = _multicast.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()


class Cisco_IOS_XR_um_vrf_cfg__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6

    def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address-family', ns=self._ns)
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('unicast', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multicast', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('flowspec', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec

    def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if unicast is not None:
            self.unicast = unicast
        else:
            self.unicast = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        if flowspec is not None:
            self.flowspec = flowspec
        else:
            self.flowspec = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        self_flowspec = self.flowspec
        if self_flowspec is not None:
            self_flowspec._parent = self

    def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()
        self.unicast = res
        return res

    def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        self.multicast = res
        return res

    def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        self.flowspec = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4', ns=self._ns)
        _unicast = self.unicast
        _multicast = self.multicast
        _flowspec = self.flowspec
        if _unicast is not None:
            res.children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            res.children['multicast'] = _multicast.to_gdata()
        if _flowspec is not None:
            res.children['flowspec'] = _flowspec.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_gdata(n.get_opt_container("flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_xml(yang.gdata.get_xml_opt_child(n, "flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('unicast', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multicast', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('flowspec', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec

    def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if unicast is not None:
            self.unicast = unicast
        else:
            self.unicast = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        if flowspec is not None:
            self.flowspec = flowspec
        else:
            self.flowspec = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        self_flowspec = self.flowspec
        if self_flowspec is not None:
            self_flowspec._parent = self

    def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()
        self.unicast = res
        return res

    def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        self.multicast = res
        return res

    def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        self.flowspec = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6', ns=self._ns)
        _unicast = self.unicast
        _multicast = self.multicast
        _flowspec = self.flowspec
        if _unicast is not None:
            res.children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            res.children['multicast'] = _multicast.to_gdata()
        if _flowspec is not None:
            res.children['flowspec'] = _flowspec.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_gdata(n.get_opt_container("flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_xml(yang.gdata.get_xml_opt_child(n, "flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6

    def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address-family', ns=self._ns)
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('big', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(yang.adata.MNode):
    big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big

    def __init__(self, big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if big is not None:
            self.big = big
        else:
            self.big = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        self_big = self.big
        if self_big is not None:
            self_big._parent = self

    def create_big(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        self.big = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('mode', ns=self._ns)
        _big = self.big
        if _big is not None:
            res.children['big'] = _big.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_gdata(n.get_opt_container("big")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_xml(yang.gdata.get_xml_opt_child(n, "big")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(yang.adata.MNode):
    id: ?str

    def __init__(self, id: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.id = id

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('vpn', ns=self._ns)
        _id = self.id
        if _id is not None:
            res.children['id'] = yang.gdata.Leaf('id', 'string', _id, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=n.get_opt_str("id"))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=yang.gdata.from_xml_opt_str(n, "id"))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('disable', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable

    def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if disable is not None:
            self.disable = disable
        else:
            self.disable = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        self.disable = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('remote-route-filtering', ns=self._ns)
        _disable = self.disable
        if _disable is not None:
            res.children['disable'] = _disable.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()


class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_family: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family
    mode: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode
    vpn: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn
    description: ?str
    remote_route_filtering: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering
    fallback_vrf: ?str

    def __init__(self, vrf_name: str, address_family: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family=None, mode: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode=None, vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn=None, description: ?str, remote_route_filtering: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering=None, fallback_vrf: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_name = vrf_name
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self
        if mode is not None:
            self.mode = mode
        else:
            self.mode = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()
        self_mode = self.mode
        if self_mode is not None:
            self_mode._parent = self
        if vpn is not None:
            self.vpn = vpn
        else:
            self.vpn = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()
        self_vpn = self.vpn
        if self_vpn is not None:
            self_vpn._parent = self
        self.description = description
        if remote_route_filtering is not None:
            self.remote_route_filtering = remote_route_filtering
        else:
            self.remote_route_filtering = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()
        self_remote_route_filtering = self.remote_route_filtering
        if self_remote_route_filtering is not None:
            self_remote_route_filtering._parent = self
        self.fallback_vrf = fallback_vrf

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.vrf_name)], ns=self._ns)
        _vrf_name = self.vrf_name
        _address_family = self.address_family
        _mode = self.mode
        _vpn = self.vpn
        _description = self.description
        _remote_route_filtering = self.remote_route_filtering
        _fallback_vrf = self.fallback_vrf
        if _vrf_name is not None:
            res.children['vrf-name'] = yang.gdata.Leaf('vrf-name', 'string', _vrf_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _address_family is not None:
            res.children['address-family'] = _address_family.to_gdata()
        if _mode is not None:
            res.children['mode'] = _mode.to_gdata()
        if _vpn is not None:
            res.children['vpn'] = _vpn.to_gdata()
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _remote_route_filtering is not None:
            res.children['remote-route-filtering'] = _remote_route_filtering.to_gdata()
        if _fallback_vrf is not None:
            res.children['fallback-vrf'] = yang.gdata.Leaf('fallback-vrf', 'string', _fallback_vrf, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_gdata(n.get_opt_container("address-family")), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_gdata(n.get_opt_container("mode")), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_gdata(n.get_opt_container("vpn")), description=n.get_opt_str("description"), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_gdata(n.get_opt_container("remote-route-filtering")), fallback_vrf=n.get_opt_str("fallback-vrf"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family")), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_xml(yang.gdata.get_xml_opt_child(n, "mode")), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_xml(yang.gdata.get_xml_opt_child(n, "vpn")), description=yang.gdata.from_xml_opt_str(n, "description"), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_xml(yang.gdata.get_xml_opt_child(n, "remote-route-filtering")), fallback_vrf=yang.gdata.from_xml_opt_str(n, "fallback-vrf"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf'
        self.elements = elements

    def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('vrf', ['vrf-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf

    def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('vrfs', ns=self._ns)
        _vrf = self.vrf
        if _vrf is not None:
            res.children['vrf'] = _vrf.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_gdata(n.get_list("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()


class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('disable', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()


class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable

    def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if disable is not None:
            self.disable = disable
        else:
            self.disable = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        self.disable = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('selective-vrf-download', ns=self._ns)
        _disable = self.disable
        if _disable is not None:
            res.children['disable'] = _disable.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()


class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(yang.adata.MNode):
    srlg_name: str
    value: ?int
    description: ?str

    def __init__(self, srlg_name: str, value: ?int, description: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.srlg_name = srlg_name
        self.value = value
        self.description = description

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.srlg_name)], ns=self._ns)
        _srlg_name = self.srlg_name
        _value = self.value
        _description = self.description
        if _srlg_name is not None:
            res.children['srlg-name'] = yang.gdata.Leaf('srlg-name', 'string', _srlg_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=n.get_str("srlg-name"), value=n.get_opt_int("value"), description=n.get_opt_str("description"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=yang.gdata.from_xml_str(n, "srlg-name"), value=yang.gdata.from_xml_opt_int(n, "value"), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'name'
        self.elements = elements

    def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('name', ['srlg-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__names__name

    def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(elements=name)
        self.name._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('names', ns=self._ns)
        _name = self.name
        if _name is not None:
            res.children['name'] = _name.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_gdata(n.get_list("name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_xml(yang.gdata.get_xml_children(n, "name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(yang.adata.MNode):
    priority: ?str

    def __init__(self, priority: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.priority = priority

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('include-optical', ns=self._ns)
        _priority = self.priority
        if _priority is not None:
            res.children['priority'] = yang.gdata.Leaf('priority', 'enumeration', _priority, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=n.get_opt_str("priority"))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=yang.gdata.from_xml_opt_str(n, "priority"))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical()


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.index_number)], ns=self._ns)
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            res.children['index-number'] = yang.gdata.Leaf('index-number', 'uint32', _index_number, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _priority is not None:
            res.children['priority'] = yang.gdata.Leaf('priority', 'enumeration', _priority, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('index', ['index-number'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index

    def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(elements=index)
        self.index._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('indexes', ns=self._ns)
        _index = self.index
        if _index is not None:
            res.children['index'] = _index.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_gdata(n.get_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(yang.adata.MNode):
    srlg_name: str

    def __init__(self, srlg_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.srlg_name = srlg_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.srlg_name)], ns=self._ns)
        _srlg_name = self.srlg_name
        if _srlg_name is not None:
            res.children['srlg-name'] = yang.gdata.Leaf('srlg-name', 'string', _srlg_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=n.get_str("srlg-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=yang.gdata.from_xml_str(n, "srlg-name"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'name'
        self.elements = elements

    def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('name', ['srlg-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name

    def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(elements=name)
        self.name._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('names', ns=self._ns)
        _name = self.name
        if _name is not None:
            res.children['name'] = _name.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_gdata(n.get_list("name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_xml(yang.gdata.get_xml_children(n, "name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(yang.adata.MNode):
    index_number: int
    group_name: str

    def __init__(self, index_number: int, group_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.group_name = group_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.index_number)], ns=self._ns)
        _index_number = self.index_number
        _group_name = self.group_name
        if _index_number is not None:
            res.children['index-number'] = yang.gdata.Leaf('index-number', 'uint32', _index_number, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _group_name is not None:
            res.children['group-name'] = yang.gdata.Leaf('group-name', 'string', _group_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=n.get_int("index-number"), group_name=n.get_str("group-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), group_name=yang.gdata.from_xml_str(n, "group-name"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'group'
        self.elements = elements

    def create(self, index_number, group_name):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number, group_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('group', ['index-number'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group

    def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(elements=group)
        self.group._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('groups', ns=self._ns)
        _group = self.group
        if _group is not None:
            res.children['group'] = _group.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_gdata(n.get_list("group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups()


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names
    groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups

    def __init__(self, interface_name: str, include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical=None, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes=None, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.interface_name = interface_name
        if include_optical is not None:
            self.include_optical = include_optical
        else:
            self.include_optical = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical()
        self_include_optical = self.include_optical
        if self_include_optical is not None:
            self_include_optical._parent = self
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self
        if names is not None:
            self.names = names
        else:
            self.names = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()
        self_names = self.names
        if self_names is not None:
            self_names._parent = self
        if groups is not None:
            self.groups = groups
        else:
            self.groups = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups()
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self

    def create_include_optical(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical()
        self.include_optical = res
        return res

    def create_groups(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups()
        self.groups = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.interface_name)], ns=self._ns)
        _interface_name = self.interface_name
        _include_optical = self.include_optical
        _indexes = self.indexes
        _names = self.names
        _groups = self.groups
        if _interface_name is not None:
            res.children['interface-name'] = yang.gdata.Leaf('interface-name', 'string', _interface_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _include_optical is not None:
            res.children['include-optical'] = _include_optical.to_gdata()
        if _indexes is not None:
            res.children['indexes'] = _indexes.to_gdata()
        if _names is not None:
            res.children['names'] = _names.to_gdata()
        if _groups is not None:
            res.children['groups'] = _groups.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_gdata(n.get_opt_container("include-optical")), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_gdata(n.get_opt_container("indexes")), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_gdata(n.get_opt_container("names")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_gdata(n.get_opt_container("groups")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_xml(yang.gdata.get_xml_opt_child(n, "include-optical")), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_xml(yang.gdata.get_xml_opt_child(n, "names")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'interface'
        self.elements = elements

    def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface', ['interface-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface

    def __init__(self, interface: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.interface = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(elements=interface)
        self.interface._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('interfaces', ns=self._ns)
        _interface = self.interface
        if _interface is not None:
            res.children['interface'] = _interface.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_gdata(n.get_list("interface")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()


class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.index_number)], ns=self._ns)
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            res.children['index-number'] = yang.gdata.Leaf('index-number', 'uint32', _index_number, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _priority is not None:
            res.children['priority'] = yang.gdata.Leaf('priority', 'enumeration', _priority, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('index', ['index-number'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index

    def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(elements=index)
        self.index._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('indexes', ns=self._ns)
        _index = self.index
        if _index is not None:
            res.children['index'] = _index.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_gdata(n.get_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()


class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(yang.adata.MNode):
    group_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes

    def __init__(self, group_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group_name = group_name
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.group_name)], ns=self._ns)
        _group_name = self.group_name
        _indexes = self.indexes
        if _group_name is not None:
            res.children['group-name'] = yang.gdata.Leaf('group-name', 'string', _group_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _indexes is not None:
            res.children['indexes'] = _indexes.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=n.get_str("group-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_gdata(n.get_opt_container("indexes")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'group'
        self.elements = elements

    def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('group', ['group-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group

    def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(elements=group)
        self.group._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('groups', ns=self._ns)
        _group = self.group
        if _group is not None:
            res.children['group'] = _group.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_gdata(n.get_list("group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()


class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.index_number)], ns=self._ns)
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            res.children['index-number'] = yang.gdata.Leaf('index-number', 'uint32', _index_number, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _priority is not None:
            res.children['priority'] = yang.gdata.Leaf('priority', 'enumeration', _priority, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('index', ['index-number'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index

    def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(elements=index)
        self.index._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('indexes', ns=self._ns)
        _index = self.index
        if _index is not None:
            res.children['index'] = _index.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_gdata(n.get_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()


class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(yang.adata.MNode):
    location_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes

    def __init__(self, location_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.location_name = location_name
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.location_name)], ns=self._ns)
        _location_name = self.location_name
        _indexes = self.indexes
        if _location_name is not None:
            res.children['location-name'] = yang.gdata.Leaf('location-name', 'string', _location_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _indexes is not None:
            res.children['indexes'] = _indexes.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=n.get_str("location-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_gdata(n.get_opt_container("indexes")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=yang.gdata.from_xml_str(n, "location-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'inherit-location'
        self.elements = elements

    def create(self, location_name):
        for e in self.elements:
            match = True
            if e.location_name != location_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('inherit-location', ['location-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(yang.adata.MNode):
    inherit_location: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location

    def __init__(self, inherit_location: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.inherit_location = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(elements=inherit_location)
        self.inherit_location._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('inherit-locations', ns=self._ns)
        _inherit_location = self.inherit_location
        if _inherit_location is not None:
            res.children['inherit-location'] = _inherit_location.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_gdata(n.get_list("inherit-location")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_xml(yang.gdata.get_xml_children(n, "inherit-location")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()


class Cisco_IOS_XR_um_vrf_cfg__srlg(yang.adata.MNode):
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__names
    interfaces: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces
    groups: Cisco_IOS_XR_um_vrf_cfg__srlg__groups
    inherit_locations: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations

    def __init__(self, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__names=None, interfaces: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups=None, inherit_locations: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if names is not None:
            self.names = names
        else:
            self.names = Cisco_IOS_XR_um_vrf_cfg__srlg__names()
        self_names = self.names
        if self_names is not None:
            self_names._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if groups is not None:
            self.groups = groups
        else:
            self.groups = Cisco_IOS_XR_um_vrf_cfg__srlg__groups()
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self
        if inherit_locations is not None:
            self.inherit_locations = inherit_locations
        else:
            self.inherit_locations = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()
        self_inherit_locations = self.inherit_locations
        if self_inherit_locations is not None:
            self_inherit_locations._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('srlg', ns=self._ns)
        _names = self.names
        _interfaces = self.interfaces
        _groups = self.groups
        _inherit_locations = self.inherit_locations
        if _names is not None:
            res.children['names'] = _names.to_gdata()
        if _interfaces is not None:
            res.children['interfaces'] = _interfaces.to_gdata()
        if _groups is not None:
            res.children['groups'] = _groups.to_gdata()
        if _inherit_locations is not None:
            res.children['inherit-locations'] = _inherit_locations.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_gdata(n.get_opt_container("names")), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_gdata(n.get_opt_container("interfaces")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_gdata(n.get_opt_container("groups")), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_gdata(n.get_opt_container("inherit-locations")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_xml(yang.gdata.get_xml_opt_child(n, "names")), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_xml(yang.gdata.get_xml_opt_child(n, "inherit-locations")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg()


class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str

    def __init__(self, vrf_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_name = vrf_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.vrf_name)], ns=self._ns)
        _vrf_name = self.vrf_name
        if _vrf_name is not None:
            res.children['vrf-name'] = yang.gdata.Leaf('vrf-name', 'string', _vrf_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf'
        self.elements = elements

    def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('vrf', ['vrf-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf

    def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('vrfs', ns=self._ns)
        _vrf = self.vrf
        if _vrf is not None:
            res.children['vrf'] = _vrf.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_gdata(n.get_list("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()


class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(yang.adata.MNode):
    group_name: str
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs

    def __init__(self, group_name: str, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group_name = group_name
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.group_name)], ns=self._ns)
        _group_name = self.group_name
        _vrfs = self.vrfs
        if _group_name is not None:
            res.children['group-name'] = yang.gdata.Leaf('group-name', 'string', _group_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
        if _vrfs is not None:
            res.children['vrfs'] = _vrfs.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=n.get_str("group-name"), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_gdata(n.get_opt_container("vrfs")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs")))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf-group'
        self.elements = elements

    def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('vrf-group', ['group-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_vrf_cfg__vrf_groups(yang.adata.MNode):
    vrf_group: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group

    def __init__(self, vrf_group: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_group = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(elements=vrf_group)
        self.vrf_group._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('vrf-groups', ns=self._ns)
        _vrf_group = self.vrf_group
        if _vrf_group is not None:
            res.children['vrf-group'] = _vrf_group.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_gdata(n.get_list("vrf-group")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_xml(yang.gdata.get_xml_children(n, "vrf-group")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('l2transport', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('point-to-point', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multipoint', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(yang.adata.MNode):
    l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport
    point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point
    multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint

    def __init__(self, l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport=None, point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point=None, multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if l2transport is not None:
            self.l2transport = l2transport
        else:
            self.l2transport = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        self_l2transport = self.l2transport
        if self_l2transport is not None:
            self_l2transport._parent = self
        if point_to_point is not None:
            self.point_to_point = point_to_point
        else:
            self.point_to_point = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        if multipoint is not None:
            self.multipoint = multipoint
        else:
            self.multipoint = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        self_multipoint = self.multipoint
        if self_multipoint is not None:
            self_multipoint._parent = self

    def create_l2transport(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        self.l2transport = res
        return res

    def create_point_to_point(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        self.point_to_point = res
        return res

    def create_multipoint(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        self.multipoint = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('sub-interface-type', ns=self._ns)
        _l2transport = self.l2transport
        _point_to_point = self.point_to_point
        _multipoint = self.multipoint
        if _l2transport is not None:
            res.children['l2transport'] = _l2transport.to_gdata()
        if _point_to_point is not None:
            res.children['point-to-point'] = _point_to_point.to_gdata()
        if _multipoint is not None:
            res.children['multipoint'] = _multipoint.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_gdata(n.get_opt_container("l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_gdata(n.get_opt_container("point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_gdata(n.get_opt_container("multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_xml(yang.gdata.get_xml_opt_child(n, "l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_xml(yang.gdata.get_xml_opt_child(n, "point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_xml(yang.gdata.get_xml_opt_child(n, "multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address', ns=self._ns)
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'string', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _netmask is not None:
            res.children['netmask'] = yang.gdata.Leaf('netmask', 'string', _netmask, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', 'uint32', _algorithm, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)], ns=self._ns)
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'string', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _netmask is not None:
            res.children['netmask'] = yang.gdata.Leaf('netmask', 'string', _netmask, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', 'uint32', _algorithm, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'secondary'
        self.elements = elements

    def create(self, address, netmask):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address, netmask)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('secondary', ['address'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(yang.adata.MNode):
    secondary: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary

    def __init__(self, secondary: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.secondary = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(elements=secondary)
        self.secondary._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('secondaries', ns=self._ns)
        _secondary = self.secondary
        if _secondary is not None:
            res.children['secondary'] = _secondary.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_gdata(n.get_list("secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_xml(yang.gdata.get_xml_children(n, "secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address
    secondaries: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries
    unnumbered: ?str
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp

    def __init__(self, address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address=None, secondaries: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries=None, unnumbered: ?str, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self
        if secondaries is not None:
            self.secondaries = secondaries
        else:
            self.secondaries = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()
        self_secondaries = self.secondaries
        if self_secondaries is not None:
            self_secondaries._parent = self
        self.unnumbered = unnumbered
        if dhcp is not None:
            self.dhcp = dhcp
        else:
            self.dhcp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self

    def create_address(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address, netmask)
        self.address = res
        return res

    def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        self.dhcp = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('addresses', ns=self._ns)
        _address = self.address
        _secondaries = self.secondaries
        _unnumbered = self.unnumbered
        _dhcp = self.dhcp
        if _address is not None:
            res.children['address'] = _address.to_gdata()
        if _secondaries is not None:
            res.children['secondaries'] = _secondaries.to_gdata()
        if _unnumbered is not None:
            res.children['unnumbered'] = yang.gdata.Leaf('unnumbered', 'string', _unnumbered, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _dhcp is not None:
            res.children['dhcp'] = _dhcp.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_gdata(n.get_container("address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_gdata(n.get_opt_container("secondaries")), unnumbered=n.get_opt_str("unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_gdata(n.get_opt_container("dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_xml(yang.gdata.get_xml_child(n, "address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_xml(yang.gdata.get_xml_opt_child(n, "secondaries")), unnumbered=yang.gdata.from_xml_opt_str(n, "unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses

    def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4', ns=self._ns)
        _addresses = self.addresses
        if _addresses is not None:
            res.children['addresses'] = _addresses.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_gdata(n.get_opt_container("addresses")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry(yang.adata.MNode):
    address: str
    prefix_length: int
    zone: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, prefix_length: int, zone: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.prefix_length = prefix_length
        self.zone = zone
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)], ns=self._ns)
        _address = self.address
        _prefix_length = self.prefix_length
        _zone = self.zone
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'union', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.gdata.Leaf('prefix-length', 'uint8', _prefix_length, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', 'union', _zone, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', 'uint32', _algorithm, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry(address=n.get_str("address"), prefix_length=n.get_int("prefix-length"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry(address=yang.gdata.from_xml_str(n, "address"), prefix_length=yang.gdata.from_xml_int(n, "prefix-length"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'ipv6-address'
        self.elements = elements

    def create(self, address, prefix_length, zone):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry(address, prefix_length, zone)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('ipv6-address', ['address'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address(yang.adata.MNode):
    address: str
    zone: str
    route_tag: ?int

    def __init__(self, address: str, zone: str, route_tag: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.zone = zone
        self.route_tag = route_tag

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-local-address', ns=self._ns)
        _address = self.address
        _zone = self.zone
        _route_tag = self.route_tag
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'union', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', 'union', _zone, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address(address=n.get_str("address"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address(address=yang.gdata.from_xml_str(n, "address"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry(yang.adata.MNode):
    address: str
    prefix_length: int
    zone: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, prefix_length: int, zone: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.prefix_length = prefix_length
        self.zone = zone
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)], ns=self._ns)
        _address = self.address
        _prefix_length = self.prefix_length
        _zone = self.zone
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'union', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.gdata.Leaf('prefix-length', 'uint8', _prefix_length, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', 'union', _zone, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', 'uint32', _algorithm, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry(address=n.get_str("address"), prefix_length=n.get_int("prefix-length"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry(address=yang.gdata.from_xml_str(n, "address"), prefix_length=yang.gdata.from_xml_int(n, "prefix-length"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'eui64-address'
        self.elements = elements

    def create(self, address, prefix_length, zone):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry(address, prefix_length, zone)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('eui64-address', ['address'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses(yang.adata.MNode):
    eui64_address: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address

    def __init__(self, eui64_address: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.eui64_address = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address(elements=eui64_address)
        self.eui64_address._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('eui64-addresses', ns=self._ns)
        _eui64_address = self.eui64_address
        if _eui64_address is not None:
            res.children['eui64-address'] = _eui64_address.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses(eui64_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address.from_gdata(n.get_list("eui64-address")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses(eui64_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address.from_xml(yang.gdata.get_xml_children(n, "eui64-address")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('autoconfig', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp-client-options', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses(yang.adata.MNode):
    ipv6_address: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address
    link_local_address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address
    eui64_addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses
    autoconfig: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp
    dhcp_client_options: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options

    def __init__(self, ipv6_address: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry]=[], link_local_address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address=None, eui64_addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses=None, autoconfig: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig=None, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp=None, dhcp_client_options: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.ipv6_address = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address(elements=ipv6_address)
        self.ipv6_address._parent = self
        self.link_local_address = link_local_address
        self_link_local_address = self.link_local_address
        if self_link_local_address is not None:
            self_link_local_address._parent = self
        if eui64_addresses is not None:
            self.eui64_addresses = eui64_addresses
        else:
            self.eui64_addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses()
        self_eui64_addresses = self.eui64_addresses
        if self_eui64_addresses is not None:
            self_eui64_addresses._parent = self
        if autoconfig is not None:
            self.autoconfig = autoconfig
        else:
            self.autoconfig = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()
        self_autoconfig = self.autoconfig
        if self_autoconfig is not None:
            self_autoconfig._parent = self
        if dhcp is not None:
            self.dhcp = dhcp
        else:
            self.dhcp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self
        if dhcp_client_options is not None:
            self.dhcp_client_options = dhcp_client_options
        else:
            self.dhcp_client_options = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()
        self_dhcp_client_options = self.dhcp_client_options
        if self_dhcp_client_options is not None:
            self_dhcp_client_options._parent = self

    def create_link_local_address(self, address, zone):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address(address, zone)
        self.link_local_address = res
        return res

    def create_autoconfig(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()
        self.autoconfig = res
        return res

    def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()
        self.dhcp = res
        return res

    def create_dhcp_client_options(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()
        self.dhcp_client_options = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('addresses', ns=self._ns)
        _ipv6_address = self.ipv6_address
        _link_local_address = self.link_local_address
        _eui64_addresses = self.eui64_addresses
        _autoconfig = self.autoconfig
        _dhcp = self.dhcp
        _dhcp_client_options = self.dhcp_client_options
        if _ipv6_address is not None:
            res.children['ipv6-address'] = _ipv6_address.to_gdata()
        if _link_local_address is not None:
            res.children['link-local-address'] = _link_local_address.to_gdata()
        if _eui64_addresses is not None:
            res.children['eui64-addresses'] = _eui64_addresses.to_gdata()
        if _autoconfig is not None:
            res.children['autoconfig'] = _autoconfig.to_gdata()
        if _dhcp is not None:
            res.children['dhcp'] = _dhcp.to_gdata()
        if _dhcp_client_options is not None:
            res.children['dhcp-client-options'] = _dhcp_client_options.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses(ipv6_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address.from_gdata(n.get_list("ipv6-address")), link_local_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address.from_gdata(n.get_container("link-local-address")), eui64_addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses.from_gdata(n.get_opt_container("eui64-addresses")), autoconfig=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig.from_gdata(n.get_opt_container("autoconfig")), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp.from_gdata(n.get_opt_container("dhcp")), dhcp_client_options=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options.from_gdata(n.get_opt_container("dhcp-client-options")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses(ipv6_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address.from_xml(yang.gdata.get_xml_children(n, "ipv6-address")), link_local_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address.from_xml(yang.gdata.get_xml_child(n, "link-local-address")), eui64_addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses.from_xml(yang.gdata.get_xml_opt_child(n, "eui64-addresses")), autoconfig=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig.from_xml(yang.gdata.get_xml_opt_child(n, "autoconfig")), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp")), dhcp_client_options=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp-client-options")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('enable', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses
    enable: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable

    def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses=None, enable: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self
        if enable is not None:
            self.enable = enable
        else:
            self.enable = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()
        self_enable = self.enable
        if self_enable is not None:
            self_enable._parent = self

    def create_enable(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()
        self.enable = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6', ns=self._ns)
        _addresses = self.addresses
        _enable = self.enable
        if _addresses is not None:
            res.children['addresses'] = _addresses.to_gdata()
        if _enable is not None:
            res.children['enable'] = _enable.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses.from_gdata(n.get_opt_container("addresses")), enable=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable.from_gdata(n.get_opt_container("enable")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses")), enable=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable.from_xml(yang.gdata.get_xml_opt_child(n, "enable")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(yang.adata.MNode):
    value: int

    def __init__(self, value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('restart-penalty', ns=self._ns)
        _value = self.value
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value=n.get_int("value"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value=yang.gdata.from_xml_int(n, "value"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(yang.adata.MNode):
    value: int
    restart_penalty: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty

    def __init__(self, value: int, restart_penalty: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value
        self.restart_penalty = restart_penalty
        self_restart_penalty = self.restart_penalty
        if self_restart_penalty is not None:
            self_restart_penalty._parent = self

    def create_restart_penalty(self, value):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value)
        self.restart_penalty = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('max-suppress-time', ns=self._ns)
        _value = self.value
        _restart_penalty = self.restart_penalty
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _restart_penalty is not None:
            res.children['restart-penalty'] = _restart_penalty.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value=n.get_int("value"), restart_penalty=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty.from_gdata(n.get_container("restart-penalty")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value=yang.gdata.from_xml_int(n, "value"), restart_penalty=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty.from_xml(yang.gdata.get_xml_child(n, "restart-penalty")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold(yang.adata.MNode):
    value: int
    max_suppress_time: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time

    def __init__(self, value: int, max_suppress_time: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value
        self.max_suppress_time = max_suppress_time
        self_max_suppress_time = self.max_suppress_time
        if self_max_suppress_time is not None:
            self_max_suppress_time._parent = self

    def create_max_suppress_time(self, value, restart_penalty):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value, restart_penalty)
        self.max_suppress_time = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('suppress-threshold', ns=self._ns)
        _value = self.value
        _max_suppress_time = self.max_suppress_time
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _max_suppress_time is not None:
            res.children['max-suppress-time'] = _max_suppress_time.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold(value=n.get_int("value"), max_suppress_time=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time.from_gdata(n.get_container("max-suppress-time")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold(value=yang.gdata.from_xml_int(n, "value"), max_suppress_time=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time.from_xml(yang.gdata.get_xml_child(n, "max-suppress-time")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold(yang.adata.MNode):
    value: int
    suppress_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold

    def __init__(self, value: int, suppress_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value
        self.suppress_threshold = suppress_threshold
        self_suppress_threshold = self.suppress_threshold
        if self_suppress_threshold is not None:
            self_suppress_threshold._parent = self

    def create_suppress_threshold(self, value, max_suppress_time):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold(value, max_suppress_time)
        self.suppress_threshold = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('reuse-threshold', ns=self._ns)
        _value = self.value
        _suppress_threshold = self.suppress_threshold
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _suppress_threshold is not None:
            res.children['suppress-threshold'] = _suppress_threshold.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold(value=n.get_int("value"), suppress_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold.from_gdata(n.get_container("suppress-threshold")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold(value=yang.gdata.from_xml_int(n, "value"), suppress_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold.from_xml(yang.gdata.get_xml_child(n, "suppress-threshold")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life(yang.adata.MNode):
    value: int
    reuse_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold

    def __init__(self, value: int, reuse_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value
        self.reuse_threshold = reuse_threshold
        self_reuse_threshold = self.reuse_threshold
        if self_reuse_threshold is not None:
            self_reuse_threshold._parent = self

    def create_reuse_threshold(self, value, suppress_threshold):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold(value, suppress_threshold)
        self.reuse_threshold = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('decay-half-life', ns=self._ns)
        _value = self.value
        _reuse_threshold = self.reuse_threshold
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _reuse_threshold is not None:
            res.children['reuse-threshold'] = _reuse_threshold.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life(value=n.get_int("value"), reuse_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold.from_gdata(n.get_container("reuse-threshold")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life(value=yang.gdata.from_xml_int(n, "value"), reuse_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold.from_xml(yang.gdata.get_xml_child(n, "reuse-threshold")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening(yang.adata.MNode):
    decay_half_life: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life

    def __init__(self, decay_half_life: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.decay_half_life = decay_half_life
        self_decay_half_life = self.decay_half_life
        if self_decay_half_life is not None:
            self_decay_half_life._parent = self

    def create_decay_half_life(self, value, reuse_threshold):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life(value, reuse_threshold)
        self.decay_half_life = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dampening', ns=self._ns)
        _decay_half_life = self.decay_half_life
        if _decay_half_life is not None:
            res.children['decay-half-life'] = _decay_half_life.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening(decay_half_life=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life.from_gdata(n.get_container("decay-half-life")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening(decay_half_life=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life.from_xml(yang.gdata.get_xml_child(n, "decay-half-life")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ppp', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('hdlc', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('mfr', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('IETF', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(yang.adata.MNode):
    IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF

    def __init__(self, IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if IETF is not None:
            self.IETF = IETF
        else:
            self.IETF = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        self_IETF = self.IETF
        if self_IETF is not None:
            self_IETF._parent = self

    def create_IETF(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        self.IETF = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('frame-relay', ns=self._ns)
        _IETF = self.IETF
        if _IETF is not None:
            res.children['IETF'] = _IETF.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_gdata(n.get_opt_container("IETF")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_xml(yang.gdata.get_xml_opt_child(n, "IETF")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(yang.adata.MNode):
    ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp
    hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc
    mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr
    frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay

    def __init__(self, ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp=None, hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc=None, mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr=None, frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if ppp is not None:
            self.ppp = ppp
        else:
            self.ppp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        self_ppp = self.ppp
        if self_ppp is not None:
            self_ppp._parent = self
        if hdlc is not None:
            self.hdlc = hdlc
        else:
            self.hdlc = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        self_hdlc = self.hdlc
        if self_hdlc is not None:
            self_hdlc._parent = self
        if mfr is not None:
            self.mfr = mfr
        else:
            self.mfr = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        self_mfr = self.mfr
        if self_mfr is not None:
            self_mfr._parent = self
        if frame_relay is not None:
            self.frame_relay = frame_relay
        else:
            self.frame_relay = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()
        self_frame_relay = self.frame_relay
        if self_frame_relay is not None:
            self_frame_relay._parent = self

    def create_ppp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        self.ppp = res
        return res

    def create_hdlc(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        self.hdlc = res
        return res

    def create_mfr(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        self.mfr = res
        return res

    def create_frame_relay(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()
        self.frame_relay = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('encapsulation', ns=self._ns)
        _ppp = self.ppp
        _hdlc = self.hdlc
        _mfr = self.mfr
        _frame_relay = self.frame_relay
        if _ppp is not None:
            res.children['ppp'] = _ppp.to_gdata()
        if _hdlc is not None:
            res.children['hdlc'] = _hdlc.to_gdata()
        if _mfr is not None:
            res.children['mfr'] = _mfr.to_gdata()
        if _frame_relay is not None:
            res.children['frame-relay'] = _frame_relay.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_gdata(n.get_opt_container("ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_gdata(n.get_opt_container("hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_gdata(n.get_opt_container("mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_gdata(n.get_opt_container("frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_xml(yang.gdata.get_xml_opt_child(n, "ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_xml(yang.gdata.get_xml_opt_child(n, "hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_xml(yang.gdata.get_xml_opt_child(n, "mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_xml(yang.gdata.get_xml_opt_child(n, "frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-status', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events(yang.adata.MNode):
    link_status: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status

    def __init__(self, link_status: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if link_status is not None:
            self.link_status = link_status
        else:
            self.link_status = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()
        self_link_status = self.link_status
        if self_link_status is not None:
            self_link_status._parent = self

    def create_link_status(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()
        self.link_status = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('events', ns=self._ns)
        _link_status = self.link_status
        if _link_status is not None:
            res.children['link-status'] = _link_status.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status.from_gdata(n.get_opt_container("link-status")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status.from_xml(yang.gdata.get_xml_opt_child(n, "link-status")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging(yang.adata.MNode):
    events: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events

    def __init__(self, events: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if events is not None:
            self.events = events
        else:
            self.events = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events()
        self_events = self.events
        if self_events is not None:
            self_events._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('logging', ns=self._ns)
        _events = self.events
        if _events is not None:
            res.children['events'] = _events.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging(events=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events.from_gdata(n.get_opt_container("events")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging(events=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events.from_xml(yang.gdata.get_xml_opt_child(n, "events")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('default-topology', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self.topology_name = topology_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.topology_name)], ns=self._ns)
        _topology_name = self.topology_name
        if _topology_name is not None:
            res.children['topology-name'] = yang.gdata.Leaf('topology-name', 'string', _topology_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('topology', ['topology-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology

    def __init__(self, topology: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('topologies', ns=self._ns)
        _topology = self.topology
        if _topology is not None:
            res.children['topology'] = _topology.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology.from_gdata(n.get_list("topology")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast(yang.adata.MNode):
    default_topology: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology
    topologies: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies

    def __init__(self, default_topology: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology=None, topologies: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if default_topology is not None:
            self.default_topology = default_topology
        else:
            self.default_topology = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology()
        self_default_topology = self.default_topology
        if self_default_topology is not None:
            self_default_topology._parent = self
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    def create_default_topology(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology()
        self.default_topology = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multicast', ns=self._ns)
        _default_topology = self.default_topology
        _topologies = self.topologies
        if _default_topology is not None:
            res.children['default-topology'] = _default_topology.to_gdata()
        if _topologies is not None:
            res.children['topologies'] = _topologies.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast(default_topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology.from_gdata(n.get_opt_container("default-topology")), topologies=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast(default_topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__default_topology.from_xml(yang.gdata.get_xml_opt_child(n, "default-topology")), topologies=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4(yang.adata.MNode):
    multicast: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast

    def __init__(self, multicast: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    def create_multicast(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast()
        self.multicast = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4', ns=self._ns)
        _multicast = self.multicast
        if _multicast is not None:
            res.children['multicast'] = _multicast.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4(multicast=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4(multicast=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('default-topology', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self.topology_name = topology_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.topology_name)], ns=self._ns)
        _topology_name = self.topology_name
        if _topology_name is not None:
            res.children['topology-name'] = yang.gdata.Leaf('topology-name', 'string', _topology_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('topology', ['topology-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology

    def __init__(self, topology: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('topologies', ns=self._ns)
        _topology = self.topology
        if _topology is not None:
            res.children['topology'] = _topology.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology.from_gdata(n.get_list("topology")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast(yang.adata.MNode):
    default_topology: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology
    topologies: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies

    def __init__(self, default_topology: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology=None, topologies: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if default_topology is not None:
            self.default_topology = default_topology
        else:
            self.default_topology = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology()
        self_default_topology = self.default_topology
        if self_default_topology is not None:
            self_default_topology._parent = self
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    def create_default_topology(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology()
        self.default_topology = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multicast', ns=self._ns)
        _default_topology = self.default_topology
        _topologies = self.topologies
        if _default_topology is not None:
            res.children['default-topology'] = _default_topology.to_gdata()
        if _topologies is not None:
            res.children['topologies'] = _topologies.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast(default_topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology.from_gdata(n.get_opt_container("default-topology")), topologies=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast(default_topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__default_topology.from_xml(yang.gdata.get_xml_opt_child(n, "default-topology")), topologies=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6(yang.adata.MNode):
    multicast: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast

    def __init__(self, multicast: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    def create_multicast(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast()
        self.multicast = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6', ns=self._ns)
        _multicast = self.multicast
        if _multicast is not None:
            res.children['multicast'] = _multicast.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6(multicast=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6(multicast=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6

    def __init__(self, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address-family', ns=self._ns)
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family(ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family(ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    sub_interface_type: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6
    dampening: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening
    encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation
    shutdown: ?bool
    mtu: ?int
    logging: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging
    bandwidth: ?int
    description: ?str
    vrf: ?str
    address_family: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family

    def __init__(self, interface_name: str, sub_interface_type: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type=None, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6=None, dampening: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening=None, encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation=None, shutdown: ?bool, mtu: ?int, logging: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging=None, bandwidth: ?int, description: ?str, vrf: ?str, address_family: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface_name = interface_name
        if sub_interface_type is not None:
            self.sub_interface_type = sub_interface_type
        else:
            self.sub_interface_type = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()
        self_sub_interface_type = self.sub_interface_type
        if self_sub_interface_type is not None:
            self_sub_interface_type._parent = self
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        if dampening is not None:
            self.dampening = dampening
        else:
            self.dampening = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening()
        self_dampening = self.dampening
        if self_dampening is not None:
            self_dampening._parent = self
        if encapsulation is not None:
            self.encapsulation = encapsulation
        else:
            self.encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()
        self_encapsulation = self.encapsulation
        if self_encapsulation is not None:
            self_encapsulation._parent = self
        self.shutdown = shutdown
        self.mtu = mtu
        if logging is not None:
            self.logging = logging
        else:
            self.logging = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging()
        self_logging = self.logging
        if self_logging is not None:
            self_logging._parent = self
        self.bandwidth = bandwidth
        self.description = description
        self.vrf = vrf
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self

    def create_dampening(self, decay_half_life):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening(decay_half_life)
        self.dampening = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.interface_name)], ns=self._ns)
        _interface_name = self.interface_name
        _sub_interface_type = self.sub_interface_type
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _dampening = self.dampening
        _encapsulation = self.encapsulation
        _shutdown = self.shutdown
        _mtu = self.mtu
        _logging = self.logging
        _bandwidth = self.bandwidth
        _description = self.description
        _vrf = self.vrf
        _address_family = self.address_family
        if _interface_name is not None:
            res.children['interface-name'] = yang.gdata.Leaf('interface-name', 'string', _interface_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _sub_interface_type is not None:
            res.children['sub-interface-type'] = _sub_interface_type.to_gdata()
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        if _dampening is not None:
            res.children['dampening'] = _dampening.to_gdata()
        if _encapsulation is not None:
            res.children['encapsulation'] = _encapsulation.to_gdata()
        if _shutdown is not None:
            res.children['shutdown'] = yang.gdata.Leaf('shutdown', 'empty', _shutdown, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _mtu is not None:
            res.children['mtu'] = yang.gdata.Leaf('mtu', 'uint32', _mtu, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _logging is not None:
            res.children['logging'] = _logging.to_gdata()
        if _bandwidth is not None:
            res.children['bandwidth'] = yang.gdata.Leaf('bandwidth', 'uint64', _bandwidth, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _vrf is not None:
            res.children['vrf'] = yang.gdata.Leaf('vrf', 'string', _vrf, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        if _address_family is not None:
            res.children['address-family'] = _address_family.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_gdata(n.get_opt_container("sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_gdata(n.get_opt_container("ipv6")), dampening=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening.from_gdata(n.get_opt_container("dampening")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_gdata(n.get_opt_container("encapsulation")), shutdown=n.get_opt_bool("shutdown"), mtu=n.get_opt_int("mtu"), logging=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging.from_gdata(n.get_opt_container("logging")), bandwidth=n.get_opt_int("bandwidth"), description=n.get_opt_str("description"), vrf=n.get_opt_str("vrf"), address_family=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family.from_gdata(n.get_opt_container("address-family")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_xml(yang.gdata.get_xml_opt_child(n, "sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")), dampening=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening.from_xml(yang.gdata.get_xml_opt_child(n, "dampening")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_xml(yang.gdata.get_xml_opt_child(n, "encapsulation")), shutdown=yang.gdata.from_xml_opt_bool(n, "shutdown"), mtu=yang.gdata.from_xml_opt_int(n, "mtu"), logging=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging.from_xml(yang.gdata.get_xml_opt_child(n, "logging")), bandwidth=yang.gdata.from_xml_opt_int(n, "bandwidth"), description=yang.gdata.from_xml_opt_str(n, "description"), vrf=yang.gdata.from_xml_opt_str(n, "vrf"), address_family=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family")))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self._name = 'interface'
        self.elements = elements

    def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface', ['interface-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('l2transport', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('point-to-point', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multipoint', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type(yang.adata.MNode):
    l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport
    point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point
    multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint

    def __init__(self, l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport=None, point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point=None, multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if l2transport is not None:
            self.l2transport = l2transport
        else:
            self.l2transport = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()
        self_l2transport = self.l2transport
        if self_l2transport is not None:
            self_l2transport._parent = self
        if point_to_point is not None:
            self.point_to_point = point_to_point
        else:
            self.point_to_point = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        if multipoint is not None:
            self.multipoint = multipoint
        else:
            self.multipoint = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()
        self_multipoint = self.multipoint
        if self_multipoint is not None:
            self_multipoint._parent = self

    def create_l2transport(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()
        self.l2transport = res
        return res

    def create_point_to_point(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()
        self.point_to_point = res
        return res

    def create_multipoint(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()
        self.multipoint = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('sub-interface-type', ns=self._ns)
        _l2transport = self.l2transport
        _point_to_point = self.point_to_point
        _multipoint = self.multipoint
        if _l2transport is not None:
            res.children['l2transport'] = _l2transport.to_gdata()
        if _point_to_point is not None:
            res.children['point-to-point'] = _point_to_point.to_gdata()
        if _multipoint is not None:
            res.children['multipoint'] = _multipoint.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport.from_gdata(n.get_opt_container("l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point.from_gdata(n.get_opt_container("point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint.from_gdata(n.get_opt_container("multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport.from_xml(yang.gdata.get_xml_opt_child(n, "l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point.from_xml(yang.gdata.get_xml_opt_child(n, "point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint.from_xml(yang.gdata.get_xml_opt_child(n, "multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address', ns=self._ns)
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'string', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _netmask is not None:
            res.children['netmask'] = yang.gdata.Leaf('netmask', 'string', _netmask, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', 'uint32', _algorithm, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)], ns=self._ns)
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'string', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _netmask is not None:
            res.children['netmask'] = yang.gdata.Leaf('netmask', 'string', _netmask, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', 'uint32', _algorithm, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'secondary'
        self.elements = elements

    def create(self, address, netmask):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry(address, netmask)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('secondary', ['address'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries(yang.adata.MNode):
    secondary: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary

    def __init__(self, secondary: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.secondary = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary(elements=secondary)
        self.secondary._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('secondaries', ns=self._ns)
        _secondary = self.secondary
        if _secondary is not None:
            res.children['secondary'] = _secondary.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary.from_gdata(n.get_list("secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary.from_xml(yang.gdata.get_xml_children(n, "secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address
    secondaries: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries
    unnumbered: ?str
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp

    def __init__(self, address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address=None, secondaries: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries=None, unnumbered: ?str, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self
        if secondaries is not None:
            self.secondaries = secondaries
        else:
            self.secondaries = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries()
        self_secondaries = self.secondaries
        if self_secondaries is not None:
            self_secondaries._parent = self
        self.unnumbered = unnumbered
        if dhcp is not None:
            self.dhcp = dhcp
        else:
            self.dhcp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self

    def create_address(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address(address, netmask)
        self.address = res
        return res

    def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()
        self.dhcp = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('addresses', ns=self._ns)
        _address = self.address
        _secondaries = self.secondaries
        _unnumbered = self.unnumbered
        _dhcp = self.dhcp
        if _address is not None:
            res.children['address'] = _address.to_gdata()
        if _secondaries is not None:
            res.children['secondaries'] = _secondaries.to_gdata()
        if _unnumbered is not None:
            res.children['unnumbered'] = yang.gdata.Leaf('unnumbered', 'string', _unnumbered, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _dhcp is not None:
            res.children['dhcp'] = _dhcp.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address.from_gdata(n.get_container("address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries.from_gdata(n.get_opt_container("secondaries")), unnumbered=n.get_opt_str("unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp.from_gdata(n.get_opt_container("dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address.from_xml(yang.gdata.get_xml_child(n, "address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries.from_xml(yang.gdata.get_xml_opt_child(n, "secondaries")), unnumbered=yang.gdata.from_xml_opt_str(n, "unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses

    def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4', ns=self._ns)
        _addresses = self.addresses
        if _addresses is not None:
            res.children['addresses'] = _addresses.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses.from_gdata(n.get_opt_container("addresses")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry(yang.adata.MNode):
    address: str
    prefix_length: int
    zone: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, prefix_length: int, zone: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.prefix_length = prefix_length
        self.zone = zone
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)], ns=self._ns)
        _address = self.address
        _prefix_length = self.prefix_length
        _zone = self.zone
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'union', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.gdata.Leaf('prefix-length', 'uint8', _prefix_length, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', 'union', _zone, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', 'uint32', _algorithm, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry(address=n.get_str("address"), prefix_length=n.get_int("prefix-length"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry(address=yang.gdata.from_xml_str(n, "address"), prefix_length=yang.gdata.from_xml_int(n, "prefix-length"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'ipv6-address'
        self.elements = elements

    def create(self, address, prefix_length, zone):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry(address, prefix_length, zone)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('ipv6-address', ['address'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address(yang.adata.MNode):
    address: str
    zone: str
    route_tag: ?int

    def __init__(self, address: str, zone: str, route_tag: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.zone = zone
        self.route_tag = route_tag

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-local-address', ns=self._ns)
        _address = self.address
        _zone = self.zone
        _route_tag = self.route_tag
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'union', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', 'union', _zone, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address(address=n.get_str("address"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address(address=yang.gdata.from_xml_str(n, "address"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry(yang.adata.MNode):
    address: str
    prefix_length: int
    zone: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, prefix_length: int, zone: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.prefix_length = prefix_length
        self.zone = zone
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)], ns=self._ns)
        _address = self.address
        _prefix_length = self.prefix_length
        _zone = self.zone
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', 'union', _address, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.gdata.Leaf('prefix-length', 'uint8', _prefix_length, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', 'union', _zone, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', 'uint32', _route_tag, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', 'uint32', _algorithm, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry(address=n.get_str("address"), prefix_length=n.get_int("prefix-length"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry(address=yang.gdata.from_xml_str(n, "address"), prefix_length=yang.gdata.from_xml_int(n, "prefix-length"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'eui64-address'
        self.elements = elements

    def create(self, address, prefix_length, zone):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry(address, prefix_length, zone)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('eui64-address', ['address'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses(yang.adata.MNode):
    eui64_address: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address

    def __init__(self, eui64_address: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.eui64_address = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address(elements=eui64_address)
        self.eui64_address._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('eui64-addresses', ns=self._ns)
        _eui64_address = self.eui64_address
        if _eui64_address is not None:
            res.children['eui64-address'] = _eui64_address.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses(eui64_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address.from_gdata(n.get_list("eui64-address")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses(eui64_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address.from_xml(yang.gdata.get_xml_children(n, "eui64-address")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('autoconfig', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp-client-options', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses(yang.adata.MNode):
    ipv6_address: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address
    link_local_address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address
    eui64_addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses
    autoconfig: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp
    dhcp_client_options: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options

    def __init__(self, ipv6_address: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry]=[], link_local_address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address=None, eui64_addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses=None, autoconfig: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig=None, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp=None, dhcp_client_options: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.ipv6_address = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address(elements=ipv6_address)
        self.ipv6_address._parent = self
        self.link_local_address = link_local_address
        self_link_local_address = self.link_local_address
        if self_link_local_address is not None:
            self_link_local_address._parent = self
        if eui64_addresses is not None:
            self.eui64_addresses = eui64_addresses
        else:
            self.eui64_addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses()
        self_eui64_addresses = self.eui64_addresses
        if self_eui64_addresses is not None:
            self_eui64_addresses._parent = self
        if autoconfig is not None:
            self.autoconfig = autoconfig
        else:
            self.autoconfig = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()
        self_autoconfig = self.autoconfig
        if self_autoconfig is not None:
            self_autoconfig._parent = self
        if dhcp is not None:
            self.dhcp = dhcp
        else:
            self.dhcp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self
        if dhcp_client_options is not None:
            self.dhcp_client_options = dhcp_client_options
        else:
            self.dhcp_client_options = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()
        self_dhcp_client_options = self.dhcp_client_options
        if self_dhcp_client_options is not None:
            self_dhcp_client_options._parent = self

    def create_link_local_address(self, address, zone):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address(address, zone)
        self.link_local_address = res
        return res

    def create_autoconfig(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()
        self.autoconfig = res
        return res

    def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()
        self.dhcp = res
        return res

    def create_dhcp_client_options(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()
        self.dhcp_client_options = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('addresses', ns=self._ns)
        _ipv6_address = self.ipv6_address
        _link_local_address = self.link_local_address
        _eui64_addresses = self.eui64_addresses
        _autoconfig = self.autoconfig
        _dhcp = self.dhcp
        _dhcp_client_options = self.dhcp_client_options
        if _ipv6_address is not None:
            res.children['ipv6-address'] = _ipv6_address.to_gdata()
        if _link_local_address is not None:
            res.children['link-local-address'] = _link_local_address.to_gdata()
        if _eui64_addresses is not None:
            res.children['eui64-addresses'] = _eui64_addresses.to_gdata()
        if _autoconfig is not None:
            res.children['autoconfig'] = _autoconfig.to_gdata()
        if _dhcp is not None:
            res.children['dhcp'] = _dhcp.to_gdata()
        if _dhcp_client_options is not None:
            res.children['dhcp-client-options'] = _dhcp_client_options.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses(ipv6_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address.from_gdata(n.get_list("ipv6-address")), link_local_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address.from_gdata(n.get_container("link-local-address")), eui64_addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses.from_gdata(n.get_opt_container("eui64-addresses")), autoconfig=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig.from_gdata(n.get_opt_container("autoconfig")), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp.from_gdata(n.get_opt_container("dhcp")), dhcp_client_options=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options.from_gdata(n.get_opt_container("dhcp-client-options")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses(ipv6_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address.from_xml(yang.gdata.get_xml_children(n, "ipv6-address")), link_local_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address.from_xml(yang.gdata.get_xml_child(n, "link-local-address")), eui64_addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses.from_xml(yang.gdata.get_xml_opt_child(n, "eui64-addresses")), autoconfig=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig.from_xml(yang.gdata.get_xml_opt_child(n, "autoconfig")), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp")), dhcp_client_options=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp-client-options")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('enable', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses
    enable: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable

    def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses=None, enable: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self
        if enable is not None:
            self.enable = enable
        else:
            self.enable = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()
        self_enable = self.enable
        if self_enable is not None:
            self_enable._parent = self

    def create_enable(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()
        self.enable = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6', ns=self._ns)
        _addresses = self.addresses
        _enable = self.enable
        if _addresses is not None:
            res.children['addresses'] = _addresses.to_gdata()
        if _enable is not None:
            res.children['enable'] = _enable.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses.from_gdata(n.get_opt_container("addresses")), enable=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable.from_gdata(n.get_opt_container("enable")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses")), enable=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable.from_xml(yang.gdata.get_xml_opt_child(n, "enable")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(yang.adata.MNode):
    value: int

    def __init__(self, value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('restart-penalty', ns=self._ns)
        _value = self.value
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value=n.get_int("value"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value=yang.gdata.from_xml_int(n, "value"))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(yang.adata.MNode):
    value: int
    restart_penalty: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty

    def __init__(self, value: int, restart_penalty: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value
        self.restart_penalty = restart_penalty
        self_restart_penalty = self.restart_penalty
        if self_restart_penalty is not None:
            self_restart_penalty._parent = self

    def create_restart_penalty(self, value):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value)
        self.restart_penalty = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('max-suppress-time', ns=self._ns)
        _value = self.value
        _restart_penalty = self.restart_penalty
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _restart_penalty is not None:
            res.children['restart-penalty'] = _restart_penalty.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value=n.get_int("value"), restart_penalty=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty.from_gdata(n.get_container("restart-penalty")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value=yang.gdata.from_xml_int(n, "value"), restart_penalty=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty.from_xml(yang.gdata.get_xml_child(n, "restart-penalty")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold(yang.adata.MNode):
    value: int
    max_suppress_time: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time

    def __init__(self, value: int, max_suppress_time: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value
        self.max_suppress_time = max_suppress_time
        self_max_suppress_time = self.max_suppress_time
        if self_max_suppress_time is not None:
            self_max_suppress_time._parent = self

    def create_max_suppress_time(self, value, restart_penalty):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value, restart_penalty)
        self.max_suppress_time = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('suppress-threshold', ns=self._ns)
        _value = self.value
        _max_suppress_time = self.max_suppress_time
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _max_suppress_time is not None:
            res.children['max-suppress-time'] = _max_suppress_time.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold(value=n.get_int("value"), max_suppress_time=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time.from_gdata(n.get_container("max-suppress-time")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold(value=yang.gdata.from_xml_int(n, "value"), max_suppress_time=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time.from_xml(yang.gdata.get_xml_child(n, "max-suppress-time")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold(yang.adata.MNode):
    value: int
    suppress_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold

    def __init__(self, value: int, suppress_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value
        self.suppress_threshold = suppress_threshold
        self_suppress_threshold = self.suppress_threshold
        if self_suppress_threshold is not None:
            self_suppress_threshold._parent = self

    def create_suppress_threshold(self, value, max_suppress_time):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold(value, max_suppress_time)
        self.suppress_threshold = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('reuse-threshold', ns=self._ns)
        _value = self.value
        _suppress_threshold = self.suppress_threshold
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _suppress_threshold is not None:
            res.children['suppress-threshold'] = _suppress_threshold.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold(value=n.get_int("value"), suppress_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold.from_gdata(n.get_container("suppress-threshold")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold(value=yang.gdata.from_xml_int(n, "value"), suppress_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold.from_xml(yang.gdata.get_xml_child(n, "suppress-threshold")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life(yang.adata.MNode):
    value: int
    reuse_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold

    def __init__(self, value: int, reuse_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.value = value
        self.reuse_threshold = reuse_threshold
        self_reuse_threshold = self.reuse_threshold
        if self_reuse_threshold is not None:
            self_reuse_threshold._parent = self

    def create_reuse_threshold(self, value, suppress_threshold):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold(value, suppress_threshold)
        self.reuse_threshold = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('decay-half-life', ns=self._ns)
        _value = self.value
        _reuse_threshold = self.reuse_threshold
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', 'uint32', _value, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _reuse_threshold is not None:
            res.children['reuse-threshold'] = _reuse_threshold.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life(value=n.get_int("value"), reuse_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold.from_gdata(n.get_container("reuse-threshold")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life")

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life(value=yang.gdata.from_xml_int(n, "value"), reuse_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold.from_xml(yang.gdata.get_xml_child(n, "reuse-threshold")))
        raise ValueError("Missing required subtree Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life")


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening(yang.adata.MNode):
    decay_half_life: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life

    def __init__(self, decay_half_life: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.decay_half_life = decay_half_life
        self_decay_half_life = self.decay_half_life
        if self_decay_half_life is not None:
            self_decay_half_life._parent = self

    def create_decay_half_life(self, value, reuse_threshold):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life(value, reuse_threshold)
        self.decay_half_life = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dampening', ns=self._ns)
        _decay_half_life = self.decay_half_life
        if _decay_half_life is not None:
            res.children['decay-half-life'] = _decay_half_life.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening(decay_half_life=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life.from_gdata(n.get_container("decay-half-life")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening(decay_half_life=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life.from_xml(yang.gdata.get_xml_child(n, "decay-half-life")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ppp', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('hdlc', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('mfr', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('IETF', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay(yang.adata.MNode):
    IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF

    def __init__(self, IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if IETF is not None:
            self.IETF = IETF
        else:
            self.IETF = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()
        self_IETF = self.IETF
        if self_IETF is not None:
            self_IETF._parent = self

    def create_IETF(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()
        self.IETF = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('frame-relay', ns=self._ns)
        _IETF = self.IETF
        if _IETF is not None:
            res.children['IETF'] = _IETF.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF.from_gdata(n.get_opt_container("IETF")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF.from_xml(yang.gdata.get_xml_opt_child(n, "IETF")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation(yang.adata.MNode):
    ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp
    hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc
    mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr
    frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay

    def __init__(self, ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp=None, hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc=None, mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr=None, frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if ppp is not None:
            self.ppp = ppp
        else:
            self.ppp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()
        self_ppp = self.ppp
        if self_ppp is not None:
            self_ppp._parent = self
        if hdlc is not None:
            self.hdlc = hdlc
        else:
            self.hdlc = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()
        self_hdlc = self.hdlc
        if self_hdlc is not None:
            self_hdlc._parent = self
        if mfr is not None:
            self.mfr = mfr
        else:
            self.mfr = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()
        self_mfr = self.mfr
        if self_mfr is not None:
            self_mfr._parent = self
        if frame_relay is not None:
            self.frame_relay = frame_relay
        else:
            self.frame_relay = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay()
        self_frame_relay = self.frame_relay
        if self_frame_relay is not None:
            self_frame_relay._parent = self

    def create_ppp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()
        self.ppp = res
        return res

    def create_hdlc(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()
        self.hdlc = res
        return res

    def create_mfr(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()
        self.mfr = res
        return res

    def create_frame_relay(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay()
        self.frame_relay = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('encapsulation', ns=self._ns)
        _ppp = self.ppp
        _hdlc = self.hdlc
        _mfr = self.mfr
        _frame_relay = self.frame_relay
        if _ppp is not None:
            res.children['ppp'] = _ppp.to_gdata()
        if _hdlc is not None:
            res.children['hdlc'] = _hdlc.to_gdata()
        if _mfr is not None:
            res.children['mfr'] = _mfr.to_gdata()
        if _frame_relay is not None:
            res.children['frame-relay'] = _frame_relay.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp.from_gdata(n.get_opt_container("ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc.from_gdata(n.get_opt_container("hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr.from_gdata(n.get_opt_container("mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay.from_gdata(n.get_opt_container("frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp.from_xml(yang.gdata.get_xml_opt_child(n, "ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc.from_xml(yang.gdata.get_xml_opt_child(n, "hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr.from_xml(yang.gdata.get_xml_opt_child(n, "mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay.from_xml(yang.gdata.get_xml_opt_child(n, "frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-status', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events(yang.adata.MNode):
    link_status: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status

    def __init__(self, link_status: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if link_status is not None:
            self.link_status = link_status
        else:
            self.link_status = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()
        self_link_status = self.link_status
        if self_link_status is not None:
            self_link_status._parent = self

    def create_link_status(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()
        self.link_status = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('events', ns=self._ns)
        _link_status = self.link_status
        if _link_status is not None:
            res.children['link-status'] = _link_status.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status.from_gdata(n.get_opt_container("link-status")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status.from_xml(yang.gdata.get_xml_opt_child(n, "link-status")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging(yang.adata.MNode):
    events: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events

    def __init__(self, events: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if events is not None:
            self.events = events
        else:
            self.events = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events()
        self_events = self.events
        if self_events is not None:
            self_events._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('logging', ns=self._ns)
        _events = self.events
        if _events is not None:
            res.children['events'] = _events.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging(events=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events.from_gdata(n.get_opt_container("events")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging(events=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events.from_xml(yang.gdata.get_xml_opt_child(n, "events")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('default-topology', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self.topology_name = topology_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.topology_name)], ns=self._ns)
        _topology_name = self.topology_name
        if _topology_name is not None:
            res.children['topology-name'] = yang.gdata.Leaf('topology-name', 'string', _topology_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('topology', ['topology-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology

    def __init__(self, topology: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('topologies', ns=self._ns)
        _topology = self.topology
        if _topology is not None:
            res.children['topology'] = _topology.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology.from_gdata(n.get_list("topology")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast(yang.adata.MNode):
    default_topology: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology
    topologies: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies

    def __init__(self, default_topology: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology=None, topologies: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if default_topology is not None:
            self.default_topology = default_topology
        else:
            self.default_topology = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology()
        self_default_topology = self.default_topology
        if self_default_topology is not None:
            self_default_topology._parent = self
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    def create_default_topology(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology()
        self.default_topology = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multicast', ns=self._ns)
        _default_topology = self.default_topology
        _topologies = self.topologies
        if _default_topology is not None:
            res.children['default-topology'] = _default_topology.to_gdata()
        if _topologies is not None:
            res.children['topologies'] = _topologies.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast(default_topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology.from_gdata(n.get_opt_container("default-topology")), topologies=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast(default_topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__default_topology.from_xml(yang.gdata.get_xml_opt_child(n, "default-topology")), topologies=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4(yang.adata.MNode):
    multicast: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast

    def __init__(self, multicast: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    def create_multicast(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast()
        self.multicast = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4', ns=self._ns)
        _multicast = self.multicast
        if _multicast is not None:
            res.children['multicast'] = _multicast.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4(multicast=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4(multicast=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('default-topology', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self.topology_name = topology_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.topology_name)], ns=self._ns)
        _topology_name = self.topology_name
        if _topology_name is not None:
            res.children['topology-name'] = yang.gdata.Leaf('topology-name', 'string', _topology_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('topology', ['topology-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology

    def __init__(self, topology: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('topologies', ns=self._ns)
        _topology = self.topology
        if _topology is not None:
            res.children['topology'] = _topology.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology.from_gdata(n.get_list("topology")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast(yang.adata.MNode):
    default_topology: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology
    topologies: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies

    def __init__(self, default_topology: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology=None, topologies: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if default_topology is not None:
            self.default_topology = default_topology
        else:
            self.default_topology = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology()
        self_default_topology = self.default_topology
        if self_default_topology is not None:
            self_default_topology._parent = self
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    def create_default_topology(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology()
        self.default_topology = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multicast', ns=self._ns)
        _default_topology = self.default_topology
        _topologies = self.topologies
        if _default_topology is not None:
            res.children['default-topology'] = _default_topology.to_gdata()
        if _topologies is not None:
            res.children['topologies'] = _topologies.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast(default_topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology.from_gdata(n.get_opt_container("default-topology")), topologies=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast(default_topology=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__default_topology.from_xml(yang.gdata.get_xml_opt_child(n, "default-topology")), topologies=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6(yang.adata.MNode):
    multicast: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast

    def __init__(self, multicast: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    def create_multicast(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast()
        self.multicast = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6', ns=self._ns)
        _multicast = self.multicast
        if _multicast is not None:
            res.children['multicast'] = _multicast.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6(multicast=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6(multicast=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6

    def __init__(self, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address-family', ns=self._ns)
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family(ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family(ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry(yang.adata.MNode):
    interface_name: str
    sub_interface_type: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6
    dampening: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening
    encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation
    shutdown: ?bool
    mtu: ?int
    logging: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging
    bandwidth: ?int
    description: ?str
    vrf: ?str
    address_family: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family

    def __init__(self, interface_name: str, sub_interface_type: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type=None, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6=None, dampening: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening=None, encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation=None, shutdown: ?bool, mtu: ?int, logging: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging=None, bandwidth: ?int, description: ?str, vrf: ?str, address_family: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface_name = interface_name
        if sub_interface_type is not None:
            self.sub_interface_type = sub_interface_type
        else:
            self.sub_interface_type = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type()
        self_sub_interface_type = self.sub_interface_type
        if self_sub_interface_type is not None:
            self_sub_interface_type._parent = self
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        if dampening is not None:
            self.dampening = dampening
        else:
            self.dampening = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening()
        self_dampening = self.dampening
        if self_dampening is not None:
            self_dampening._parent = self
        if encapsulation is not None:
            self.encapsulation = encapsulation
        else:
            self.encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation()
        self_encapsulation = self.encapsulation
        if self_encapsulation is not None:
            self_encapsulation._parent = self
        self.shutdown = shutdown
        self.mtu = mtu
        if logging is not None:
            self.logging = logging
        else:
            self.logging = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging()
        self_logging = self.logging
        if self_logging is not None:
            self_logging._parent = self
        self.bandwidth = bandwidth
        self.description = description
        self.vrf = vrf
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self

    def create_dampening(self, decay_half_life):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening(decay_half_life)
        self.dampening = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.interface_name)], ns=self._ns)
        _interface_name = self.interface_name
        _sub_interface_type = self.sub_interface_type
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _dampening = self.dampening
        _encapsulation = self.encapsulation
        _shutdown = self.shutdown
        _mtu = self.mtu
        _logging = self.logging
        _bandwidth = self.bandwidth
        _description = self.description
        _vrf = self.vrf
        _address_family = self.address_family
        if _interface_name is not None:
            res.children['interface-name'] = yang.gdata.Leaf('interface-name', 'string', _interface_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _sub_interface_type is not None:
            res.children['sub-interface-type'] = _sub_interface_type.to_gdata()
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        if _dampening is not None:
            res.children['dampening'] = _dampening.to_gdata()
        if _encapsulation is not None:
            res.children['encapsulation'] = _encapsulation.to_gdata()
        if _shutdown is not None:
            res.children['shutdown'] = yang.gdata.Leaf('shutdown', 'empty', _shutdown, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _mtu is not None:
            res.children['mtu'] = yang.gdata.Leaf('mtu', 'uint32', _mtu, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _logging is not None:
            res.children['logging'] = _logging.to_gdata()
        if _bandwidth is not None:
            res.children['bandwidth'] = yang.gdata.Leaf('bandwidth', 'uint64', _bandwidth, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _vrf is not None:
            res.children['vrf'] = yang.gdata.Leaf('vrf', 'string', _vrf, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        if _address_family is not None:
            res.children['address-family'] = _address_family.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry(interface_name=n.get_str("interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type.from_gdata(n.get_opt_container("sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6.from_gdata(n.get_opt_container("ipv6")), dampening=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening.from_gdata(n.get_opt_container("dampening")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation.from_gdata(n.get_opt_container("encapsulation")), shutdown=n.get_opt_bool("shutdown"), mtu=n.get_opt_int("mtu"), logging=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging.from_gdata(n.get_opt_container("logging")), bandwidth=n.get_opt_int("bandwidth"), description=n.get_opt_str("description"), vrf=n.get_opt_str("vrf"), address_family=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family.from_gdata(n.get_opt_container("address-family")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type.from_xml(yang.gdata.get_xml_opt_child(n, "sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")), dampening=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening.from_xml(yang.gdata.get_xml_opt_child(n, "dampening")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation.from_xml(yang.gdata.get_xml_opt_child(n, "encapsulation")), shutdown=yang.gdata.from_xml_opt_bool(n, "shutdown"), mtu=yang.gdata.from_xml_opt_int(n, "mtu"), logging=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging.from_xml(yang.gdata.get_xml_opt_child(n, "logging")), bandwidth=yang.gdata.from_xml_opt_int(n, "bandwidth"), description=yang.gdata.from_xml_opt_str(n, "description"), vrf=yang.gdata.from_xml_opt_str(n, "vrf"), address_family=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family")))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self._name = 'interface-preconfigure'
        self.elements = elements

    def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry(interface_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface-preconfigure', ['interface-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_interface_cfg__interfaces__interface
    interface_preconfigure: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure

    def __init__(self, interface: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]=[], interface_preconfigure: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface = Cisco_IOS_XR_um_interface_cfg__interfaces__interface(elements=interface)
        self.interface._parent = self
        self.interface_preconfigure = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure(elements=interface_preconfigure)
        self.interface_preconfigure._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('interfaces', ns=self._ns)
        _interface = self.interface
        _interface_preconfigure = self.interface_preconfigure
        if _interface is not None:
            res.children['interface'] = _interface.to_gdata()
        if _interface_preconfigure is not None:
            res.children['interface-preconfigure'] = _interface_preconfigure.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_gdata(n.get_list("interface")), interface_preconfigure=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure.from_gdata(n.get_list("interface-preconfigure")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), interface_preconfigure=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure.from_xml(yang.gdata.get_xml_children(n, "interface-preconfigure")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()


class Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('shutdown', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()


class Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry(yang.adata.MNode):
    controller_name: str
    shutdown: ?Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown
    description: ?str
    sec_admin_state: ?str

    def __init__(self, controller_name: str, shutdown: ?Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown=None, description: ?str, sec_admin_state: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.controller_name = controller_name
        if shutdown is not None:
            self.shutdown = shutdown
        else:
            self.shutdown = Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.description = description
        self.sec_admin_state = sec_admin_state

    def create_shutdown(self):
        res = Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()
        self.shutdown = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.controller_name)], ns=self._ns)
        _controller_name = self.controller_name
        _shutdown = self.shutdown
        _description = self.description
        _sec_admin_state = self.sec_admin_state
        if _controller_name is not None:
            res.children['controller-name'] = yang.gdata.Leaf('controller-name', 'string', _controller_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _shutdown is not None:
            res.children['shutdown'] = _shutdown.to_gdata()
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _sec_admin_state is not None:
            res.children['sec-admin-state'] = yang.gdata.Leaf('sec-admin-state', 'enumeration', _sec_admin_state, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry(controller_name=n.get_str("controller-name"), shutdown=Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown.from_gdata(n.get_opt_container("shutdown")), description=n.get_opt_str("description"), sec_admin_state=n.get_opt_str("sec-admin-state"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry(controller_name=yang.gdata.from_xml_str(n, "controller-name"), shutdown=Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")), description=yang.gdata.from_xml_opt_str(n, "description"), sec_admin_state=yang.gdata.from_xml_opt_str(n, "sec-admin-state"))

class Cisco_IOS_XR_um_interface_cfg__controllers__controller(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self._name = 'controller'
        self.elements = elements

    def create(self, controller_name):
        for e in self.elements:
            match = True
            if e.controller_name != controller_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry(controller_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('controller', ['controller-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('shutdown', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()


class Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry(yang.adata.MNode):
    controller_name: str
    shutdown: ?Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown
    description: ?str
    sec_admin_state: ?str

    def __init__(self, controller_name: str, shutdown: ?Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown=None, description: ?str, sec_admin_state: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.controller_name = controller_name
        if shutdown is not None:
            self.shutdown = shutdown
        else:
            self.shutdown = Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.description = description
        self.sec_admin_state = sec_admin_state

    def create_shutdown(self):
        res = Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()
        self.shutdown = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.controller_name)], ns=self._ns)
        _controller_name = self.controller_name
        _shutdown = self.shutdown
        _description = self.description
        _sec_admin_state = self.sec_admin_state
        if _controller_name is not None:
            res.children['controller-name'] = yang.gdata.Leaf('controller-name', 'string', _controller_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _shutdown is not None:
            res.children['shutdown'] = _shutdown.to_gdata()
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        if _sec_admin_state is not None:
            res.children['sec-admin-state'] = yang.gdata.Leaf('sec-admin-state', 'enumeration', _sec_admin_state, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry(controller_name=n.get_str("controller-name"), shutdown=Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown.from_gdata(n.get_opt_container("shutdown")), description=n.get_opt_str("description"), sec_admin_state=n.get_opt_str("sec-admin-state"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry(controller_name=yang.gdata.from_xml_str(n, "controller-name"), shutdown=Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")), description=yang.gdata.from_xml_opt_str(n, "description"), sec_admin_state=yang.gdata.from_xml_opt_str(n, "sec-admin-state"))

class Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry]
    def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self._name = 'controller-preconfigure'
        self.elements = elements

    def create(self, controller_name):
        for e in self.elements:
            match = True
            if e.controller_name != controller_name:
                match = False
                break
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry(controller_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('controller-preconfigure', ['controller-name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__controllers(yang.adata.MNode):
    controller: Cisco_IOS_XR_um_interface_cfg__controllers__controller
    controller_preconfigure: Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure

    def __init__(self, controller: list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry]=[], controller_preconfigure: list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.controller = Cisco_IOS_XR_um_interface_cfg__controllers__controller(elements=controller)
        self.controller._parent = self
        self.controller_preconfigure = Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure(elements=controller_preconfigure)
        self.controller_preconfigure._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('controllers', ns=self._ns)
        _controller = self.controller
        _controller_preconfigure = self.controller_preconfigure
        if _controller is not None:
            res.children['controller'] = _controller.to_gdata()
        if _controller_preconfigure is not None:
            res.children['controller-preconfigure'] = _controller_preconfigure.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__controllers(controller=Cisco_IOS_XR_um_interface_cfg__controllers__controller.from_gdata(n.get_list("controller")), controller_preconfigure=Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure.from_gdata(n.get_list("controller-preconfigure")))
        return Cisco_IOS_XR_um_interface_cfg__controllers()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__controllers(controller=Cisco_IOS_XR_um_interface_cfg__controllers__controller.from_xml(yang.gdata.get_xml_children(n, "controller")), controller_preconfigure=Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure.from_xml(yang.gdata.get_xml_children(n, "controller-preconfigure")))
        return Cisco_IOS_XR_um_interface_cfg__controllers()


class Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('disable', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()


class Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces(yang.adata.MNode):

    def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('software-interfaces', ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()


class Cisco_IOS_XR_um_interface_cfg__logging__events__link_status(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable
    software_interfaces: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces

    def __init__(self, disable: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable=None, software_interfaces: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if disable is not None:
            self.disable = disable
        else:
            self.disable = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        if software_interfaces is not None:
            self.software_interfaces = software_interfaces
        else:
            self.software_interfaces = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()
        self_software_interfaces = self.software_interfaces
        if self_software_interfaces is not None:
            self_software_interfaces._parent = self

    def create_disable(self):
        res = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()
        self.disable = res
        return res

    def create_software_interfaces(self):
        res = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()
        self.software_interfaces = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-status', ns=self._ns)
        _disable = self.disable
        _software_interfaces = self.software_interfaces
        if _disable is not None:
            res.children['disable'] = _disable.to_gdata()
        if _software_interfaces is not None:
            res.children['software-interfaces'] = _software_interfaces.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status(disable=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable.from_gdata(n.get_opt_container("disable")), software_interfaces=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces.from_gdata(n.get_opt_container("software-interfaces")))
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status(disable=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), software_interfaces=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "software-interfaces")))
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status()


class Cisco_IOS_XR_um_interface_cfg__logging__events(yang.adata.MNode):
    link_status: Cisco_IOS_XR_um_interface_cfg__logging__events__link_status

    def __init__(self, link_status: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if link_status is not None:
            self.link_status = link_status
        else:
            self.link_status = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status()
        self_link_status = self.link_status
        if self_link_status is not None:
            self_link_status._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('events', ns=self._ns)
        _link_status = self.link_status
        if _link_status is not None:
            res.children['link-status'] = _link_status.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status.from_gdata(n.get_opt_container("link-status")))
        return Cisco_IOS_XR_um_interface_cfg__logging__events()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status.from_xml(yang.gdata.get_xml_opt_child(n, "link-status")))
        return Cisco_IOS_XR_um_interface_cfg__logging__events()


class Cisco_IOS_XR_um_interface_cfg__logging(yang.adata.MNode):
    events: Cisco_IOS_XR_um_interface_cfg__logging__events

    def __init__(self, events: ?Cisco_IOS_XR_um_interface_cfg__logging__events=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if events is not None:
            self.events = events
        else:
            self.events = Cisco_IOS_XR_um_interface_cfg__logging__events()
        self_events = self.events
        if self_events is not None:
            self_events._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('logging', ns=self._ns)
        _events = self.events
        if _events is not None:
            res.children['events'] = _events.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging(events=Cisco_IOS_XR_um_interface_cfg__logging__events.from_gdata(n.get_opt_container("events")))
        return Cisco_IOS_XR_um_interface_cfg__logging()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__logging(events=Cisco_IOS_XR_um_interface_cfg__logging__events.from_xml(yang.gdata.get_xml_opt_child(n, "events")))
        return Cisco_IOS_XR_um_interface_cfg__logging()


class Cisco_IOS_XR_um_hostname_cfg__hostname(yang.adata.MNode):
    system_network_name: ?str

    def __init__(self, system_network_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg"
        self.system_network_name = system_network_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('hostname', ns=self._ns)
        _system_network_name = self.system_network_name
        if _system_network_name is not None:
            res.children['system-network-name'] = yang.gdata.Leaf('system-network-name', 'string', _system_network_name, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=n.get_opt_str("system-network-name"))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()

    @staticmethod
    def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=yang.gdata.from_xml_opt_str(n, "system-network-name"))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()


class root(yang.adata.MNode):
    locations: Cisco_IOS_XR_um_location_cfg__locations
    address_family: Cisco_IOS_XR_um_vrf_cfg__address_family
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrfs
    selective_vrf_download: Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download
    srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg
    vrf_groups: Cisco_IOS_XR_um_vrf_cfg__vrf_groups
    interfaces: Cisco_IOS_XR_um_interface_cfg__interfaces
    controllers: Cisco_IOS_XR_um_interface_cfg__controllers
    logging: Cisco_IOS_XR_um_interface_cfg__logging
    hostname: Cisco_IOS_XR_um_hostname_cfg__hostname

    def __init__(self, locations: ?Cisco_IOS_XR_um_location_cfg__locations=None, address_family: ?Cisco_IOS_XR_um_vrf_cfg__address_family=None, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrfs=None, selective_vrf_download: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download=None, srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg=None, vrf_groups: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups=None, interfaces: ?Cisco_IOS_XR_um_interface_cfg__interfaces=None, controllers: ?Cisco_IOS_XR_um_interface_cfg__controllers=None, logging: ?Cisco_IOS_XR_um_interface_cfg__logging=None, hostname: ?Cisco_IOS_XR_um_hostname_cfg__hostname=None):
        self._ns = ""
        if locations is not None:
            self.locations = locations
        else:
            self.locations = Cisco_IOS_XR_um_location_cfg__locations()
        self_locations = self.locations
        if self_locations is not None:
            self_locations._parent = self
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_vrf_cfg__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_vrf_cfg__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self
        if selective_vrf_download is not None:
            self.selective_vrf_download = selective_vrf_download
        else:
            self.selective_vrf_download = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()
        self_selective_vrf_download = self.selective_vrf_download
        if self_selective_vrf_download is not None:
            self_selective_vrf_download._parent = self
        if srlg is not None:
            self.srlg = srlg
        else:
            self.srlg = Cisco_IOS_XR_um_vrf_cfg__srlg()
        self_srlg = self.srlg
        if self_srlg is not None:
            self_srlg._parent = self
        if vrf_groups is not None:
            self.vrf_groups = vrf_groups
        else:
            self.vrf_groups = Cisco_IOS_XR_um_vrf_cfg__vrf_groups()
        self_vrf_groups = self.vrf_groups
        if self_vrf_groups is not None:
            self_vrf_groups._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_interface_cfg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if controllers is not None:
            self.controllers = controllers
        else:
            self.controllers = Cisco_IOS_XR_um_interface_cfg__controllers()
        self_controllers = self.controllers
        if self_controllers is not None:
            self_controllers._parent = self
        if logging is not None:
            self.logging = logging
        else:
            self.logging = Cisco_IOS_XR_um_interface_cfg__logging()
        self_logging = self.logging
        if self_logging is not None:
            self_logging._parent = self
        if hostname is not None:
            self.hostname = hostname
        else:
            self.hostname = Cisco_IOS_XR_um_hostname_cfg__hostname()
        self_hostname = self.hostname
        if self_hostname is not None:
            self_hostname._parent = self

    def create_srlg(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg()
        self.srlg = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Root()
        _locations = self.locations
        _address_family = self.address_family
        _vrfs = self.vrfs
        _selective_vrf_download = self.selective_vrf_download
        _srlg = self.srlg
        _vrf_groups = self.vrf_groups
        _interfaces = self.interfaces
        _controllers = self.controllers
        _logging = self.logging
        _hostname = self.hostname
        if _locations is not None:
            res.children['locations'] = _locations.to_gdata()
        if _address_family is not None:
            res.children['address-family'] = _address_family.to_gdata()
        if _vrfs is not None:
            res.children['vrfs'] = _vrfs.to_gdata()
        if _selective_vrf_download is not None:
            res.children['selective-vrf-download'] = _selective_vrf_download.to_gdata()
        if _srlg is not None:
            res.children['srlg'] = _srlg.to_gdata()
        if _vrf_groups is not None:
            res.children['vrf-groups'] = _vrf_groups.to_gdata()
        if _interfaces is not None:
            res.children['interfaces'] = _interfaces.to_gdata()
        if _controllers is not None:
            res.children['controllers'] = _controllers.to_gdata()
        if _logging is not None:
            res.children['logging'] = _logging.to_gdata()
        if _hostname is not None:
            res.children['hostname'] = _hostname.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(locations=Cisco_IOS_XR_um_location_cfg__locations.from_gdata(n.get_opt_container("locations")), address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_gdata(n.get_opt_container("address-family")), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_gdata(n.get_opt_container("vrfs")), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_gdata(n.get_opt_container("selective-vrf-download")), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_gdata(n.get_opt_container("srlg")), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_gdata(n.get_opt_container("vrf-groups")), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_gdata(n.get_opt_container("interfaces")), controllers=Cisco_IOS_XR_um_interface_cfg__controllers.from_gdata(n.get_opt_container("controllers")), logging=Cisco_IOS_XR_um_interface_cfg__logging.from_gdata(n.get_opt_container("logging")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_gdata(n.get_opt_container("hostname")))
        return root()

    @staticmethod
    def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(locations=Cisco_IOS_XR_um_location_cfg__locations.from_xml(yang.gdata.get_xml_opt_child(n, "locations")), address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family")), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs")), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_xml(yang.gdata.get_xml_opt_child(n, "selective-vrf-download")), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_xml(yang.gdata.get_xml_opt_child(n, "srlg")), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-groups")), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), controllers=Cisco_IOS_XR_um_interface_cfg__controllers.from_xml(yang.gdata.get_xml_opt_child(n, "controllers")), logging=Cisco_IOS_XR_um_interface_cfg__logging.from_xml(yang.gdata.get_xml_opt_child(n, "logging")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_xml(yang.gdata.get_xml_opt_child(n, "hostname")))
        return root()

