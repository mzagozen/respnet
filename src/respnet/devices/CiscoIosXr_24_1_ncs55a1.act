import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    mut def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology_name = topology_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology_name = self.topology_name
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.topology_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    mut def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology

    mut def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology = self.topology
        if _topology is not None:
            children['topology'] = _topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_gdata(n.get_opt_list("topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies

    mut def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topologies = self.topologies
        if _topologies is not None:
            children['topologies'] = _topologies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    mut def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology_name = topology_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology_name = self.topology_name
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.topology_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    mut def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology

    mut def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology = self.topology
        if _topology is not None:
            children['topology'] = _topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_gdata(n.get_opt_list("topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies

    mut def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topologies = self.topologies
        if _topologies is not None:
            children['topologies'] = _topologies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()



class Cisco_IOS_XR_um_vrf_cfg__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf(yang.adata.MNode):
    route_policy: ?str
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn

    mut def __init__(self, route_policy: ?str, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _advertise_as_vpn = self.advertise_as_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf(route_policy=n.get_opt_str("route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        _allow = self.allow
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf
    bridge_domain: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf=None, bridge_domain: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self
        if bridge_domain is not None:
            self.bridge_domain = bridge_domain
        else:
            self.bridge_domain = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain()
        self_bridge_domain = self.bridge_domain
        if self_bridge_domain is not None:
            self_bridge_domain._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        _bridge_domain = self.bridge_domain
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        if _bridge_domain is not None:
            children['bridge-domain'] = _bridge_domain.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf.from_gdata(n.get_opt_container("vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain.from_gdata(n.get_opt_container("bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from__bridge_domain.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(yang.adata.MNode):
    route_policy: ?str
    from_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target

    mut def __init__(self, route_policy: ?str, from_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if from_ is not None:
            self.from_ = from_
        else:
            self.from_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from()
        self_from_ = self.from_
        if self_from_ is not None:
            self_from_._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _from_ = self.from_
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _from_ is not None:
            children['from'] = _from_.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(route_policy=n.get_opt_str("route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from.from_gdata(n.get_opt_container("from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__from.from_xml(yang.gdata.get_xml_opt_child(n, "from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf(yang.adata.MNode):
    route_policy: ?str
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn

    mut def __init__(self, route_policy: ?str, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _allow_imported_vpn = self.allow_imported_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf(route_policy=n.get_opt_str("route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn(yang.adata.MNode):
    disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni

    mut def __init__(self, disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable_adv_source_vrf_vni = disable_adv_source_vrf_vni
        self_disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if self_disable_adv_source_vrf_vni is not None:
            self_disable_adv_source_vrf_vni._parent = self

    mut def create_disable_adv_source_vrf_vni(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        self.disable_adv_source_vrf_vni = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if _disable_adv_source_vrf_vni is not None:
            children['disable-adv-source-vrf-vni'] = _disable_adv_source_vrf_vni.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_gdata(n.get_opt_container("disable-adv-source-vrf-vni")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_xml(yang.gdata.get_xml_opt_child(n, "disable-adv-source-vrf-vni")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf(yang.adata.MNode):
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow

    mut def __init__(self, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_imported_vpn = self.allow_imported_vpn
        _allow = self.allow
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf.from_gdata(n.get_opt_container("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(yang.adata.MNode):
    route_policy: ?str
    to: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target

    mut def __init__(self, route_policy: ?str, to: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if to is not None:
            self.to = to
        else:
            self.to = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to()
        self_to = self.to
        if self_to is not None:
            self_to._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _to = self.to
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _to is not None:
            children['to'] = _to.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(route_policy=n.get_opt_str("route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to.from_gdata(n.get_opt_container("to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf(yang.adata.MNode):
    route_policy: ?str
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn

    mut def __init__(self, route_policy: ?str, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _advertise_as_vpn = self.advertise_as_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf(route_policy=n.get_opt_str("route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        _allow = self.allow
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf
    bridge_domain: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf=None, bridge_domain: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self
        if bridge_domain is not None:
            self.bridge_domain = bridge_domain
        else:
            self.bridge_domain = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain()
        self_bridge_domain = self.bridge_domain
        if self_bridge_domain is not None:
            self_bridge_domain._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        _bridge_domain = self.bridge_domain
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        if _bridge_domain is not None:
            children['bridge-domain'] = _bridge_domain.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf.from_gdata(n.get_opt_container("vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain.from_gdata(n.get_opt_container("bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from__bridge_domain.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import(yang.adata.MNode):
    route_policy: ?str
    from_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target

    mut def __init__(self, route_policy: ?str, from_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if from_ is not None:
            self.from_ = from_
        else:
            self.from_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from()
        self_from_ = self.from_
        if self_from_ is not None:
            self_from_._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _from_ = self.from_
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _from_ is not None:
            children['from'] = _from_.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import(route_policy=n.get_opt_str("route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from.from_gdata(n.get_opt_container("from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__from.from_xml(yang.gdata.get_xml_opt_child(n, "from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf(yang.adata.MNode):
    route_policy: ?str
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn

    mut def __init__(self, route_policy: ?str, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _allow_imported_vpn = self.allow_imported_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf(route_policy=n.get_opt_str("route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn(yang.adata.MNode):
    disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni

    mut def __init__(self, disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable_adv_source_vrf_vni = disable_adv_source_vrf_vni
        self_disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if self_disable_adv_source_vrf_vni is not None:
            self_disable_adv_source_vrf_vni._parent = self

    mut def create_disable_adv_source_vrf_vni(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        self.disable_adv_source_vrf_vni = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if _disable_adv_source_vrf_vni is not None:
            children['disable-adv-source-vrf-vni'] = _disable_adv_source_vrf_vni.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_gdata(n.get_opt_container("disable-adv-source-vrf-vni")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_xml(yang.gdata.get_xml_opt_child(n, "disable-adv-source-vrf-vni")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf(yang.adata.MNode):
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow

    mut def __init__(self, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_imported_vpn = self.allow_imported_vpn
        _allow = self.allow
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf.from_gdata(n.get_opt_container("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export(yang.adata.MNode):
    route_policy: ?str
    to: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target

    mut def __init__(self, route_policy: ?str, to: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if to is not None:
            self.to = to
        else:
            self.to = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to()
        self_to = self.to
        if self_to is not None:
            self_to._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _to = self.to
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _to is not None:
            children['to'] = _to.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export(route_policy=n.get_opt_str("route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to.from_gdata(n.get_opt_container("to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf(yang.adata.MNode):
    route_policy: ?str
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn

    mut def __init__(self, route_policy: ?str, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _advertise_as_vpn = self.advertise_as_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf(route_policy=n.get_opt_str("route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        _allow = self.allow
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf
    bridge_domain: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf=None, bridge_domain: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self
        if bridge_domain is not None:
            self.bridge_domain = bridge_domain
        else:
            self.bridge_domain = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain()
        self_bridge_domain = self.bridge_domain
        if self_bridge_domain is not None:
            self_bridge_domain._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        _bridge_domain = self.bridge_domain
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        if _bridge_domain is not None:
            children['bridge-domain'] = _bridge_domain.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf.from_gdata(n.get_opt_container("vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain.from_gdata(n.get_opt_container("bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from__bridge_domain.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import(yang.adata.MNode):
    route_policy: ?str
    from_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target

    mut def __init__(self, route_policy: ?str, from_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if from_ is not None:
            self.from_ = from_
        else:
            self.from_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from()
        self_from_ = self.from_
        if self_from_ is not None:
            self_from_._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _from_ = self.from_
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _from_ is not None:
            children['from'] = _from_.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import(route_policy=n.get_opt_str("route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from.from_gdata(n.get_opt_container("from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__from.from_xml(yang.gdata.get_xml_opt_child(n, "from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf(yang.adata.MNode):
    route_policy: ?str
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn

    mut def __init__(self, route_policy: ?str, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _allow_imported_vpn = self.allow_imported_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf(route_policy=n.get_opt_str("route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn(yang.adata.MNode):
    disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni

    mut def __init__(self, disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable_adv_source_vrf_vni = disable_adv_source_vrf_vni
        self_disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if self_disable_adv_source_vrf_vni is not None:
            self_disable_adv_source_vrf_vni._parent = self

    mut def create_disable_adv_source_vrf_vni(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        self.disable_adv_source_vrf_vni = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if _disable_adv_source_vrf_vni is not None:
            children['disable-adv-source-vrf-vni'] = _disable_adv_source_vrf_vni.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_gdata(n.get_opt_container("disable-adv-source-vrf-vni")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_xml(yang.gdata.get_xml_opt_child(n, "disable-adv-source-vrf-vni")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf(yang.adata.MNode):
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow

    mut def __init__(self, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_imported_vpn = self.allow_imported_vpn
        _allow = self.allow
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf.from_gdata(n.get_opt_container("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export(yang.adata.MNode):
    route_policy: ?str
    to: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target

    mut def __init__(self, route_policy: ?str, to: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if to is not None:
            self.to = to
        else:
            self.to = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to()
        self_to = self.to
        if self_to is not None:
            self_to._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _to = self.to
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _to is not None:
            children['to'] = _to.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export(route_policy=n.get_opt_str("route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to.from_gdata(n.get_opt_container("to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        self.multicast = multicast
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        self.flowspec = flowspec
        self_flowspec = self.flowspec
        if self_flowspec is not None:
            self_flowspec._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()
        self.unicast = res
        return res

    mut def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        self.multicast = res
        return res

    mut def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        self.flowspec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        _flowspec = self.flowspec
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        if _flowspec is not None:
            children['flowspec'] = _flowspec.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_gdata(n.get_opt_container("flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_xml(yang.gdata.get_xml_opt_child(n, "flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf(yang.adata.MNode):
    route_policy: ?str
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn

    mut def __init__(self, route_policy: ?str, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _advertise_as_vpn = self.advertise_as_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf(route_policy=n.get_opt_str("route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        _allow = self.allow
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf
    bridge_domain: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf=None, bridge_domain: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self
        if bridge_domain is not None:
            self.bridge_domain = bridge_domain
        else:
            self.bridge_domain = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain()
        self_bridge_domain = self.bridge_domain
        if self_bridge_domain is not None:
            self_bridge_domain._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        _bridge_domain = self.bridge_domain
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        if _bridge_domain is not None:
            children['bridge-domain'] = _bridge_domain.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf.from_gdata(n.get_opt_container("vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain.from_gdata(n.get_opt_container("bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from__bridge_domain.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(yang.adata.MNode):
    route_policy: ?str
    from_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target

    mut def __init__(self, route_policy: ?str, from_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if from_ is not None:
            self.from_ = from_
        else:
            self.from_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from()
        self_from_ = self.from_
        if self_from_ is not None:
            self_from_._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _from_ = self.from_
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _from_ is not None:
            children['from'] = _from_.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(route_policy=n.get_opt_str("route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from.from_gdata(n.get_opt_container("from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__from.from_xml(yang.gdata.get_xml_opt_child(n, "from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf(yang.adata.MNode):
    route_policy: ?str
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn

    mut def __init__(self, route_policy: ?str, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _allow_imported_vpn = self.allow_imported_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf(route_policy=n.get_opt_str("route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn(yang.adata.MNode):
    disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni

    mut def __init__(self, disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable_adv_source_vrf_vni = disable_adv_source_vrf_vni
        self_disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if self_disable_adv_source_vrf_vni is not None:
            self_disable_adv_source_vrf_vni._parent = self

    mut def create_disable_adv_source_vrf_vni(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        self.disable_adv_source_vrf_vni = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if _disable_adv_source_vrf_vni is not None:
            children['disable-adv-source-vrf-vni'] = _disable_adv_source_vrf_vni.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_gdata(n.get_opt_container("disable-adv-source-vrf-vni")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_xml(yang.gdata.get_xml_opt_child(n, "disable-adv-source-vrf-vni")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf(yang.adata.MNode):
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow

    mut def __init__(self, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_imported_vpn = self.allow_imported_vpn
        _allow = self.allow
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf.from_gdata(n.get_opt_container("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(yang.adata.MNode):
    route_policy: ?str
    to: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target

    mut def __init__(self, route_policy: ?str, to: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if to is not None:
            self.to = to
        else:
            self.to = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to()
        self_to = self.to
        if self_to is not None:
            self_to._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _to = self.to
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _to is not None:
            children['to'] = _to.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(route_policy=n.get_opt_str("route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to.from_gdata(n.get_opt_container("to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf(yang.adata.MNode):
    route_policy: ?str
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn

    mut def __init__(self, route_policy: ?str, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _advertise_as_vpn = self.advertise_as_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf(route_policy=n.get_opt_str("route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        _allow = self.allow
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf
    bridge_domain: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf=None, bridge_domain: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self
        if bridge_domain is not None:
            self.bridge_domain = bridge_domain
        else:
            self.bridge_domain = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain()
        self_bridge_domain = self.bridge_domain
        if self_bridge_domain is not None:
            self_bridge_domain._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        _bridge_domain = self.bridge_domain
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        if _bridge_domain is not None:
            children['bridge-domain'] = _bridge_domain.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf.from_gdata(n.get_opt_container("vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain.from_gdata(n.get_opt_container("bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from__bridge_domain.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import(yang.adata.MNode):
    route_policy: ?str
    from_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target

    mut def __init__(self, route_policy: ?str, from_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if from_ is not None:
            self.from_ = from_
        else:
            self.from_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from()
        self_from_ = self.from_
        if self_from_ is not None:
            self_from_._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _from_ = self.from_
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _from_ is not None:
            children['from'] = _from_.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import(route_policy=n.get_opt_str("route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from.from_gdata(n.get_opt_container("from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__from.from_xml(yang.gdata.get_xml_opt_child(n, "from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf(yang.adata.MNode):
    route_policy: ?str
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn

    mut def __init__(self, route_policy: ?str, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _allow_imported_vpn = self.allow_imported_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf(route_policy=n.get_opt_str("route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn(yang.adata.MNode):
    disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni

    mut def __init__(self, disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable_adv_source_vrf_vni = disable_adv_source_vrf_vni
        self_disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if self_disable_adv_source_vrf_vni is not None:
            self_disable_adv_source_vrf_vni._parent = self

    mut def create_disable_adv_source_vrf_vni(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        self.disable_adv_source_vrf_vni = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if _disable_adv_source_vrf_vni is not None:
            children['disable-adv-source-vrf-vni'] = _disable_adv_source_vrf_vni.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_gdata(n.get_opt_container("disable-adv-source-vrf-vni")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_xml(yang.gdata.get_xml_opt_child(n, "disable-adv-source-vrf-vni")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf(yang.adata.MNode):
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow

    mut def __init__(self, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_imported_vpn = self.allow_imported_vpn
        _allow = self.allow
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf.from_gdata(n.get_opt_container("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export(yang.adata.MNode):
    route_policy: ?str
    to: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target

    mut def __init__(self, route_policy: ?str, to: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if to is not None:
            self.to = to
        else:
            self.to = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to()
        self_to = self.to
        if self_to is not None:
            self_to._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _to = self.to
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _to is not None:
            children['to'] = _to.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export(route_policy=n.get_opt_str("route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to.from_gdata(n.get_opt_container("to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf(yang.adata.MNode):
    route_policy: ?str
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn

    mut def __init__(self, route_policy: ?str, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _advertise_as_vpn = self.advertise_as_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf(route_policy=n.get_opt_str("route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        _allow = self.allow
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain(yang.adata.MNode):
    advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn

    mut def __init__(self, advertise_as_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.advertise_as_vpn = advertise_as_vpn
        self_advertise_as_vpn = self.advertise_as_vpn
        if self_advertise_as_vpn is not None:
            self_advertise_as_vpn._parent = self

    mut def create_advertise_as_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn()
        self.advertise_as_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_as_vpn = self.advertise_as_vpn
        if _advertise_as_vpn is not None:
            children['advertise-as-vpn'] = _advertise_as_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn.from_gdata(n.get_opt_container("advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain(advertise_as_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain__advertise_as_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-as-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf
    bridge_domain: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf=None, bridge_domain: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self
        if bridge_domain is not None:
            self.bridge_domain = bridge_domain
        else:
            self.bridge_domain = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain()
        self_bridge_domain = self.bridge_domain
        if self_bridge_domain is not None:
            self_bridge_domain._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        _bridge_domain = self.bridge_domain
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        if _bridge_domain is not None:
            children['bridge-domain'] = _bridge_domain.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf.from_gdata(n.get_opt_container("vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain.from_gdata(n.get_opt_container("bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")), bridge_domain=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from__bridge_domain.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-domain")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import(yang.adata.MNode):
    route_policy: ?str
    from_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target

    mut def __init__(self, route_policy: ?str, from_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if from_ is not None:
            self.from_ = from_
        else:
            self.from_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from()
        self_from_ = self.from_
        if self_from_ is not None:
            self_from_._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _from_ = self.from_
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _from_ is not None:
            children['from'] = _from_.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import(route_policy=n.get_opt_str("route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from.from_gdata(n.get_opt_container("from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), from_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__from.from_xml(yang.gdata.get_xml_opt_child(n, "from")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf(yang.adata.MNode):
    route_policy: ?str
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn

    mut def __init__(self, route_policy: ?str, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _allow_imported_vpn = self.allow_imported_vpn
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf(route_policy=n.get_opt_str("route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn(yang.adata.MNode):
    disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni

    mut def __init__(self, disable_adv_source_vrf_vni: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable_adv_source_vrf_vni = disable_adv_source_vrf_vni
        self_disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if self_disable_adv_source_vrf_vni is not None:
            self_disable_adv_source_vrf_vni._parent = self

    mut def create_disable_adv_source_vrf_vni(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni()
        self.disable_adv_source_vrf_vni = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_adv_source_vrf_vni = self.disable_adv_source_vrf_vni
        if _disable_adv_source_vrf_vni is not None:
            children['disable-adv-source-vrf-vni'] = _disable_adv_source_vrf_vni.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_gdata(n.get_opt_container("disable-adv-source-vrf-vni")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn(disable_adv_source_vrf_vni=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn__disable_adv_source_vrf_vni.from_xml(yang.gdata.get_xml_opt_child(n, "disable-adv-source-vrf-vni")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow(yang.adata.MNode):
    backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup
    best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external

    mut def __init__(self, backup: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup=None, best_external: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.backup = backup
        self_backup = self.backup
        if self_backup is not None:
            self_backup._parent = self
        self.best_external = best_external
        self_best_external = self.best_external
        if self_best_external is not None:
            self_best_external._parent = self

    mut def create_backup(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup()
        self.backup = res
        return res

    mut def create_best_external(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external()
        self.best_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup = self.backup
        _best_external = self.best_external
        if _backup is not None:
            children['backup'] = _backup.to_gdata()
        if _best_external is not None:
            children['best-external'] = _best_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup.from_gdata(n.get_opt_container("backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external.from_gdata(n.get_opt_container("best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow(backup=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__backup.from_xml(yang.gdata.get_xml_opt_child(n, "backup")), best_external=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow__best_external.from_xml(yang.gdata.get_xml_opt_child(n, "best-external")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf(yang.adata.MNode):
    allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn
    allow: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow

    mut def __init__(self, allow_imported_vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn=None, allow: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.allow_imported_vpn = allow_imported_vpn
        self_allow_imported_vpn = self.allow_imported_vpn
        if self_allow_imported_vpn is not None:
            self_allow_imported_vpn._parent = self
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def create_allow_imported_vpn(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn()
        self.allow_imported_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_imported_vpn = self.allow_imported_vpn
        _allow = self.allow
        if _allow_imported_vpn is not None:
            children['allow-imported-vpn'] = _allow_imported_vpn.to_gdata()
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn.from_gdata(n.get_opt_container("allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow.from_gdata(n.get_opt_container("allow")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf(allow_imported_vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow_imported_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "allow-imported-vpn")), allow=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to(yang.adata.MNode):
    default_vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf
    vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf

    mut def __init__(self, default_vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf=None, vrf: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if default_vrf is not None:
            self.default_vrf = default_vrf
        else:
            self.default_vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf()
        self_default_vrf = self.default_vrf
        if self_default_vrf is not None:
            self_default_vrf._parent = self
        self.vrf = vrf
        self_vrf = self.vrf
        if self_vrf is not None:
            self_vrf._parent = self

    mut def create_vrf(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf()
        self.vrf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_vrf = self.default_vrf
        _vrf = self.vrf
        if _default_vrf is not None:
            children['default-vrf'] = _default_vrf.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf.from_gdata(n.get_opt_container("default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf.from_gdata(n.get_opt_container("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to(default_vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__default_vrf.from_xml(yang.gdata.get_xml_opt_child(n, "default-vrf")), vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to__vrf.from_xml(yang.gdata.get_xml_opt_child(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'four-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts(yang.adata.MNode):
    four_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt

    mut def __init__(self, four_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt(elements=four_byte_as_rt)
        self.four_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as_rt = self.four_byte_as_rt
        if _four_byte_as_rt is not None:
            children['four-byte-as-rt'] = _four_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt.from_gdata(n.get_opt_list("four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts(four_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts__four_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "four-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry(yang.adata.MNode):
    ip_address: str
    index: int
    stitching: bool

    mut def __init__(self, ip_address: str, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _index = self.index
        _stitching = self.stitching
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_address), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=n.get_str("ip-address"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address=yang.gdata.from_xml_str(n, "ip-address"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'ip-address-rt'
        self.elements = elements

    mut def create(self, ip_address, index, stitching):
        for e in self.elements:
            match = True
            if e.ip_address != ip_address:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry(ip_address, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-address', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts(yang.adata.MNode):
    ip_address_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt

    mut def __init__(self, ip_address_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt(elements=ip_address_rt)
        self.ip_address_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address_rt = self.ip_address_rt
        if _ip_address_rt is not None:
            children['ip-address-rt'] = _ip_address_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt.from_gdata(n.get_opt_list("ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts(ip_address_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts__ip_address_rt.from_xml(yang.gdata.get_xml_children(n, "ip-address-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts
    four_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts
    ip_addresse_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts=None, four_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts=None, ip_addresse_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self
        if four_byte_as_rts is not None:
            self.four_byte_as_rts = four_byte_as_rts
        else:
            self.four_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts()
        self_four_byte_as_rts = self.four_byte_as_rts
        if self_four_byte_as_rts is not None:
            self_four_byte_as_rts._parent = self
        if ip_addresse_rts is not None:
            self.ip_addresse_rts = ip_addresse_rts
        else:
            self.ip_addresse_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts()
        self_ip_addresse_rts = self.ip_addresse_rts
        if self_ip_addresse_rts is not None:
            self_ip_addresse_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        _four_byte_as_rts = self.four_byte_as_rts
        _ip_addresse_rts = self.ip_addresse_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        if _four_byte_as_rts is not None:
            children['four-byte-as-rts'] = _four_byte_as_rts.to_gdata()
        if _ip_addresse_rts is not None:
            children['ip-addresse-rts'] = _ip_addresse_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts.from_gdata(n.get_opt_container("four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts.from_gdata(n.get_opt_container("ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")), four_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__four_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as-rts")), ip_addresse_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target__ip_addresse_rts.from_xml(yang.gdata.get_xml_opt_child(n, "ip-addresse-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export(yang.adata.MNode):
    route_policy: ?str
    to: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target

    mut def __init__(self, route_policy: ?str, to: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to=None, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy = route_policy
        if to is not None:
            self.to = to
        else:
            self.to = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to()
        self_to = self.to
        if self_to is not None:
            self_to._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _to = self.to
        _route_target = self.route_target
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _to is not None:
            children['to'] = _to.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export(route_policy=n.get_opt_str("route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to.from_gdata(n.get_opt_container("to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), to=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")), route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        self.multicast = multicast
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        self.flowspec = flowspec
        self_flowspec = self.flowspec
        if self_flowspec is not None:
            self_flowspec._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()
        self.unicast = res
        return res

    mut def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        self.multicast = res
        return res

    mut def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        self.flowspec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        _flowspec = self.flowspec
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        if _flowspec is not None:
            children['flowspec'] = _flowspec.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_gdata(n.get_opt_container("flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_xml(yang.gdata.get_xml_opt_child(n, "flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(yang.adata.MNode):
    big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big

    mut def __init__(self, big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.big = big
        self_big = self.big
        if self_big is not None:
            self_big._parent = self

    mut def create_big(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        self.big = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _big = self.big
        if _big is not None:
            children['big'] = _big.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_gdata(n.get_opt_container("big")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_xml(yang.gdata.get_xml_opt_child(n, "big")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(yang.adata.MNode):
    id: ?str

    mut def __init__(self, id: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=n.get_opt_str("id"))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=yang.gdata.from_xml_opt_str(n, "id"))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__fallback_vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(yang.adata.MNode):
    as_number: value
    index: int

    mut def __init__(self, as_number: value, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('union', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number=n.get_value("as-number"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number=yang.gdata.from_xml_value(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(yang.adata.MNode):
    as_number: value
    index: int

    mut def __init__(self, as_number: value, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('union', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number=n.get_value("as-number"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number=yang.gdata.from_xml_value(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(yang.adata.MNode):
    ipv4_address: str
    index: int

    mut def __init__(self, ipv4_address: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ipv4_address = ipv4_address
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_address = self.ipv4_address
        _index = self.index
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address=n.get_str("ipv4-address"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address=yang.gdata.from_xml_str(n, "ipv4-address"), index=yang.gdata.from_xml_int(n, "index"))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(yang.adata.MNode):
    two_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as
    four_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as
    ip_address: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address

    mut def __init__(self, two_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as=None, four_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as=None, ip_address: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as = two_byte_as
        self_two_byte_as = self.two_byte_as
        if self_two_byte_as is not None:
            self_two_byte_as._parent = self
        self.four_byte_as = four_byte_as
        self_four_byte_as = self.four_byte_as
        if self_four_byte_as is not None:
            self_four_byte_as._parent = self
        self.ip_address = ip_address
        self_ip_address = self.ip_address
        if self_ip_address is not None:
            self_ip_address._parent = self

    mut def create_two_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number, index)
        self.two_byte_as = res
        return res

    mut def create_four_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number, index)
        self.four_byte_as = res
        return res

    mut def create_ip_address(self, ipv4_address, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address, index)
        self.ip_address = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as = self.two_byte_as
        _four_byte_as = self.four_byte_as
        _ip_address = self.ip_address
        if _two_byte_as is not None:
            children['two-byte-as'] = _two_byte_as.to_gdata()
        if _four_byte_as is not None:
            children['four-byte-as'] = _four_byte_as.to_gdata()
        if _ip_address is not None:
            children['ip-address'] = _ip_address.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(two_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as.from_gdata(n.get_opt_container("two-byte-as")), four_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as.from_gdata(n.get_opt_container("four-byte-as")), ip_address=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address.from_gdata(n.get_opt_container("ip-address")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(two_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as")), four_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as")), ip_address=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address.from_xml(yang.gdata.get_xml_opt_child(n, "ip-address")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_family: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family
    mode: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode
    vpn: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn
    description: ?str
    remote_route_filtering: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering
    fallback_vrf: ?str
    rd: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd

    mut def __init__(self, vrf_name: str, address_family: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family=None, mode: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode=None, vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn=None, description: ?str, remote_route_filtering: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering=None, fallback_vrf: ?str, rd: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_name = vrf_name
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self
        if mode is not None:
            self.mode = mode
        else:
            self.mode = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()
        self_mode = self.mode
        if self_mode is not None:
            self_mode._parent = self
        if vpn is not None:
            self.vpn = vpn
        else:
            self.vpn = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()
        self_vpn = self.vpn
        if self_vpn is not None:
            self_vpn._parent = self
        self.description = description
        if remote_route_filtering is not None:
            self.remote_route_filtering = remote_route_filtering
        else:
            self.remote_route_filtering = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()
        self_remote_route_filtering = self.remote_route_filtering
        if self_remote_route_filtering is not None:
            self_remote_route_filtering._parent = self
        self.fallback_vrf = fallback_vrf
        if rd is not None:
            self.rd = rd
        else:
            self.rd = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()
        self_rd = self.rd
        if self_rd is not None:
            self_rd._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        _address_family = self.address_family
        _mode = self.mode
        _vpn = self.vpn
        _description = self.description
        _remote_route_filtering = self.remote_route_filtering
        _fallback_vrf = self.fallback_vrf
        _rd = self.rd
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        if _mode is not None:
            children['mode'] = _mode.to_gdata()
        if _vpn is not None:
            children['vpn'] = _vpn.to_gdata()
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _remote_route_filtering is not None:
            children['remote-route-filtering'] = _remote_route_filtering.to_gdata()
        if _fallback_vrf is not None:
            children['fallback-vrf'] = yang.gdata.Leaf('string', _fallback_vrf)
        if _rd is not None:
            children['rd'] = _rd.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_gdata(n.get_opt_container("address-family")), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_gdata(n.get_opt_container("mode")), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_gdata(n.get_opt_container("vpn")), description=n.get_opt_str("description"), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_gdata(n.get_opt_container("remote-route-filtering")), fallback_vrf=n.get_opt_str("fallback-vrf"), rd=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd.from_gdata(n.get_opt_container("rd")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family")), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_xml(yang.gdata.get_xml_opt_child(n, "mode")), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_xml(yang.gdata.get_xml_opt_child(n, "vpn")), description=yang.gdata.from_xml_opt_str(n, "description"), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_xml(yang.gdata.get_xml_opt_child(n, "remote-route-filtering")), fallback_vrf=yang.gdata.from_xml_opt_str(n, "fallback-vrf"), rd=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd.from_xml(yang.gdata.get_xml_opt_child(n, "rd", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()



class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return None



class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__srlg_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(yang.adata.MNode):
    srlg_name: str
    value: ?int
    description: ?str

    mut def __init__(self, srlg_name: str, value: ?int, description: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.srlg_name = srlg_name
        self.value = value
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg_name = self.srlg_name
        _value = self.value
        _description = self.description
        if _srlg_name is not None:
            children['srlg-name'] = yang.gdata.Leaf('string', _srlg_name)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.srlg_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=n.get_str("srlg-name"), value=n.get_opt_int("value"), description=n.get_opt_str("description"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=yang.gdata.from_xml_str(n, "srlg-name"), value=yang.gdata.from_xml_opt_int(n, "value"), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'name'
        self.elements = elements

    mut def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['srlg-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__names__name

    mut def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(elements=name)
        self.name._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_gdata(n.get_opt_list("name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_xml(yang.gdata.get_xml_children(n, "name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(yang.adata.MNode):
    priority: ?str

    mut def __init__(self, priority: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=n.get_opt_str("priority"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=yang.gdata.from_xml_opt_str(n, "priority"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name__srlg_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(yang.adata.MNode):
    srlg_name: str

    mut def __init__(self, srlg_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.srlg_name = srlg_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg_name = self.srlg_name
        if _srlg_name is not None:
            children['srlg-name'] = yang.gdata.Leaf('string', _srlg_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.srlg_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=n.get_str("srlg-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=yang.gdata.from_xml_str(n, "srlg-name"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'name'
        self.elements = elements

    mut def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['srlg-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name

    mut def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(elements=name)
        self.name._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_gdata(n.get_opt_list("name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_xml(yang.gdata.get_xml_children(n, "name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(yang.adata.MNode):
    index_number: int
    group_name: str

    mut def __init__(self, index_number: int, group_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.group_name = group_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _group_name = self.group_name
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=n.get_int("index-number"), group_name=n.get_str("group-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), group_name=yang.gdata.from_xml_str(n, "group-name"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'group'
        self.elements = elements

    mut def create(self, index_number, group_name):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number, group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group

    mut def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_gdata(n.get_opt_list("group")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names
    groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups

    mut def __init__(self, interface_name: str, include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical=None, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes=None, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.interface_name = interface_name
        self.include_optical = include_optical
        self_include_optical = self.include_optical
        if self_include_optical is not None:
            self_include_optical._parent = self
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self
        if names is not None:
            self.names = names
        else:
            self.names = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()
        self_names = self.names
        if self_names is not None:
            self_names._parent = self
        self.groups = groups
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self

    mut def create_include_optical(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical()
        self.include_optical = res
        return res

    mut def create_groups(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups()
        self.groups = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _include_optical = self.include_optical
        _indexes = self.indexes
        _names = self.names
        _groups = self.groups
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _include_optical is not None:
            children['include-optical'] = _include_optical.to_gdata()
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        if _names is not None:
            children['names'] = _names.to_gdata()
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_gdata(n.get_opt_container("include-optical")), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_gdata(n.get_opt_container("indexes")), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_gdata(n.get_opt_container("names")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_gdata(n.get_opt_container("groups")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_xml(yang.gdata.get_xml_opt_child(n, "include-optical")), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_xml(yang.gdata.get_xml_opt_child(n, "names")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.interface = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(yang.adata.MNode):
    group_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes

    mut def __init__(self, group_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group_name = group_name
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        _indexes = self.indexes
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=n.get_str("group-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_gdata(n.get_opt_container("indexes")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group

    mut def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_gdata(n.get_opt_list("group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__location_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(yang.adata.MNode):
    location_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes

    mut def __init__(self, location_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.location_name = location_name
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _location_name = self.location_name
        _indexes = self.indexes
        if _location_name is not None:
            children['location-name'] = yang.gdata.Leaf('string', _location_name)
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.location_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=n.get_str("location-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_gdata(n.get_opt_container("indexes")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=yang.gdata.from_xml_str(n, "location-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'inherit-location'
        self.elements = elements

    mut def create(self, location_name):
        for e in self.elements:
            match = True
            if e.location_name != location_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['location-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(yang.adata.MNode):
    inherit_location: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location

    mut def __init__(self, inherit_location: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.inherit_location = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(elements=inherit_location)
        self.inherit_location._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inherit_location = self.inherit_location
        if _inherit_location is not None:
            children['inherit-location'] = _inherit_location.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_gdata(n.get_opt_list("inherit-location")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_xml(yang.gdata.get_xml_children(n, "inherit-location")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()



class Cisco_IOS_XR_um_vrf_cfg__srlg(yang.adata.MNode):
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__names
    interfaces: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces
    groups: Cisco_IOS_XR_um_vrf_cfg__srlg__groups
    inherit_locations: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations

    mut def __init__(self, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__names=None, interfaces: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups=None, inherit_locations: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if names is not None:
            self.names = names
        else:
            self.names = Cisco_IOS_XR_um_vrf_cfg__srlg__names()
        self_names = self.names
        if self_names is not None:
            self_names._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if groups is not None:
            self.groups = groups
        else:
            self.groups = Cisco_IOS_XR_um_vrf_cfg__srlg__groups()
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self
        if inherit_locations is not None:
            self.inherit_locations = inherit_locations
        else:
            self.inherit_locations = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()
        self_inherit_locations = self.inherit_locations
        if self_inherit_locations is not None:
            self_inherit_locations._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _names = self.names
        _interfaces = self.interfaces
        _groups = self.groups
        _inherit_locations = self.inherit_locations
        if _names is not None:
            children['names'] = _names.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        if _inherit_locations is not None:
            children['inherit-locations'] = _inherit_locations.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_gdata(n.get_opt_container("names")), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_gdata(n.get_opt_container("interfaces")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_gdata(n.get_opt_container("groups")), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_gdata(n.get_opt_container("inherit-locations")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_xml(yang.gdata.get_xml_opt_child(n, "names")), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_xml(yang.gdata.get_xml_opt_child(n, "inherit-locations")))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str

    mut def __init__(self, vrf_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_name = vrf_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(yang.adata.MNode):
    group_name: str
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs

    mut def __init__(self, group_name: str, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group_name = group_name
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        _vrfs = self.vrfs
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=n.get_str("group-name"), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_gdata(n.get_opt_container("vrfs")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs")))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf-group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups(yang.adata.MNode):
    vrf_group: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group

    mut def __init__(self, vrf_group: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_group = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(elements=vrf_group)
        self.vrf_group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_group = self.vrf_group
        if _vrf_group is not None:
            children['vrf-group'] = _vrf_group.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_gdata(n.get_opt_list("vrf-group")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_xml(yang.gdata.get_xml_children(n, "vrf-group")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()



class Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__as_format(yang.adata.MNode):
    asdot: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot
    asplain: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain

    mut def __init__(self, asdot: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot=None, asplain: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.asdot = asdot
        self_asdot = self.asdot
        if self_asdot is not None:
            self_asdot._parent = self
        self.asplain = asplain
        self_asplain = self.asplain
        if self_asplain is not None:
            self_asplain._parent = self

    mut def create_asdot(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        self.asdot = res
        return res

    mut def create_asplain(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        self.asplain = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _asdot = self.asdot
        _asplain = self.asplain
        if _asdot is not None:
            children['asdot'] = _asdot.to_gdata()
        if _asplain is not None:
            children['asplain'] = _asplain.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__as_format:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format(asdot=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot.from_gdata(n.get_opt_container("asdot")), asplain=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain.from_gdata(n.get_opt_container("asplain")))
        return Cisco_IOS_XR_um_router_bgp_cfg__as_format()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__as_format:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format(asdot=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot.from_xml(yang.gdata.get_xml_opt_child(n, "asdot")), asplain=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain.from_xml(yang.gdata.get_xml_opt_child(n, "asplain")))
        return Cisco_IOS_XR_um_router_bgp_cfg__as_format()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__bmp_server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(yang.adata.MNode):
    host_name: str
    port: ?int

    mut def __init__(self, host_name: str, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.host_name = host_name
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        _port = self.port
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name=n.get_str("host-name"), port=n.get_opt_int("port"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name=yang.gdata.from_xml_str(n, "host-name"), port=yang.gdata.from_xml_opt_int(n, "port"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__flapping_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__max_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__initial_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__spread(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(yang.adata.MNode):
    initial_delay: int
    spread: ?int

    mut def __init__(self, initial_delay: int, spread: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.initial_delay = initial_delay
        self.spread = spread

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_delay = self.initial_delay
        _spread = self.spread
        if _initial_delay is not None:
            children['initial-delay'] = yang.gdata.Leaf('uint32', _initial_delay)
        if _spread is not None:
            children['spread'] = yang.gdata.Leaf('uint32', _spread)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay=n.get_int("initial-delay"), spread=n.get_opt_int("spread"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay=yang.gdata.from_xml_int(n, "initial-delay"), spread=yang.gdata.from_xml_opt_int(n, "spread"))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(yang.adata.MNode):
    delay: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay
    skip: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip

    mut def __init__(self, delay: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay=None, skip: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.delay = delay
        self_delay = self.delay
        if self_delay is not None:
            self_delay._parent = self
        self.skip = skip
        self_skip = self.skip
        if self_skip is not None:
            self_skip._parent = self

    mut def create_delay(self, initial_delay):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay)
        self.delay = res
        return res

    mut def create_skip(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        self.skip = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay = self.delay
        _skip = self.skip
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        if _skip is not None:
            children['skip'] = _skip.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(delay=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay.from_gdata(n.get_opt_container("delay")), skip=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip.from_gdata(n.get_opt_container("skip")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(delay=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay.from_xml(yang.gdata.get_xml_opt_child(n, "delay")), skip=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip.from_xml(yang.gdata.get_xml_opt_child(n, "skip")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__stats_reporting_period(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__dscp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__precedence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__keep_alive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(yang.adata.MNode):
    keep_alive: ?int
    mss: ?int

    mut def __init__(self, keep_alive: ?int, mss: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.keep_alive = keep_alive
        self.mss = mss

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keep_alive = self.keep_alive
        _mss = self.mss
        if _keep_alive is not None:
            children['keep-alive'] = yang.gdata.Leaf('uint32', _keep_alive)
        if _mss is not None:
            children['mss'] = yang.gdata.Leaf('uint32', _mss)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(keep_alive=n.get_opt_int("keep-alive"), mss=n.get_opt_int("mss"))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(keep_alive=yang.gdata.from_xml_opt_int(n, "keep-alive"), mss=yang.gdata.from_xml_opt_int(n, "mss"))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(yang.adata.MNode):
    bmp_server_id: int
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown
    host: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host
    initial_delay: ?int
    flapping_delay: ?int
    max_buffer_size: ?int
    initial_refresh: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh
    stats_reporting_period: ?int
    description: ?str
    dscp: ?str
    precedence: ?str
    update_source: ?str
    vrf: ?str
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp

    mut def __init__(self, bmp_server_id: int, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown=None, host: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host=None, initial_delay: ?int, flapping_delay: ?int, max_buffer_size: ?int, initial_refresh: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh=None, stats_reporting_period: ?int, description: ?str, dscp: ?str, precedence: ?str, update_source: ?str, vrf: ?str, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.bmp_server_id = bmp_server_id
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.host = host
        self_host = self.host
        if self_host is not None:
            self_host._parent = self
        self.initial_delay = initial_delay
        self.flapping_delay = flapping_delay
        self.max_buffer_size = max_buffer_size
        if initial_refresh is not None:
            self.initial_refresh = initial_refresh
        else:
            self.initial_refresh = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()
        self_initial_refresh = self.initial_refresh
        if self_initial_refresh is not None:
            self_initial_refresh._parent = self
        self.stats_reporting_period = stats_reporting_period
        self.description = description
        self.dscp = dscp
        self.precedence = precedence
        self.update_source = update_source
        self.vrf = vrf
        if tcp is not None:
            self.tcp = tcp
        else:
            self.tcp = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()
        self_tcp = self.tcp
        if self_tcp is not None:
            self_tcp._parent = self

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        self.shutdown = res
        return res

    mut def create_host(self, host_name):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name)
        self.host = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_server_id = self.bmp_server_id
        _shutdown = self.shutdown
        _host = self.host
        _initial_delay = self.initial_delay
        _flapping_delay = self.flapping_delay
        _max_buffer_size = self.max_buffer_size
        _initial_refresh = self.initial_refresh
        _stats_reporting_period = self.stats_reporting_period
        _description = self.description
        _dscp = self.dscp
        _precedence = self.precedence
        _update_source = self.update_source
        _vrf = self.vrf
        _tcp = self.tcp
        if _bmp_server_id is not None:
            children['bmp-server-id'] = yang.gdata.Leaf('uint32', _bmp_server_id)
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        if _host is not None:
            children['host'] = _host.to_gdata()
        if _initial_delay is not None:
            children['initial-delay'] = yang.gdata.Leaf('uint32', _initial_delay)
        if _flapping_delay is not None:
            children['flapping-delay'] = yang.gdata.Leaf('uint32', _flapping_delay)
        if _max_buffer_size is not None:
            children['max-buffer-size'] = yang.gdata.Leaf('uint32', _max_buffer_size)
        if _initial_refresh is not None:
            children['initial-refresh'] = _initial_refresh.to_gdata()
        if _stats_reporting_period is not None:
            children['stats-reporting-period'] = yang.gdata.Leaf('uint32', _stats_reporting_period)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _dscp is not None:
            children['dscp'] = yang.gdata.Leaf('enumeration', _dscp)
        if _precedence is not None:
            children['precedence'] = yang.gdata.Leaf('enumeration', _precedence)
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf)
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.bmp_server_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id=n.get_int("bmp-server-id"), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown.from_gdata(n.get_opt_container("shutdown")), host=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host.from_gdata(n.get_opt_container("host")), initial_delay=n.get_opt_int("initial-delay"), flapping_delay=n.get_opt_int("flapping-delay"), max_buffer_size=n.get_opt_int("max-buffer-size"), initial_refresh=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh.from_gdata(n.get_opt_container("initial-refresh")), stats_reporting_period=n.get_opt_int("stats-reporting-period"), description=n.get_opt_str("description"), dscp=n.get_opt_str("dscp"), precedence=n.get_opt_str("precedence"), update_source=n.get_opt_str("update-source"), vrf=n.get_opt_str("vrf"), tcp=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp.from_gdata(n.get_opt_container("tcp")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id=yang.gdata.from_xml_int(n, "bmp-server-id"), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")), host=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host.from_xml(yang.gdata.get_xml_opt_child(n, "host")), initial_delay=yang.gdata.from_xml_opt_int(n, "initial-delay"), flapping_delay=yang.gdata.from_xml_opt_int(n, "flapping-delay"), max_buffer_size=yang.gdata.from_xml_opt_int(n, "max-buffer-size"), initial_refresh=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh.from_xml(yang.gdata.get_xml_opt_child(n, "initial-refresh")), stats_reporting_period=yang.gdata.from_xml_opt_int(n, "stats-reporting-period"), description=yang.gdata.from_xml_opt_str(n, "description"), dscp=yang.gdata.from_xml_opt_str(n, "dscp"), precedence=yang.gdata.from_xml_opt_str(n, "precedence"), update_source=yang.gdata.from_xml_opt_str(n, "update-source"), vrf=yang.gdata.from_xml_opt_str(n, "vrf"), tcp=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp.from_xml(yang.gdata.get_xml_opt_child(n, "tcp")))

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'server'
        self.elements = elements

    mut def create(self, bmp_server_id, host):
        for e in self.elements:
            match = True
            if e.bmp_server_id != bmp_server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id, host)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['bmp-server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__max_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__mode_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__scan_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(yang.adata.MNode):
    mode_name: str
    advertisement_interval: ?int
    scan_time: ?int

    mut def __init__(self, mode_name: str, advertisement_interval: ?int, scan_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.mode_name = mode_name
        self.advertisement_interval = advertisement_interval
        self.scan_time = scan_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode_name = self.mode_name
        _advertisement_interval = self.advertisement_interval
        _scan_time = self.scan_time
        if _mode_name is not None:
            children['mode-name'] = yang.gdata.Leaf('enumeration', _mode_name)
        if _advertisement_interval is not None:
            children['advertisement-interval'] = yang.gdata.Leaf('uint32', _advertisement_interval)
        if _scan_time is not None:
            children['scan-time'] = yang.gdata.Leaf('uint32', _scan_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.mode_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name=n.get_str("mode-name"), advertisement_interval=n.get_opt_int("advertisement-interval"), scan_time=n.get_opt_int("scan-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name=yang.gdata.from_xml_str(n, "mode-name"), advertisement_interval=yang.gdata.from_xml_opt_int(n, "advertisement-interval"), scan_time=yang.gdata.from_xml_opt_int(n, "scan-time"))

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'bmp-mode'
        self.elements = elements

    mut def create(self, mode_name):
        for e in self.elements:
            match = True
            if e.mode_name != mode_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['mode-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(yang.adata.MNode):
    bmp_mode: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode

    mut def __init__(self, bmp_mode: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.bmp_mode = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(elements=bmp_mode)
        self.bmp_mode._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_mode = self.bmp_mode
        if _bmp_mode is not None:
            children['bmp-mode'] = _bmp_mode.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(bmp_mode=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode.from_gdata(n.get_opt_list("bmp-mode")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(bmp_mode=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode.from_xml(yang.gdata.get_xml_children(n, "bmp-mode")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(yang.adata.MNode):
    bmp_modes: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes

    mut def __init__(self, bmp_modes: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if bmp_modes is not None:
            self.bmp_modes = bmp_modes
        else:
            self.bmp_modes = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()
        self_bmp_modes = self.bmp_modes
        if self_bmp_modes is not None:
            self_bmp_modes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_modes = self.bmp_modes
        if _bmp_modes is not None:
            children['bmp-modes'] = _bmp_modes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(bmp_modes=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes.from_gdata(n.get_opt_container("bmp-modes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(bmp_modes=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes.from_xml(yang.gdata.get_xml_opt_child(n, "bmp-modes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(yang.adata.MNode):
    max_buffer_size: ?int
    route_monitoring: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring

    mut def __init__(self, max_buffer_size: ?int, route_monitoring: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.max_buffer_size = max_buffer_size
        if route_monitoring is not None:
            self.route_monitoring = route_monitoring
        else:
            self.route_monitoring = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()
        self_route_monitoring = self.route_monitoring
        if self_route_monitoring is not None:
            self_route_monitoring._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_buffer_size = self.max_buffer_size
        _route_monitoring = self.route_monitoring
        if _max_buffer_size is not None:
            children['max-buffer-size'] = yang.gdata.Leaf('uint32', _max_buffer_size)
        if _route_monitoring is not None:
            children['route-monitoring'] = _route_monitoring.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(max_buffer_size=n.get_opt_int("max-buffer-size"), route_monitoring=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring.from_gdata(n.get_opt_container("route-monitoring")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(max_buffer_size=yang.gdata.from_xml_opt_int(n, "max-buffer-size"), route_monitoring=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring.from_xml(yang.gdata.get_xml_opt_child(n, "route-monitoring")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server
    all: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]=[], all: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(elements=server)
        self.server._parent = self
        if all is not None:
            self.all = all
        else:
            self.all = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()
        self_all = self.all
        if self_all is not None:
            self_all._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        _all = self.all
        if _server is not None:
            children['server'] = _server.to_gdata()
        if _all is not None:
            children['all'] = _all.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server.from_gdata(n.get_opt_list("server")), all=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all.from_gdata(n.get_opt_container("all")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server.from_xml(yang.gdata.get_xml_children(n, "server")), all=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all.from_xml(yang.gdata.get_xml_opt_child(n, "all")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if servers is not None:
            self.servers = servers
        else:
            self.servers = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()
        self_servers = self.servers
        if self_servers is not None:
            self_servers._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp(servers=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers.from_gdata(n.get_opt_container("servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp(servers=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers.from_xml(yang.gdata.get_xml_opt_child(n, "servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(yang.adata.MNode):
    interface_name: ?str

    mut def __init__(self, interface_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.interface_name = interface_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(interface_name=n.get_opt_str("interface-name"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(interface_name=yang.gdata.from_xml_opt_str(n, "interface-name"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface

    mut def __init__(self, interface: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if interface is not None:
            self.interface = interface
        else:
            self.interface = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()
        self_interface = self.interface
        if self_interface is not None:
            self_interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(interface=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface.from_gdata(n.get_opt_container("interface")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(interface=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface.from_xml(yang.gdata.get_xml_opt_child(n, "interface")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__refresh_time_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(yang.adata.MNode):
    refresh_time_value: ?int
    off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off

    mut def __init__(self, refresh_time_value: ?int, off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.refresh_time_value = refresh_time_value
        self.off = off
        self_off = self.off
        if self_off is not None:
            self_off._parent = self

    mut def create_off(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        self.off = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _refresh_time_value = self.refresh_time_value
        _off = self.off
        if _refresh_time_value is not None:
            children['refresh-time-value'] = yang.gdata.Leaf('uint32', _refresh_time_value)
        if _off is not None:
            children['off'] = _off.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(refresh_time_value=n.get_opt_int("refresh-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off.from_gdata(n.get_opt_container("off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(refresh_time_value=yang.gdata.from_xml_opt_int(n, "refresh-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off.from_xml(yang.gdata.get_xml_opt_child(n, "off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__response_time_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(yang.adata.MNode):
    response_time_value: ?int
    off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off

    mut def __init__(self, response_time_value: ?int, off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.response_time_value = response_time_value
        self.off = off
        self_off = self.off
        if self_off is not None:
            self_off._parent = self

    mut def create_off(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        self.off = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _response_time_value = self.response_time_value
        _off = self.off
        if _response_time_value is not None:
            children['response-time-value'] = yang.gdata.Leaf('uint32', _response_time_value)
        if _off is not None:
            children['off'] = _off.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(response_time_value=n.get_opt_int("response-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off.from_gdata(n.get_opt_container("off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(response_time_value=yang.gdata.from_xml_opt_int(n, "response-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off.from_xml(yang.gdata.get_xml_opt_child(n, "off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__purge_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(yang.adata.MNode):
    port: ?int

    mut def __init__(self, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(port=n.get_opt_int("port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(port=yang.gdata.from_xml_opt_int(n, "port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(yang.adata.MNode):
    port: ?int

    mut def __init__(self, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(port=n.get_opt_int("port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(port=yang.gdata.from_xml_opt_int(n, "port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(yang.adata.MNode):
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp
    ssh: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh

    mut def __init__(self, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp=None, ssh: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if tcp is not None:
            self.tcp = tcp
        else:
            self.tcp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()
        self_tcp = self.tcp
        if self_tcp is not None:
            self_tcp._parent = self
        if ssh is not None:
            self.ssh = ssh
        else:
            self.ssh = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()
        self_ssh = self.ssh
        if self_ssh is not None:
            self_ssh._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tcp = self.tcp
        _ssh = self.ssh
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        if _ssh is not None:
            children['ssh'] = _ssh.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp.from_gdata(n.get_opt_container("tcp")), ssh=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh.from_gdata(n.get_opt_container("ssh")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp.from_xml(yang.gdata.get_xml_opt_child(n, "tcp")), ssh=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh.from_xml(yang.gdata.get_xml_opt_child(n, "ssh")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(yang.adata.MNode):
    server_id: str
    bind_source: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source
    preference: ?int
    refresh_time: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time
    response_time: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time
    purge_time: ?int
    username: ?str
    password: ?str
    transport: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown

    mut def __init__(self, server_id: str, bind_source: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source=None, preference: ?int, refresh_time: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time=None, response_time: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time=None, purge_time: ?int, username: ?str, password: ?str, transport: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport=None, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server_id = server_id
        if bind_source is not None:
            self.bind_source = bind_source
        else:
            self.bind_source = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()
        self_bind_source = self.bind_source
        if self_bind_source is not None:
            self_bind_source._parent = self
        self.preference = preference
        if refresh_time is not None:
            self.refresh_time = refresh_time
        else:
            self.refresh_time = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()
        self_refresh_time = self.refresh_time
        if self_refresh_time is not None:
            self_refresh_time._parent = self
        if response_time is not None:
            self.response_time = response_time
        else:
            self.response_time = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()
        self_response_time = self.response_time
        if self_response_time is not None:
            self_response_time._parent = self
        self.purge_time = purge_time
        self.username = username
        self.password = password
        if transport is not None:
            self.transport = transport
        else:
            self.transport = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()
        self_transport = self.transport
        if self_transport is not None:
            self_transport._parent = self
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        self.shutdown = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server_id = self.server_id
        _bind_source = self.bind_source
        _preference = self.preference
        _refresh_time = self.refresh_time
        _response_time = self.response_time
        _purge_time = self.purge_time
        _username = self.username
        _password = self.password
        _transport = self.transport
        _shutdown = self.shutdown
        if _server_id is not None:
            children['server-id'] = yang.gdata.Leaf('string', _server_id)
        if _bind_source is not None:
            children['bind-source'] = _bind_source.to_gdata()
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('uint32', _preference)
        if _refresh_time is not None:
            children['refresh-time'] = _refresh_time.to_gdata()
        if _response_time is not None:
            children['response-time'] = _response_time.to_gdata()
        if _purge_time is not None:
            children['purge-time'] = yang.gdata.Leaf('uint32', _purge_time)
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.server_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id=n.get_str("server-id"), bind_source=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source.from_gdata(n.get_opt_container("bind-source")), preference=n.get_opt_int("preference"), refresh_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time.from_gdata(n.get_opt_container("refresh-time")), response_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time.from_gdata(n.get_opt_container("response-time")), purge_time=n.get_opt_int("purge-time"), username=n.get_opt_str("username"), password=n.get_opt_str("password"), transport=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport.from_gdata(n.get_opt_container("transport")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown.from_gdata(n.get_opt_container("shutdown")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id=yang.gdata.from_xml_str(n, "server-id"), bind_source=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source.from_xml(yang.gdata.get_xml_opt_child(n, "bind-source")), preference=yang.gdata.from_xml_opt_int(n, "preference"), refresh_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time.from_xml(yang.gdata.get_xml_opt_child(n, "refresh-time")), response_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time.from_xml(yang.gdata.get_xml_opt_child(n, "response-time")), purge_time=yang.gdata.from_xml_opt_int(n, "purge-time"), username=yang.gdata.from_xml_opt_str(n, "username"), password=yang.gdata.from_xml_opt_str(n, "password"), transport=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport.from_xml(yang.gdata.get_xml_opt_child(n, "transport")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'server'
        self.elements = elements

    mut def create(self, server_id):
        for e in self.elements:
            match = True
            if e.server_id != server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(elements=server)
        self.server._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        if _server is not None:
            children['server'] = _server.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server.from_gdata(n.get_opt_list("server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server.from_xml(yang.gdata.get_xml_children(n, "server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__minimum_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__maximum_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__origin_as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(yang.adata.MNode):
    address: str
    minimum_prefix_length: int
    maximum_prefix_length: int
    origin_as_number: int

    mut def __init__(self, address: str, minimum_prefix_length: int, maximum_prefix_length: int, origin_as_number: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address = address
        self.minimum_prefix_length = minimum_prefix_length
        self.maximum_prefix_length = maximum_prefix_length
        self.origin_as_number = origin_as_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _minimum_prefix_length = self.minimum_prefix_length
        _maximum_prefix_length = self.maximum_prefix_length
        _origin_as_number = self.origin_as_number
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        if _minimum_prefix_length is not None:
            children['minimum-prefix-length'] = yang.gdata.Leaf('union', _minimum_prefix_length)
        if _maximum_prefix_length is not None:
            children['maximum-prefix-length'] = yang.gdata.Leaf('union', _maximum_prefix_length)
        if _origin_as_number is not None:
            children['origin-as-number'] = yang.gdata.Leaf('uint32', _origin_as_number)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address), yang.gdata.yang_str(self.minimum_prefix_length), yang.gdata.yang_str(self.maximum_prefix_length), yang.gdata.yang_str(self.origin_as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address=n.get_str("address"), minimum_prefix_length=n.get_int("minimum-prefix-length"), maximum_prefix_length=n.get_int("maximum-prefix-length"), origin_as_number=n.get_int("origin-as-number"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address=yang.gdata.from_xml_str(n, "address"), minimum_prefix_length=yang.gdata.from_xml_int(n, "minimum-prefix-length"), maximum_prefix_length=yang.gdata.from_xml_int(n, "maximum-prefix-length"), origin_as_number=yang.gdata.from_xml_int(n, "origin-as-number"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'route'
        self.elements = elements

    mut def create(self, address, minimum_prefix_length, maximum_prefix_length, origin_as_number):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if e.minimum_prefix_length != minimum_prefix_length:
                match = False
                continue
            if e.maximum_prefix_length != maximum_prefix_length:
                match = False
                continue
            if e.origin_as_number != origin_as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address, minimum_prefix_length, maximum_prefix_length, origin_as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address', 'minimum-prefix-length', 'maximum-prefix-length', 'origin-as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(yang.adata.MNode):
    route: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route

    mut def __init__(self, route: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(elements=route)
        self.route._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route = self.route
        if _route is not None:
            children['route'] = _route.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(route=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route.from_gdata(n.get_opt_list("route")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(route=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route.from_xml(yang.gdata.get_xml_children(n, "route")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__datafile(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers
    routes: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes
    datafile: ?str

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers=None, routes: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes=None, datafile: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if servers is not None:
            self.servers = servers
        else:
            self.servers = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()
        self_servers = self.servers
        if self_servers is not None:
            self_servers._parent = self
        if routes is not None:
            self.routes = routes
        else:
            self.routes = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()
        self_routes = self.routes
        if self_routes is not None:
            self_routes._parent = self
        self.datafile = datafile

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        _routes = self.routes
        _datafile = self.datafile
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        if _routes is not None:
            children['routes'] = _routes.to_gdata()
        if _datafile is not None:
            children['datafile'] = yang.gdata.Leaf('string', _datafile)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers.from_gdata(n.get_opt_container("servers")), routes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes.from_gdata(n.get_opt_container("routes")), datafile=n.get_opt_str("datafile"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers.from_xml(yang.gdata.get_xml_opt_child(n, "servers")), routes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes.from_xml(yang.gdata.get_xml_opt_child(n, "routes")), datafile=yang.gdata.from_xml_opt_str(n, "datafile"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__neighbor_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__number_of_buffers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers(yang.adata.MNode):
    number_of_buffers: int
    non_circular: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular

    mut def __init__(self, number_of_buffers: int, non_circular: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.number_of_buffers = number_of_buffers
        self.non_circular = non_circular
        self_non_circular = self.non_circular
        if self_non_circular is not None:
            self_non_circular._parent = self

    mut def create_non_circular(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular()
        self.non_circular = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _number_of_buffers = self.number_of_buffers
        _non_circular = self.non_circular
        if _number_of_buffers is not None:
            children['number-of-buffers'] = yang.gdata.Leaf('uint32', _number_of_buffers)
        if _non_circular is not None:
            children['non-circular'] = _non_circular.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers(number_of_buffers=n.get_int("number-of-buffers"), non_circular=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular.from_gdata(n.get_opt_container("non-circular")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers(number_of_buffers=yang.gdata.from_xml_int(n, "number-of-buffers"), non_circular=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers__non_circular.from_xml(yang.gdata.get_xml_opt_child(n, "non-circular")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message(yang.adata.MNode):
    buffers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers

    mut def __init__(self, buffers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.buffers = buffers
        self_buffers = self.buffers
        if self_buffers is not None:
            self_buffers._parent = self

    mut def create_buffers(self, number_of_buffers):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers(number_of_buffers)
        self.buffers = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _buffers = self.buffers
        if _buffers is not None:
            children['buffers'] = _buffers.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message(buffers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers.from_gdata(n.get_opt_container("buffers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message(buffers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message__buffers.from_xml(yang.gdata.get_xml_opt_child(n, "buffers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter__group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter(yang.adata.MNode):
    group: ?str

    mut def __init__(self, group: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.group = group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = yang.gdata.Leaf('string', _group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter(group=n.get_opt_str("group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter(group=yang.gdata.from_xml_opt_str(n, "group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering(yang.adata.MNode):
    message: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message
    logging: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging
    attribute_filter: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter

    mut def __init__(self, message: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message=None, logging: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging=None, attribute_filter: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if message is not None:
            self.message = message
        else:
            self.message = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message()
        self_message = self.message
        if self_message is not None:
            self_message._parent = self
        if logging is not None:
            self.logging = logging
        else:
            self.logging = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging()
        self_logging = self.logging
        if self_logging is not None:
            self_logging._parent = self
        if attribute_filter is not None:
            self.attribute_filter = attribute_filter
        else:
            self.attribute_filter = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter()
        self_attribute_filter = self.attribute_filter
        if self_attribute_filter is not None:
            self_attribute_filter._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _message = self.message
        _logging = self.logging
        _attribute_filter = self.attribute_filter
        if _message is not None:
            children['message'] = _message.to_gdata()
        if _logging is not None:
            children['logging'] = _logging.to_gdata()
        if _attribute_filter is not None:
            children['attribute-filter'] = _attribute_filter.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering(message=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message.from_gdata(n.get_opt_container("message")), logging=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging.from_gdata(n.get_opt_container("logging")), attribute_filter=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter.from_gdata(n.get_opt_container("attribute-filter")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering(message=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__message.from_xml(yang.gdata.get_xml_opt_child(n, "message")), logging=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__logging.from_xml(yang.gdata.get_xml_opt_child(n, "logging")), attribute_filter=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering__attribute_filter.from_xml(yang.gdata.get_xml_opt_child(n, "attribute-filter")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast(yang.adata.MNode):
    labeled_unicast: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast

    mut def __init__(self, labeled_unicast: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.labeled_unicast = labeled_unicast
        self_labeled_unicast = self.labeled_unicast
        if self_labeled_unicast is not None:
            self_labeled_unicast._parent = self

    mut def create_labeled_unicast(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast()
        self.labeled_unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _labeled_unicast = self.labeled_unicast
        if _labeled_unicast is not None:
            children['labeled-unicast'] = _labeled_unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast(labeled_unicast=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast.from_gdata(n.get_opt_container("labeled-unicast")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast(labeled_unicast=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast__labeled_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "labeled-unicast")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi(yang.adata.MNode):
    unicast: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if unicast is not None:
            self.unicast = unicast
        else:
            self.unicast = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast()
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi(unicast=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast.from_gdata(n.get_opt_container("unicast")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi(unicast=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge(yang.adata.MNode):
    safi: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi

    mut def __init__(self, safi: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if safi is not None:
            self.safi = safi
        else:
            self.safi = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi()
        self_safi = self.safi
        if self_safi is not None:
            self_safi._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _safi = self.safi
        if _safi is not None:
            children['safi'] = _safi.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge(safi=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi.from_gdata(n.get_opt_container("safi")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge(safi=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge__safi.from_xml(yang.gdata.get_xml_opt_child(n, "safi")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling(yang.adata.MNode):
    avoid_reset: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset
    treat_as_withdraw: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw

    mut def __init__(self, avoid_reset: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset=None, treat_as_withdraw: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.avoid_reset = avoid_reset
        self_avoid_reset = self.avoid_reset
        if self_avoid_reset is not None:
            self_avoid_reset._parent = self
        self.treat_as_withdraw = treat_as_withdraw
        self_treat_as_withdraw = self.treat_as_withdraw
        if self_treat_as_withdraw is not None:
            self_treat_as_withdraw._parent = self

    mut def create_avoid_reset(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset()
        self.avoid_reset = res
        return res

    mut def create_treat_as_withdraw(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw()
        self.treat_as_withdraw = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _avoid_reset = self.avoid_reset
        _treat_as_withdraw = self.treat_as_withdraw
        if _avoid_reset is not None:
            children['avoid-reset'] = _avoid_reset.to_gdata()
        if _treat_as_withdraw is not None:
            children['treat-as-withdraw'] = _treat_as_withdraw.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling(avoid_reset=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset.from_gdata(n.get_opt_container("avoid-reset")), treat_as_withdraw=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw.from_gdata(n.get_opt_container("treat-as-withdraw")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling(avoid_reset=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__avoid_reset.from_xml(yang.gdata.get_xml_opt_child(n, "avoid-reset")), treat_as_withdraw=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling__treat_as_withdraw.from_xml(yang.gdata.get_xml_opt_child(n, "treat-as-withdraw")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in(yang.adata.MNode):
    filtering: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering
    merge: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge
    error_handling: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling

    mut def __init__(self, filtering: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering=None, merge: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge=None, error_handling: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.filtering = filtering
        self_filtering = self.filtering
        if self_filtering is not None:
            self_filtering._parent = self
        if merge is not None:
            self.merge = merge
        else:
            self.merge = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge()
        self_merge = self.merge
        if self_merge is not None:
            self_merge._parent = self
        if error_handling is not None:
            self.error_handling = error_handling
        else:
            self.error_handling = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling()
        self_error_handling = self.error_handling
        if self_error_handling is not None:
            self_error_handling._parent = self

    mut def create_filtering(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering()
        self.filtering = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _filtering = self.filtering
        _merge = self.merge
        _error_handling = self.error_handling
        if _filtering is not None:
            children['filtering'] = _filtering.to_gdata()
        if _merge is not None:
            children['merge'] = _merge.to_gdata()
        if _error_handling is not None:
            children['error-handling'] = _error_handling.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in(filtering=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering.from_gdata(n.get_opt_container("filtering")), merge=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge.from_gdata(n.get_opt_container("merge")), error_handling=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling.from_gdata(n.get_opt_container("error-handling")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in(filtering=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__filtering.from_xml(yang.gdata.get_xml_opt_child(n, "filtering")), merge=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__merge.from_xml(yang.gdata.get_xml_opt_child(n, "merge")), error_handling=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in__error_handling.from_xml(yang.gdata.get_xml_opt_child(n, "error-handling")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update(yang.adata.MNode):
    in_: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in

    mut def __init__(self, in_: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if in_ is not None:
            self.in_ = in_
        else:
            self.in_ = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in()
        self_in_ = self.in_
        if self_in_ is not None:
            self_in_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_ = self.in_
        if _in_ is not None:
            children['in'] = _in_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update(in_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in.from_gdata(n.get_opt_container("in")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update(in_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update__in.from_xml(yang.gdata.get_xml_opt_child(n, "in")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__local_preference_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference(yang.adata.MNode):
    local_preference_value: ?int
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable

    mut def __init__(self, local_preference_value: ?int, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.local_preference_value = local_preference_value
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _local_preference_value = self.local_preference_value
        _inheritance_disable = self.inheritance_disable
        if _local_preference_value is not None:
            children['local-preference-value'] = yang.gdata.Leaf('uint32', _local_preference_value)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference(local_preference_value=n.get_opt_int("local-preference-value"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference(local_preference_value=yang.gdata.from_xml_opt_int(n, "local-preference-value"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__number_of_as_prepends(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends(yang.adata.MNode):
    number_of_as_prepends: ?int
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable

    mut def __init__(self, number_of_as_prepends: ?int, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.number_of_as_prepends = number_of_as_prepends
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _number_of_as_prepends = self.number_of_as_prepends
        _inheritance_disable = self.inheritance_disable
        if _number_of_as_prepends is not None:
            children['number-of-as-prepends'] = yang.gdata.Leaf('uint32', _number_of_as_prepends)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends(number_of_as_prepends=n.get_opt_int("number-of-as-prepends"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends(number_of_as_prepends=yang.gdata.from_xml_opt_int(n, "number-of-as-prepends"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__bandwidth_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__bandwidth_threshold_high(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__percentage_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__percentage_threshold_high(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware(yang.adata.MNode):
    bandwidth_threshold: ?int
    bandwidth_threshold_high: ?int
    percentage_threshold: ?int
    percentage_threshold_high: ?int
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable

    mut def __init__(self, bandwidth_threshold: ?int, bandwidth_threshold_high: ?int, percentage_threshold: ?int, percentage_threshold_high: ?int, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.bandwidth_threshold = bandwidth_threshold
        self.bandwidth_threshold_high = bandwidth_threshold_high
        self.percentage_threshold = percentage_threshold
        self.percentage_threshold_high = percentage_threshold_high
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bandwidth_threshold = self.bandwidth_threshold
        _bandwidth_threshold_high = self.bandwidth_threshold_high
        _percentage_threshold = self.percentage_threshold
        _percentage_threshold_high = self.percentage_threshold_high
        _inheritance_disable = self.inheritance_disable
        if _bandwidth_threshold is not None:
            children['bandwidth-threshold'] = yang.gdata.Leaf('uint32', _bandwidth_threshold)
        if _bandwidth_threshold_high is not None:
            children['bandwidth-threshold-high'] = yang.gdata.Leaf('uint32', _bandwidth_threshold_high)
        if _percentage_threshold is not None:
            children['percentage-threshold'] = yang.gdata.Leaf('uint32', _percentage_threshold)
        if _percentage_threshold_high is not None:
            children['percentage-threshold-high'] = yang.gdata.Leaf('uint32', _percentage_threshold_high)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware(bandwidth_threshold=n.get_opt_int("bandwidth-threshold"), bandwidth_threshold_high=n.get_opt_int("bandwidth-threshold-high"), percentage_threshold=n.get_opt_int("percentage-threshold"), percentage_threshold_high=n.get_opt_int("percentage-threshold-high"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware(bandwidth_threshold=yang.gdata.from_xml_opt_int(n, "bandwidth-threshold"), bandwidth_threshold_high=yang.gdata.from_xml_opt_int(n, "bandwidth-threshold-high"), percentage_threshold=yang.gdata.from_xml_opt_int(n, "percentage-threshold"), percentage_threshold_high=yang.gdata.from_xml_opt_int(n, "percentage-threshold-high"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance(yang.adata.MNode):
    local_preference: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference
    as_prepends: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends
    activate: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate
    bandwidth_aware: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware

    mut def __init__(self, local_preference: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference=None, as_prepends: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends=None, activate: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate=None, bandwidth_aware: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.local_preference = local_preference
        self_local_preference = self.local_preference
        if self_local_preference is not None:
            self_local_preference._parent = self
        self.as_prepends = as_prepends
        self_as_prepends = self.as_prepends
        if self_as_prepends is not None:
            self_as_prepends._parent = self
        self.activate = activate
        self_activate = self.activate
        if self_activate is not None:
            self_activate._parent = self
        if bandwidth_aware is not None:
            self.bandwidth_aware = bandwidth_aware
        else:
            self.bandwidth_aware = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware()
        self_bandwidth_aware = self.bandwidth_aware
        if self_bandwidth_aware is not None:
            self_bandwidth_aware._parent = self

    mut def create_local_preference(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference()
        self.local_preference = res
        return res

    mut def create_as_prepends(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends()
        self.as_prepends = res
        return res

    mut def create_activate(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate()
        self.activate = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _local_preference = self.local_preference
        _as_prepends = self.as_prepends
        _activate = self.activate
        _bandwidth_aware = self.bandwidth_aware
        if _local_preference is not None:
            children['local-preference'] = _local_preference.to_gdata()
        if _as_prepends is not None:
            children['as-prepends'] = _as_prepends.to_gdata()
        if _activate is not None:
            children['activate'] = _activate.to_gdata()
        if _bandwidth_aware is not None:
            children['bandwidth-aware'] = _bandwidth_aware.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance(local_preference=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference.from_gdata(n.get_opt_container("local-preference")), as_prepends=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends.from_gdata(n.get_opt_container("as-prepends")), activate=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate.from_gdata(n.get_opt_container("activate")), bandwidth_aware=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware.from_gdata(n.get_opt_container("bandwidth-aware")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance(local_preference=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__local_preference.from_xml(yang.gdata.get_xml_opt_child(n, "local-preference")), as_prepends=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__as_prepends.from_xml(yang.gdata.get_xml_opt_child(n, "as-prepends")), activate=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__activate.from_xml(yang.gdata.get_xml_opt_child(n, "activate")), bandwidth_aware=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance__bandwidth_aware.from_xml(yang.gdata.get_xml_opt_child(n, "bandwidth-aware")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__remote_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__remote_as_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__session_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__neighbor_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(yang.adata.MNode):
    session_group: ?str
    neighbor_group: ?str

    mut def __init__(self, session_group: ?str, neighbor_group: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.session_group = session_group
        self.neighbor_group = neighbor_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _session_group = self.session_group
        _neighbor_group = self.neighbor_group
        if _session_group is not None:
            children['session-group'] = yang.gdata.Leaf('string', _session_group)
        if _neighbor_group is not None:
            children['neighbor-group'] = yang.gdata.Leaf('string', _neighbor_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(session_group=n.get_opt_str("session-group"), neighbor_group=n.get_opt_str("neighbor-group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(session_group=yang.gdata.from_xml_opt_str(n, "session-group"), neighbor_group=yang.gdata.from_xml_opt_str(n, "neighbor-group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval__time_in_seconds(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval__time_in_milliseconds(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval(yang.adata.MNode):
    time_in_seconds: int
    time_in_milliseconds: ?int

    mut def __init__(self, time_in_seconds: int, time_in_milliseconds: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.time_in_seconds = time_in_seconds
        self.time_in_milliseconds = time_in_milliseconds

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _time_in_seconds = self.time_in_seconds
        _time_in_milliseconds = self.time_in_milliseconds
        if _time_in_seconds is not None:
            children['time-in-seconds'] = yang.gdata.Leaf('uint32', _time_in_seconds)
        if _time_in_milliseconds is not None:
            children['time-in-milliseconds'] = yang.gdata.Leaf('uint32', _time_in_milliseconds)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval(time_in_seconds=n.get_int("time-in-seconds"), time_in_milliseconds=n.get_opt_int("time-in-milliseconds"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval(time_in_seconds=yang.gdata.from_xml_int(n, "time-in-seconds"), time_in_milliseconds=yang.gdata.from_xml_opt_int(n, "time-in-milliseconds"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__maximum_hop_count(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop(yang.adata.MNode):
    maximum_hop_count: int
    mpls: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls

    mut def __init__(self, maximum_hop_count: int, mpls: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.maximum_hop_count = maximum_hop_count
        self.mpls = mpls
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self

    mut def create_mpls(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls()
        self.mpls = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_hop_count = self.maximum_hop_count
        _mpls = self.mpls
        if _maximum_hop_count is not None:
            children['maximum-hop-count'] = yang.gdata.Leaf('uint32', _maximum_hop_count)
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop(maximum_hop_count=n.get_int("maximum-hop-count"), mpls=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls.from_gdata(n.get_opt_container("mpls")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop(maximum_hop_count=yang.gdata.from_xml_int(n, "maximum-hop-count"), mpls=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__initial_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss(yang.adata.MNode):
    initial_mss: ?int
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable

    mut def __init__(self, initial_mss: ?int, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.initial_mss = initial_mss
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_mss = self.initial_mss
        _inheritance_disable = self.inheritance_disable
        if _initial_mss is not None:
            children['initial-mss'] = yang.gdata.Leaf('uint32', _initial_mss)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss(initial_mss=n.get_opt_int("initial-mss"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss(initial_mss=yang.gdata.from_xml_opt_int(n, "initial-mss"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp(yang.adata.MNode):
    mss: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss
    mtu_discovery: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery

    mut def __init__(self, mss: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss=None, mtu_discovery: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.mss = mss
        self_mss = self.mss
        if self_mss is not None:
            self_mss._parent = self
        self.mtu_discovery = mtu_discovery
        self_mtu_discovery = self.mtu_discovery
        if self_mtu_discovery is not None:
            self_mtu_discovery._parent = self

    mut def create_mss(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss()
        self.mss = res
        return res

    mut def create_mtu_discovery(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery()
        self.mtu_discovery = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mss = self.mss
        _mtu_discovery = self.mtu_discovery
        if _mss is not None:
            children['mss'] = _mss.to_gdata()
        if _mtu_discovery is not None:
            children['mtu-discovery'] = _mtu_discovery.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp(mss=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss.from_gdata(n.get_opt_container("mss")), mtu_discovery=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery.from_gdata(n.get_opt_container("mtu-discovery")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp(mss=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mss.from_xml(yang.gdata.get_xml_opt_child(n, "mss")), mtu_discovery=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp__mtu_discovery.from_xml(yang.gdata.get_xml_opt_child(n, "mtu-discovery")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server__server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry(yang.adata.MNode):
    server_id: int

    mut def __init__(self, server_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server_id = server_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server_id = self.server_id
        if _server_id is not None:
            children['server-id'] = yang.gdata.Leaf('uint32', _server_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.server_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry(server_id=n.get_int("server-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry(server_id=yang.gdata.from_xml_int(n, "server-id"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'server'
        self.elements = elements

    mut def create(self, server_id):
        for e in self.elements:
            match = True
            if e.server_id != server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry(server_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server(elements=server)
        self.server._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        if _server is not None:
            children['server'] = _server.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server.from_gdata(n.get_opt_list("server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers__server.from_xml(yang.gdata.get_xml_children(n, "server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if servers is not None:
            self.servers = servers
        else:
            self.servers = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers()
        self_servers = self.servers
        if self_servers is not None:
            self_servers._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers.from_gdata(n.get_opt_container("servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate__servers.from_xml(yang.gdata.get_xml_opt_child(n, "servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect(yang.adata.MNode):
    strict_mode: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable

    mut def __init__(self, strict_mode: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.strict_mode = strict_mode
        self_strict_mode = self.strict_mode
        if self_strict_mode is not None:
            self_strict_mode._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_strict_mode(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode()
        self.strict_mode = res
        return res

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _strict_mode = self.strict_mode
        _inheritance_disable = self.inheritance_disable
        if _strict_mode is not None:
            children['strict-mode'] = _strict_mode.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect(strict_mode=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode.from_gdata(n.get_opt_container("strict-mode")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect(strict_mode=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__strict_mode.from_xml(yang.gdata.get_xml_opt_child(n, "strict-mode")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd(yang.adata.MNode):
    fast_detect: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect
    minimum_interval: ?int
    multiplier: ?int

    mut def __init__(self, fast_detect: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect=None, minimum_interval: ?int, multiplier: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.fast_detect = fast_detect
        self_fast_detect = self.fast_detect
        if self_fast_detect is not None:
            self_fast_detect._parent = self
        self.minimum_interval = minimum_interval
        self.multiplier = multiplier

    mut def create_fast_detect(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect()
        self.fast_detect = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fast_detect = self.fast_detect
        _minimum_interval = self.minimum_interval
        _multiplier = self.multiplier
        if _fast_detect is not None:
            children['fast-detect'] = _fast_detect.to_gdata()
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('uint32', _minimum_interval)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd(fast_detect=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect.from_gdata(n.get_opt_container("fast-detect")), minimum_interval=n.get_opt_int("minimum-interval"), multiplier=n.get_opt_int("multiplier"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd(fast_detect=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd__fast_detect.from_xml(yang.gdata.get_xml_opt_child(n, "fast-detect")), minimum_interval=yang.gdata.from_xml_opt_int(n, "minimum-interval"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain(yang.adata.MNode):
    name: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable

    mut def __init__(self, name: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.name = name
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _inheritance_disable = self.inheritance_disable
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain(name=n.get_opt_str("name"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain(name=yang.gdata.from_xml_opt_str(n, "name"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as(yang.adata.MNode):
    dual_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as

    mut def __init__(self, dual_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.dual_as = dual_as
        self_dual_as = self.dual_as
        if self_dual_as is not None:
            self_dual_as._parent = self

    mut def create_dual_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as()
        self.dual_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dual_as = self.dual_as
        if _dual_as is not None:
            children['dual-as'] = _dual_as.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as(dual_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as.from_gdata(n.get_opt_container("dual-as")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as(dual_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as__dual_as.from_xml(yang.gdata.get_xml_opt_child(n, "dual-as")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend(yang.adata.MNode):
    replace_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as

    mut def __init__(self, replace_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.replace_as = replace_as
        self_replace_as = self.replace_as
        if self_replace_as is not None:
            self_replace_as._parent = self

    mut def create_replace_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as()
        self.replace_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _replace_as = self.replace_as
        if _replace_as is not None:
            children['replace-as'] = _replace_as.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend(replace_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as.from_gdata(n.get_opt_container("replace-as")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend(replace_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend__replace_as.from_xml(yang.gdata.get_xml_opt_child(n, "replace-as")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as(yang.adata.MNode):
    as_number: ?value
    no_prepend: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable

    mut def __init__(self, as_number: ?value, no_prepend: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.no_prepend = no_prepend
        self_no_prepend = self.no_prepend
        if self_no_prepend is not None:
            self_no_prepend._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_no_prepend(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend()
        self.no_prepend = res
        return res

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _no_prepend = self.no_prepend
        _inheritance_disable = self.inheritance_disable
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('union', _as_number)
        if _no_prepend is not None:
            children['no-prepend'] = _no_prepend.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as(as_number=n.get_opt_value("as-number"), no_prepend=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend.from_gdata(n.get_opt_container("no-prepend")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as(as_number=yang.gdata.from_xml_opt_value(n, "as-number"), no_prepend=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__no_prepend.from_xml(yang.gdata.get_xml_opt_child(n, "no-prepend")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password(yang.adata.MNode):
    encrypted: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable

    mut def __init__(self, encrypted: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.encrypted = encrypted
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        _inheritance_disable = self.inheritance_disable
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password(encrypted=n.get_opt_str("encrypted"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password(encrypted=yang.gdata.from_xml_opt_str(n, "encrypted"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size__receive_socket_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size__bgp_read_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size(yang.adata.MNode):
    receive_socket_buffer_size: int
    bgp_read_buffer_size: ?int

    mut def __init__(self, receive_socket_buffer_size: int, bgp_read_buffer_size: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.receive_socket_buffer_size = receive_socket_buffer_size
        self.bgp_read_buffer_size = bgp_read_buffer_size

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive_socket_buffer_size = self.receive_socket_buffer_size
        _bgp_read_buffer_size = self.bgp_read_buffer_size
        if _receive_socket_buffer_size is not None:
            children['receive-socket-buffer-size'] = yang.gdata.Leaf('uint32', _receive_socket_buffer_size)
        if _bgp_read_buffer_size is not None:
            children['bgp-read-buffer-size'] = yang.gdata.Leaf('uint32', _bgp_read_buffer_size)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size(receive_socket_buffer_size=n.get_int("receive-socket-buffer-size"), bgp_read_buffer_size=n.get_opt_int("bgp-read-buffer-size"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size(receive_socket_buffer_size=yang.gdata.from_xml_int(n, "receive-socket-buffer-size"), bgp_read_buffer_size=yang.gdata.from_xml_opt_int(n, "bgp-read-buffer-size"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size__send_socket_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size__bgp_write_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size(yang.adata.MNode):
    send_socket_buffer_size: int
    bgp_write_buffer_size: ?int

    mut def __init__(self, send_socket_buffer_size: int, bgp_write_buffer_size: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.send_socket_buffer_size = send_socket_buffer_size
        self.bgp_write_buffer_size = bgp_write_buffer_size

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send_socket_buffer_size = self.send_socket_buffer_size
        _bgp_write_buffer_size = self.bgp_write_buffer_size
        if _send_socket_buffer_size is not None:
            children['send-socket-buffer-size'] = yang.gdata.Leaf('uint32', _send_socket_buffer_size)
        if _bgp_write_buffer_size is not None:
            children['bgp-write-buffer-size'] = yang.gdata.Leaf('uint32', _bgp_write_buffer_size)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size(send_socket_buffer_size=n.get_int("send-socket-buffer-size"), bgp_write_buffer_size=n.get_opt_int("bgp-write-buffer-size"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size(send_socket_buffer_size=yang.gdata.from_xml_int(n, "send-socket-buffer-size"), bgp_write_buffer_size=yang.gdata.from_xml_opt_int(n, "bgp-write-buffer-size"))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers__keepalive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers__holdtime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers__minimum_acceptable_holdtime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers(yang.adata.MNode):
    keepalive_interval: int
    holdtime: int
    minimum_acceptable_holdtime: ?int

    mut def __init__(self, keepalive_interval: int, holdtime: int, minimum_acceptable_holdtime: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.keepalive_interval = keepalive_interval
        self.holdtime = holdtime
        self.minimum_acceptable_holdtime = minimum_acceptable_holdtime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keepalive_interval = self.keepalive_interval
        _holdtime = self.holdtime
        _minimum_acceptable_holdtime = self.minimum_acceptable_holdtime
        if _keepalive_interval is not None:
            children['keepalive-interval'] = yang.gdata.Leaf('uint32', _keepalive_interval)
        if _holdtime is not None:
            children['holdtime'] = yang.gdata.Leaf('union', _holdtime)
        if _minimum_acceptable_holdtime is not None:
            children['minimum-acceptable-holdtime'] = yang.gdata.Leaf('union', _minimum_acceptable_holdtime)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers(keepalive_interval=n.get_int("keepalive-interval"), holdtime=n.get_int("holdtime"), minimum_acceptable_holdtime=n.get_opt_int("minimum-acceptable-holdtime"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers(keepalive_interval=yang.gdata.from_xml_int(n, "keepalive-interval"), holdtime=yang.gdata.from_xml_int(n, "holdtime"), minimum_acceptable_holdtime=yang.gdata.from_xml_opt_int(n, "minimum-acceptable-holdtime"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address(yang.adata.MNode):
    ip_address: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable

    mut def __init__(self, ip_address: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _inheritance_disable = self.inheritance_disable
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('union', _ip_address)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address(ip_address=n.get_opt_str("ip-address"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address(ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address

    mut def __init__(self, address: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self

    mut def create_address(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address()
        self.address = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local(address=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address.from_gdata(n.get_opt_container("address")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local(address=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local__address.from_xml(yang.gdata.get_xml_opt_child(n, "address")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__message_log_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in(yang.adata.MNode):
    message_log_buffer_size: ?int
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable
    inheritance_diable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable

    mut def __init__(self, message_log_buffer_size: ?int, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable=None, inheritance_diable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.message_log_buffer_size = message_log_buffer_size
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.inheritance_diable = inheritance_diable
        self_inheritance_diable = self.inheritance_diable
        if self_inheritance_diable is not None:
            self_inheritance_diable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable()
        self.disable = res
        return res

    mut def create_inheritance_diable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable()
        self.inheritance_diable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _message_log_buffer_size = self.message_log_buffer_size
        _disable = self.disable
        _inheritance_diable = self.inheritance_diable
        if _message_log_buffer_size is not None:
            children['message-log-buffer-size'] = yang.gdata.Leaf('uint32', _message_log_buffer_size)
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _inheritance_diable is not None:
            children['inheritance-diable'] = _inheritance_diable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in(message_log_buffer_size=n.get_opt_int("message-log-buffer-size"), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable.from_gdata(n.get_opt_container("disable")), inheritance_diable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable.from_gdata(n.get_opt_container("inheritance-diable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in(message_log_buffer_size=yang.gdata.from_xml_opt_int(n, "message-log-buffer-size"), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), inheritance_diable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in__inheritance_diable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-diable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__message_log_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out(yang.adata.MNode):
    message_log_buffer_size: ?int
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable
    inheritance_diable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable

    mut def __init__(self, message_log_buffer_size: ?int, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable=None, inheritance_diable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.message_log_buffer_size = message_log_buffer_size
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.inheritance_diable = inheritance_diable
        self_inheritance_diable = self.inheritance_diable
        if self_inheritance_diable is not None:
            self_inheritance_diable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable()
        self.disable = res
        return res

    mut def create_inheritance_diable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable()
        self.inheritance_diable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _message_log_buffer_size = self.message_log_buffer_size
        _disable = self.disable
        _inheritance_diable = self.inheritance_diable
        if _message_log_buffer_size is not None:
            children['message-log-buffer-size'] = yang.gdata.Leaf('uint32', _message_log_buffer_size)
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _inheritance_diable is not None:
            children['inheritance-diable'] = _inheritance_diable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out(message_log_buffer_size=n.get_opt_int("message-log-buffer-size"), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable.from_gdata(n.get_opt_container("disable")), inheritance_diable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable.from_gdata(n.get_opt_container("inheritance-diable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out(message_log_buffer_size=yang.gdata.from_xml_opt_int(n, "message-log-buffer-size"), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), inheritance_diable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out__inheritance_diable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-diable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message(yang.adata.MNode):
    in_: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in
    out: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out

    mut def __init__(self, in_: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in=None, out: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if in_ is not None:
            self.in_ = in_
        else:
            self.in_ = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in()
        self_in_ = self.in_
        if self_in_ is not None:
            self_in_._parent = self
        if out is not None:
            self.out = out
        else:
            self.out = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out()
        self_out = self.out
        if self_out is not None:
            self_out._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_ = self.in_
        _out = self.out
        if _in_ is not None:
            children['in'] = _in_.to_gdata()
        if _out is not None:
            children['out'] = _out.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message(in_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in.from_gdata(n.get_opt_container("in")), out=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out.from_gdata(n.get_opt_container("out")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message(in_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__in.from_xml(yang.gdata.get_xml_opt_child(n, "in")), out=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message__out.from_xml(yang.gdata.get_xml_opt_child(n, "out")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes(yang.adata.MNode):
    detail: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable

    mut def __init__(self, detail: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail=None, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.detail = detail
        self_detail = self.detail
        if self_detail is not None:
            self_detail._parent = self
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_detail(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail()
        self.detail = res
        return res

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable()
        self.disable = res
        return res

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _detail = self.detail
        _disable = self.disable
        _inheritance_disable = self.inheritance_disable
        if _detail is not None:
            children['detail'] = _detail.to_gdata()
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes(detail=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail.from_gdata(n.get_opt_container("detail")), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable.from_gdata(n.get_opt_container("disable")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes(detail=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__detail.from_xml(yang.gdata.get_xml_opt_child(n, "detail")), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor(yang.adata.MNode):
    changes: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes

    mut def __init__(self, changes: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if changes is not None:
            self.changes = changes
        else:
            self.changes = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes()
        self_changes = self.changes
        if self_changes is not None:
            self_changes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _changes = self.changes
        if _changes is not None:
            children['changes'] = _changes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor(changes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes.from_gdata(n.get_opt_container("changes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor(changes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor__changes.from_xml(yang.gdata.get_xml_opt_child(n, "changes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log(yang.adata.MNode):
    message: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message
    neighbor: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor

    mut def __init__(self, message: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message=None, neighbor: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if message is not None:
            self.message = message
        else:
            self.message = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message()
        self_message = self.message
        if self_message is not None:
            self_message._parent = self
        if neighbor is not None:
            self.neighbor = neighbor
        else:
            self.neighbor = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor()
        self_neighbor = self.neighbor
        if self_neighbor is not None:
            self_neighbor._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _message = self.message
        _neighbor = self.neighbor
        if _message is not None:
            children['message'] = _message.to_gdata()
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log(message=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message.from_gdata(n.get_opt_container("message")), neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor.from_gdata(n.get_opt_container("neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log(message=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__message.from_xml(yang.gdata.get_xml_opt_child(n, "message")), neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log__neighbor.from_xml(yang.gdata.get_xml_opt_child(n, "neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet__mask_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet(yang.adata.MNode):
    ip_address: ?str
    mask_length: ?int

    mut def __init__(self, ip_address: ?str, mask_length: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.mask_length = mask_length

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _mask_length = self.mask_length
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('union', _ip_address)
        if _mask_length is not None:
            children['mask-length'] = yang.gdata.Leaf('uint32', _mask_length)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet(ip_address=n.get_opt_str("ip-address"), mask_length=n.get_opt_int("mask-length"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet(ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"), mask_length=yang.gdata.from_xml_opt_int(n, "mask-length"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz(yang.adata.MNode):
    cumulative: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable

    mut def __init__(self, cumulative: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.cumulative = cumulative
        self_cumulative = self.cumulative
        if self_cumulative is not None:
            self_cumulative._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_cumulative(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative()
        self.cumulative = res
        return res

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cumulative = self.cumulative
        _inheritance_disable = self.inheritance_disable
        if _cumulative is not None:
            children['cumulative'] = _cumulative.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz(cumulative=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative.from_gdata(n.get_opt_container("cumulative")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz(cumulative=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__cumulative.from_xml(yang.gdata.get_xml_opt_child(n, "cumulative")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode(yang.adata.MNode):
    active_only: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only
    passive_only: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only
    both: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both

    mut def __init__(self, active_only: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only=None, passive_only: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only=None, both: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.active_only = active_only
        self_active_only = self.active_only
        if self_active_only is not None:
            self_active_only._parent = self
        self.passive_only = passive_only
        self_passive_only = self.passive_only
        if self_passive_only is not None:
            self_passive_only._parent = self
        self.both = both
        self_both = self.both
        if self_both is not None:
            self_both._parent = self

    mut def create_active_only(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only()
        self.active_only = res
        return res

    mut def create_passive_only(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only()
        self.passive_only = res
        return res

    mut def create_both(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both()
        self.both = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _active_only = self.active_only
        _passive_only = self.passive_only
        _both = self.both
        if _active_only is not None:
            children['active-only'] = _active_only.to_gdata()
        if _passive_only is not None:
            children['passive-only'] = _passive_only.to_gdata()
        if _both is not None:
            children['both'] = _both.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode(active_only=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only.from_gdata(n.get_opt_container("active-only")), passive_only=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only.from_gdata(n.get_opt_container("passive-only")), both=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both.from_gdata(n.get_opt_container("both")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode(active_only=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__active_only.from_xml(yang.gdata.get_xml_opt_child(n, "active-only")), passive_only=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__passive_only.from_xml(yang.gdata.get_xml_opt_child(n, "passive-only")), both=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode__both.from_xml(yang.gdata.get_xml_opt_child(n, "both")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dscp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__precedence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress(yang.adata.MNode):
    four_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as
    all: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all
    extended_nexthop_encoding: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding

    mut def __init__(self, four_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as=None, all: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all=None, extended_nexthop_encoding: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as = four_byte_as
        self_four_byte_as = self.four_byte_as
        if self_four_byte_as is not None:
            self_four_byte_as._parent = self
        self.all = all
        self_all = self.all
        if self_all is not None:
            self_all._parent = self
        self.extended_nexthop_encoding = extended_nexthop_encoding
        self_extended_nexthop_encoding = self.extended_nexthop_encoding
        if self_extended_nexthop_encoding is not None:
            self_extended_nexthop_encoding._parent = self

    mut def create_four_byte_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as()
        self.four_byte_as = res
        return res

    mut def create_all(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all()
        self.all = res
        return res

    mut def create_extended_nexthop_encoding(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding()
        self.extended_nexthop_encoding = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as = self.four_byte_as
        _all = self.all
        _extended_nexthop_encoding = self.extended_nexthop_encoding
        if _four_byte_as is not None:
            children['four-byte-as'] = _four_byte_as.to_gdata()
        if _all is not None:
            children['all'] = _all.to_gdata()
        if _extended_nexthop_encoding is not None:
            children['extended-nexthop-encoding'] = _extended_nexthop_encoding.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress(four_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as.from_gdata(n.get_opt_container("four-byte-as")), all=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all.from_gdata(n.get_opt_container("all")), extended_nexthop_encoding=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding.from_gdata(n.get_opt_container("extended-nexthop-encoding")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress(four_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__four_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as")), all=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__all.from_xml(yang.gdata.get_xml_opt_child(n, "all")), extended_nexthop_encoding=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress__extended_nexthop_encoding.from_xml(yang.gdata.get_xml_opt_child(n, "extended-nexthop-encoding")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths(yang.adata.MNode):
    send: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send
    receive: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive

    mut def __init__(self, send: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send=None, receive: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.send = send
        self_send = self.send
        if self_send is not None:
            self_send._parent = self
        self.receive = receive
        self_receive = self.receive
        if self_receive is not None:
            self_receive._parent = self

    mut def create_send(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send()
        self.send = res
        return res

    mut def create_receive(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive()
        self.receive = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send = self.send
        _receive = self.receive
        if _send is not None:
            children['send'] = _send.to_gdata()
        if _receive is not None:
            children['receive'] = _receive.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths(send=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send.from_gdata(n.get_opt_container("send")), receive=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive.from_gdata(n.get_opt_container("receive")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths(send=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__send.from_xml(yang.gdata.get_xml_opt_child(n, "send")), receive=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths__receive.from_xml(yang.gdata.get_xml_opt_child(n, "receive")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability(yang.adata.MNode):
    suppress: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress
    additional_paths: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths

    mut def __init__(self, suppress: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress=None, additional_paths: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if suppress is not None:
            self.suppress = suppress
        else:
            self.suppress = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress()
        self_suppress = self.suppress
        if self_suppress is not None:
            self_suppress._parent = self
        if additional_paths is not None:
            self.additional_paths = additional_paths
        else:
            self.additional_paths = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths()
        self_additional_paths = self.additional_paths
        if self_additional_paths is not None:
            self_additional_paths._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _suppress = self.suppress
        _additional_paths = self.additional_paths
        if _suppress is not None:
            children['suppress'] = _suppress.to_gdata()
        if _additional_paths is not None:
            children['additional-paths'] = _additional_paths.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability(suppress=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress.from_gdata(n.get_opt_container("suppress")), additional_paths=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths.from_gdata(n.get_opt_container("additional-paths")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability(suppress=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__suppress.from_xml(yang.gdata.get_xml_opt_child(n, "suppress")), additional_paths=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability__additional_paths.from_xml(yang.gdata.get_xml_opt_child(n, "additional-paths")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable()
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__stalepath_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable
    restart_time: ?int
    stalepath_time: ?int

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable=None, restart_time: ?int, stalepath_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.restart_time = restart_time
        self.stalepath_time = stalepath_time

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _restart_time = self.restart_time
        _stalepath_time = self.stalepath_time
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _restart_time is not None:
            children['restart-time'] = yang.gdata.Leaf('uint32', _restart_time)
        if _stalepath_time is not None:
            children['stalepath-time'] = yang.gdata.Leaf('uint32', _stalepath_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable.from_gdata(n.get_opt_container("disable")), restart_time=n.get_opt_int("restart-time"), stalepath_time=n.get_opt_int("stalepath-time"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), restart_time=yang.gdata.from_xml_opt_int(n, "restart-time"), stalepath_time=yang.gdata.from_xml_opt_int(n, "stalepath-time"))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id__route_reflector_cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id(yang.adata.MNode):
    route_reflector_cluster_id: ?int
    ip_address: ?str

    mut def __init__(self, route_reflector_cluster_id: ?int, ip_address: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_reflector_cluster_id = route_reflector_cluster_id
        self.ip_address = ip_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_reflector_cluster_id = self.route_reflector_cluster_id
        _ip_address = self.ip_address
        if _route_reflector_cluster_id is not None:
            children['route-reflector-cluster-id'] = yang.gdata.Leaf('uint32', _route_reflector_cluster_id)
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id(route_reflector_cluster_id=n.get_opt_int("route-reflector-cluster-id"), ip_address=n.get_opt_str("ip-address"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id(route_reflector_cluster_id=yang.gdata.from_xml_opt_int(n, "route-reflector-cluster-id"), ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__maximum_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__idle_watch_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set__peer_set_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry(yang.adata.MNode):
    peer_set_id: int

    mut def __init__(self, peer_set_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.peer_set_id = peer_set_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _peer_set_id = self.peer_set_id
        if _peer_set_id is not None:
            children['peer-set-id'] = yang.gdata.Leaf('uint32', _peer_set_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.peer_set_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry(peer_set_id=n.get_int("peer-set-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry(peer_set_id=yang.gdata.from_xml_int(n, "peer-set-id"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'peer-set'
        self.elements = elements

    mut def create(self, peer_set_id):
        for e in self.elements:
            match = True
            if e.peer_set_id != peer_set_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry(peer_set_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['peer-set-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets(yang.adata.MNode):
    peer_set: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set

    mut def __init__(self, peer_set: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.peer_set = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set(elements=peer_set)
        self.peer_set._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _peer_set = self.peer_set
        if _peer_set is not None:
            children['peer-set'] = _peer_set.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets(peer_set=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set.from_gdata(n.get_opt_list("peer-set")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets(peer_set=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets__peer_set.from_xml(yang.gdata.get_xml_children(n, "peer-set")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid(yang.adata.MNode):
    index: ?int

    mut def __init__(self, index: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid(index=n.get_opt_int("index"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid(index=yang.gdata.from_xml_opt_int(n, "index"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__key_chain_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options(yang.adata.MNode):
    enable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable
    accept_ao_mismatch_connection: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection

    mut def __init__(self, enable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable=None, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable=None, accept_ao_mismatch_connection: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.enable = enable
        self_enable = self.enable
        if self_enable is not None:
            self_enable._parent = self
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.accept_ao_mismatch_connection = accept_ao_mismatch_connection
        self_accept_ao_mismatch_connection = self.accept_ao_mismatch_connection
        if self_accept_ao_mismatch_connection is not None:
            self_accept_ao_mismatch_connection._parent = self

    mut def create_enable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable()
        self.enable = res
        return res

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable()
        self.disable = res
        return res

    mut def create_accept_ao_mismatch_connection(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection()
        self.accept_ao_mismatch_connection = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable = self.enable
        _disable = self.disable
        _accept_ao_mismatch_connection = self.accept_ao_mismatch_connection
        if _enable is not None:
            children['enable'] = _enable.to_gdata()
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _accept_ao_mismatch_connection is not None:
            children['accept-ao-mismatch-connection'] = _accept_ao_mismatch_connection.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options(enable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable.from_gdata(n.get_opt_container("enable")), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable.from_gdata(n.get_opt_container("disable")), accept_ao_mismatch_connection=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection.from_gdata(n.get_opt_container("accept-ao-mismatch-connection")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options(enable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__enable.from_xml(yang.gdata.get_xml_opt_child(n, "enable")), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), accept_ao_mismatch_connection=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options__accept_ao_mismatch_connection.from_xml(yang.gdata.get_xml_opt_child(n, "accept-ao-mismatch-connection")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao(yang.adata.MNode):
    key_chain_name: ?str
    include_tcp_options: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable

    mut def __init__(self, key_chain_name: ?str, include_tcp_options: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.key_chain_name = key_chain_name
        if include_tcp_options is not None:
            self.include_tcp_options = include_tcp_options
        else:
            self.include_tcp_options = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options()
        self_include_tcp_options = self.include_tcp_options
        if self_include_tcp_options is not None:
            self_include_tcp_options._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _key_chain_name = self.key_chain_name
        _include_tcp_options = self.include_tcp_options
        _inheritance_disable = self.inheritance_disable
        if _key_chain_name is not None:
            children['key-chain-name'] = yang.gdata.Leaf('string', _key_chain_name)
        if _include_tcp_options is not None:
            children['include-tcp-options'] = _include_tcp_options.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao(key_chain_name=n.get_opt_str("key-chain-name"), include_tcp_options=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options.from_gdata(n.get_opt_container("include-tcp-options")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao(key_chain_name=yang.gdata.from_xml_opt_str(n, "key-chain-name"), include_tcp_options=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__include_tcp_options.from_xml(yang.gdata.get_xml_opt_child(n, "include-tcp-options")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as(yang.adata.MNode):
    validation: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation

    mut def __init__(self, validation: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if validation is not None:
            self.validation = validation
        else:
            self.validation = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation()
        self_validation = self.validation
        if self_validation is not None:
            self_validation._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _validation = self.validation
        if _validation is not None:
            children['validation'] = _validation.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as(validation=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation.from_gdata(n.get_opt_container("validation")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as(validation=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as__validation.from_xml(yang.gdata.get_xml_opt_child(n, "validation")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow(yang.adata.MNode):
    invalid: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid

    mut def __init__(self, invalid: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.invalid = invalid
        self_invalid = self.invalid
        if self_invalid is not None:
            self_invalid._parent = self

    mut def create_invalid(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid()
        self.invalid = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _invalid = self.invalid
        if _invalid is not None:
            children['invalid'] = _invalid.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow(invalid=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid.from_gdata(n.get_opt_container("invalid")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow(invalid=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow__invalid.from_xml(yang.gdata.get_xml_opt_child(n, "invalid")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as(yang.adata.MNode):
    allow: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow

    mut def __init__(self, allow: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if allow is not None:
            self.allow = allow
        else:
            self.allow = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow()
        self_allow = self.allow
        if self_allow is not None:
            self_allow._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow = self.allow
        if _allow is not None:
            children['allow'] = _allow.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as(allow=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow.from_gdata(n.get_opt_container("allow")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as(allow=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as__allow.from_xml(yang.gdata.get_xml_opt_child(n, "allow")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath(yang.adata.MNode):
    origin_as: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as

    mut def __init__(self, origin_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if origin_as is not None:
            self.origin_as = origin_as
        else:
            self.origin_as = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as()
        self_origin_as = self.origin_as
        if self_origin_as is not None:
            self_origin_as._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _origin_as = self.origin_as
        if _origin_as is not None:
            children['origin-as'] = _origin_as.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath(origin_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as.from_gdata(n.get_opt_container("origin-as")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath(origin_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath__origin_as.from_xml(yang.gdata.get_xml_opt_child(n, "origin-as")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__maximum_prefix_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(yang.adata.MNode):
    neighbor_address: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families
    update: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update
    graceful_maintenance: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance
    remote_as: ?value
    remote_as_list: ?str
    use: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use
    advertisement_interval: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval
    description: ?str
    ignore_connected_check: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check
    ebgp_multihop: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp
    bmp_activate: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate
    bfd: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd
    keychain: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain
    local_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as
    password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password
    receive_buffer_size: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size
    send_buffer_size: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown
    timers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers
    local: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local
    log: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log
    update_source: ?str
    local_address_subnet: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet
    dmz_link_bandwidth: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth
    ebgp_recv_extcommunity_dmz: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz
    ebgp_send_extcommunity_dmz: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz
    ttl_security: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security
    session_open_mode: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode
    dscp: ?str
    precedence: ?str
    capability: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability
    graceful_restart: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart
    enforce_first_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as
    cluster_id: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id
    maximum_peers: ?int
    idle_watch_time: ?int
    egress_engineering: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering
    peer_sets: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets
    peer_node_sid: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid
    ao: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao
    origin_as: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as
    bestpath: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath
    maximum_prefix_restart_time: ?int

    mut def __init__(self, neighbor_address: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families=None, update: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update=None, graceful_maintenance: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance=None, remote_as: ?value, remote_as_list: ?str, use: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use=None, advertisement_interval: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval=None, description: ?str, ignore_connected_check: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check=None, ebgp_multihop: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop=None, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp=None, bmp_activate: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate=None, bfd: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd=None, keychain: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain=None, local_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as=None, password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password=None, receive_buffer_size: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size=None, send_buffer_size: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size=None, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown=None, timers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers=None, local: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local=None, log: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log=None, update_source: ?str, local_address_subnet: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet=None, dmz_link_bandwidth: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth=None, ebgp_recv_extcommunity_dmz: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz=None, ebgp_send_extcommunity_dmz: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz=None, ttl_security: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security=None, session_open_mode: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode=None, dscp: ?str, precedence: ?str, capability: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability=None, graceful_restart: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart=None, enforce_first_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as=None, cluster_id: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id=None, maximum_peers: ?int, idle_watch_time: ?int, egress_engineering: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering=None, peer_sets: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets=None, peer_node_sid: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid=None, ao: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao=None, origin_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as=None, bestpath: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath=None, maximum_prefix_restart_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_address = neighbor_address
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        if update is not None:
            self.update = update
        else:
            self.update = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update()
        self_update = self.update
        if self_update is not None:
            self_update._parent = self
        self.graceful_maintenance = graceful_maintenance
        self_graceful_maintenance = self.graceful_maintenance
        if self_graceful_maintenance is not None:
            self_graceful_maintenance._parent = self
        self.remote_as = remote_as
        self.remote_as_list = remote_as_list
        if use is not None:
            self.use = use
        else:
            self.use = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()
        self_use = self.use
        if self_use is not None:
            self_use._parent = self
        self.advertisement_interval = advertisement_interval
        self_advertisement_interval = self.advertisement_interval
        if self_advertisement_interval is not None:
            self_advertisement_interval._parent = self
        self.description = description
        self.ignore_connected_check = ignore_connected_check
        self_ignore_connected_check = self.ignore_connected_check
        if self_ignore_connected_check is not None:
            self_ignore_connected_check._parent = self
        self.ebgp_multihop = ebgp_multihop
        self_ebgp_multihop = self.ebgp_multihop
        if self_ebgp_multihop is not None:
            self_ebgp_multihop._parent = self
        if tcp is not None:
            self.tcp = tcp
        else:
            self.tcp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp()
        self_tcp = self.tcp
        if self_tcp is not None:
            self_tcp._parent = self
        if bmp_activate is not None:
            self.bmp_activate = bmp_activate
        else:
            self.bmp_activate = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate()
        self_bmp_activate = self.bmp_activate
        if self_bmp_activate is not None:
            self_bmp_activate._parent = self
        if bfd is not None:
            self.bfd = bfd
        else:
            self.bfd = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd()
        self_bfd = self.bfd
        if self_bfd is not None:
            self_bfd._parent = self
        self.keychain = keychain
        self_keychain = self.keychain
        if self_keychain is not None:
            self_keychain._parent = self
        self.local_as = local_as
        self_local_as = self.local_as
        if self_local_as is not None:
            self_local_as._parent = self
        self.password = password
        self_password = self.password
        if self_password is not None:
            self_password._parent = self
        self.receive_buffer_size = receive_buffer_size
        self_receive_buffer_size = self.receive_buffer_size
        if self_receive_buffer_size is not None:
            self_receive_buffer_size._parent = self
        self.send_buffer_size = send_buffer_size
        self_send_buffer_size = self.send_buffer_size
        if self_send_buffer_size is not None:
            self_send_buffer_size._parent = self
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.timers = timers
        self_timers = self.timers
        if self_timers is not None:
            self_timers._parent = self
        if local is not None:
            self.local = local
        else:
            self.local = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local()
        self_local = self.local
        if self_local is not None:
            self_local._parent = self
        if log is not None:
            self.log = log
        else:
            self.log = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log()
        self_log = self.log
        if self_log is not None:
            self_log._parent = self
        self.update_source = update_source
        if local_address_subnet is not None:
            self.local_address_subnet = local_address_subnet
        else:
            self.local_address_subnet = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet()
        self_local_address_subnet = self.local_address_subnet
        if self_local_address_subnet is not None:
            self_local_address_subnet._parent = self
        self.dmz_link_bandwidth = dmz_link_bandwidth
        self_dmz_link_bandwidth = self.dmz_link_bandwidth
        if self_dmz_link_bandwidth is not None:
            self_dmz_link_bandwidth._parent = self
        self.ebgp_recv_extcommunity_dmz = ebgp_recv_extcommunity_dmz
        self_ebgp_recv_extcommunity_dmz = self.ebgp_recv_extcommunity_dmz
        if self_ebgp_recv_extcommunity_dmz is not None:
            self_ebgp_recv_extcommunity_dmz._parent = self
        self.ebgp_send_extcommunity_dmz = ebgp_send_extcommunity_dmz
        self_ebgp_send_extcommunity_dmz = self.ebgp_send_extcommunity_dmz
        if self_ebgp_send_extcommunity_dmz is not None:
            self_ebgp_send_extcommunity_dmz._parent = self
        self.ttl_security = ttl_security
        self_ttl_security = self.ttl_security
        if self_ttl_security is not None:
            self_ttl_security._parent = self
        if session_open_mode is not None:
            self.session_open_mode = session_open_mode
        else:
            self.session_open_mode = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode()
        self_session_open_mode = self.session_open_mode
        if self_session_open_mode is not None:
            self_session_open_mode._parent = self
        self.dscp = dscp
        self.precedence = precedence
        if capability is not None:
            self.capability = capability
        else:
            self.capability = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability()
        self_capability = self.capability
        if self_capability is not None:
            self_capability._parent = self
        self.graceful_restart = graceful_restart
        self_graceful_restart = self.graceful_restart
        if self_graceful_restart is not None:
            self_graceful_restart._parent = self
        self.enforce_first_as = enforce_first_as
        self_enforce_first_as = self.enforce_first_as
        if self_enforce_first_as is not None:
            self_enforce_first_as._parent = self
        if cluster_id is not None:
            self.cluster_id = cluster_id
        else:
            self.cluster_id = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id()
        self_cluster_id = self.cluster_id
        if self_cluster_id is not None:
            self_cluster_id._parent = self
        self.maximum_peers = maximum_peers
        self.idle_watch_time = idle_watch_time
        self.egress_engineering = egress_engineering
        self_egress_engineering = self.egress_engineering
        if self_egress_engineering is not None:
            self_egress_engineering._parent = self
        if peer_sets is not None:
            self.peer_sets = peer_sets
        else:
            self.peer_sets = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets()
        self_peer_sets = self.peer_sets
        if self_peer_sets is not None:
            self_peer_sets._parent = self
        if peer_node_sid is not None:
            self.peer_node_sid = peer_node_sid
        else:
            self.peer_node_sid = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid()
        self_peer_node_sid = self.peer_node_sid
        if self_peer_node_sid is not None:
            self_peer_node_sid._parent = self
        if ao is not None:
            self.ao = ao
        else:
            self.ao = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao()
        self_ao = self.ao
        if self_ao is not None:
            self_ao._parent = self
        if origin_as is not None:
            self.origin_as = origin_as
        else:
            self.origin_as = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as()
        self_origin_as = self.origin_as
        if self_origin_as is not None:
            self_origin_as._parent = self
        if bestpath is not None:
            self.bestpath = bestpath
        else:
            self.bestpath = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath()
        self_bestpath = self.bestpath
        if self_bestpath is not None:
            self_bestpath._parent = self
        self.maximum_prefix_restart_time = maximum_prefix_restart_time

    mut def create_graceful_maintenance(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance()
        self.graceful_maintenance = res
        return res

    mut def create_advertisement_interval(self, time_in_seconds):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval(time_in_seconds)
        self.advertisement_interval = res
        return res

    mut def create_ignore_connected_check(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check()
        self.ignore_connected_check = res
        return res

    mut def create_ebgp_multihop(self, maximum_hop_count):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop(maximum_hop_count)
        self.ebgp_multihop = res
        return res

    mut def create_keychain(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain()
        self.keychain = res
        return res

    mut def create_local_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as()
        self.local_as = res
        return res

    mut def create_password(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password()
        self.password = res
        return res

    mut def create_receive_buffer_size(self, receive_socket_buffer_size):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size(receive_socket_buffer_size)
        self.receive_buffer_size = res
        return res

    mut def create_send_buffer_size(self, send_socket_buffer_size):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size(send_socket_buffer_size)
        self.send_buffer_size = res
        return res

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown()
        self.shutdown = res
        return res

    mut def create_timers(self, keepalive_interval, holdtime):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers(keepalive_interval, holdtime)
        self.timers = res
        return res

    mut def create_dmz_link_bandwidth(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth()
        self.dmz_link_bandwidth = res
        return res

    mut def create_ebgp_recv_extcommunity_dmz(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz()
        self.ebgp_recv_extcommunity_dmz = res
        return res

    mut def create_ebgp_send_extcommunity_dmz(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz()
        self.ebgp_send_extcommunity_dmz = res
        return res

    mut def create_ttl_security(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security()
        self.ttl_security = res
        return res

    mut def create_graceful_restart(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart()
        self.graceful_restart = res
        return res

    mut def create_enforce_first_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as()
        self.enforce_first_as = res
        return res

    mut def create_egress_engineering(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering()
        self.egress_engineering = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_address = self.neighbor_address
        _address_families = self.address_families
        _update = self.update
        _graceful_maintenance = self.graceful_maintenance
        _remote_as = self.remote_as
        _remote_as_list = self.remote_as_list
        _use = self.use
        _advertisement_interval = self.advertisement_interval
        _description = self.description
        _ignore_connected_check = self.ignore_connected_check
        _ebgp_multihop = self.ebgp_multihop
        _tcp = self.tcp
        _bmp_activate = self.bmp_activate
        _bfd = self.bfd
        _keychain = self.keychain
        _local_as = self.local_as
        _password = self.password
        _receive_buffer_size = self.receive_buffer_size
        _send_buffer_size = self.send_buffer_size
        _shutdown = self.shutdown
        _timers = self.timers
        _local = self.local
        _log = self.log
        _update_source = self.update_source
        _local_address_subnet = self.local_address_subnet
        _dmz_link_bandwidth = self.dmz_link_bandwidth
        _ebgp_recv_extcommunity_dmz = self.ebgp_recv_extcommunity_dmz
        _ebgp_send_extcommunity_dmz = self.ebgp_send_extcommunity_dmz
        _ttl_security = self.ttl_security
        _session_open_mode = self.session_open_mode
        _dscp = self.dscp
        _precedence = self.precedence
        _capability = self.capability
        _graceful_restart = self.graceful_restart
        _enforce_first_as = self.enforce_first_as
        _cluster_id = self.cluster_id
        _maximum_peers = self.maximum_peers
        _idle_watch_time = self.idle_watch_time
        _egress_engineering = self.egress_engineering
        _peer_sets = self.peer_sets
        _peer_node_sid = self.peer_node_sid
        _ao = self.ao
        _origin_as = self.origin_as
        _bestpath = self.bestpath
        _maximum_prefix_restart_time = self.maximum_prefix_restart_time
        if _neighbor_address is not None:
            children['neighbor-address'] = yang.gdata.Leaf('union', _neighbor_address)
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _update is not None:
            children['update'] = _update.to_gdata()
        if _graceful_maintenance is not None:
            children['graceful-maintenance'] = _graceful_maintenance.to_gdata()
        if _remote_as is not None:
            children['remote-as'] = yang.gdata.Leaf('union', _remote_as)
        if _remote_as_list is not None:
            children['remote-as-list'] = yang.gdata.Leaf('string', _remote_as_list)
        if _use is not None:
            children['use'] = _use.to_gdata()
        if _advertisement_interval is not None:
            children['advertisement-interval'] = _advertisement_interval.to_gdata()
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _ignore_connected_check is not None:
            children['ignore-connected-check'] = _ignore_connected_check.to_gdata()
        if _ebgp_multihop is not None:
            children['ebgp-multihop'] = _ebgp_multihop.to_gdata()
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        if _bmp_activate is not None:
            children['bmp-activate'] = _bmp_activate.to_gdata()
        if _bfd is not None:
            children['bfd'] = _bfd.to_gdata()
        if _keychain is not None:
            children['keychain'] = _keychain.to_gdata()
        if _local_as is not None:
            children['local-as'] = _local_as.to_gdata()
        if _password is not None:
            children['password'] = _password.to_gdata()
        if _receive_buffer_size is not None:
            children['receive-buffer-size'] = _receive_buffer_size.to_gdata()
        if _send_buffer_size is not None:
            children['send-buffer-size'] = _send_buffer_size.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        if _local is not None:
            children['local'] = _local.to_gdata()
        if _log is not None:
            children['log'] = _log.to_gdata()
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        if _local_address_subnet is not None:
            children['local-address-subnet'] = _local_address_subnet.to_gdata()
        if _dmz_link_bandwidth is not None:
            children['dmz-link-bandwidth'] = _dmz_link_bandwidth.to_gdata()
        if _ebgp_recv_extcommunity_dmz is not None:
            children['ebgp-recv-extcommunity-dmz'] = _ebgp_recv_extcommunity_dmz.to_gdata()
        if _ebgp_send_extcommunity_dmz is not None:
            children['ebgp-send-extcommunity-dmz'] = _ebgp_send_extcommunity_dmz.to_gdata()
        if _ttl_security is not None:
            children['ttl-security'] = _ttl_security.to_gdata()
        if _session_open_mode is not None:
            children['session-open-mode'] = _session_open_mode.to_gdata()
        if _dscp is not None:
            children['dscp'] = yang.gdata.Leaf('enumeration', _dscp)
        if _precedence is not None:
            children['precedence'] = yang.gdata.Leaf('enumeration', _precedence)
        if _capability is not None:
            children['capability'] = _capability.to_gdata()
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        if _enforce_first_as is not None:
            children['enforce-first-as'] = _enforce_first_as.to_gdata()
        if _cluster_id is not None:
            children['cluster-id'] = _cluster_id.to_gdata()
        if _maximum_peers is not None:
            children['maximum-peers'] = yang.gdata.Leaf('uint32', _maximum_peers)
        if _idle_watch_time is not None:
            children['idle-watch-time'] = yang.gdata.Leaf('uint32', _idle_watch_time)
        if _egress_engineering is not None:
            children['egress-engineering'] = _egress_engineering.to_gdata()
        if _peer_sets is not None:
            children['peer-sets'] = _peer_sets.to_gdata()
        if _peer_node_sid is not None:
            children['peer-node-sid'] = _peer_node_sid.to_gdata()
        if _ao is not None:
            children['ao'] = _ao.to_gdata()
        if _origin_as is not None:
            children['origin-as'] = _origin_as.to_gdata()
        if _bestpath is not None:
            children['bestpath'] = _bestpath.to_gdata()
        if _maximum_prefix_restart_time is not None:
            children['maximum-prefix-restart-time'] = yang.gdata.Leaf('uint32', _maximum_prefix_restart_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.neighbor_address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address=n.get_str("neighbor-address"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families.from_gdata(n.get_opt_container("address-families")), update=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update.from_gdata(n.get_opt_container("update")), graceful_maintenance=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance.from_gdata(n.get_opt_container("graceful-maintenance")), remote_as=n.get_opt_value("remote-as"), remote_as_list=n.get_opt_str("remote-as-list"), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use.from_gdata(n.get_opt_container("use")), advertisement_interval=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval.from_gdata(n.get_opt_container("advertisement-interval")), description=n.get_opt_str("description"), ignore_connected_check=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check.from_gdata(n.get_opt_container("ignore-connected-check")), ebgp_multihop=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop.from_gdata(n.get_opt_container("ebgp-multihop")), tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp.from_gdata(n.get_opt_container("tcp")), bmp_activate=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate.from_gdata(n.get_opt_container("bmp-activate")), bfd=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd.from_gdata(n.get_opt_container("bfd")), keychain=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain.from_gdata(n.get_opt_container("keychain")), local_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as.from_gdata(n.get_opt_container("local-as")), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password.from_gdata(n.get_opt_container("password")), receive_buffer_size=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size.from_gdata(n.get_opt_container("receive-buffer-size")), send_buffer_size=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size.from_gdata(n.get_opt_container("send-buffer-size")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown.from_gdata(n.get_opt_container("shutdown")), timers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers.from_gdata(n.get_opt_container("timers")), local=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local.from_gdata(n.get_opt_container("local")), log=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log.from_gdata(n.get_opt_container("log")), update_source=n.get_opt_str("update-source"), local_address_subnet=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet.from_gdata(n.get_opt_container("local-address-subnet")), dmz_link_bandwidth=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth.from_gdata(n.get_opt_container("dmz-link-bandwidth")), ebgp_recv_extcommunity_dmz=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz.from_gdata(n.get_opt_container("ebgp-recv-extcommunity-dmz")), ebgp_send_extcommunity_dmz=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz.from_gdata(n.get_opt_container("ebgp-send-extcommunity-dmz")), ttl_security=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security.from_gdata(n.get_opt_container("ttl-security")), session_open_mode=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode.from_gdata(n.get_opt_container("session-open-mode")), dscp=n.get_opt_str("dscp"), precedence=n.get_opt_str("precedence"), capability=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability.from_gdata(n.get_opt_container("capability")), graceful_restart=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart.from_gdata(n.get_opt_container("graceful-restart")), enforce_first_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as.from_gdata(n.get_opt_container("enforce-first-as")), cluster_id=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id.from_gdata(n.get_opt_container("cluster-id")), maximum_peers=n.get_opt_int("maximum-peers"), idle_watch_time=n.get_opt_int("idle-watch-time"), egress_engineering=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering.from_gdata(n.get_opt_container("egress-engineering")), peer_sets=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets.from_gdata(n.get_opt_container("peer-sets")), peer_node_sid=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid.from_gdata(n.get_opt_container("peer-node-sid")), ao=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao.from_gdata(n.get_opt_container("ao")), origin_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as.from_gdata(n.get_opt_container("origin-as")), bestpath=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath.from_gdata(n.get_opt_container("bestpath")), maximum_prefix_restart_time=n.get_opt_int("maximum-prefix-restart-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address=yang.gdata.from_xml_str(n, "neighbor-address"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), update=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__update.from_xml(yang.gdata.get_xml_opt_child(n, "update")), graceful_maintenance=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_maintenance.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-maintenance")), remote_as=yang.gdata.from_xml_opt_value(n, "remote-as"), remote_as_list=yang.gdata.from_xml_opt_str(n, "remote-as-list"), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use.from_xml(yang.gdata.get_xml_opt_child(n, "use")), advertisement_interval=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__advertisement_interval.from_xml(yang.gdata.get_xml_opt_child(n, "advertisement-interval")), description=yang.gdata.from_xml_opt_str(n, "description"), ignore_connected_check=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ignore_connected_check.from_xml(yang.gdata.get_xml_opt_child(n, "ignore-connected-check")), ebgp_multihop=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_multihop.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp-multihop")), tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__tcp.from_xml(yang.gdata.get_xml_opt_child(n, "tcp")), bmp_activate=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bmp_activate.from_xml(yang.gdata.get_xml_opt_child(n, "bmp-activate")), bfd=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bfd.from_xml(yang.gdata.get_xml_opt_child(n, "bfd")), keychain=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__keychain.from_xml(yang.gdata.get_xml_opt_child(n, "keychain")), local_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_as.from_xml(yang.gdata.get_xml_opt_child(n, "local-as")), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__password.from_xml(yang.gdata.get_xml_opt_child(n, "password")), receive_buffer_size=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__receive_buffer_size.from_xml(yang.gdata.get_xml_opt_child(n, "receive-buffer-size")), send_buffer_size=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__send_buffer_size.from_xml(yang.gdata.get_xml_opt_child(n, "send-buffer-size")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")), timers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__timers.from_xml(yang.gdata.get_xml_opt_child(n, "timers")), local=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local.from_xml(yang.gdata.get_xml_opt_child(n, "local")), log=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__log.from_xml(yang.gdata.get_xml_opt_child(n, "log")), update_source=yang.gdata.from_xml_opt_str(n, "update-source"), local_address_subnet=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__local_address_subnet.from_xml(yang.gdata.get_xml_opt_child(n, "local-address-subnet")), dmz_link_bandwidth=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__dmz_link_bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "dmz-link-bandwidth")), ebgp_recv_extcommunity_dmz=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_recv_extcommunity_dmz.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp-recv-extcommunity-dmz")), ebgp_send_extcommunity_dmz=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ebgp_send_extcommunity_dmz.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp-send-extcommunity-dmz")), ttl_security=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ttl_security.from_xml(yang.gdata.get_xml_opt_child(n, "ttl-security")), session_open_mode=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__session_open_mode.from_xml(yang.gdata.get_xml_opt_child(n, "session-open-mode")), dscp=yang.gdata.from_xml_opt_str(n, "dscp"), precedence=yang.gdata.from_xml_opt_str(n, "precedence"), capability=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__capability.from_xml(yang.gdata.get_xml_opt_child(n, "capability")), graceful_restart=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__graceful_restart.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-restart")), enforce_first_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__enforce_first_as.from_xml(yang.gdata.get_xml_opt_child(n, "enforce-first-as")), cluster_id=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__cluster_id.from_xml(yang.gdata.get_xml_opt_child(n, "cluster-id")), maximum_peers=yang.gdata.from_xml_opt_int(n, "maximum-peers"), idle_watch_time=yang.gdata.from_xml_opt_int(n, "idle-watch-time"), egress_engineering=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__egress_engineering.from_xml(yang.gdata.get_xml_opt_child(n, "egress-engineering")), peer_sets=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_sets.from_xml(yang.gdata.get_xml_opt_child(n, "peer-sets")), peer_node_sid=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__peer_node_sid.from_xml(yang.gdata.get_xml_opt_child(n, "peer-node-sid")), ao=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__ao.from_xml(yang.gdata.get_xml_opt_child(n, "ao")), origin_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__origin_as.from_xml(yang.gdata.get_xml_opt_child(n, "origin-as")), bestpath=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__bestpath.from_xml(yang.gdata.get_xml_opt_child(n, "bestpath")), maximum_prefix_restart_time=yang.gdata.from_xml_opt_int(n, "maximum-prefix-restart-time"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, neighbor_address, advertisement_interval, ebgp_multihop, receive_buffer_size, send_buffer_size, timers):
        for e in self.elements:
            match = True
            if e.neighbor_address != neighbor_address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address, advertisement_interval, ebgp_multihop, receive_buffer_size, send_buffer_size, timers)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(yang.adata.MNode):
    neighbor: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor

    mut def __init__(self, neighbor: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(elements=neighbor)
        self.neighbor._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor.from_gdata(n.get_opt_list("neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor.from_xml(yang.gdata.get_xml_children(n, "neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__neighbor_group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__local_preference_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference(yang.adata.MNode):
    local_preference_value: ?int
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable

    mut def __init__(self, local_preference_value: ?int, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.local_preference_value = local_preference_value
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _local_preference_value = self.local_preference_value
        _inheritance_disable = self.inheritance_disable
        if _local_preference_value is not None:
            children['local-preference-value'] = yang.gdata.Leaf('uint32', _local_preference_value)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference(local_preference_value=n.get_opt_int("local-preference-value"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference(local_preference_value=yang.gdata.from_xml_opt_int(n, "local-preference-value"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__number_of_as_prepends(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends(yang.adata.MNode):
    number_of_as_prepends: ?int
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable

    mut def __init__(self, number_of_as_prepends: ?int, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.number_of_as_prepends = number_of_as_prepends
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _number_of_as_prepends = self.number_of_as_prepends
        _inheritance_disable = self.inheritance_disable
        if _number_of_as_prepends is not None:
            children['number-of-as-prepends'] = yang.gdata.Leaf('uint32', _number_of_as_prepends)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends(number_of_as_prepends=n.get_opt_int("number-of-as-prepends"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends(number_of_as_prepends=yang.gdata.from_xml_opt_int(n, "number-of-as-prepends"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance(yang.adata.MNode):
    local_preference: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference
    as_prepends: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends
    activate: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate

    mut def __init__(self, local_preference: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference=None, as_prepends: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends=None, activate: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.local_preference = local_preference
        self_local_preference = self.local_preference
        if self_local_preference is not None:
            self_local_preference._parent = self
        self.as_prepends = as_prepends
        self_as_prepends = self.as_prepends
        if self_as_prepends is not None:
            self_as_prepends._parent = self
        self.activate = activate
        self_activate = self.activate
        if self_activate is not None:
            self_activate._parent = self

    mut def create_local_preference(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference()
        self.local_preference = res
        return res

    mut def create_as_prepends(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends()
        self.as_prepends = res
        return res

    mut def create_activate(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate()
        self.activate = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _local_preference = self.local_preference
        _as_prepends = self.as_prepends
        _activate = self.activate
        if _local_preference is not None:
            children['local-preference'] = _local_preference.to_gdata()
        if _as_prepends is not None:
            children['as-prepends'] = _as_prepends.to_gdata()
        if _activate is not None:
            children['activate'] = _activate.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance(local_preference=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference.from_gdata(n.get_opt_container("local-preference")), as_prepends=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends.from_gdata(n.get_opt_container("as-prepends")), activate=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate.from_gdata(n.get_opt_container("activate")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance(local_preference=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__local_preference.from_xml(yang.gdata.get_xml_opt_child(n, "local-preference")), as_prepends=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__as_prepends.from_xml(yang.gdata.get_xml_opt_child(n, "as-prepends")), activate=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance__activate.from_xml(yang.gdata.get_xml_opt_child(n, "activate")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__buffers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message(yang.adata.MNode):
    buffers: ?int
    non_circular: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular

    mut def __init__(self, buffers: ?int, non_circular: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.buffers = buffers
        self.non_circular = non_circular
        self_non_circular = self.non_circular
        if self_non_circular is not None:
            self_non_circular._parent = self

    mut def create_non_circular(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular()
        self.non_circular = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _buffers = self.buffers
        _non_circular = self.non_circular
        if _buffers is not None:
            children['buffers'] = yang.gdata.Leaf('uint32', _buffers)
        if _non_circular is not None:
            children['non-circular'] = _non_circular.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message(buffers=n.get_opt_int("buffers"), non_circular=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular.from_gdata(n.get_opt_container("non-circular")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message(buffers=yang.gdata.from_xml_opt_int(n, "buffers"), non_circular=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message__non_circular.from_xml(yang.gdata.get_xml_opt_child(n, "non-circular")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter__group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter(yang.adata.MNode):
    group: ?str

    mut def __init__(self, group: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.group = group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = yang.gdata.Leaf('string', _group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter(group=n.get_opt_str("group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter(group=yang.gdata.from_xml_opt_str(n, "group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering(yang.adata.MNode):
    message: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message
    logging: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging
    attribute_filter: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter

    mut def __init__(self, message: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message=None, logging: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging=None, attribute_filter: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if message is not None:
            self.message = message
        else:
            self.message = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message()
        self_message = self.message
        if self_message is not None:
            self_message._parent = self
        if logging is not None:
            self.logging = logging
        else:
            self.logging = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging()
        self_logging = self.logging
        if self_logging is not None:
            self_logging._parent = self
        if attribute_filter is not None:
            self.attribute_filter = attribute_filter
        else:
            self.attribute_filter = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter()
        self_attribute_filter = self.attribute_filter
        if self_attribute_filter is not None:
            self_attribute_filter._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _message = self.message
        _logging = self.logging
        _attribute_filter = self.attribute_filter
        if _message is not None:
            children['message'] = _message.to_gdata()
        if _logging is not None:
            children['logging'] = _logging.to_gdata()
        if _attribute_filter is not None:
            children['attribute-filter'] = _attribute_filter.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering(message=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message.from_gdata(n.get_opt_container("message")), logging=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging.from_gdata(n.get_opt_container("logging")), attribute_filter=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter.from_gdata(n.get_opt_container("attribute-filter")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering(message=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__message.from_xml(yang.gdata.get_xml_opt_child(n, "message")), logging=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__logging.from_xml(yang.gdata.get_xml_opt_child(n, "logging")), attribute_filter=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering__attribute_filter.from_xml(yang.gdata.get_xml_opt_child(n, "attribute-filter")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling(yang.adata.MNode):
    avoid_reset: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset
    treat_as_withdraw: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw

    mut def __init__(self, avoid_reset: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset=None, treat_as_withdraw: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.avoid_reset = avoid_reset
        self_avoid_reset = self.avoid_reset
        if self_avoid_reset is not None:
            self_avoid_reset._parent = self
        self.treat_as_withdraw = treat_as_withdraw
        self_treat_as_withdraw = self.treat_as_withdraw
        if self_treat_as_withdraw is not None:
            self_treat_as_withdraw._parent = self

    mut def create_avoid_reset(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset()
        self.avoid_reset = res
        return res

    mut def create_treat_as_withdraw(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw()
        self.treat_as_withdraw = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _avoid_reset = self.avoid_reset
        _treat_as_withdraw = self.treat_as_withdraw
        if _avoid_reset is not None:
            children['avoid-reset'] = _avoid_reset.to_gdata()
        if _treat_as_withdraw is not None:
            children['treat-as-withdraw'] = _treat_as_withdraw.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling(avoid_reset=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset.from_gdata(n.get_opt_container("avoid-reset")), treat_as_withdraw=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw.from_gdata(n.get_opt_container("treat-as-withdraw")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling(avoid_reset=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__avoid_reset.from_xml(yang.gdata.get_xml_opt_child(n, "avoid-reset")), treat_as_withdraw=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling__treat_as_withdraw.from_xml(yang.gdata.get_xml_opt_child(n, "treat-as-withdraw")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in(yang.adata.MNode):
    filtering: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering
    error_handling: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling

    mut def __init__(self, filtering: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering=None, error_handling: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.filtering = filtering
        self_filtering = self.filtering
        if self_filtering is not None:
            self_filtering._parent = self
        if error_handling is not None:
            self.error_handling = error_handling
        else:
            self.error_handling = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling()
        self_error_handling = self.error_handling
        if self_error_handling is not None:
            self_error_handling._parent = self

    mut def create_filtering(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering()
        self.filtering = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _filtering = self.filtering
        _error_handling = self.error_handling
        if _filtering is not None:
            children['filtering'] = _filtering.to_gdata()
        if _error_handling is not None:
            children['error-handling'] = _error_handling.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in(filtering=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering.from_gdata(n.get_opt_container("filtering")), error_handling=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling.from_gdata(n.get_opt_container("error-handling")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in(filtering=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__filtering.from_xml(yang.gdata.get_xml_opt_child(n, "filtering")), error_handling=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in__error_handling.from_xml(yang.gdata.get_xml_opt_child(n, "error-handling")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update(yang.adata.MNode):
    in_: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in

    mut def __init__(self, in_: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if in_ is not None:
            self.in_ = in_
        else:
            self.in_ = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in()
        self_in_ = self.in_
        if self_in_ is not None:
            self_in_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_ = self.in_
        if _in_ is not None:
            children['in'] = _in_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update(in_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in.from_gdata(n.get_opt_container("in")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update(in_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update__in.from_xml(yang.gdata.get_xml_opt_child(n, "in")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__remote_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__remote_as_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use__session_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use__neighbor_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use(yang.adata.MNode):
    session_group: ?str
    neighbor_group: ?str

    mut def __init__(self, session_group: ?str, neighbor_group: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.session_group = session_group
        self.neighbor_group = neighbor_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _session_group = self.session_group
        _neighbor_group = self.neighbor_group
        if _session_group is not None:
            children['session-group'] = yang.gdata.Leaf('string', _session_group)
        if _neighbor_group is not None:
            children['neighbor-group'] = yang.gdata.Leaf('string', _neighbor_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use(session_group=n.get_opt_str("session-group"), neighbor_group=n.get_opt_str("neighbor-group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use(session_group=yang.gdata.from_xml_opt_str(n, "session-group"), neighbor_group=yang.gdata.from_xml_opt_str(n, "neighbor-group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval__time_in_seconds(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval__time_in_milliseconds(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval(yang.adata.MNode):
    time_in_seconds: int
    time_in_milliseconds: ?int

    mut def __init__(self, time_in_seconds: int, time_in_milliseconds: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.time_in_seconds = time_in_seconds
        self.time_in_milliseconds = time_in_milliseconds

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _time_in_seconds = self.time_in_seconds
        _time_in_milliseconds = self.time_in_milliseconds
        if _time_in_seconds is not None:
            children['time-in-seconds'] = yang.gdata.Leaf('uint32', _time_in_seconds)
        if _time_in_milliseconds is not None:
            children['time-in-milliseconds'] = yang.gdata.Leaf('uint32', _time_in_milliseconds)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval(time_in_seconds=n.get_int("time-in-seconds"), time_in_milliseconds=n.get_opt_int("time-in-milliseconds"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval(time_in_seconds=yang.gdata.from_xml_int(n, "time-in-seconds"), time_in_milliseconds=yang.gdata.from_xml_opt_int(n, "time-in-milliseconds"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client()
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__maximum_hop_count(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop(yang.adata.MNode):
    maximum_hop_count: int
    mpls: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls

    mut def __init__(self, maximum_hop_count: int, mpls: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.maximum_hop_count = maximum_hop_count
        self.mpls = mpls
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self

    mut def create_mpls(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls()
        self.mpls = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_hop_count = self.maximum_hop_count
        _mpls = self.mpls
        if _maximum_hop_count is not None:
            children['maximum-hop-count'] = yang.gdata.Leaf('uint32', _maximum_hop_count)
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop(maximum_hop_count=n.get_int("maximum-hop-count"), mpls=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls.from_gdata(n.get_opt_container("mpls")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop(maximum_hop_count=yang.gdata.from_xml_int(n, "maximum-hop-count"), mpls=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__initial_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss(yang.adata.MNode):
    initial_mss: ?int
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable

    mut def __init__(self, initial_mss: ?int, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.initial_mss = initial_mss
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_mss = self.initial_mss
        _inheritance_disable = self.inheritance_disable
        if _initial_mss is not None:
            children['initial-mss'] = yang.gdata.Leaf('uint32', _initial_mss)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss(initial_mss=n.get_opt_int("initial-mss"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss(initial_mss=yang.gdata.from_xml_opt_int(n, "initial-mss"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp(yang.adata.MNode):
    mss: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss

    mut def __init__(self, mss: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.mss = mss
        self_mss = self.mss
        if self_mss is not None:
            self_mss._parent = self

    mut def create_mss(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss()
        self.mss = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mss = self.mss
        if _mss is not None:
            children['mss'] = _mss.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp(mss=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss.from_gdata(n.get_opt_container("mss")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp(mss=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp__mss.from_xml(yang.gdata.get_xml_opt_child(n, "mss")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server__server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry(yang.adata.MNode):
    server_id: int

    mut def __init__(self, server_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server_id = server_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server_id = self.server_id
        if _server_id is not None:
            children['server-id'] = yang.gdata.Leaf('uint32', _server_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.server_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry(server_id=n.get_int("server-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry(server_id=yang.gdata.from_xml_int(n, "server-id"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'server'
        self.elements = elements

    mut def create(self, server_id):
        for e in self.elements:
            match = True
            if e.server_id != server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry(server_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server(elements=server)
        self.server._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        if _server is not None:
            children['server'] = _server.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server.from_gdata(n.get_opt_list("server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers__server.from_xml(yang.gdata.get_xml_children(n, "server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if servers is not None:
            self.servers = servers
        else:
            self.servers = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers()
        self_servers = self.servers
        if self_servers is not None:
            self_servers._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers.from_gdata(n.get_opt_container("servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate__servers.from_xml(yang.gdata.get_xml_opt_child(n, "servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect(yang.adata.MNode):
    strict_mode: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable

    mut def __init__(self, strict_mode: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.strict_mode = strict_mode
        self_strict_mode = self.strict_mode
        if self_strict_mode is not None:
            self_strict_mode._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_strict_mode(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode()
        self.strict_mode = res
        return res

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _strict_mode = self.strict_mode
        _inheritance_disable = self.inheritance_disable
        if _strict_mode is not None:
            children['strict-mode'] = _strict_mode.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect(strict_mode=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode.from_gdata(n.get_opt_container("strict-mode")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect(strict_mode=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__strict_mode.from_xml(yang.gdata.get_xml_opt_child(n, "strict-mode")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd(yang.adata.MNode):
    fast_detect: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect
    minimum_interval: ?int
    multiplier: ?int

    mut def __init__(self, fast_detect: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect=None, minimum_interval: ?int, multiplier: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.fast_detect = fast_detect
        self_fast_detect = self.fast_detect
        if self_fast_detect is not None:
            self_fast_detect._parent = self
        self.minimum_interval = minimum_interval
        self.multiplier = multiplier

    mut def create_fast_detect(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect()
        self.fast_detect = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fast_detect = self.fast_detect
        _minimum_interval = self.minimum_interval
        _multiplier = self.multiplier
        if _fast_detect is not None:
            children['fast-detect'] = _fast_detect.to_gdata()
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('uint32', _minimum_interval)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd(fast_detect=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect.from_gdata(n.get_opt_container("fast-detect")), minimum_interval=n.get_opt_int("minimum-interval"), multiplier=n.get_opt_int("multiplier"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd(fast_detect=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd__fast_detect.from_xml(yang.gdata.get_xml_opt_child(n, "fast-detect")), minimum_interval=yang.gdata.from_xml_opt_int(n, "minimum-interval"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain(yang.adata.MNode):
    name: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable

    mut def __init__(self, name: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.name = name
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _inheritance_disable = self.inheritance_disable
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain(name=n.get_opt_str("name"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain(name=yang.gdata.from_xml_opt_str(n, "name"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as(yang.adata.MNode):
    dual_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as

    mut def __init__(self, dual_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.dual_as = dual_as
        self_dual_as = self.dual_as
        if self_dual_as is not None:
            self_dual_as._parent = self

    mut def create_dual_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as()
        self.dual_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dual_as = self.dual_as
        if _dual_as is not None:
            children['dual-as'] = _dual_as.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as(dual_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as.from_gdata(n.get_opt_container("dual-as")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as(dual_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as__dual_as.from_xml(yang.gdata.get_xml_opt_child(n, "dual-as")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend(yang.adata.MNode):
    replace_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as

    mut def __init__(self, replace_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.replace_as = replace_as
        self_replace_as = self.replace_as
        if self_replace_as is not None:
            self_replace_as._parent = self

    mut def create_replace_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as()
        self.replace_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _replace_as = self.replace_as
        if _replace_as is not None:
            children['replace-as'] = _replace_as.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend(replace_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as.from_gdata(n.get_opt_container("replace-as")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend(replace_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend__replace_as.from_xml(yang.gdata.get_xml_opt_child(n, "replace-as")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as(yang.adata.MNode):
    as_number: ?value
    no_prepend: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable

    mut def __init__(self, as_number: ?value, no_prepend: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.no_prepend = no_prepend
        self_no_prepend = self.no_prepend
        if self_no_prepend is not None:
            self_no_prepend._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_no_prepend(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend()
        self.no_prepend = res
        return res

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _no_prepend = self.no_prepend
        _inheritance_disable = self.inheritance_disable
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('union', _as_number)
        if _no_prepend is not None:
            children['no-prepend'] = _no_prepend.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as(as_number=n.get_opt_value("as-number"), no_prepend=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend.from_gdata(n.get_opt_container("no-prepend")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as(as_number=yang.gdata.from_xml_opt_value(n, "as-number"), no_prepend=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__no_prepend.from_xml(yang.gdata.get_xml_opt_child(n, "no-prepend")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(yang.adata.MNode):
    encrypted: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable

    mut def __init__(self, encrypted: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.encrypted = encrypted
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        _inheritance_disable = self.inheritance_disable
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(encrypted=n.get_opt_str("encrypted"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(encrypted=yang.gdata.from_xml_opt_str(n, "encrypted"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size__receive_socket_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size__bgp_read_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size(yang.adata.MNode):
    receive_socket_buffer_size: int
    bgp_read_buffer_size: ?int

    mut def __init__(self, receive_socket_buffer_size: int, bgp_read_buffer_size: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.receive_socket_buffer_size = receive_socket_buffer_size
        self.bgp_read_buffer_size = bgp_read_buffer_size

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive_socket_buffer_size = self.receive_socket_buffer_size
        _bgp_read_buffer_size = self.bgp_read_buffer_size
        if _receive_socket_buffer_size is not None:
            children['receive-socket-buffer-size'] = yang.gdata.Leaf('uint32', _receive_socket_buffer_size)
        if _bgp_read_buffer_size is not None:
            children['bgp-read-buffer-size'] = yang.gdata.Leaf('uint32', _bgp_read_buffer_size)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size(receive_socket_buffer_size=n.get_int("receive-socket-buffer-size"), bgp_read_buffer_size=n.get_opt_int("bgp-read-buffer-size"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size(receive_socket_buffer_size=yang.gdata.from_xml_int(n, "receive-socket-buffer-size"), bgp_read_buffer_size=yang.gdata.from_xml_opt_int(n, "bgp-read-buffer-size"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size__send_socket_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size__bgp_write_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size(yang.adata.MNode):
    send_socket_buffer_size: int
    bgp_write_buffer_size: ?int

    mut def __init__(self, send_socket_buffer_size: int, bgp_write_buffer_size: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.send_socket_buffer_size = send_socket_buffer_size
        self.bgp_write_buffer_size = bgp_write_buffer_size

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send_socket_buffer_size = self.send_socket_buffer_size
        _bgp_write_buffer_size = self.bgp_write_buffer_size
        if _send_socket_buffer_size is not None:
            children['send-socket-buffer-size'] = yang.gdata.Leaf('uint32', _send_socket_buffer_size)
        if _bgp_write_buffer_size is not None:
            children['bgp-write-buffer-size'] = yang.gdata.Leaf('uint32', _bgp_write_buffer_size)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size(send_socket_buffer_size=n.get_int("send-socket-buffer-size"), bgp_write_buffer_size=n.get_opt_int("bgp-write-buffer-size"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size(send_socket_buffer_size=yang.gdata.from_xml_int(n, "send-socket-buffer-size"), bgp_write_buffer_size=yang.gdata.from_xml_opt_int(n, "bgp-write-buffer-size"))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers__keepalive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers__holdtime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers__minimum_acceptable_holdtime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers(yang.adata.MNode):
    keepalive_interval: int
    holdtime: int
    minimum_acceptable_holdtime: ?int

    mut def __init__(self, keepalive_interval: int, holdtime: int, minimum_acceptable_holdtime: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.keepalive_interval = keepalive_interval
        self.holdtime = holdtime
        self.minimum_acceptable_holdtime = minimum_acceptable_holdtime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keepalive_interval = self.keepalive_interval
        _holdtime = self.holdtime
        _minimum_acceptable_holdtime = self.minimum_acceptable_holdtime
        if _keepalive_interval is not None:
            children['keepalive-interval'] = yang.gdata.Leaf('uint32', _keepalive_interval)
        if _holdtime is not None:
            children['holdtime'] = yang.gdata.Leaf('union', _holdtime)
        if _minimum_acceptable_holdtime is not None:
            children['minimum-acceptable-holdtime'] = yang.gdata.Leaf('union', _minimum_acceptable_holdtime)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers(keepalive_interval=n.get_int("keepalive-interval"), holdtime=n.get_int("holdtime"), minimum_acceptable_holdtime=n.get_opt_int("minimum-acceptable-holdtime"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers(keepalive_interval=yang.gdata.from_xml_int(n, "keepalive-interval"), holdtime=yang.gdata.from_xml_int(n, "holdtime"), minimum_acceptable_holdtime=yang.gdata.from_xml_opt_int(n, "minimum-acceptable-holdtime"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address(yang.adata.MNode):
    ip_address: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable

    mut def __init__(self, ip_address: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _inheritance_disable = self.inheritance_disable
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('union', _ip_address)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address(ip_address=n.get_opt_str("ip-address"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address(ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address

    mut def __init__(self, address: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self

    mut def create_address(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address()
        self.address = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local(address=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address.from_gdata(n.get_opt_container("address")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local(address=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local__address.from_xml(yang.gdata.get_xml_opt_child(n, "address")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__message_log_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in(yang.adata.MNode):
    message_log_buffer_size: ?int
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable
    inheritance_diable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable

    mut def __init__(self, message_log_buffer_size: ?int, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable=None, inheritance_diable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.message_log_buffer_size = message_log_buffer_size
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.inheritance_diable = inheritance_diable
        self_inheritance_diable = self.inheritance_diable
        if self_inheritance_diable is not None:
            self_inheritance_diable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable()
        self.disable = res
        return res

    mut def create_inheritance_diable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable()
        self.inheritance_diable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _message_log_buffer_size = self.message_log_buffer_size
        _disable = self.disable
        _inheritance_diable = self.inheritance_diable
        if _message_log_buffer_size is not None:
            children['message-log-buffer-size'] = yang.gdata.Leaf('uint32', _message_log_buffer_size)
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _inheritance_diable is not None:
            children['inheritance-diable'] = _inheritance_diable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in(message_log_buffer_size=n.get_opt_int("message-log-buffer-size"), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable.from_gdata(n.get_opt_container("disable")), inheritance_diable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable.from_gdata(n.get_opt_container("inheritance-diable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in(message_log_buffer_size=yang.gdata.from_xml_opt_int(n, "message-log-buffer-size"), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), inheritance_diable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in__inheritance_diable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-diable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__message_log_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out(yang.adata.MNode):
    message_log_buffer_size: ?int
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable
    inheritance_diable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable

    mut def __init__(self, message_log_buffer_size: ?int, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable=None, inheritance_diable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.message_log_buffer_size = message_log_buffer_size
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.inheritance_diable = inheritance_diable
        self_inheritance_diable = self.inheritance_diable
        if self_inheritance_diable is not None:
            self_inheritance_diable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable()
        self.disable = res
        return res

    mut def create_inheritance_diable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable()
        self.inheritance_diable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _message_log_buffer_size = self.message_log_buffer_size
        _disable = self.disable
        _inheritance_diable = self.inheritance_diable
        if _message_log_buffer_size is not None:
            children['message-log-buffer-size'] = yang.gdata.Leaf('uint32', _message_log_buffer_size)
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _inheritance_diable is not None:
            children['inheritance-diable'] = _inheritance_diable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out(message_log_buffer_size=n.get_opt_int("message-log-buffer-size"), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable.from_gdata(n.get_opt_container("disable")), inheritance_diable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable.from_gdata(n.get_opt_container("inheritance-diable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out(message_log_buffer_size=yang.gdata.from_xml_opt_int(n, "message-log-buffer-size"), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), inheritance_diable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out__inheritance_diable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-diable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message(yang.adata.MNode):
    in_: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in
    out: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out

    mut def __init__(self, in_: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in=None, out: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if in_ is not None:
            self.in_ = in_
        else:
            self.in_ = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in()
        self_in_ = self.in_
        if self_in_ is not None:
            self_in_._parent = self
        if out is not None:
            self.out = out
        else:
            self.out = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out()
        self_out = self.out
        if self_out is not None:
            self_out._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_ = self.in_
        _out = self.out
        if _in_ is not None:
            children['in'] = _in_.to_gdata()
        if _out is not None:
            children['out'] = _out.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message(in_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in.from_gdata(n.get_opt_container("in")), out=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out.from_gdata(n.get_opt_container("out")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message(in_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__in.from_xml(yang.gdata.get_xml_opt_child(n, "in")), out=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message__out.from_xml(yang.gdata.get_xml_opt_child(n, "out")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes(yang.adata.MNode):
    detail: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable

    mut def __init__(self, detail: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail=None, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.detail = detail
        self_detail = self.detail
        if self_detail is not None:
            self_detail._parent = self
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_detail(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail()
        self.detail = res
        return res

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable()
        self.disable = res
        return res

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _detail = self.detail
        _disable = self.disable
        _inheritance_disable = self.inheritance_disable
        if _detail is not None:
            children['detail'] = _detail.to_gdata()
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes(detail=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail.from_gdata(n.get_opt_container("detail")), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable.from_gdata(n.get_opt_container("disable")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes(detail=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__detail.from_xml(yang.gdata.get_xml_opt_child(n, "detail")), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor(yang.adata.MNode):
    changes: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes

    mut def __init__(self, changes: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if changes is not None:
            self.changes = changes
        else:
            self.changes = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes()
        self_changes = self.changes
        if self_changes is not None:
            self_changes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _changes = self.changes
        if _changes is not None:
            children['changes'] = _changes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor(changes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes.from_gdata(n.get_opt_container("changes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor(changes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor__changes.from_xml(yang.gdata.get_xml_opt_child(n, "changes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log(yang.adata.MNode):
    message: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message
    neighbor: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor

    mut def __init__(self, message: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message=None, neighbor: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if message is not None:
            self.message = message
        else:
            self.message = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message()
        self_message = self.message
        if self_message is not None:
            self_message._parent = self
        if neighbor is not None:
            self.neighbor = neighbor
        else:
            self.neighbor = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor()
        self_neighbor = self.neighbor
        if self_neighbor is not None:
            self_neighbor._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _message = self.message
        _neighbor = self.neighbor
        if _message is not None:
            children['message'] = _message.to_gdata()
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log(message=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message.from_gdata(n.get_opt_container("message")), neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor.from_gdata(n.get_opt_container("neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log(message=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__message.from_xml(yang.gdata.get_xml_opt_child(n, "message")), neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log__neighbor.from_xml(yang.gdata.get_xml_opt_child(n, "neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet__mask_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet(yang.adata.MNode):
    ip_address: ?str
    mask_length: ?int

    mut def __init__(self, ip_address: ?str, mask_length: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ip_address = ip_address
        self.mask_length = mask_length

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _mask_length = self.mask_length
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('union', _ip_address)
        if _mask_length is not None:
            children['mask-length'] = yang.gdata.Leaf('uint32', _mask_length)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet(ip_address=n.get_opt_str("ip-address"), mask_length=n.get_opt_int("mask-length"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet(ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"), mask_length=yang.gdata.from_xml_opt_int(n, "mask-length"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz(yang.adata.MNode):
    cumulative: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable

    mut def __init__(self, cumulative: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.cumulative = cumulative
        self_cumulative = self.cumulative
        if self_cumulative is not None:
            self_cumulative._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_cumulative(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative()
        self.cumulative = res
        return res

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cumulative = self.cumulative
        _inheritance_disable = self.inheritance_disable
        if _cumulative is not None:
            children['cumulative'] = _cumulative.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz(cumulative=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative.from_gdata(n.get_opt_container("cumulative")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz(cumulative=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__cumulative.from_xml(yang.gdata.get_xml_opt_child(n, "cumulative")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode(yang.adata.MNode):
    active_only: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only
    passive_only: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only
    both: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both

    mut def __init__(self, active_only: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only=None, passive_only: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only=None, both: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.active_only = active_only
        self_active_only = self.active_only
        if self_active_only is not None:
            self_active_only._parent = self
        self.passive_only = passive_only
        self_passive_only = self.passive_only
        if self_passive_only is not None:
            self_passive_only._parent = self
        self.both = both
        self_both = self.both
        if self_both is not None:
            self_both._parent = self

    mut def create_active_only(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only()
        self.active_only = res
        return res

    mut def create_passive_only(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only()
        self.passive_only = res
        return res

    mut def create_both(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both()
        self.both = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _active_only = self.active_only
        _passive_only = self.passive_only
        _both = self.both
        if _active_only is not None:
            children['active-only'] = _active_only.to_gdata()
        if _passive_only is not None:
            children['passive-only'] = _passive_only.to_gdata()
        if _both is not None:
            children['both'] = _both.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode(active_only=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only.from_gdata(n.get_opt_container("active-only")), passive_only=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only.from_gdata(n.get_opt_container("passive-only")), both=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both.from_gdata(n.get_opt_container("both")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode(active_only=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__active_only.from_xml(yang.gdata.get_xml_opt_child(n, "active-only")), passive_only=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__passive_only.from_xml(yang.gdata.get_xml_opt_child(n, "passive-only")), both=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode__both.from_xml(yang.gdata.get_xml_opt_child(n, "both")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dscp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__precedence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress(yang.adata.MNode):
    four_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as
    all: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all
    extended_nexthop_encoding: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding

    mut def __init__(self, four_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as=None, all: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all=None, extended_nexthop_encoding: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.four_byte_as = four_byte_as
        self_four_byte_as = self.four_byte_as
        if self_four_byte_as is not None:
            self_four_byte_as._parent = self
        self.all = all
        self_all = self.all
        if self_all is not None:
            self_all._parent = self
        self.extended_nexthop_encoding = extended_nexthop_encoding
        self_extended_nexthop_encoding = self.extended_nexthop_encoding
        if self_extended_nexthop_encoding is not None:
            self_extended_nexthop_encoding._parent = self

    mut def create_four_byte_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as()
        self.four_byte_as = res
        return res

    mut def create_all(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all()
        self.all = res
        return res

    mut def create_extended_nexthop_encoding(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding()
        self.extended_nexthop_encoding = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _four_byte_as = self.four_byte_as
        _all = self.all
        _extended_nexthop_encoding = self.extended_nexthop_encoding
        if _four_byte_as is not None:
            children['four-byte-as'] = _four_byte_as.to_gdata()
        if _all is not None:
            children['all'] = _all.to_gdata()
        if _extended_nexthop_encoding is not None:
            children['extended-nexthop-encoding'] = _extended_nexthop_encoding.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress(four_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as.from_gdata(n.get_opt_container("four-byte-as")), all=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all.from_gdata(n.get_opt_container("all")), extended_nexthop_encoding=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding.from_gdata(n.get_opt_container("extended-nexthop-encoding")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress(four_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__four_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as")), all=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__all.from_xml(yang.gdata.get_xml_opt_child(n, "all")), extended_nexthop_encoding=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress__extended_nexthop_encoding.from_xml(yang.gdata.get_xml_opt_child(n, "extended-nexthop-encoding")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths(yang.adata.MNode):
    send: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send
    receive: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive

    mut def __init__(self, send: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send=None, receive: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.send = send
        self_send = self.send
        if self_send is not None:
            self_send._parent = self
        self.receive = receive
        self_receive = self.receive
        if self_receive is not None:
            self_receive._parent = self

    mut def create_send(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send()
        self.send = res
        return res

    mut def create_receive(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive()
        self.receive = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send = self.send
        _receive = self.receive
        if _send is not None:
            children['send'] = _send.to_gdata()
        if _receive is not None:
            children['receive'] = _receive.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths(send=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send.from_gdata(n.get_opt_container("send")), receive=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive.from_gdata(n.get_opt_container("receive")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths(send=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__send.from_xml(yang.gdata.get_xml_opt_child(n, "send")), receive=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths__receive.from_xml(yang.gdata.get_xml_opt_child(n, "receive")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability(yang.adata.MNode):
    suppress: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress
    additional_paths: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths

    mut def __init__(self, suppress: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress=None, additional_paths: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if suppress is not None:
            self.suppress = suppress
        else:
            self.suppress = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress()
        self_suppress = self.suppress
        if self_suppress is not None:
            self_suppress._parent = self
        if additional_paths is not None:
            self.additional_paths = additional_paths
        else:
            self.additional_paths = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths()
        self_additional_paths = self.additional_paths
        if self_additional_paths is not None:
            self_additional_paths._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _suppress = self.suppress
        _additional_paths = self.additional_paths
        if _suppress is not None:
            children['suppress'] = _suppress.to_gdata()
        if _additional_paths is not None:
            children['additional-paths'] = _additional_paths.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability(suppress=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress.from_gdata(n.get_opt_container("suppress")), additional_paths=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths.from_gdata(n.get_opt_container("additional-paths")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability(suppress=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__suppress.from_xml(yang.gdata.get_xml_opt_child(n, "suppress")), additional_paths=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability__additional_paths.from_xml(yang.gdata.get_xml_opt_child(n, "additional-paths")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable()
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__stalepath_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable
    restart_time: ?int
    stalepath_time: ?int

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable=None, restart_time: ?int, stalepath_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.restart_time = restart_time
        self.stalepath_time = stalepath_time

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _restart_time = self.restart_time
        _stalepath_time = self.stalepath_time
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _restart_time is not None:
            children['restart-time'] = yang.gdata.Leaf('uint32', _restart_time)
        if _stalepath_time is not None:
            children['stalepath-time'] = yang.gdata.Leaf('uint32', _stalepath_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable.from_gdata(n.get_opt_container("disable")), restart_time=n.get_opt_int("restart-time"), stalepath_time=n.get_opt_int("stalepath-time"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), restart_time=yang.gdata.from_xml_opt_int(n, "restart-time"), stalepath_time=yang.gdata.from_xml_opt_int(n, "stalepath-time"))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as(disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id__route_reflector_cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id(yang.adata.MNode):
    route_reflector_cluster_id: ?int
    ip_address: ?str

    mut def __init__(self, route_reflector_cluster_id: ?int, ip_address: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_reflector_cluster_id = route_reflector_cluster_id
        self.ip_address = ip_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_reflector_cluster_id = self.route_reflector_cluster_id
        _ip_address = self.ip_address
        if _route_reflector_cluster_id is not None:
            children['route-reflector-cluster-id'] = yang.gdata.Leaf('uint32', _route_reflector_cluster_id)
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id(route_reflector_cluster_id=n.get_opt_int("route-reflector-cluster-id"), ip_address=n.get_opt_str("ip-address"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id(route_reflector_cluster_id=yang.gdata.from_xml_opt_int(n, "route-reflector-cluster-id"), ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__maximum_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__idle_watch_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set__peer_set_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry(yang.adata.MNode):
    peer_set_id: int

    mut def __init__(self, peer_set_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.peer_set_id = peer_set_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _peer_set_id = self.peer_set_id
        if _peer_set_id is not None:
            children['peer-set-id'] = yang.gdata.Leaf('uint32', _peer_set_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.peer_set_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry(peer_set_id=n.get_int("peer-set-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry(peer_set_id=yang.gdata.from_xml_int(n, "peer-set-id"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'peer-set'
        self.elements = elements

    mut def create(self, peer_set_id):
        for e in self.elements:
            match = True
            if e.peer_set_id != peer_set_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry(peer_set_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['peer-set-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets(yang.adata.MNode):
    peer_set: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set

    mut def __init__(self, peer_set: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.peer_set = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set(elements=peer_set)
        self.peer_set._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _peer_set = self.peer_set
        if _peer_set is not None:
            children['peer-set'] = _peer_set.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets(peer_set=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set.from_gdata(n.get_opt_list("peer-set")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets(peer_set=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets__peer_set.from_xml(yang.gdata.get_xml_children(n, "peer-set")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__key_chain_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options(yang.adata.MNode):
    enable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable
    disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable
    accept_ao_mismatch_connection: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection

    mut def __init__(self, enable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable=None, disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable=None, accept_ao_mismatch_connection: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.enable = enable
        self_enable = self.enable
        if self_enable is not None:
            self_enable._parent = self
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.accept_ao_mismatch_connection = accept_ao_mismatch_connection
        self_accept_ao_mismatch_connection = self.accept_ao_mismatch_connection
        if self_accept_ao_mismatch_connection is not None:
            self_accept_ao_mismatch_connection._parent = self

    mut def create_enable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable()
        self.enable = res
        return res

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable()
        self.disable = res
        return res

    mut def create_accept_ao_mismatch_connection(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection()
        self.accept_ao_mismatch_connection = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable = self.enable
        _disable = self.disable
        _accept_ao_mismatch_connection = self.accept_ao_mismatch_connection
        if _enable is not None:
            children['enable'] = _enable.to_gdata()
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _accept_ao_mismatch_connection is not None:
            children['accept-ao-mismatch-connection'] = _accept_ao_mismatch_connection.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options(enable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable.from_gdata(n.get_opt_container("enable")), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable.from_gdata(n.get_opt_container("disable")), accept_ao_mismatch_connection=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection.from_gdata(n.get_opt_container("accept-ao-mismatch-connection")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options(enable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__enable.from_xml(yang.gdata.get_xml_opt_child(n, "enable")), disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), accept_ao_mismatch_connection=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options__accept_ao_mismatch_connection.from_xml(yang.gdata.get_xml_opt_child(n, "accept-ao-mismatch-connection")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao(yang.adata.MNode):
    key_chain_name: ?str
    include_tcp_options: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable

    mut def __init__(self, key_chain_name: ?str, include_tcp_options: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options=None, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.key_chain_name = key_chain_name
        if include_tcp_options is not None:
            self.include_tcp_options = include_tcp_options
        else:
            self.include_tcp_options = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options()
        self_include_tcp_options = self.include_tcp_options
        if self_include_tcp_options is not None:
            self_include_tcp_options._parent = self
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _key_chain_name = self.key_chain_name
        _include_tcp_options = self.include_tcp_options
        _inheritance_disable = self.inheritance_disable
        if _key_chain_name is not None:
            children['key-chain-name'] = yang.gdata.Leaf('string', _key_chain_name)
        if _include_tcp_options is not None:
            children['include-tcp-options'] = _include_tcp_options.to_gdata()
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao(key_chain_name=n.get_opt_str("key-chain-name"), include_tcp_options=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options.from_gdata(n.get_opt_container("include-tcp-options")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao(key_chain_name=yang.gdata.from_xml_opt_str(n, "key-chain-name"), include_tcp_options=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__include_tcp_options.from_xml(yang.gdata.get_xml_opt_child(n, "include-tcp-options")), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__maximum_prefix_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(yang.adata.MNode):
    neighbor_group_name: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families
    graceful_maintenance: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance
    update: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update
    remote_as: ?value
    remote_as_list: ?str
    use: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use
    advertisement_interval: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval
    description: ?str
    ignore_connected_check: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check
    internal_vpn_client: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client
    ebgp_multihop: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp
    bmp_activate: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate
    bfd: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd
    keychain: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain
    local_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as
    password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password
    receive_buffer_size: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size
    send_buffer_size: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown
    timers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers
    local: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local
    log: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log
    update_source: ?str
    local_address_subnet: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet
    dmz_link_bandwidth: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth
    ebgp_recv_extcommunity_dmz: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz
    ebgp_send_extcommunity_dmz: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz
    ttl_security: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security
    session_open_mode: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode
    dscp: ?str
    precedence: ?str
    capability: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability
    graceful_restart: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart
    enforce_first_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as
    cluster_id: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id
    maximum_peers: ?int
    idle_watch_time: ?int
    egress_engineering: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering
    peer_sets: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets
    ao: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao
    maximum_prefix_restart_time: ?int

    mut def __init__(self, neighbor_group_name: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families=None, graceful_maintenance: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance=None, update: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update=None, remote_as: ?value, remote_as_list: ?str, use: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use=None, advertisement_interval: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval=None, description: ?str, ignore_connected_check: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check=None, internal_vpn_client: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client=None, ebgp_multihop: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop=None, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp=None, bmp_activate: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate=None, bfd: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd=None, keychain: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain=None, local_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as=None, password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password=None, receive_buffer_size: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size=None, send_buffer_size: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size=None, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown=None, timers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers=None, local: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local=None, log: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log=None, update_source: ?str, local_address_subnet: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet=None, dmz_link_bandwidth: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth=None, ebgp_recv_extcommunity_dmz: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz=None, ebgp_send_extcommunity_dmz: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz=None, ttl_security: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security=None, session_open_mode: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode=None, dscp: ?str, precedence: ?str, capability: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability=None, graceful_restart: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart=None, enforce_first_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as=None, cluster_id: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id=None, maximum_peers: ?int, idle_watch_time: ?int, egress_engineering: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering=None, peer_sets: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets=None, ao: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao=None, maximum_prefix_restart_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_group_name = neighbor_group_name
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        self.graceful_maintenance = graceful_maintenance
        self_graceful_maintenance = self.graceful_maintenance
        if self_graceful_maintenance is not None:
            self_graceful_maintenance._parent = self
        if update is not None:
            self.update = update
        else:
            self.update = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update()
        self_update = self.update
        if self_update is not None:
            self_update._parent = self
        self.remote_as = remote_as
        self.remote_as_list = remote_as_list
        if use is not None:
            self.use = use
        else:
            self.use = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use()
        self_use = self.use
        if self_use is not None:
            self_use._parent = self
        self.advertisement_interval = advertisement_interval
        self_advertisement_interval = self.advertisement_interval
        if self_advertisement_interval is not None:
            self_advertisement_interval._parent = self
        self.description = description
        self.ignore_connected_check = ignore_connected_check
        self_ignore_connected_check = self.ignore_connected_check
        if self_ignore_connected_check is not None:
            self_ignore_connected_check._parent = self
        self.internal_vpn_client = internal_vpn_client
        self_internal_vpn_client = self.internal_vpn_client
        if self_internal_vpn_client is not None:
            self_internal_vpn_client._parent = self
        self.ebgp_multihop = ebgp_multihop
        self_ebgp_multihop = self.ebgp_multihop
        if self_ebgp_multihop is not None:
            self_ebgp_multihop._parent = self
        if tcp is not None:
            self.tcp = tcp
        else:
            self.tcp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp()
        self_tcp = self.tcp
        if self_tcp is not None:
            self_tcp._parent = self
        if bmp_activate is not None:
            self.bmp_activate = bmp_activate
        else:
            self.bmp_activate = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate()
        self_bmp_activate = self.bmp_activate
        if self_bmp_activate is not None:
            self_bmp_activate._parent = self
        if bfd is not None:
            self.bfd = bfd
        else:
            self.bfd = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd()
        self_bfd = self.bfd
        if self_bfd is not None:
            self_bfd._parent = self
        self.keychain = keychain
        self_keychain = self.keychain
        if self_keychain is not None:
            self_keychain._parent = self
        self.local_as = local_as
        self_local_as = self.local_as
        if self_local_as is not None:
            self_local_as._parent = self
        self.password = password
        self_password = self.password
        if self_password is not None:
            self_password._parent = self
        self.receive_buffer_size = receive_buffer_size
        self_receive_buffer_size = self.receive_buffer_size
        if self_receive_buffer_size is not None:
            self_receive_buffer_size._parent = self
        self.send_buffer_size = send_buffer_size
        self_send_buffer_size = self.send_buffer_size
        if self_send_buffer_size is not None:
            self_send_buffer_size._parent = self
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.timers = timers
        self_timers = self.timers
        if self_timers is not None:
            self_timers._parent = self
        if local is not None:
            self.local = local
        else:
            self.local = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local()
        self_local = self.local
        if self_local is not None:
            self_local._parent = self
        if log is not None:
            self.log = log
        else:
            self.log = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log()
        self_log = self.log
        if self_log is not None:
            self_log._parent = self
        self.update_source = update_source
        if local_address_subnet is not None:
            self.local_address_subnet = local_address_subnet
        else:
            self.local_address_subnet = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet()
        self_local_address_subnet = self.local_address_subnet
        if self_local_address_subnet is not None:
            self_local_address_subnet._parent = self
        self.dmz_link_bandwidth = dmz_link_bandwidth
        self_dmz_link_bandwidth = self.dmz_link_bandwidth
        if self_dmz_link_bandwidth is not None:
            self_dmz_link_bandwidth._parent = self
        self.ebgp_recv_extcommunity_dmz = ebgp_recv_extcommunity_dmz
        self_ebgp_recv_extcommunity_dmz = self.ebgp_recv_extcommunity_dmz
        if self_ebgp_recv_extcommunity_dmz is not None:
            self_ebgp_recv_extcommunity_dmz._parent = self
        self.ebgp_send_extcommunity_dmz = ebgp_send_extcommunity_dmz
        self_ebgp_send_extcommunity_dmz = self.ebgp_send_extcommunity_dmz
        if self_ebgp_send_extcommunity_dmz is not None:
            self_ebgp_send_extcommunity_dmz._parent = self
        self.ttl_security = ttl_security
        self_ttl_security = self.ttl_security
        if self_ttl_security is not None:
            self_ttl_security._parent = self
        if session_open_mode is not None:
            self.session_open_mode = session_open_mode
        else:
            self.session_open_mode = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode()
        self_session_open_mode = self.session_open_mode
        if self_session_open_mode is not None:
            self_session_open_mode._parent = self
        self.dscp = dscp
        self.precedence = precedence
        if capability is not None:
            self.capability = capability
        else:
            self.capability = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability()
        self_capability = self.capability
        if self_capability is not None:
            self_capability._parent = self
        self.graceful_restart = graceful_restart
        self_graceful_restart = self.graceful_restart
        if self_graceful_restart is not None:
            self_graceful_restart._parent = self
        self.enforce_first_as = enforce_first_as
        self_enforce_first_as = self.enforce_first_as
        if self_enforce_first_as is not None:
            self_enforce_first_as._parent = self
        if cluster_id is not None:
            self.cluster_id = cluster_id
        else:
            self.cluster_id = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id()
        self_cluster_id = self.cluster_id
        if self_cluster_id is not None:
            self_cluster_id._parent = self
        self.maximum_peers = maximum_peers
        self.idle_watch_time = idle_watch_time
        self.egress_engineering = egress_engineering
        self_egress_engineering = self.egress_engineering
        if self_egress_engineering is not None:
            self_egress_engineering._parent = self
        if peer_sets is not None:
            self.peer_sets = peer_sets
        else:
            self.peer_sets = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets()
        self_peer_sets = self.peer_sets
        if self_peer_sets is not None:
            self_peer_sets._parent = self
        if ao is not None:
            self.ao = ao
        else:
            self.ao = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao()
        self_ao = self.ao
        if self_ao is not None:
            self_ao._parent = self
        self.maximum_prefix_restart_time = maximum_prefix_restart_time

    mut def create_graceful_maintenance(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance()
        self.graceful_maintenance = res
        return res

    mut def create_advertisement_interval(self, time_in_seconds):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval(time_in_seconds)
        self.advertisement_interval = res
        return res

    mut def create_ignore_connected_check(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check()
        self.ignore_connected_check = res
        return res

    mut def create_internal_vpn_client(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client()
        self.internal_vpn_client = res
        return res

    mut def create_ebgp_multihop(self, maximum_hop_count):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop(maximum_hop_count)
        self.ebgp_multihop = res
        return res

    mut def create_keychain(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain()
        self.keychain = res
        return res

    mut def create_local_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as()
        self.local_as = res
        return res

    mut def create_password(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password()
        self.password = res
        return res

    mut def create_receive_buffer_size(self, receive_socket_buffer_size):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size(receive_socket_buffer_size)
        self.receive_buffer_size = res
        return res

    mut def create_send_buffer_size(self, send_socket_buffer_size):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size(send_socket_buffer_size)
        self.send_buffer_size = res
        return res

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown()
        self.shutdown = res
        return res

    mut def create_timers(self, keepalive_interval, holdtime):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers(keepalive_interval, holdtime)
        self.timers = res
        return res

    mut def create_dmz_link_bandwidth(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth()
        self.dmz_link_bandwidth = res
        return res

    mut def create_ebgp_recv_extcommunity_dmz(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz()
        self.ebgp_recv_extcommunity_dmz = res
        return res

    mut def create_ebgp_send_extcommunity_dmz(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz()
        self.ebgp_send_extcommunity_dmz = res
        return res

    mut def create_ttl_security(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security()
        self.ttl_security = res
        return res

    mut def create_graceful_restart(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart()
        self.graceful_restart = res
        return res

    mut def create_enforce_first_as(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as()
        self.enforce_first_as = res
        return res

    mut def create_egress_engineering(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering()
        self.egress_engineering = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_group_name = self.neighbor_group_name
        _address_families = self.address_families
        _graceful_maintenance = self.graceful_maintenance
        _update = self.update
        _remote_as = self.remote_as
        _remote_as_list = self.remote_as_list
        _use = self.use
        _advertisement_interval = self.advertisement_interval
        _description = self.description
        _ignore_connected_check = self.ignore_connected_check
        _internal_vpn_client = self.internal_vpn_client
        _ebgp_multihop = self.ebgp_multihop
        _tcp = self.tcp
        _bmp_activate = self.bmp_activate
        _bfd = self.bfd
        _keychain = self.keychain
        _local_as = self.local_as
        _password = self.password
        _receive_buffer_size = self.receive_buffer_size
        _send_buffer_size = self.send_buffer_size
        _shutdown = self.shutdown
        _timers = self.timers
        _local = self.local
        _log = self.log
        _update_source = self.update_source
        _local_address_subnet = self.local_address_subnet
        _dmz_link_bandwidth = self.dmz_link_bandwidth
        _ebgp_recv_extcommunity_dmz = self.ebgp_recv_extcommunity_dmz
        _ebgp_send_extcommunity_dmz = self.ebgp_send_extcommunity_dmz
        _ttl_security = self.ttl_security
        _session_open_mode = self.session_open_mode
        _dscp = self.dscp
        _precedence = self.precedence
        _capability = self.capability
        _graceful_restart = self.graceful_restart
        _enforce_first_as = self.enforce_first_as
        _cluster_id = self.cluster_id
        _maximum_peers = self.maximum_peers
        _idle_watch_time = self.idle_watch_time
        _egress_engineering = self.egress_engineering
        _peer_sets = self.peer_sets
        _ao = self.ao
        _maximum_prefix_restart_time = self.maximum_prefix_restart_time
        if _neighbor_group_name is not None:
            children['neighbor-group-name'] = yang.gdata.Leaf('string', _neighbor_group_name)
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _graceful_maintenance is not None:
            children['graceful-maintenance'] = _graceful_maintenance.to_gdata()
        if _update is not None:
            children['update'] = _update.to_gdata()
        if _remote_as is not None:
            children['remote-as'] = yang.gdata.Leaf('union', _remote_as)
        if _remote_as_list is not None:
            children['remote-as-list'] = yang.gdata.Leaf('string', _remote_as_list)
        if _use is not None:
            children['use'] = _use.to_gdata()
        if _advertisement_interval is not None:
            children['advertisement-interval'] = _advertisement_interval.to_gdata()
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _ignore_connected_check is not None:
            children['ignore-connected-check'] = _ignore_connected_check.to_gdata()
        if _internal_vpn_client is not None:
            children['internal-vpn-client'] = _internal_vpn_client.to_gdata()
        if _ebgp_multihop is not None:
            children['ebgp-multihop'] = _ebgp_multihop.to_gdata()
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        if _bmp_activate is not None:
            children['bmp-activate'] = _bmp_activate.to_gdata()
        if _bfd is not None:
            children['bfd'] = _bfd.to_gdata()
        if _keychain is not None:
            children['keychain'] = _keychain.to_gdata()
        if _local_as is not None:
            children['local-as'] = _local_as.to_gdata()
        if _password is not None:
            children['password'] = _password.to_gdata()
        if _receive_buffer_size is not None:
            children['receive-buffer-size'] = _receive_buffer_size.to_gdata()
        if _send_buffer_size is not None:
            children['send-buffer-size'] = _send_buffer_size.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        if _local is not None:
            children['local'] = _local.to_gdata()
        if _log is not None:
            children['log'] = _log.to_gdata()
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        if _local_address_subnet is not None:
            children['local-address-subnet'] = _local_address_subnet.to_gdata()
        if _dmz_link_bandwidth is not None:
            children['dmz-link-bandwidth'] = _dmz_link_bandwidth.to_gdata()
        if _ebgp_recv_extcommunity_dmz is not None:
            children['ebgp-recv-extcommunity-dmz'] = _ebgp_recv_extcommunity_dmz.to_gdata()
        if _ebgp_send_extcommunity_dmz is not None:
            children['ebgp-send-extcommunity-dmz'] = _ebgp_send_extcommunity_dmz.to_gdata()
        if _ttl_security is not None:
            children['ttl-security'] = _ttl_security.to_gdata()
        if _session_open_mode is not None:
            children['session-open-mode'] = _session_open_mode.to_gdata()
        if _dscp is not None:
            children['dscp'] = yang.gdata.Leaf('enumeration', _dscp)
        if _precedence is not None:
            children['precedence'] = yang.gdata.Leaf('enumeration', _precedence)
        if _capability is not None:
            children['capability'] = _capability.to_gdata()
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        if _enforce_first_as is not None:
            children['enforce-first-as'] = _enforce_first_as.to_gdata()
        if _cluster_id is not None:
            children['cluster-id'] = _cluster_id.to_gdata()
        if _maximum_peers is not None:
            children['maximum-peers'] = yang.gdata.Leaf('uint32', _maximum_peers)
        if _idle_watch_time is not None:
            children['idle-watch-time'] = yang.gdata.Leaf('uint32', _idle_watch_time)
        if _egress_engineering is not None:
            children['egress-engineering'] = _egress_engineering.to_gdata()
        if _peer_sets is not None:
            children['peer-sets'] = _peer_sets.to_gdata()
        if _ao is not None:
            children['ao'] = _ao.to_gdata()
        if _maximum_prefix_restart_time is not None:
            children['maximum-prefix-restart-time'] = yang.gdata.Leaf('uint32', _maximum_prefix_restart_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.neighbor_group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name=n.get_str("neighbor-group-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families.from_gdata(n.get_opt_container("address-families")), graceful_maintenance=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance.from_gdata(n.get_opt_container("graceful-maintenance")), update=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update.from_gdata(n.get_opt_container("update")), remote_as=n.get_opt_value("remote-as"), remote_as_list=n.get_opt_str("remote-as-list"), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use.from_gdata(n.get_opt_container("use")), advertisement_interval=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval.from_gdata(n.get_opt_container("advertisement-interval")), description=n.get_opt_str("description"), ignore_connected_check=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check.from_gdata(n.get_opt_container("ignore-connected-check")), internal_vpn_client=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client.from_gdata(n.get_opt_container("internal-vpn-client")), ebgp_multihop=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop.from_gdata(n.get_opt_container("ebgp-multihop")), tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp.from_gdata(n.get_opt_container("tcp")), bmp_activate=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate.from_gdata(n.get_opt_container("bmp-activate")), bfd=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd.from_gdata(n.get_opt_container("bfd")), keychain=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain.from_gdata(n.get_opt_container("keychain")), local_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as.from_gdata(n.get_opt_container("local-as")), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password.from_gdata(n.get_opt_container("password")), receive_buffer_size=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size.from_gdata(n.get_opt_container("receive-buffer-size")), send_buffer_size=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size.from_gdata(n.get_opt_container("send-buffer-size")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown.from_gdata(n.get_opt_container("shutdown")), timers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers.from_gdata(n.get_opt_container("timers")), local=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local.from_gdata(n.get_opt_container("local")), log=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log.from_gdata(n.get_opt_container("log")), update_source=n.get_opt_str("update-source"), local_address_subnet=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet.from_gdata(n.get_opt_container("local-address-subnet")), dmz_link_bandwidth=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth.from_gdata(n.get_opt_container("dmz-link-bandwidth")), ebgp_recv_extcommunity_dmz=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz.from_gdata(n.get_opt_container("ebgp-recv-extcommunity-dmz")), ebgp_send_extcommunity_dmz=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz.from_gdata(n.get_opt_container("ebgp-send-extcommunity-dmz")), ttl_security=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security.from_gdata(n.get_opt_container("ttl-security")), session_open_mode=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode.from_gdata(n.get_opt_container("session-open-mode")), dscp=n.get_opt_str("dscp"), precedence=n.get_opt_str("precedence"), capability=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability.from_gdata(n.get_opt_container("capability")), graceful_restart=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart.from_gdata(n.get_opt_container("graceful-restart")), enforce_first_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as.from_gdata(n.get_opt_container("enforce-first-as")), cluster_id=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id.from_gdata(n.get_opt_container("cluster-id")), maximum_peers=n.get_opt_int("maximum-peers"), idle_watch_time=n.get_opt_int("idle-watch-time"), egress_engineering=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering.from_gdata(n.get_opt_container("egress-engineering")), peer_sets=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets.from_gdata(n.get_opt_container("peer-sets")), ao=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao.from_gdata(n.get_opt_container("ao")), maximum_prefix_restart_time=n.get_opt_int("maximum-prefix-restart-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name=yang.gdata.from_xml_str(n, "neighbor-group-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), graceful_maintenance=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_maintenance.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-maintenance")), update=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update.from_xml(yang.gdata.get_xml_opt_child(n, "update")), remote_as=yang.gdata.from_xml_opt_value(n, "remote-as"), remote_as_list=yang.gdata.from_xml_opt_str(n, "remote-as-list"), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__use.from_xml(yang.gdata.get_xml_opt_child(n, "use")), advertisement_interval=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__advertisement_interval.from_xml(yang.gdata.get_xml_opt_child(n, "advertisement-interval")), description=yang.gdata.from_xml_opt_str(n, "description"), ignore_connected_check=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ignore_connected_check.from_xml(yang.gdata.get_xml_opt_child(n, "ignore-connected-check")), internal_vpn_client=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__internal_vpn_client.from_xml(yang.gdata.get_xml_opt_child(n, "internal-vpn-client")), ebgp_multihop=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_multihop.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp-multihop")), tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__tcp.from_xml(yang.gdata.get_xml_opt_child(n, "tcp")), bmp_activate=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bmp_activate.from_xml(yang.gdata.get_xml_opt_child(n, "bmp-activate")), bfd=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__bfd.from_xml(yang.gdata.get_xml_opt_child(n, "bfd")), keychain=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__keychain.from_xml(yang.gdata.get_xml_opt_child(n, "keychain")), local_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_as.from_xml(yang.gdata.get_xml_opt_child(n, "local-as")), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password.from_xml(yang.gdata.get_xml_opt_child(n, "password")), receive_buffer_size=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__receive_buffer_size.from_xml(yang.gdata.get_xml_opt_child(n, "receive-buffer-size")), send_buffer_size=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__send_buffer_size.from_xml(yang.gdata.get_xml_opt_child(n, "send-buffer-size")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")), timers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__timers.from_xml(yang.gdata.get_xml_opt_child(n, "timers")), local=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local.from_xml(yang.gdata.get_xml_opt_child(n, "local")), log=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__log.from_xml(yang.gdata.get_xml_opt_child(n, "log")), update_source=yang.gdata.from_xml_opt_str(n, "update-source"), local_address_subnet=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__local_address_subnet.from_xml(yang.gdata.get_xml_opt_child(n, "local-address-subnet")), dmz_link_bandwidth=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__dmz_link_bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "dmz-link-bandwidth")), ebgp_recv_extcommunity_dmz=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_recv_extcommunity_dmz.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp-recv-extcommunity-dmz")), ebgp_send_extcommunity_dmz=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ebgp_send_extcommunity_dmz.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp-send-extcommunity-dmz")), ttl_security=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ttl_security.from_xml(yang.gdata.get_xml_opt_child(n, "ttl-security")), session_open_mode=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__session_open_mode.from_xml(yang.gdata.get_xml_opt_child(n, "session-open-mode")), dscp=yang.gdata.from_xml_opt_str(n, "dscp"), precedence=yang.gdata.from_xml_opt_str(n, "precedence"), capability=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__capability.from_xml(yang.gdata.get_xml_opt_child(n, "capability")), graceful_restart=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__graceful_restart.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-restart")), enforce_first_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__enforce_first_as.from_xml(yang.gdata.get_xml_opt_child(n, "enforce-first-as")), cluster_id=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__cluster_id.from_xml(yang.gdata.get_xml_opt_child(n, "cluster-id")), maximum_peers=yang.gdata.from_xml_opt_int(n, "maximum-peers"), idle_watch_time=yang.gdata.from_xml_opt_int(n, "idle-watch-time"), egress_engineering=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__egress_engineering.from_xml(yang.gdata.get_xml_opt_child(n, "egress-engineering")), peer_sets=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__peer_sets.from_xml(yang.gdata.get_xml_opt_child(n, "peer-sets")), ao=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__ao.from_xml(yang.gdata.get_xml_opt_child(n, "ao")), maximum_prefix_restart_time=yang.gdata.from_xml_opt_int(n, "maximum-prefix-restart-time"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'neighbor-group'
        self.elements = elements

    mut def create(self, neighbor_group_name, advertisement_interval, ebgp_multihop, receive_buffer_size, send_buffer_size, timers):
        for e in self.elements:
            match = True
            if e.neighbor_group_name != neighbor_group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name, advertisement_interval, ebgp_multihop, receive_buffer_size, send_buffer_size, timers)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(yang.adata.MNode):
    neighbor_group: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group

    mut def __init__(self, neighbor_group: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_group = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(elements=neighbor_group)
        self.neighbor_group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_group = self.neighbor_group
        if _neighbor_group is not None:
            children['neighbor-group'] = _neighbor_group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(neighbor_group=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group.from_gdata(n.get_opt_list("neighbor-group")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(neighbor_group=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group.from_xml(yang.gdata.get_xml_children(n, "neighbor-group")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(yang.adata.MNode):
    router_id: ?str

    mut def __init__(self, router_id: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.router_id = router_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('string', _router_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(router_id=n.get_opt_str("router-id"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(router_id=yang.gdata.from_xml_opt_str(n, "router-id"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families

    mut def __init__(self, vrf_name: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.vrf_name = vrf_name
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        _address_families = self.address_families
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families.from_gdata(n.get_opt_container("address-families")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.vrf = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(vrf=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(vrf=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(yang.adata.MNode):
    as_number: value
    rpki: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families
    neighbors: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors
    neighbor_groups: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups
    bgp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp
    vrfs: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs

    mut def __init__(self, as_number: value, rpki: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki=None, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families=None, neighbors: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors=None, neighbor_groups: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups=None, bgp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp=None, vrfs: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        if rpki is not None:
            self.rpki = rpki
        else:
            self.rpki = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()
        self_rpki = self.rpki
        if self_rpki is not None:
            self_rpki._parent = self
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        if neighbors is not None:
            self.neighbors = neighbors
        else:
            self.neighbors = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()
        self_neighbors = self.neighbors
        if self_neighbors is not None:
            self_neighbors._parent = self
        if neighbor_groups is not None:
            self.neighbor_groups = neighbor_groups
        else:
            self.neighbor_groups = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()
        self_neighbor_groups = self.neighbor_groups
        if self_neighbor_groups is not None:
            self_neighbor_groups._parent = self
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _rpki = self.rpki
        _address_families = self.address_families
        _neighbors = self.neighbors
        _neighbor_groups = self.neighbor_groups
        _bgp = self.bgp
        _vrfs = self.vrfs
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('union', _as_number)
        if _rpki is not None:
            children['rpki'] = _rpki.to_gdata()
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _neighbors is not None:
            children['neighbors'] = _neighbors.to_gdata()
        if _neighbor_groups is not None:
            children['neighbor-groups'] = _neighbor_groups.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number=n.get_value("as-number"), rpki=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki.from_gdata(n.get_opt_container("rpki")), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families.from_gdata(n.get_opt_container("address-families")), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors.from_gdata(n.get_opt_container("neighbors")), neighbor_groups=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups.from_gdata(n.get_opt_container("neighbor-groups")), bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp.from_gdata(n.get_opt_container("bgp")), vrfs=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs.from_gdata(n.get_opt_container("vrfs")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number=yang.gdata.from_xml_value(n, "as-number"), rpki=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki.from_xml(yang.gdata.get_xml_opt_child(n, "rpki")), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors.from_xml(yang.gdata.get_xml_opt_child(n, "neighbors")), neighbor_groups=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups.from_xml(yang.gdata.get_xml_opt_child(n, "neighbor-groups")), bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), vrfs=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'as'
        self.elements = elements

    mut def create(self, as_number):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(yang.adata.MNode):
    as_: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as

    mut def __init__(self, as_: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_ = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(elements=as_)
        self.as_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_ = self.as_
        if _as_ is not None:
            children['as'] = _as_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(as_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as.from_gdata(n.get_opt_list("as")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(as_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as.from_xml(yang.gdata.get_xml_children(n, "as")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()



class Cisco_IOS_XR_um_router_bgp_cfg__router(yang.adata.MNode):
    bgp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp

    mut def __init__(self, bgp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router(bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp.from_gdata(n.get_opt_container("bgp")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router(bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(yang.adata.MNode):
    l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport
    point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point
    multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint

    mut def __init__(self, l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport=None, point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point=None, multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.l2transport = l2transport
        self_l2transport = self.l2transport
        if self_l2transport is not None:
            self_l2transport._parent = self
        self.point_to_point = point_to_point
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        self.multipoint = multipoint
        self_multipoint = self.multipoint
        if self_multipoint is not None:
            self_multipoint._parent = self

    mut def create_l2transport(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        self.l2transport = res
        return res

    mut def create_point_to_point(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        self.point_to_point = res
        return res

    mut def create_multipoint(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        self.multipoint = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l2transport = self.l2transport
        _point_to_point = self.point_to_point
        _multipoint = self.multipoint
        if _l2transport is not None:
            children['l2transport'] = _l2transport.to_gdata()
        if _point_to_point is not None:
            children['point-to-point'] = _point_to_point.to_gdata()
        if _multipoint is not None:
            children['multipoint'] = _multipoint.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_gdata(n.get_opt_container("l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_gdata(n.get_opt_container("point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_gdata(n.get_opt_container("multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_xml(yang.gdata.get_xml_opt_child(n, "l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_xml(yang.gdata.get_xml_opt_child(n, "point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_xml(yang.gdata.get_xml_opt_child(n, "multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__netmask(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    mut def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _netmask is not None:
            children['netmask'] = yang.gdata.Leaf('string', _netmask)
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__netmask(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    mut def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _netmask is not None:
            children['netmask'] = yang.gdata.Leaf('string', _netmask)
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'secondary'
        self.elements = elements

    mut def create(self, address, netmask):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address, netmask)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(yang.adata.MNode):
    secondary: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary

    mut def __init__(self, secondary: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.secondary = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(elements=secondary)
        self.secondary._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _secondary = self.secondary
        if _secondary is not None:
            children['secondary'] = _secondary.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_gdata(n.get_opt_list("secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_xml(yang.gdata.get_xml_children(n, "secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__unnumbered(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address
    secondaries: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries
    unnumbered: ?str
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp

    mut def __init__(self, address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address=None, secondaries: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries=None, unnumbered: ?str, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self
        if secondaries is not None:
            self.secondaries = secondaries
        else:
            self.secondaries = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()
        self_secondaries = self.secondaries
        if self_secondaries is not None:
            self_secondaries._parent = self
        self.unnumbered = unnumbered
        self.dhcp = dhcp
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self

    mut def create_address(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address, netmask)
        self.address = res
        return res

    mut def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        self.dhcp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _secondaries = self.secondaries
        _unnumbered = self.unnumbered
        _dhcp = self.dhcp
        if _address is not None:
            children['address'] = _address.to_gdata()
        if _secondaries is not None:
            children['secondaries'] = _secondaries.to_gdata()
        if _unnumbered is not None:
            children['unnumbered'] = yang.gdata.Leaf('string', _unnumbered)
        if _dhcp is not None:
            children['dhcp'] = _dhcp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_gdata(n.get_opt_container("address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_gdata(n.get_opt_container("secondaries")), unnumbered=n.get_opt_str("unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_gdata(n.get_opt_container("dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_xml(yang.gdata.get_xml_opt_child(n, "address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_xml(yang.gdata.get_xml_opt_child(n, "secondaries")), unnumbered=yang.gdata.from_xml_opt_str(n, "unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses

    mut def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _addresses = self.addresses
        if _addresses is not None:
            children['addresses'] = _addresses.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_gdata(n.get_opt_container("addresses")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(yang.adata.MNode):
    IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF

    mut def __init__(self, IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.IETF = IETF
        self_IETF = self.IETF
        if self_IETF is not None:
            self_IETF._parent = self

    mut def create_IETF(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        self.IETF = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _IETF = self.IETF
        if _IETF is not None:
            children['IETF'] = _IETF.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_gdata(n.get_opt_container("IETF")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_xml(yang.gdata.get_xml_opt_child(n, "IETF")))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(yang.adata.MNode):
    ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp
    hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc
    mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr
    frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay

    mut def __init__(self, ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp=None, hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc=None, mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr=None, frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.ppp = ppp
        self_ppp = self.ppp
        if self_ppp is not None:
            self_ppp._parent = self
        self.hdlc = hdlc
        self_hdlc = self.hdlc
        if self_hdlc is not None:
            self_hdlc._parent = self
        self.mfr = mfr
        self_mfr = self.mfr
        if self_mfr is not None:
            self_mfr._parent = self
        self.frame_relay = frame_relay
        self_frame_relay = self.frame_relay
        if self_frame_relay is not None:
            self_frame_relay._parent = self

    mut def create_ppp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        self.ppp = res
        return res

    mut def create_hdlc(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        self.hdlc = res
        return res

    mut def create_mfr(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        self.mfr = res
        return res

    mut def create_frame_relay(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()
        self.frame_relay = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ppp = self.ppp
        _hdlc = self.hdlc
        _mfr = self.mfr
        _frame_relay = self.frame_relay
        if _ppp is not None:
            children['ppp'] = _ppp.to_gdata()
        if _hdlc is not None:
            children['hdlc'] = _hdlc.to_gdata()
        if _mfr is not None:
            children['mfr'] = _mfr.to_gdata()
        if _frame_relay is not None:
            children['frame-relay'] = _frame_relay.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_gdata(n.get_opt_container("ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_gdata(n.get_opt_container("hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_gdata(n.get_opt_container("mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_gdata(n.get_opt_container("frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_xml(yang.gdata.get_xml_opt_child(n, "ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_xml(yang.gdata.get_xml_opt_child(n, "hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_xml(yang.gdata.get_xml_opt_child(n, "mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_xml(yang.gdata.get_xml_opt_child(n, "frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    sub_interface_type: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6
    encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation
    shutdown: ?bool
    mtu: ?int
    description: ?str
    vrf: ?str

    mut def __init__(self, interface_name: str, sub_interface_type: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type=None, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6=None, encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation=None, shutdown: ?bool, mtu: ?int, description: ?str, vrf: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface_name = interface_name
        if sub_interface_type is not None:
            self.sub_interface_type = sub_interface_type
        else:
            self.sub_interface_type = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()
        self_sub_interface_type = self.sub_interface_type
        if self_sub_interface_type is not None:
            self_sub_interface_type._parent = self
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        if encapsulation is not None:
            self.encapsulation = encapsulation
        else:
            self.encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()
        self_encapsulation = self.encapsulation
        if self_encapsulation is not None:
            self_encapsulation._parent = self
        self.shutdown = shutdown
        self.mtu = mtu
        self.description = description
        self.vrf = vrf

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _sub_interface_type = self.sub_interface_type
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _encapsulation = self.encapsulation
        _shutdown = self.shutdown
        _mtu = self.mtu
        _description = self.description
        _vrf = self.vrf
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _sub_interface_type is not None:
            children['sub-interface-type'] = _sub_interface_type.to_gdata()
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        if _encapsulation is not None:
            children['encapsulation'] = _encapsulation.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = yang.gdata.Leaf('empty', _shutdown)
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('uint32', _mtu)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_gdata(n.get_opt_container("sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_gdata(n.get_opt_container("ipv6")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_gdata(n.get_opt_container("encapsulation")), shutdown=n.get_opt_bool("shutdown"), mtu=n.get_opt_int("mtu"), description=n.get_opt_str("description"), vrf=n.get_opt_str("vrf"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_xml(yang.gdata.get_xml_opt_child(n, "sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_xml(yang.gdata.get_xml_opt_child(n, "encapsulation")), shutdown=yang.gdata.from_xml_opt_bool(n, "shutdown"), mtu=yang.gdata.from_xml_opt_int(n, "mtu"), description=yang.gdata.from_xml_opt_str(n, "description"), vrf=yang.gdata.from_xml_opt_str(n, "vrf", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_interface_cfg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_interface_cfg__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface = Cisco_IOS_XR_um_interface_cfg__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()



mut def from_json_Cisco_IOS_XR_um_hostname_cfg__hostname__system_network_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_hostname_cfg__hostname(yang.adata.MNode):
    system_network_name: ?str

    mut def __init__(self, system_network_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg"
        self.system_network_name = system_network_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _system_network_name = self.system_network_name
        if _system_network_name is not None:
            children['system-network-name'] = yang.gdata.Leaf('string', _system_network_name)
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=n.get_opt_str("system-network-name"))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=yang.gdata.from_xml_opt_str(n, "system-network-name"))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()



class root(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_vrf_cfg__address_family
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrfs
    selective_vrf_download: Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download
    srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg
    vrf_groups: Cisco_IOS_XR_um_vrf_cfg__vrf_groups
    as_format: Cisco_IOS_XR_um_router_bgp_cfg__as_format
    bmp: Cisco_IOS_XR_um_router_bgp_cfg__bmp
    router: Cisco_IOS_XR_um_router_bgp_cfg__router
    interfaces: Cisco_IOS_XR_um_interface_cfg__interfaces
    hostname: Cisco_IOS_XR_um_hostname_cfg__hostname

    mut def __init__(self, address_family: ?Cisco_IOS_XR_um_vrf_cfg__address_family=None, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrfs=None, selective_vrf_download: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download=None, srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg=None, vrf_groups: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups=None, as_format: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format=None, bmp: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp=None, router: ?Cisco_IOS_XR_um_router_bgp_cfg__router=None, interfaces: ?Cisco_IOS_XR_um_interface_cfg__interfaces=None, hostname: ?Cisco_IOS_XR_um_hostname_cfg__hostname=None):
        self._ns = ""
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_vrf_cfg__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_vrf_cfg__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self
        if selective_vrf_download is not None:
            self.selective_vrf_download = selective_vrf_download
        else:
            self.selective_vrf_download = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()
        self_selective_vrf_download = self.selective_vrf_download
        if self_selective_vrf_download is not None:
            self_selective_vrf_download._parent = self
        self.srlg = srlg
        self_srlg = self.srlg
        if self_srlg is not None:
            self_srlg._parent = self
        if vrf_groups is not None:
            self.vrf_groups = vrf_groups
        else:
            self.vrf_groups = Cisco_IOS_XR_um_vrf_cfg__vrf_groups()
        self_vrf_groups = self.vrf_groups
        if self_vrf_groups is not None:
            self_vrf_groups._parent = self
        if as_format is not None:
            self.as_format = as_format
        else:
            self.as_format = Cisco_IOS_XR_um_router_bgp_cfg__as_format()
        self_as_format = self.as_format
        if self_as_format is not None:
            self_as_format._parent = self
        if bmp is not None:
            self.bmp = bmp
        else:
            self.bmp = Cisco_IOS_XR_um_router_bgp_cfg__bmp()
        self_bmp = self.bmp
        if self_bmp is not None:
            self_bmp._parent = self
        if router is not None:
            self.router = router
        else:
            self.router = Cisco_IOS_XR_um_router_bgp_cfg__router()
        self_router = self.router
        if self_router is not None:
            self_router._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_interface_cfg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if hostname is not None:
            self.hostname = hostname
        else:
            self.hostname = Cisco_IOS_XR_um_hostname_cfg__hostname()
        self_hostname = self.hostname
        if self_hostname is not None:
            self_hostname._parent = self

    mut def create_srlg(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg()
        self.srlg = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        _vrfs = self.vrfs
        _selective_vrf_download = self.selective_vrf_download
        _srlg = self.srlg
        _vrf_groups = self.vrf_groups
        _as_format = self.as_format
        _bmp = self.bmp
        _router = self.router
        _interfaces = self.interfaces
        _hostname = self.hostname
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        if _selective_vrf_download is not None:
            children['selective-vrf-download'] = _selective_vrf_download.to_gdata()
        if _srlg is not None:
            children['srlg'] = _srlg.to_gdata()
        if _vrf_groups is not None:
            children['vrf-groups'] = _vrf_groups.to_gdata()
        if _as_format is not None:
            children['as-format'] = _as_format.to_gdata()
        if _bmp is not None:
            children['bmp'] = _bmp.to_gdata()
        if _router is not None:
            children['router'] = _router.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _hostname is not None:
            children['hostname'] = _hostname.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_gdata(n.get_opt_container("address-family")), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_gdata(n.get_opt_container("vrfs")), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_gdata(n.get_opt_container("selective-vrf-download")), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_gdata(n.get_opt_container("srlg")), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_gdata(n.get_opt_container("vrf-groups")), as_format=Cisco_IOS_XR_um_router_bgp_cfg__as_format.from_gdata(n.get_opt_container("as-format")), bmp=Cisco_IOS_XR_um_router_bgp_cfg__bmp.from_gdata(n.get_opt_container("bmp")), router=Cisco_IOS_XR_um_router_bgp_cfg__router.from_gdata(n.get_opt_container("router")), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_gdata(n.get_opt_container("interfaces")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_gdata(n.get_opt_container("hostname")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_xml(yang.gdata.get_xml_opt_child(n, "selective-vrf-download", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_xml(yang.gdata.get_xml_opt_child(n, "srlg", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-groups", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), as_format=Cisco_IOS_XR_um_router_bgp_cfg__as_format.from_xml(yang.gdata.get_xml_opt_child(n, "as-format", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), bmp=Cisco_IOS_XR_um_router_bgp_cfg__bmp.from_xml(yang.gdata.get_xml_opt_child(n, "bmp", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), router=Cisco_IOS_XR_um_router_bgp_cfg__router.from_xml(yang.gdata.get_xml_opt_child(n, "router", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_xml(yang.gdata.get_xml_opt_child(n, "hostname", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg")))
        return root()


