import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    mut def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology_name = topology_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology_name = self.topology_name
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.topology_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    mut def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology

    mut def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology = self.topology
        if _topology is not None:
            children['topology'] = _topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_gdata(n.get_opt_list("topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies

    mut def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topologies = self.topologies
        if _topologies is not None:
            children['topologies'] = _topologies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    mut def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology_name = topology_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology_name = self.topology_name
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.topology_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    mut def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology

    mut def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology = self.topology
        if _topology is not None:
            children['topology'] = _topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_gdata(n.get_opt_list("topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies

    mut def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topologies = self.topologies
        if _topologies is not None:
            children['topologies'] = _topologies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()



class Cisco_IOS_XR_um_vrf_cfg__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        self.multicast = multicast
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        self.flowspec = flowspec
        self_flowspec = self.flowspec
        if self_flowspec is not None:
            self_flowspec._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()
        self.unicast = res
        return res

    mut def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        self.multicast = res
        return res

    mut def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        self.flowspec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        _flowspec = self.flowspec
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        if _flowspec is not None:
            children['flowspec'] = _flowspec.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_gdata(n.get_opt_container("flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_xml(yang.gdata.get_xml_opt_child(n, "flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        self.multicast = multicast
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        self.flowspec = flowspec
        self_flowspec = self.flowspec
        if self_flowspec is not None:
            self_flowspec._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()
        self.unicast = res
        return res

    mut def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        self.multicast = res
        return res

    mut def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        self.flowspec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        _flowspec = self.flowspec
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        if _flowspec is not None:
            children['flowspec'] = _flowspec.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_gdata(n.get_opt_container("flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_xml(yang.gdata.get_xml_opt_child(n, "flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(yang.adata.MNode):
    big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big

    mut def __init__(self, big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.big = big
        self_big = self.big
        if self_big is not None:
            self_big._parent = self

    mut def create_big(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        self.big = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _big = self.big
        if _big is not None:
            children['big'] = _big.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_gdata(n.get_opt_container("big")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_xml(yang.gdata.get_xml_opt_child(n, "big")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(yang.adata.MNode):
    id: ?str

    mut def __init__(self, id: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=n.get_opt_str("id"))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=yang.gdata.from_xml_opt_str(n, "id"))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__fallback_vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(yang.adata.MNode):
    as_number: str
    index: int

    mut def __init__(self, as_number: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number=n.get_str("as-number"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number=yang.gdata.from_xml_str(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(yang.adata.MNode):
    as_number: str
    index: int

    mut def __init__(self, as_number: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number=n.get_str("as-number"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number=yang.gdata.from_xml_str(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(yang.adata.MNode):
    ipv4_address: str
    index: int

    mut def __init__(self, ipv4_address: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ipv4_address = ipv4_address
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_address = self.ipv4_address
        _index = self.index
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address=n.get_str("ipv4-address"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address=yang.gdata.from_xml_str(n, "ipv4-address"), index=yang.gdata.from_xml_int(n, "index"))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(yang.adata.MNode):
    two_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as
    four_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as
    ip_address: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address

    mut def __init__(self, two_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as=None, four_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as=None, ip_address: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as = two_byte_as
        self_two_byte_as = self.two_byte_as
        if self_two_byte_as is not None:
            self_two_byte_as._parent = self
        self.four_byte_as = four_byte_as
        self_four_byte_as = self.four_byte_as
        if self_four_byte_as is not None:
            self_four_byte_as._parent = self
        self.ip_address = ip_address
        self_ip_address = self.ip_address
        if self_ip_address is not None:
            self_ip_address._parent = self

    mut def create_two_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number, index)
        self.two_byte_as = res
        return res

    mut def create_four_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number, index)
        self.four_byte_as = res
        return res

    mut def create_ip_address(self, ipv4_address, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address, index)
        self.ip_address = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as = self.two_byte_as
        _four_byte_as = self.four_byte_as
        _ip_address = self.ip_address
        if _two_byte_as is not None:
            children['two-byte-as'] = _two_byte_as.to_gdata()
        if _four_byte_as is not None:
            children['four-byte-as'] = _four_byte_as.to_gdata()
        if _ip_address is not None:
            children['ip-address'] = _ip_address.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(two_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as.from_gdata(n.get_opt_container("two-byte-as")), four_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as.from_gdata(n.get_opt_container("four-byte-as")), ip_address=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address.from_gdata(n.get_opt_container("ip-address")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(two_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as")), four_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as")), ip_address=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address.from_xml(yang.gdata.get_xml_opt_child(n, "ip-address")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_family: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family
    mode: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode
    vpn: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn
    description: ?str
    remote_route_filtering: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering
    fallback_vrf: ?str
    rd: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd

    mut def __init__(self, vrf_name: str, address_family: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family=None, mode: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode=None, vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn=None, description: ?str, remote_route_filtering: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering=None, fallback_vrf: ?str, rd: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_name = vrf_name
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self
        if mode is not None:
            self.mode = mode
        else:
            self.mode = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()
        self_mode = self.mode
        if self_mode is not None:
            self_mode._parent = self
        if vpn is not None:
            self.vpn = vpn
        else:
            self.vpn = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()
        self_vpn = self.vpn
        if self_vpn is not None:
            self_vpn._parent = self
        self.description = description
        if remote_route_filtering is not None:
            self.remote_route_filtering = remote_route_filtering
        else:
            self.remote_route_filtering = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()
        self_remote_route_filtering = self.remote_route_filtering
        if self_remote_route_filtering is not None:
            self_remote_route_filtering._parent = self
        self.fallback_vrf = fallback_vrf
        if rd is not None:
            self.rd = rd
        else:
            self.rd = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()
        self_rd = self.rd
        if self_rd is not None:
            self_rd._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        _address_family = self.address_family
        _mode = self.mode
        _vpn = self.vpn
        _description = self.description
        _remote_route_filtering = self.remote_route_filtering
        _fallback_vrf = self.fallback_vrf
        _rd = self.rd
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        if _mode is not None:
            children['mode'] = _mode.to_gdata()
        if _vpn is not None:
            children['vpn'] = _vpn.to_gdata()
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _remote_route_filtering is not None:
            children['remote-route-filtering'] = _remote_route_filtering.to_gdata()
        if _fallback_vrf is not None:
            children['fallback-vrf'] = yang.gdata.Leaf('string', _fallback_vrf)
        if _rd is not None:
            children['rd'] = _rd.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_gdata(n.get_opt_container("address-family")), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_gdata(n.get_opt_container("mode")), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_gdata(n.get_opt_container("vpn")), description=n.get_opt_str("description"), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_gdata(n.get_opt_container("remote-route-filtering")), fallback_vrf=n.get_opt_str("fallback-vrf"), rd=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd.from_gdata(n.get_opt_container("rd")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family")), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_xml(yang.gdata.get_xml_opt_child(n, "mode")), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_xml(yang.gdata.get_xml_opt_child(n, "vpn")), description=yang.gdata.from_xml_opt_str(n, "description"), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_xml(yang.gdata.get_xml_opt_child(n, "remote-route-filtering")), fallback_vrf=yang.gdata.from_xml_opt_str(n, "fallback-vrf"), rd=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd.from_xml(yang.gdata.get_xml_opt_child(n, "rd", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()



class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return None



class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__srlg_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(yang.adata.MNode):
    srlg_name: str
    value: ?int
    description: ?str

    mut def __init__(self, srlg_name: str, value: ?int, description: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.srlg_name = srlg_name
        self.value = value
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg_name = self.srlg_name
        _value = self.value
        _description = self.description
        if _srlg_name is not None:
            children['srlg-name'] = yang.gdata.Leaf('string', _srlg_name)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.srlg_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=n.get_str("srlg-name"), value=n.get_opt_int("value"), description=n.get_opt_str("description"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=yang.gdata.from_xml_str(n, "srlg-name"), value=yang.gdata.from_xml_opt_int(n, "value"), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'name'
        self.elements = elements

    mut def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['srlg-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__names__name

    mut def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(elements=name)
        self.name._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_gdata(n.get_opt_list("name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_xml(yang.gdata.get_xml_children(n, "name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(yang.adata.MNode):
    priority: ?str

    mut def __init__(self, priority: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=n.get_opt_str("priority"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=yang.gdata.from_xml_opt_str(n, "priority"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name__srlg_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(yang.adata.MNode):
    srlg_name: str

    mut def __init__(self, srlg_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.srlg_name = srlg_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg_name = self.srlg_name
        if _srlg_name is not None:
            children['srlg-name'] = yang.gdata.Leaf('string', _srlg_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.srlg_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=n.get_str("srlg-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=yang.gdata.from_xml_str(n, "srlg-name"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'name'
        self.elements = elements

    mut def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['srlg-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name

    mut def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(elements=name)
        self.name._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_gdata(n.get_opt_list("name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_xml(yang.gdata.get_xml_children(n, "name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(yang.adata.MNode):
    index_number: int
    group_name: str

    mut def __init__(self, index_number: int, group_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.group_name = group_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _group_name = self.group_name
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=n.get_int("index-number"), group_name=n.get_str("group-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), group_name=yang.gdata.from_xml_str(n, "group-name"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'group'
        self.elements = elements

    mut def create(self, index_number, group_name):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number, group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group

    mut def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_gdata(n.get_opt_list("group")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names
    groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups

    mut def __init__(self, interface_name: str, include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical=None, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes=None, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.interface_name = interface_name
        self.include_optical = include_optical
        self_include_optical = self.include_optical
        if self_include_optical is not None:
            self_include_optical._parent = self
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self
        if names is not None:
            self.names = names
        else:
            self.names = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()
        self_names = self.names
        if self_names is not None:
            self_names._parent = self
        self.groups = groups
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self

    mut def create_include_optical(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical()
        self.include_optical = res
        return res

    mut def create_groups(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups()
        self.groups = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _include_optical = self.include_optical
        _indexes = self.indexes
        _names = self.names
        _groups = self.groups
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _include_optical is not None:
            children['include-optical'] = _include_optical.to_gdata()
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        if _names is not None:
            children['names'] = _names.to_gdata()
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_gdata(n.get_opt_container("include-optical")), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_gdata(n.get_opt_container("indexes")), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_gdata(n.get_opt_container("names")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_gdata(n.get_opt_container("groups")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_xml(yang.gdata.get_xml_opt_child(n, "include-optical")), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_xml(yang.gdata.get_xml_opt_child(n, "names")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.interface = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(yang.adata.MNode):
    group_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes

    mut def __init__(self, group_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group_name = group_name
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        _indexes = self.indexes
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=n.get_str("group-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_gdata(n.get_opt_container("indexes")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group

    mut def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_gdata(n.get_opt_list("group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__location_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(yang.adata.MNode):
    location_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes

    mut def __init__(self, location_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.location_name = location_name
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _location_name = self.location_name
        _indexes = self.indexes
        if _location_name is not None:
            children['location-name'] = yang.gdata.Leaf('string', _location_name)
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.location_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=n.get_str("location-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_gdata(n.get_opt_container("indexes")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=yang.gdata.from_xml_str(n, "location-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'inherit-location'
        self.elements = elements

    mut def create(self, location_name):
        for e in self.elements:
            match = True
            if e.location_name != location_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['location-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(yang.adata.MNode):
    inherit_location: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location

    mut def __init__(self, inherit_location: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.inherit_location = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(elements=inherit_location)
        self.inherit_location._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inherit_location = self.inherit_location
        if _inherit_location is not None:
            children['inherit-location'] = _inherit_location.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_gdata(n.get_opt_list("inherit-location")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_xml(yang.gdata.get_xml_children(n, "inherit-location")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()



class Cisco_IOS_XR_um_vrf_cfg__srlg(yang.adata.MNode):
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__names
    interfaces: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces
    groups: Cisco_IOS_XR_um_vrf_cfg__srlg__groups
    inherit_locations: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations

    mut def __init__(self, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__names=None, interfaces: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups=None, inherit_locations: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if names is not None:
            self.names = names
        else:
            self.names = Cisco_IOS_XR_um_vrf_cfg__srlg__names()
        self_names = self.names
        if self_names is not None:
            self_names._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if groups is not None:
            self.groups = groups
        else:
            self.groups = Cisco_IOS_XR_um_vrf_cfg__srlg__groups()
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self
        if inherit_locations is not None:
            self.inherit_locations = inherit_locations
        else:
            self.inherit_locations = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()
        self_inherit_locations = self.inherit_locations
        if self_inherit_locations is not None:
            self_inherit_locations._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _names = self.names
        _interfaces = self.interfaces
        _groups = self.groups
        _inherit_locations = self.inherit_locations
        if _names is not None:
            children['names'] = _names.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        if _inherit_locations is not None:
            children['inherit-locations'] = _inherit_locations.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_gdata(n.get_opt_container("names")), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_gdata(n.get_opt_container("interfaces")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_gdata(n.get_opt_container("groups")), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_gdata(n.get_opt_container("inherit-locations")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_xml(yang.gdata.get_xml_opt_child(n, "names")), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_xml(yang.gdata.get_xml_opt_child(n, "inherit-locations")))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str

    mut def __init__(self, vrf_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_name = vrf_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(yang.adata.MNode):
    group_name: str
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs

    mut def __init__(self, group_name: str, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group_name = group_name
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        _vrfs = self.vrfs
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=n.get_str("group-name"), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_gdata(n.get_opt_container("vrfs")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs")))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf-group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups(yang.adata.MNode):
    vrf_group: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group

    mut def __init__(self, vrf_group: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_group = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(elements=vrf_group)
        self.vrf_group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_group = self.vrf_group
        if _vrf_group is not None:
            children['vrf-group'] = _vrf_group.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_gdata(n.get_opt_list("vrf-group")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_xml(yang.gdata.get_xml_children(n, "vrf-group")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__process_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__is_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net__net_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(yang.adata.MNode):
    net_id: str

    mut def __init__(self, net_id: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.net_id = net_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _net_id = self.net_id
        if _net_id is not None:
            children['net-id'] = yang.gdata.Leaf('string', _net_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.net_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(net_id=n.get_str("net-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(net_id=yang.gdata.from_xml_str(n, "net-id"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'net'
        self.elements = elements

    mut def create(self, net_id):
        for e in self.elements:
            match = True
            if e.net_id != net_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(net_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['net-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(yang.adata.MNode):
    net: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net

    mut def __init__(self, net: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.net = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net(elements=net)
        self.net._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _net = self.net
        if _net is not None:
            children['net'] = _net.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(net=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net.from_gdata(n.get_opt_list("net")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(net=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net.from_xml(yang.gdata.get_xml_children(n, "net")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__saf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__sr_prefer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(yang.adata.MNode):
    sr_prefer: ?bool

    mut def __init__(self, sr_prefer: ?bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sr_prefer = sr_prefer

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sr_prefer = self.sr_prefer
        if _sr_prefer is not None:
            children['sr-prefer'] = yang.gdata.Leaf('boolean', _sr_prefer)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(sr_prefer=n.get_opt_bool("sr-prefer"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(sr_prefer=yang.gdata.from_xml_opt_bool(n, "sr-prefer"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(yang.adata.MNode):
    mpls: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls

    mut def __init__(self, mpls: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls()
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls.from_gdata(n.get_opt_container("mpls")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(yang.adata.MNode):
    level_id: int
    narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow
    wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide
    transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition

    mut def __init__(self, level_id: int, narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow=None, wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide=None, transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.narrow = narrow
        self_narrow = self.narrow
        if self_narrow is not None:
            self_narrow._parent = self
        self.wide = wide
        self_wide = self.wide
        if self_wide is not None:
            self_wide._parent = self
        self.transition = transition
        self_transition = self.transition
        if self_transition is not None:
            self_transition._parent = self

    mut def create_narrow(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow()
        self.narrow = res
        return res

    mut def create_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide()
        self.wide = res
        return res

    mut def create_transition(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition()
        self.transition = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _narrow = self.narrow
        _wide = self.wide
        _transition = self.transition
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _narrow is not None:
            children['narrow'] = _narrow.to_gdata()
        if _wide is not None:
            children['wide'] = _wide.to_gdata()
        if _transition is not None:
            children['transition'] = _transition.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(level_id=n.get_int("level-id"), narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow.from_gdata(n.get_opt_container("narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide.from_gdata(n.get_opt_container("wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition.from_gdata(n.get_opt_container("transition")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow.from_xml(yang.gdata.get_xml_opt_child(n, "narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide.from_xml(yang.gdata.get_xml_opt_child(n, "wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition.from_xml(yang.gdata.get_xml_opt_child(n, "transition")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(yang.adata.MNode):
    narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow
    wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide
    transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels

    mut def __init__(self, narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow=None, wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide=None, transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.narrow = narrow
        self_narrow = self.narrow
        if self_narrow is not None:
            self_narrow._parent = self
        self.wide = wide
        self_wide = self.wide
        if self_wide is not None:
            self_wide._parent = self
        self.transition = transition
        self_transition = self.transition
        if self_transition is not None:
            self_transition._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_narrow(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow()
        self.narrow = res
        return res

    mut def create_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide()
        self.wide = res
        return res

    mut def create_transition(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition()
        self.transition = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _narrow = self.narrow
        _wide = self.wide
        _transition = self.transition
        _levels = self.levels
        if _narrow is not None:
            children['narrow'] = _narrow.to_gdata()
        if _wide is not None:
            children['wide'] = _wide.to_gdata()
        if _transition is not None:
            children['transition'] = _transition.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow.from_gdata(n.get_opt_container("narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide.from_gdata(n.get_opt_container("wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition.from_gdata(n.get_opt_container("transition")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow.from_xml(yang.gdata.get_xml_opt_child(n, "narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide.from_xml(yang.gdata.get_xml_opt_child(n, "wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition.from_xml(yang.gdata.get_xml_opt_child(n, "transition")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(yang.adata.MNode):
    af_name: str
    saf_name: str
    segment_routing: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing
    metric_style: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style

    mut def __init__(self, af_name: str, saf_name: str, segment_routing: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing=None, metric_style: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.af_name = af_name
        self.saf_name = saf_name
        if segment_routing is not None:
            self.segment_routing = segment_routing
        else:
            self.segment_routing = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing()
        self_segment_routing = self.segment_routing
        if self_segment_routing is not None:
            self_segment_routing._parent = self
        if metric_style is not None:
            self.metric_style = metric_style
        else:
            self.metric_style = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style()
        self_metric_style = self.metric_style
        if self_metric_style is not None:
            self_metric_style._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        _saf_name = self.saf_name
        _segment_routing = self.segment_routing
        _metric_style = self.metric_style
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        if _saf_name is not None:
            children['saf-name'] = yang.gdata.Leaf('enumeration', _saf_name)
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        if _metric_style is not None:
            children['metric-style'] = _metric_style.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name), yang.gdata.yang_str(self.saf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(af_name=n.get_str("af-name"), saf_name=n.get_str("saf-name"), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing.from_gdata(n.get_opt_container("segment-routing")), metric_style=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style.from_gdata(n.get_opt_container("metric-style")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"), saf_name=yang.gdata.from_xml_str(n, "saf-name"), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing.from_xml(yang.gdata.get_xml_opt_child(n, "segment-routing")), metric_style=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style.from_xml(yang.gdata.get_xml_opt_child(n, "metric-style")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name, saf_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if e.saf_name != saf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(af_name, saf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name', 'saf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_family = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__circuit_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(yang.adata.MNode):
    ipv4: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4
    ipv6: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4=None, ipv6: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ipv4 = ipv4
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        self.ipv6 = ipv6
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def create_ipv4(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4()
        self.ipv4 = res
        return res

    mut def create_ipv6(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6()
        self.ipv6 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(ipv4=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(ipv4=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(yang.adata.MNode):
    fast_detect: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect
    minimum_interval: ?int
    multiplier: ?int

    mut def __init__(self, fast_detect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect=None, minimum_interval: ?int, multiplier: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if fast_detect is not None:
            self.fast_detect = fast_detect
        else:
            self.fast_detect = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect()
        self_fast_detect = self.fast_detect
        if self_fast_detect is not None:
            self_fast_detect._parent = self
        self.minimum_interval = minimum_interval
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fast_detect = self.fast_detect
        _minimum_interval = self.minimum_interval
        _multiplier = self.multiplier
        if _fast_detect is not None:
            children['fast-detect'] = _fast_detect.to_gdata()
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('uint32', _minimum_interval)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(fast_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect.from_gdata(n.get_opt_container("fast-detect")), minimum_interval=n.get_opt_int("minimum-interval"), multiplier=n.get_opt_int("multiplier"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(fast_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect.from_xml(yang.gdata.get_xml_opt_child(n, "fast-detect")), minimum_interval=yang.gdata.from_xml_opt_int(n, "minimum-interval"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__saf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    default_metric: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum

    mut def __init__(self, level_id: int, default_metric: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.default_metric = default_metric
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _default_metric = self.default_metric
        _maximum = self.maximum
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(level_id=n.get_int("level-id"), default_metric=n.get_opt_int("default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum.from_gdata(n.get_opt_container("maximum")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), default_metric=yang.gdata.from_xml_opt_int(n, "default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(yang.adata.MNode):
    default_metric: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels

    mut def __init__(self, default_metric: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.default_metric = default_metric
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric = self.default_metric
        _maximum = self.maximum
        _levels = self.levels
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(default_metric=n.get_opt_int("default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum.from_gdata(n.get_opt_container("maximum")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(default_metric=yang.gdata.from_xml_opt_int(n, "default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index__sid_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(yang.adata.MNode):
    sid_index: int

    mut def __init__(self, sid_index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_index = sid_index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_index = self.sid_index
        if _sid_index is not None:
            children['sid-index'] = yang.gdata.Leaf('uint32', _sid_index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(sid_index=n.get_int("sid-index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(sid_index=yang.gdata.from_xml_int(n, "sid-index"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(yang.adata.MNode):
    index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index

    mut def __init__(self, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        self_index = self.index
        if self_index is not None:
            self_index._parent = self

    mut def create_index(self, sid_index):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(sid_index)
        self.index = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index.from_gdata(n.get_opt_container("index")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(yang.adata.MNode):
    sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid

    mut def __init__(self, sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid = sid
        self_sid = self.sid
        if self_sid is not None:
            self_sid._parent = self

    mut def create_sid(self, index):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(index)
        self.sid = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid = self.sid
        if _sid is not None:
            children['sid'] = _sid.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid.from_gdata(n.get_opt_container("sid")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid.from_xml(yang.gdata.get_xml_opt_child(n, "sid")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(yang.adata.MNode):
    af_name: str
    saf_name: str
    metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric
    prefix_sid: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid

    mut def __init__(self, af_name: str, saf_name: str, metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric=None, prefix_sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.af_name = af_name
        self.saf_name = saf_name
        if metric is not None:
            self.metric = metric
        else:
            self.metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self
        if prefix_sid is not None:
            self.prefix_sid = prefix_sid
        else:
            self.prefix_sid = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid()
        self_prefix_sid = self.prefix_sid
        if self_prefix_sid is not None:
            self_prefix_sid._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        _saf_name = self.saf_name
        _metric = self.metric
        _prefix_sid = self.prefix_sid
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        if _saf_name is not None:
            children['saf-name'] = yang.gdata.Leaf('enumeration', _saf_name)
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        if _prefix_sid is not None:
            children['prefix-sid'] = _prefix_sid.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name), yang.gdata.yang_str(self.saf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(af_name=n.get_str("af-name"), saf_name=n.get_str("saf-name"), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric.from_gdata(n.get_opt_container("metric")), prefix_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid.from_gdata(n.get_opt_container("prefix-sid")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"), saf_name=yang.gdata.from_xml_str(n, "saf-name"), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")), prefix_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-sid")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name, saf_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if e.saf_name != saf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(af_name, saf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name', 'saf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_family = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    circuit_type: ?str
    point_to_point: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point
    bfd: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd
    passive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive
    address_families: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families

    mut def __init__(self, interface_name: str, circuit_type: ?str, point_to_point: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point=None, bfd: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd=None, passive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive=None, address_families: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name
        self.circuit_type = circuit_type
        self.point_to_point = point_to_point
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        if bfd is not None:
            self.bfd = bfd
        else:
            self.bfd = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd()
        self_bfd = self.bfd
        if self_bfd is not None:
            self_bfd._parent = self
        self.passive = passive
        self_passive = self.passive
        if self_passive is not None:
            self_passive._parent = self
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self

    mut def create_point_to_point(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point()
        self.point_to_point = res
        return res

    mut def create_passive(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive()
        self.passive = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _circuit_type = self.circuit_type
        _point_to_point = self.point_to_point
        _bfd = self.bfd
        _passive = self.passive
        _address_families = self.address_families
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _circuit_type is not None:
            children['circuit-type'] = yang.gdata.Leaf('enumeration', _circuit_type)
        if _point_to_point is not None:
            children['point-to-point'] = _point_to_point.to_gdata()
        if _bfd is not None:
            children['bfd'] = _bfd.to_gdata()
        if _passive is not None:
            children['passive'] = _passive.to_gdata()
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(interface_name=n.get_str("interface-name"), circuit_type=n.get_opt_str("circuit-type"), point_to_point=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point.from_gdata(n.get_opt_container("point-to-point")), bfd=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd.from_gdata(n.get_opt_container("bfd")), passive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive.from_gdata(n.get_opt_container("passive")), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families.from_gdata(n.get_opt_container("address-families")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), circuit_type=yang.gdata.from_xml_opt_str(n, "circuit-type"), point_to_point=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point.from_xml(yang.gdata.get_xml_opt_child(n, "point-to-point")), bfd=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd.from_xml(yang.gdata.get_xml_opt_child(n, "bfd")), passive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive.from_xml(yang.gdata.get_xml_opt_child(n, "passive")), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(yang.adata.MNode):
    process_id: str
    is_type: ?str
    nets: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets
    address_families: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces

    mut def __init__(self, process_id: str, is_type: ?str, nets: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets=None, address_families: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families=None, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.process_id = process_id
        self.is_type = is_type
        if nets is not None:
            self.nets = nets
        else:
            self.nets = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets()
        self_nets = self.nets
        if self_nets is not None:
            self_nets._parent = self
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process_id = self.process_id
        _is_type = self.is_type
        _nets = self.nets
        _address_families = self.address_families
        _interfaces = self.interfaces
        if _process_id is not None:
            children['process-id'] = yang.gdata.Leaf('string', _process_id)
        if _is_type is not None:
            children['is-type'] = yang.gdata.Leaf('enumeration', _is_type)
        if _nets is not None:
            children['nets'] = _nets.to_gdata()
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.process_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(process_id=n.get_str("process-id"), is_type=n.get_opt_str("is-type"), nets=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets.from_gdata(n.get_opt_container("nets")), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families.from_gdata(n.get_opt_container("address-families")), interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces.from_gdata(n.get_opt_container("interfaces")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(process_id=yang.gdata.from_xml_str(n, "process-id"), is_type=yang.gdata.from_xml_opt_str(n, "is-type"), nets=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets.from_xml(yang.gdata.get_xml_opt_child(n, "nets")), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'process'
        self.elements = elements

    mut def create(self, process_id):
        for e in self.elements:
            match = True
            if e.process_id != process_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(process_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['process-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(yang.adata.MNode):
    process: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process

    mut def __init__(self, process: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.process = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process(elements=process)
        self.process._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process = self.process
        if _process is not None:
            children['process'] = _process.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(process=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process.from_gdata(n.get_opt_list("process")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(process=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process.from_xml(yang.gdata.get_xml_children(n, "process")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis(yang.adata.MNode):
    processes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes

    mut def __init__(self, processes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if processes is not None:
            self.processes = processes
        else:
            self.processes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes()
        self_processes = self.processes
        if self_processes is not None:
            self_processes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _processes = self.processes
        if _processes is not None:
            children['processes'] = _processes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis(processes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes.from_gdata(n.get_opt_container("processes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis(processes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes.from_xml(yang.gdata.get_xml_opt_child(n, "processes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis()



class Cisco_IOS_XR_um_router_isis_cfg__router(yang.adata.MNode):
    isis: Cisco_IOS_XR_um_router_isis_cfg__router__isis

    mut def __init__(self, isis: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if isis is not None:
            self.isis = isis
        else:
            self.isis = Cisco_IOS_XR_um_router_isis_cfg__router__isis()
        self_isis = self.isis
        if self_isis is not None:
            self_isis._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _isis = self.isis
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router(isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis.from_gdata(n.get_opt_container("isis")))
        return Cisco_IOS_XR_um_router_isis_cfg__router()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router(isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis.from_xml(yang.gdata.get_xml_opt_child(n, "isis")))
        return Cisco_IOS_XR_um_router_isis_cfg__router()



class Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__as_format(yang.adata.MNode):
    asdot: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot
    asplain: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain

    mut def __init__(self, asdot: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot=None, asplain: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.asdot = asdot
        self_asdot = self.asdot
        if self_asdot is not None:
            self_asdot._parent = self
        self.asplain = asplain
        self_asplain = self.asplain
        if self_asplain is not None:
            self_asplain._parent = self

    mut def create_asdot(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        self.asdot = res
        return res

    mut def create_asplain(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        self.asplain = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _asdot = self.asdot
        _asplain = self.asplain
        if _asdot is not None:
            children['asdot'] = _asdot.to_gdata()
        if _asplain is not None:
            children['asplain'] = _asplain.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__as_format:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format(asdot=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot.from_gdata(n.get_opt_container("asdot")), asplain=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain.from_gdata(n.get_opt_container("asplain")))
        return Cisco_IOS_XR_um_router_bgp_cfg__as_format()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__as_format:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format(asdot=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot.from_xml(yang.gdata.get_xml_opt_child(n, "asdot")), asplain=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain.from_xml(yang.gdata.get_xml_opt_child(n, "asplain")))
        return Cisco_IOS_XR_um_router_bgp_cfg__as_format()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__bmp_server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(yang.adata.MNode):
    host_name: str
    port: ?int

    mut def __init__(self, host_name: str, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.host_name = host_name
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        _port = self.port
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name=n.get_str("host-name"), port=n.get_opt_int("port"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name=yang.gdata.from_xml_str(n, "host-name"), port=yang.gdata.from_xml_opt_int(n, "port"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__flapping_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__max_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__initial_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__spread(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(yang.adata.MNode):
    initial_delay: int
    spread: ?int

    mut def __init__(self, initial_delay: int, spread: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.initial_delay = initial_delay
        self.spread = spread

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_delay = self.initial_delay
        _spread = self.spread
        if _initial_delay is not None:
            children['initial-delay'] = yang.gdata.Leaf('uint32', _initial_delay)
        if _spread is not None:
            children['spread'] = yang.gdata.Leaf('uint32', _spread)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay=n.get_int("initial-delay"), spread=n.get_opt_int("spread"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay=yang.gdata.from_xml_int(n, "initial-delay"), spread=yang.gdata.from_xml_opt_int(n, "spread"))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(yang.adata.MNode):
    delay: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay
    skip: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip

    mut def __init__(self, delay: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay=None, skip: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.delay = delay
        self_delay = self.delay
        if self_delay is not None:
            self_delay._parent = self
        self.skip = skip
        self_skip = self.skip
        if self_skip is not None:
            self_skip._parent = self

    mut def create_delay(self, initial_delay):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay)
        self.delay = res
        return res

    mut def create_skip(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        self.skip = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay = self.delay
        _skip = self.skip
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        if _skip is not None:
            children['skip'] = _skip.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(delay=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay.from_gdata(n.get_opt_container("delay")), skip=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip.from_gdata(n.get_opt_container("skip")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(delay=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay.from_xml(yang.gdata.get_xml_opt_child(n, "delay")), skip=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip.from_xml(yang.gdata.get_xml_opt_child(n, "skip")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__stats_reporting_period(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__dscp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__precedence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__keep_alive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(yang.adata.MNode):
    keep_alive: ?int
    mss: ?int

    mut def __init__(self, keep_alive: ?int, mss: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.keep_alive = keep_alive
        self.mss = mss

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keep_alive = self.keep_alive
        _mss = self.mss
        if _keep_alive is not None:
            children['keep-alive'] = yang.gdata.Leaf('uint32', _keep_alive)
        if _mss is not None:
            children['mss'] = yang.gdata.Leaf('uint32', _mss)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(keep_alive=n.get_opt_int("keep-alive"), mss=n.get_opt_int("mss"))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(keep_alive=yang.gdata.from_xml_opt_int(n, "keep-alive"), mss=yang.gdata.from_xml_opt_int(n, "mss"))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(yang.adata.MNode):
    bmp_server_id: int
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown
    host: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host
    initial_delay: ?int
    flapping_delay: ?int
    max_buffer_size: ?int
    initial_refresh: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh
    stats_reporting_period: ?int
    description: ?str
    dscp: ?str
    precedence: ?str
    update_source: ?str
    vrf: ?str
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp

    mut def __init__(self, bmp_server_id: int, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown=None, host: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host=None, initial_delay: ?int, flapping_delay: ?int, max_buffer_size: ?int, initial_refresh: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh=None, stats_reporting_period: ?int, description: ?str, dscp: ?str, precedence: ?str, update_source: ?str, vrf: ?str, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.bmp_server_id = bmp_server_id
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.host = host
        self_host = self.host
        if self_host is not None:
            self_host._parent = self
        self.initial_delay = initial_delay
        self.flapping_delay = flapping_delay
        self.max_buffer_size = max_buffer_size
        if initial_refresh is not None:
            self.initial_refresh = initial_refresh
        else:
            self.initial_refresh = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()
        self_initial_refresh = self.initial_refresh
        if self_initial_refresh is not None:
            self_initial_refresh._parent = self
        self.stats_reporting_period = stats_reporting_period
        self.description = description
        self.dscp = dscp
        self.precedence = precedence
        self.update_source = update_source
        self.vrf = vrf
        if tcp is not None:
            self.tcp = tcp
        else:
            self.tcp = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()
        self_tcp = self.tcp
        if self_tcp is not None:
            self_tcp._parent = self

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        self.shutdown = res
        return res

    mut def create_host(self, host_name):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name)
        self.host = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_server_id = self.bmp_server_id
        _shutdown = self.shutdown
        _host = self.host
        _initial_delay = self.initial_delay
        _flapping_delay = self.flapping_delay
        _max_buffer_size = self.max_buffer_size
        _initial_refresh = self.initial_refresh
        _stats_reporting_period = self.stats_reporting_period
        _description = self.description
        _dscp = self.dscp
        _precedence = self.precedence
        _update_source = self.update_source
        _vrf = self.vrf
        _tcp = self.tcp
        if _bmp_server_id is not None:
            children['bmp-server-id'] = yang.gdata.Leaf('uint32', _bmp_server_id)
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        if _host is not None:
            children['host'] = _host.to_gdata()
        if _initial_delay is not None:
            children['initial-delay'] = yang.gdata.Leaf('uint32', _initial_delay)
        if _flapping_delay is not None:
            children['flapping-delay'] = yang.gdata.Leaf('uint32', _flapping_delay)
        if _max_buffer_size is not None:
            children['max-buffer-size'] = yang.gdata.Leaf('uint32', _max_buffer_size)
        if _initial_refresh is not None:
            children['initial-refresh'] = _initial_refresh.to_gdata()
        if _stats_reporting_period is not None:
            children['stats-reporting-period'] = yang.gdata.Leaf('uint32', _stats_reporting_period)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _dscp is not None:
            children['dscp'] = yang.gdata.Leaf('enumeration', _dscp)
        if _precedence is not None:
            children['precedence'] = yang.gdata.Leaf('enumeration', _precedence)
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf)
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.bmp_server_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id=n.get_int("bmp-server-id"), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown.from_gdata(n.get_opt_container("shutdown")), host=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host.from_gdata(n.get_opt_container("host")), initial_delay=n.get_opt_int("initial-delay"), flapping_delay=n.get_opt_int("flapping-delay"), max_buffer_size=n.get_opt_int("max-buffer-size"), initial_refresh=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh.from_gdata(n.get_opt_container("initial-refresh")), stats_reporting_period=n.get_opt_int("stats-reporting-period"), description=n.get_opt_str("description"), dscp=n.get_opt_str("dscp"), precedence=n.get_opt_str("precedence"), update_source=n.get_opt_str("update-source"), vrf=n.get_opt_str("vrf"), tcp=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp.from_gdata(n.get_opt_container("tcp")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id=yang.gdata.from_xml_int(n, "bmp-server-id"), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")), host=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host.from_xml(yang.gdata.get_xml_opt_child(n, "host")), initial_delay=yang.gdata.from_xml_opt_int(n, "initial-delay"), flapping_delay=yang.gdata.from_xml_opt_int(n, "flapping-delay"), max_buffer_size=yang.gdata.from_xml_opt_int(n, "max-buffer-size"), initial_refresh=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh.from_xml(yang.gdata.get_xml_opt_child(n, "initial-refresh")), stats_reporting_period=yang.gdata.from_xml_opt_int(n, "stats-reporting-period"), description=yang.gdata.from_xml_opt_str(n, "description"), dscp=yang.gdata.from_xml_opt_str(n, "dscp"), precedence=yang.gdata.from_xml_opt_str(n, "precedence"), update_source=yang.gdata.from_xml_opt_str(n, "update-source"), vrf=yang.gdata.from_xml_opt_str(n, "vrf"), tcp=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp.from_xml(yang.gdata.get_xml_opt_child(n, "tcp")))

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'server'
        self.elements = elements

    mut def create(self, bmp_server_id, host):
        for e in self.elements:
            match = True
            if e.bmp_server_id != bmp_server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id, host)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['bmp-server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__max_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__mode_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__scan_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(yang.adata.MNode):
    mode_name: str
    advertisement_interval: ?int
    scan_time: ?int

    mut def __init__(self, mode_name: str, advertisement_interval: ?int, scan_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.mode_name = mode_name
        self.advertisement_interval = advertisement_interval
        self.scan_time = scan_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode_name = self.mode_name
        _advertisement_interval = self.advertisement_interval
        _scan_time = self.scan_time
        if _mode_name is not None:
            children['mode-name'] = yang.gdata.Leaf('enumeration', _mode_name)
        if _advertisement_interval is not None:
            children['advertisement-interval'] = yang.gdata.Leaf('uint32', _advertisement_interval)
        if _scan_time is not None:
            children['scan-time'] = yang.gdata.Leaf('uint32', _scan_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.mode_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name=n.get_str("mode-name"), advertisement_interval=n.get_opt_int("advertisement-interval"), scan_time=n.get_opt_int("scan-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name=yang.gdata.from_xml_str(n, "mode-name"), advertisement_interval=yang.gdata.from_xml_opt_int(n, "advertisement-interval"), scan_time=yang.gdata.from_xml_opt_int(n, "scan-time"))

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'bmp-mode'
        self.elements = elements

    mut def create(self, mode_name):
        for e in self.elements:
            match = True
            if e.mode_name != mode_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['mode-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(yang.adata.MNode):
    bmp_mode: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode

    mut def __init__(self, bmp_mode: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.bmp_mode = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(elements=bmp_mode)
        self.bmp_mode._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_mode = self.bmp_mode
        if _bmp_mode is not None:
            children['bmp-mode'] = _bmp_mode.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(bmp_mode=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode.from_gdata(n.get_opt_list("bmp-mode")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(bmp_mode=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode.from_xml(yang.gdata.get_xml_children(n, "bmp-mode")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(yang.adata.MNode):
    bmp_modes: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes

    mut def __init__(self, bmp_modes: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if bmp_modes is not None:
            self.bmp_modes = bmp_modes
        else:
            self.bmp_modes = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()
        self_bmp_modes = self.bmp_modes
        if self_bmp_modes is not None:
            self_bmp_modes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_modes = self.bmp_modes
        if _bmp_modes is not None:
            children['bmp-modes'] = _bmp_modes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(bmp_modes=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes.from_gdata(n.get_opt_container("bmp-modes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(bmp_modes=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes.from_xml(yang.gdata.get_xml_opt_child(n, "bmp-modes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(yang.adata.MNode):
    max_buffer_size: ?int
    route_monitoring: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring

    mut def __init__(self, max_buffer_size: ?int, route_monitoring: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.max_buffer_size = max_buffer_size
        if route_monitoring is not None:
            self.route_monitoring = route_monitoring
        else:
            self.route_monitoring = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()
        self_route_monitoring = self.route_monitoring
        if self_route_monitoring is not None:
            self_route_monitoring._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_buffer_size = self.max_buffer_size
        _route_monitoring = self.route_monitoring
        if _max_buffer_size is not None:
            children['max-buffer-size'] = yang.gdata.Leaf('uint32', _max_buffer_size)
        if _route_monitoring is not None:
            children['route-monitoring'] = _route_monitoring.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(max_buffer_size=n.get_opt_int("max-buffer-size"), route_monitoring=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring.from_gdata(n.get_opt_container("route-monitoring")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(max_buffer_size=yang.gdata.from_xml_opt_int(n, "max-buffer-size"), route_monitoring=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring.from_xml(yang.gdata.get_xml_opt_child(n, "route-monitoring")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server
    all: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]=[], all: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(elements=server)
        self.server._parent = self
        if all is not None:
            self.all = all
        else:
            self.all = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()
        self_all = self.all
        if self_all is not None:
            self_all._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        _all = self.all
        if _server is not None:
            children['server'] = _server.to_gdata()
        if _all is not None:
            children['all'] = _all.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server.from_gdata(n.get_opt_list("server")), all=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all.from_gdata(n.get_opt_container("all")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server.from_xml(yang.gdata.get_xml_children(n, "server")), all=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all.from_xml(yang.gdata.get_xml_opt_child(n, "all")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if servers is not None:
            self.servers = servers
        else:
            self.servers = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()
        self_servers = self.servers
        if self_servers is not None:
            self_servers._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp(servers=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers.from_gdata(n.get_opt_container("servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp(servers=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers.from_xml(yang.gdata.get_xml_opt_child(n, "servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(yang.adata.MNode):
    interface_name: ?str

    mut def __init__(self, interface_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.interface_name = interface_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(interface_name=n.get_opt_str("interface-name"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(interface_name=yang.gdata.from_xml_opt_str(n, "interface-name"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface

    mut def __init__(self, interface: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if interface is not None:
            self.interface = interface
        else:
            self.interface = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()
        self_interface = self.interface
        if self_interface is not None:
            self_interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(interface=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface.from_gdata(n.get_opt_container("interface")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(interface=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface.from_xml(yang.gdata.get_xml_opt_child(n, "interface")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__refresh_time_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(yang.adata.MNode):
    refresh_time_value: ?int
    off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off

    mut def __init__(self, refresh_time_value: ?int, off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.refresh_time_value = refresh_time_value
        self.off = off
        self_off = self.off
        if self_off is not None:
            self_off._parent = self

    mut def create_off(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        self.off = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _refresh_time_value = self.refresh_time_value
        _off = self.off
        if _refresh_time_value is not None:
            children['refresh-time-value'] = yang.gdata.Leaf('uint32', _refresh_time_value)
        if _off is not None:
            children['off'] = _off.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(refresh_time_value=n.get_opt_int("refresh-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off.from_gdata(n.get_opt_container("off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(refresh_time_value=yang.gdata.from_xml_opt_int(n, "refresh-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off.from_xml(yang.gdata.get_xml_opt_child(n, "off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__response_time_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(yang.adata.MNode):
    response_time_value: ?int
    off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off

    mut def __init__(self, response_time_value: ?int, off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.response_time_value = response_time_value
        self.off = off
        self_off = self.off
        if self_off is not None:
            self_off._parent = self

    mut def create_off(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        self.off = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _response_time_value = self.response_time_value
        _off = self.off
        if _response_time_value is not None:
            children['response-time-value'] = yang.gdata.Leaf('uint32', _response_time_value)
        if _off is not None:
            children['off'] = _off.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(response_time_value=n.get_opt_int("response-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off.from_gdata(n.get_opt_container("off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(response_time_value=yang.gdata.from_xml_opt_int(n, "response-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off.from_xml(yang.gdata.get_xml_opt_child(n, "off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__purge_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(yang.adata.MNode):
    port: ?int

    mut def __init__(self, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(port=n.get_opt_int("port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(port=yang.gdata.from_xml_opt_int(n, "port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(yang.adata.MNode):
    port: ?int

    mut def __init__(self, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(port=n.get_opt_int("port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(port=yang.gdata.from_xml_opt_int(n, "port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(yang.adata.MNode):
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp
    ssh: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh

    mut def __init__(self, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp=None, ssh: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if tcp is not None:
            self.tcp = tcp
        else:
            self.tcp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()
        self_tcp = self.tcp
        if self_tcp is not None:
            self_tcp._parent = self
        if ssh is not None:
            self.ssh = ssh
        else:
            self.ssh = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()
        self_ssh = self.ssh
        if self_ssh is not None:
            self_ssh._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tcp = self.tcp
        _ssh = self.ssh
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        if _ssh is not None:
            children['ssh'] = _ssh.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp.from_gdata(n.get_opt_container("tcp")), ssh=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh.from_gdata(n.get_opt_container("ssh")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp.from_xml(yang.gdata.get_xml_opt_child(n, "tcp")), ssh=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh.from_xml(yang.gdata.get_xml_opt_child(n, "ssh")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(yang.adata.MNode):
    server_id: str
    bind_source: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source
    preference: ?int
    refresh_time: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time
    response_time: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time
    purge_time: ?int
    username: ?str
    password: ?str
    transport: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown

    mut def __init__(self, server_id: str, bind_source: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source=None, preference: ?int, refresh_time: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time=None, response_time: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time=None, purge_time: ?int, username: ?str, password: ?str, transport: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport=None, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server_id = server_id
        if bind_source is not None:
            self.bind_source = bind_source
        else:
            self.bind_source = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()
        self_bind_source = self.bind_source
        if self_bind_source is not None:
            self_bind_source._parent = self
        self.preference = preference
        if refresh_time is not None:
            self.refresh_time = refresh_time
        else:
            self.refresh_time = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()
        self_refresh_time = self.refresh_time
        if self_refresh_time is not None:
            self_refresh_time._parent = self
        if response_time is not None:
            self.response_time = response_time
        else:
            self.response_time = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()
        self_response_time = self.response_time
        if self_response_time is not None:
            self_response_time._parent = self
        self.purge_time = purge_time
        self.username = username
        self.password = password
        if transport is not None:
            self.transport = transport
        else:
            self.transport = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()
        self_transport = self.transport
        if self_transport is not None:
            self_transport._parent = self
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        self.shutdown = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server_id = self.server_id
        _bind_source = self.bind_source
        _preference = self.preference
        _refresh_time = self.refresh_time
        _response_time = self.response_time
        _purge_time = self.purge_time
        _username = self.username
        _password = self.password
        _transport = self.transport
        _shutdown = self.shutdown
        if _server_id is not None:
            children['server-id'] = yang.gdata.Leaf('string', _server_id)
        if _bind_source is not None:
            children['bind-source'] = _bind_source.to_gdata()
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('uint32', _preference)
        if _refresh_time is not None:
            children['refresh-time'] = _refresh_time.to_gdata()
        if _response_time is not None:
            children['response-time'] = _response_time.to_gdata()
        if _purge_time is not None:
            children['purge-time'] = yang.gdata.Leaf('uint32', _purge_time)
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.server_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id=n.get_str("server-id"), bind_source=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source.from_gdata(n.get_opt_container("bind-source")), preference=n.get_opt_int("preference"), refresh_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time.from_gdata(n.get_opt_container("refresh-time")), response_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time.from_gdata(n.get_opt_container("response-time")), purge_time=n.get_opt_int("purge-time"), username=n.get_opt_str("username"), password=n.get_opt_str("password"), transport=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport.from_gdata(n.get_opt_container("transport")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown.from_gdata(n.get_opt_container("shutdown")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id=yang.gdata.from_xml_str(n, "server-id"), bind_source=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source.from_xml(yang.gdata.get_xml_opt_child(n, "bind-source")), preference=yang.gdata.from_xml_opt_int(n, "preference"), refresh_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time.from_xml(yang.gdata.get_xml_opt_child(n, "refresh-time")), response_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time.from_xml(yang.gdata.get_xml_opt_child(n, "response-time")), purge_time=yang.gdata.from_xml_opt_int(n, "purge-time"), username=yang.gdata.from_xml_opt_str(n, "username"), password=yang.gdata.from_xml_opt_str(n, "password"), transport=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport.from_xml(yang.gdata.get_xml_opt_child(n, "transport")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'server'
        self.elements = elements

    mut def create(self, server_id):
        for e in self.elements:
            match = True
            if e.server_id != server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(elements=server)
        self.server._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        if _server is not None:
            children['server'] = _server.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server.from_gdata(n.get_opt_list("server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server.from_xml(yang.gdata.get_xml_children(n, "server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__minimum_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__maximum_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__origin_as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(yang.adata.MNode):
    address: str
    minimum_prefix_length: int
    maximum_prefix_length: int
    origin_as_number: int

    mut def __init__(self, address: str, minimum_prefix_length: int, maximum_prefix_length: int, origin_as_number: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address = address
        self.minimum_prefix_length = minimum_prefix_length
        self.maximum_prefix_length = maximum_prefix_length
        self.origin_as_number = origin_as_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _minimum_prefix_length = self.minimum_prefix_length
        _maximum_prefix_length = self.maximum_prefix_length
        _origin_as_number = self.origin_as_number
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        if _minimum_prefix_length is not None:
            children['minimum-prefix-length'] = yang.gdata.Leaf('union', _minimum_prefix_length)
        if _maximum_prefix_length is not None:
            children['maximum-prefix-length'] = yang.gdata.Leaf('union', _maximum_prefix_length)
        if _origin_as_number is not None:
            children['origin-as-number'] = yang.gdata.Leaf('uint32', _origin_as_number)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address), yang.gdata.yang_str(self.minimum_prefix_length), yang.gdata.yang_str(self.maximum_prefix_length), yang.gdata.yang_str(self.origin_as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address=n.get_str("address"), minimum_prefix_length=n.get_int("minimum-prefix-length"), maximum_prefix_length=n.get_int("maximum-prefix-length"), origin_as_number=n.get_int("origin-as-number"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address=yang.gdata.from_xml_str(n, "address"), minimum_prefix_length=yang.gdata.from_xml_int(n, "minimum-prefix-length"), maximum_prefix_length=yang.gdata.from_xml_int(n, "maximum-prefix-length"), origin_as_number=yang.gdata.from_xml_int(n, "origin-as-number"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'route'
        self.elements = elements

    mut def create(self, address, minimum_prefix_length, maximum_prefix_length, origin_as_number):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if e.minimum_prefix_length != minimum_prefix_length:
                match = False
                continue
            if e.maximum_prefix_length != maximum_prefix_length:
                match = False
                continue
            if e.origin_as_number != origin_as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address, minimum_prefix_length, maximum_prefix_length, origin_as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address', 'minimum-prefix-length', 'maximum-prefix-length', 'origin-as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(yang.adata.MNode):
    route: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route

    mut def __init__(self, route: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(elements=route)
        self.route._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route = self.route
        if _route is not None:
            children['route'] = _route.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(route=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route.from_gdata(n.get_opt_list("route")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(route=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route.from_xml(yang.gdata.get_xml_children(n, "route")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__datafile(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers
    routes: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes
    datafile: ?str

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers=None, routes: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes=None, datafile: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if servers is not None:
            self.servers = servers
        else:
            self.servers = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()
        self_servers = self.servers
        if self_servers is not None:
            self_servers._parent = self
        if routes is not None:
            self.routes = routes
        else:
            self.routes = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()
        self_routes = self.routes
        if self_routes is not None:
            self_routes._parent = self
        self.datafile = datafile

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        _routes = self.routes
        _datafile = self.datafile
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        if _routes is not None:
            children['routes'] = _routes.to_gdata()
        if _datafile is not None:
            children['datafile'] = yang.gdata.Leaf('string', _datafile)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers.from_gdata(n.get_opt_container("servers")), routes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes.from_gdata(n.get_opt_container("routes")), datafile=n.get_opt_str("datafile"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers.from_xml(yang.gdata.get_xml_opt_child(n, "servers")), routes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes.from_xml(yang.gdata.get_xml_opt_child(n, "routes")), datafile=yang.gdata.from_xml_opt_str(n, "datafile"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__neighbor_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__session_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__neighbor_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(yang.adata.MNode):
    session_group: ?str
    neighbor_group: ?str

    mut def __init__(self, session_group: ?str, neighbor_group: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.session_group = session_group
        self.neighbor_group = neighbor_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _session_group = self.session_group
        _neighbor_group = self.neighbor_group
        if _session_group is not None:
            children['session-group'] = yang.gdata.Leaf('string', _session_group)
        if _neighbor_group is not None:
            children['neighbor-group'] = yang.gdata.Leaf('string', _neighbor_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(session_group=n.get_opt_str("session-group"), neighbor_group=n.get_opt_str("neighbor-group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(session_group=yang.gdata.from_xml_opt_str(n, "session-group"), neighbor_group=yang.gdata.from_xml_opt_str(n, "neighbor-group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(yang.adata.MNode):
    neighbor_address: str
    use: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use
    description: ?str

    mut def __init__(self, neighbor_address: str, use: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use=None, description: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_address = neighbor_address
        if use is not None:
            self.use = use
        else:
            self.use = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()
        self_use = self.use
        if self_use is not None:
            self_use._parent = self
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_address = self.neighbor_address
        _use = self.use
        _description = self.description
        if _neighbor_address is not None:
            children['neighbor-address'] = yang.gdata.Leaf('union', _neighbor_address)
        if _use is not None:
            children['use'] = _use.to_gdata()
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.neighbor_address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address=n.get_str("neighbor-address"), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use.from_gdata(n.get_opt_container("use")), description=n.get_opt_str("description"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address=yang.gdata.from_xml_str(n, "neighbor-address"), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use.from_xml(yang.gdata.get_xml_opt_child(n, "use")), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, neighbor_address):
        for e in self.elements:
            match = True
            if e.neighbor_address != neighbor_address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(yang.adata.MNode):
    neighbor: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor

    mut def __init__(self, neighbor: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(elements=neighbor)
        self.neighbor._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor.from_gdata(n.get_opt_list("neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor.from_xml(yang.gdata.get_xml_children(n, "neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__neighbor_group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__remote_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(yang.adata.MNode):
    encrypted: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable

    mut def __init__(self, encrypted: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.encrypted = encrypted
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        _inheritance_disable = self.inheritance_disable
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(encrypted=n.get_opt_str("encrypted"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(encrypted=yang.gdata.from_xml_opt_str(n, "encrypted"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(yang.adata.MNode):
    neighbor_group_name: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families
    remote_as: ?str
    description: ?str
    password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password
    update_source: ?str

    mut def __init__(self, neighbor_group_name: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families=None, remote_as: ?str, description: ?str, password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password=None, update_source: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_group_name = neighbor_group_name
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        self.remote_as = remote_as
        self.description = description
        self.password = password
        self_password = self.password
        if self_password is not None:
            self_password._parent = self
        self.update_source = update_source

    mut def create_password(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password()
        self.password = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_group_name = self.neighbor_group_name
        _address_families = self.address_families
        _remote_as = self.remote_as
        _description = self.description
        _password = self.password
        _update_source = self.update_source
        if _neighbor_group_name is not None:
            children['neighbor-group-name'] = yang.gdata.Leaf('string', _neighbor_group_name)
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _remote_as is not None:
            children['remote-as'] = yang.gdata.Leaf('string', _remote_as)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _password is not None:
            children['password'] = _password.to_gdata()
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.neighbor_group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name=n.get_str("neighbor-group-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families.from_gdata(n.get_opt_container("address-families")), remote_as=n.get_opt_str("remote-as"), description=n.get_opt_str("description"), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password.from_gdata(n.get_opt_container("password")), update_source=n.get_opt_str("update-source"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name=yang.gdata.from_xml_str(n, "neighbor-group-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), remote_as=yang.gdata.from_xml_opt_str(n, "remote-as"), description=yang.gdata.from_xml_opt_str(n, "description"), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password.from_xml(yang.gdata.get_xml_opt_child(n, "password")), update_source=yang.gdata.from_xml_opt_str(n, "update-source"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'neighbor-group'
        self.elements = elements

    mut def create(self, neighbor_group_name):
        for e in self.elements:
            match = True
            if e.neighbor_group_name != neighbor_group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(yang.adata.MNode):
    neighbor_group: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group

    mut def __init__(self, neighbor_group: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_group = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(elements=neighbor_group)
        self.neighbor_group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_group = self.neighbor_group
        if _neighbor_group is not None:
            children['neighbor-group'] = _neighbor_group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(neighbor_group=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group.from_gdata(n.get_opt_list("neighbor-group")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(neighbor_group=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group.from_xml(yang.gdata.get_xml_children(n, "neighbor-group")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(yang.adata.MNode):
    router_id: ?str

    mut def __init__(self, router_id: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.router_id = router_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('string', _router_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(router_id=n.get_opt_str("router-id"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(router_id=yang.gdata.from_xml_opt_str(n, "router-id"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__neighbor_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__in(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__out(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention__route_policy_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention__retention_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention(yang.adata.MNode):
    route_policy_name: ?str
    retention_time: ?int

    mut def __init__(self, route_policy_name: ?str, retention_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route_policy_name = route_policy_name
        self.retention_time = retention_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy_name = self.route_policy_name
        _retention_time = self.retention_time
        if _route_policy_name is not None:
            children['route-policy-name'] = yang.gdata.Leaf('string', _route_policy_name)
        if _retention_time is not None:
            children['retention-time'] = yang.gdata.Leaf('uint32', _retention_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention(route_policy_name=n.get_opt_str("route-policy-name"), retention_time=n.get_opt_int("retention-time"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention(route_policy_name=yang.gdata.from_xml_opt_str(n, "route-policy-name"), retention_time=yang.gdata.from_xml_opt_int(n, "retention-time"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy(yang.adata.MNode):
    in_: ?str
    out: ?str
    retention: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention

    mut def __init__(self, in_: ?str, out: ?str, retention: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.in_ = in_
        self.out = out
        if retention is not None:
            self.retention = retention
        else:
            self.retention = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention()
        self_retention = self.retention
        if self_retention is not None:
            self_retention._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_ = self.in_
        _out = self.out
        _retention = self.retention
        if _in_ is not None:
            children['in'] = yang.gdata.Leaf('string', _in_)
        if _out is not None:
            children['out'] = yang.gdata.Leaf('string', _out)
        if _retention is not None:
            children['retention'] = _retention.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy(in_=n.get_opt_str("in"), out=n.get_opt_str("out"), retention=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention.from_gdata(n.get_opt_container("retention")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy(in_=yang.gdata.from_xml_opt_str(n, "in"), out=yang.gdata.from_xml_opt_str(n, "out"), retention=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention.from_xml(yang.gdata.get_xml_opt_child(n, "retention")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry(yang.adata.MNode):
    af_name: str
    route_policy: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy

    mut def __init__(self, af_name: str, route_policy: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name
        if route_policy is not None:
            self.route_policy = route_policy
        else:
            self.route_policy = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy()
        self_route_policy = self.route_policy
        if self_route_policy is not None:
            self_route_policy._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        _route_policy = self.route_policy
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        if _route_policy is not None:
            children['route-policy'] = _route_policy.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry(af_name=n.get_str("af-name"), route_policy=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy.from_gdata(n.get_opt_container("route-policy")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"), route_policy=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy.from_xml(yang.gdata.get_xml_opt_child(n, "route-policy")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__remote_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry(yang.adata.MNode):
    neighbor_address: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families
    remote_as: ?str
    description: ?str

    mut def __init__(self, neighbor_address: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families=None, remote_as: ?str, description: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_address = neighbor_address
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        self.remote_as = remote_as
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_address = self.neighbor_address
        _address_families = self.address_families
        _remote_as = self.remote_as
        _description = self.description
        if _neighbor_address is not None:
            children['neighbor-address'] = yang.gdata.Leaf('union', _neighbor_address)
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _remote_as is not None:
            children['remote-as'] = yang.gdata.Leaf('string', _remote_as)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.neighbor_address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry(neighbor_address=n.get_str("neighbor-address"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families.from_gdata(n.get_opt_container("address-families")), remote_as=n.get_opt_str("remote-as"), description=n.get_opt_str("description"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry(neighbor_address=yang.gdata.from_xml_str(n, "neighbor-address"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), remote_as=yang.gdata.from_xml_opt_str(n, "remote-as"), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, neighbor_address):
        for e in self.elements:
            match = True
            if e.neighbor_address != neighbor_address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry(neighbor_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors(yang.adata.MNode):
    neighbor: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor

    mut def __init__(self, neighbor: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor(elements=neighbor)
        self.neighbor._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor.from_gdata(n.get_opt_list("neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor.from_xml(yang.gdata.get_xml_children(n, "neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto()
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as(yang.adata.MNode):
    as_number: str
    index: int

    mut def __init__(self, as_number: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as(as_number=n.get_str("as-number"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as(as_number=yang.gdata.from_xml_str(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as(yang.adata.MNode):
    as_number: str
    index: int

    mut def __init__(self, as_number: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as(as_number=n.get_str("as-number"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as(as_number=yang.gdata.from_xml_str(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address(yang.adata.MNode):
    ipv4_address: str
    index: int

    mut def __init__(self, ipv4_address: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ipv4_address = ipv4_address
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_address = self.ipv4_address
        _index = self.index
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address(ipv4_address=n.get_str("ipv4-address"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address(ipv4_address=yang.gdata.from_xml_str(n, "ipv4-address"), index=yang.gdata.from_xml_int(n, "index"))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd(yang.adata.MNode):
    auto: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto
    two_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as
    four_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as
    ip_address: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address

    mut def __init__(self, auto: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto=None, two_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as=None, four_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as=None, ip_address: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.auto = auto
        self_auto = self.auto
        if self_auto is not None:
            self_auto._parent = self
        self.two_byte_as = two_byte_as
        self_two_byte_as = self.two_byte_as
        if self_two_byte_as is not None:
            self_two_byte_as._parent = self
        self.four_byte_as = four_byte_as
        self_four_byte_as = self.four_byte_as
        if self_four_byte_as is not None:
            self_four_byte_as._parent = self
        self.ip_address = ip_address
        self_ip_address = self.ip_address
        if self_ip_address is not None:
            self_ip_address._parent = self

    mut def create_auto(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto()
        self.auto = res
        return res

    mut def create_two_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as(as_number, index)
        self.two_byte_as = res
        return res

    mut def create_four_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as(as_number, index)
        self.four_byte_as = res
        return res

    mut def create_ip_address(self, ipv4_address, index):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address(ipv4_address, index)
        self.ip_address = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _auto = self.auto
        _two_byte_as = self.two_byte_as
        _four_byte_as = self.four_byte_as
        _ip_address = self.ip_address
        if _auto is not None:
            children['auto'] = _auto.to_gdata()
        if _two_byte_as is not None:
            children['two-byte-as'] = _two_byte_as.to_gdata()
        if _four_byte_as is not None:
            children['four-byte-as'] = _four_byte_as.to_gdata()
        if _ip_address is not None:
            children['ip-address'] = _ip_address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd(auto=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto.from_gdata(n.get_opt_container("auto")), two_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as.from_gdata(n.get_opt_container("two-byte-as")), four_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as.from_gdata(n.get_opt_container("four-byte-as")), ip_address=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address.from_gdata(n.get_opt_container("ip-address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd(auto=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto.from_xml(yang.gdata.get_xml_opt_child(n, "auto")), two_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as")), four_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as")), ip_address=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address.from_xml(yang.gdata.get_xml_opt_child(n, "ip-address")))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families
    neighbors: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors
    rd: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd

    mut def __init__(self, vrf_name: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families=None, neighbors: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors=None, rd: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.vrf_name = vrf_name
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        if neighbors is not None:
            self.neighbors = neighbors
        else:
            self.neighbors = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors()
        self_neighbors = self.neighbors
        if self_neighbors is not None:
            self_neighbors._parent = self
        self.rd = rd
        self_rd = self.rd
        if self_rd is not None:
            self_rd._parent = self

    mut def create_rd(self, two_byte_as, four_byte_as, ip_address):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd(two_byte_as, four_byte_as, ip_address)
        self.rd = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        _address_families = self.address_families
        _neighbors = self.neighbors
        _rd = self.rd
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _neighbors is not None:
            children['neighbors'] = _neighbors.to_gdata()
        if _rd is not None:
            children['rd'] = _rd.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families.from_gdata(n.get_opt_container("address-families")), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors.from_gdata(n.get_opt_container("neighbors")), rd=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd.from_gdata(n.get_opt_container("rd")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors.from_xml(yang.gdata.get_xml_opt_child(n, "neighbors")), rd=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd.from_xml(yang.gdata.get_xml_opt_child(n, "rd")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.vrf = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(vrf=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(vrf=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(yang.adata.MNode):
    as_number: str
    rpki: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families
    neighbors: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors
    neighbor_groups: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups
    bgp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp
    vrfs: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs

    mut def __init__(self, as_number: str, rpki: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki=None, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families=None, neighbors: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors=None, neighbor_groups: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups=None, bgp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp=None, vrfs: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        if rpki is not None:
            self.rpki = rpki
        else:
            self.rpki = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()
        self_rpki = self.rpki
        if self_rpki is not None:
            self_rpki._parent = self
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        if neighbors is not None:
            self.neighbors = neighbors
        else:
            self.neighbors = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()
        self_neighbors = self.neighbors
        if self_neighbors is not None:
            self_neighbors._parent = self
        if neighbor_groups is not None:
            self.neighbor_groups = neighbor_groups
        else:
            self.neighbor_groups = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()
        self_neighbor_groups = self.neighbor_groups
        if self_neighbor_groups is not None:
            self_neighbor_groups._parent = self
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _rpki = self.rpki
        _address_families = self.address_families
        _neighbors = self.neighbors
        _neighbor_groups = self.neighbor_groups
        _bgp = self.bgp
        _vrfs = self.vrfs
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _rpki is not None:
            children['rpki'] = _rpki.to_gdata()
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _neighbors is not None:
            children['neighbors'] = _neighbors.to_gdata()
        if _neighbor_groups is not None:
            children['neighbor-groups'] = _neighbor_groups.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number=n.get_str("as-number"), rpki=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki.from_gdata(n.get_opt_container("rpki")), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families.from_gdata(n.get_opt_container("address-families")), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors.from_gdata(n.get_opt_container("neighbors")), neighbor_groups=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups.from_gdata(n.get_opt_container("neighbor-groups")), bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp.from_gdata(n.get_opt_container("bgp")), vrfs=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs.from_gdata(n.get_opt_container("vrfs")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number=yang.gdata.from_xml_str(n, "as-number"), rpki=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki.from_xml(yang.gdata.get_xml_opt_child(n, "rpki")), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors.from_xml(yang.gdata.get_xml_opt_child(n, "neighbors")), neighbor_groups=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups.from_xml(yang.gdata.get_xml_opt_child(n, "neighbor-groups")), bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), vrfs=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'as'
        self.elements = elements

    mut def create(self, as_number):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(yang.adata.MNode):
    as_: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as

    mut def __init__(self, as_: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_ = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(elements=as_)
        self.as_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_ = self.as_
        if _as_ is not None:
            children['as'] = _as_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(as_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as.from_gdata(n.get_opt_list("as")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(as_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as.from_xml(yang.gdata.get_xml_children(n, "as")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()



class Cisco_IOS_XR_um_router_bgp_cfg__router(yang.adata.MNode):
    bgp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp

    mut def __init__(self, bgp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router(bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp.from_gdata(n.get_opt_container("bgp")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router(bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(yang.adata.MNode):
    l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport
    point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point
    multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint

    mut def __init__(self, l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport=None, point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point=None, multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.l2transport = l2transport
        self_l2transport = self.l2transport
        if self_l2transport is not None:
            self_l2transport._parent = self
        self.point_to_point = point_to_point
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        self.multipoint = multipoint
        self_multipoint = self.multipoint
        if self_multipoint is not None:
            self_multipoint._parent = self

    mut def create_l2transport(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        self.l2transport = res
        return res

    mut def create_point_to_point(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        self.point_to_point = res
        return res

    mut def create_multipoint(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        self.multipoint = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l2transport = self.l2transport
        _point_to_point = self.point_to_point
        _multipoint = self.multipoint
        if _l2transport is not None:
            children['l2transport'] = _l2transport.to_gdata()
        if _point_to_point is not None:
            children['point-to-point'] = _point_to_point.to_gdata()
        if _multipoint is not None:
            children['multipoint'] = _multipoint.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_gdata(n.get_opt_container("l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_gdata(n.get_opt_container("point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_gdata(n.get_opt_container("multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_xml(yang.gdata.get_xml_opt_child(n, "l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_xml(yang.gdata.get_xml_opt_child(n, "point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_xml(yang.gdata.get_xml_opt_child(n, "multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__netmask(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    mut def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _netmask is not None:
            children['netmask'] = yang.gdata.Leaf('string', _netmask)
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__netmask(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    mut def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _netmask is not None:
            children['netmask'] = yang.gdata.Leaf('string', _netmask)
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'secondary'
        self.elements = elements

    mut def create(self, address, netmask):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address, netmask)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(yang.adata.MNode):
    secondary: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary

    mut def __init__(self, secondary: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.secondary = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(elements=secondary)
        self.secondary._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _secondary = self.secondary
        if _secondary is not None:
            children['secondary'] = _secondary.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_gdata(n.get_opt_list("secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_xml(yang.gdata.get_xml_children(n, "secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__unnumbered(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address
    secondaries: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries
    unnumbered: ?str
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp

    mut def __init__(self, address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address=None, secondaries: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries=None, unnumbered: ?str, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self
        if secondaries is not None:
            self.secondaries = secondaries
        else:
            self.secondaries = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()
        self_secondaries = self.secondaries
        if self_secondaries is not None:
            self_secondaries._parent = self
        self.unnumbered = unnumbered
        self.dhcp = dhcp
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self

    mut def create_address(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address, netmask)
        self.address = res
        return res

    mut def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        self.dhcp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _secondaries = self.secondaries
        _unnumbered = self.unnumbered
        _dhcp = self.dhcp
        if _address is not None:
            children['address'] = _address.to_gdata()
        if _secondaries is not None:
            children['secondaries'] = _secondaries.to_gdata()
        if _unnumbered is not None:
            children['unnumbered'] = yang.gdata.Leaf('string', _unnumbered)
        if _dhcp is not None:
            children['dhcp'] = _dhcp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_gdata(n.get_opt_container("address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_gdata(n.get_opt_container("secondaries")), unnumbered=n.get_opt_str("unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_gdata(n.get_opt_container("dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_xml(yang.gdata.get_xml_opt_child(n, "address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_xml(yang.gdata.get_xml_opt_child(n, "secondaries")), unnumbered=yang.gdata.from_xml_opt_str(n, "unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses

    mut def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _addresses = self.addresses
        if _addresses is not None:
            children['addresses'] = _addresses.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_gdata(n.get_opt_container("addresses")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(yang.adata.MNode):
    IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF

    mut def __init__(self, IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.IETF = IETF
        self_IETF = self.IETF
        if self_IETF is not None:
            self_IETF._parent = self

    mut def create_IETF(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        self.IETF = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _IETF = self.IETF
        if _IETF is not None:
            children['IETF'] = _IETF.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_gdata(n.get_opt_container("IETF")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_xml(yang.gdata.get_xml_opt_child(n, "IETF")))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(yang.adata.MNode):
    ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp
    hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc
    mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr
    frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay

    mut def __init__(self, ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp=None, hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc=None, mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr=None, frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.ppp = ppp
        self_ppp = self.ppp
        if self_ppp is not None:
            self_ppp._parent = self
        self.hdlc = hdlc
        self_hdlc = self.hdlc
        if self_hdlc is not None:
            self_hdlc._parent = self
        self.mfr = mfr
        self_mfr = self.mfr
        if self_mfr is not None:
            self_mfr._parent = self
        self.frame_relay = frame_relay
        self_frame_relay = self.frame_relay
        if self_frame_relay is not None:
            self_frame_relay._parent = self

    mut def create_ppp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        self.ppp = res
        return res

    mut def create_hdlc(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        self.hdlc = res
        return res

    mut def create_mfr(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        self.mfr = res
        return res

    mut def create_frame_relay(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()
        self.frame_relay = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ppp = self.ppp
        _hdlc = self.hdlc
        _mfr = self.mfr
        _frame_relay = self.frame_relay
        if _ppp is not None:
            children['ppp'] = _ppp.to_gdata()
        if _hdlc is not None:
            children['hdlc'] = _hdlc.to_gdata()
        if _mfr is not None:
            children['mfr'] = _mfr.to_gdata()
        if _frame_relay is not None:
            children['frame-relay'] = _frame_relay.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_gdata(n.get_opt_container("ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_gdata(n.get_opt_container("hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_gdata(n.get_opt_container("mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_gdata(n.get_opt_container("frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_xml(yang.gdata.get_xml_opt_child(n, "ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_xml(yang.gdata.get_xml_opt_child(n, "hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_xml(yang.gdata.get_xml_opt_child(n, "mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_xml(yang.gdata.get_xml_opt_child(n, "frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay__up(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay(yang.adata.MNode):
    up: ?int

    mut def __init__(self, up: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.up = up

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _up = self.up
        if _up is not None:
            children['up'] = yang.gdata.Leaf('uint32', _up)
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay(up=n.get_opt_int("up"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay(up=yang.gdata.from_xml_opt_int(n, "up"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q__second_dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q(yang.adata.MNode):
    vlan_id: ?int
    second_dot1q: ?int

    mut def __init__(self, vlan_id: ?int, second_dot1q: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.second_dot1q = second_dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _second_dot1q = self.second_dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _second_dot1q is not None:
            children['second-dot1q'] = yang.gdata.Leaf('uint32', _second_dot1q)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q(vlan_id=n.get_opt_int("vlan-id"), second_dot1q=n.get_opt_int("second-dot1q"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q(vlan_id=yang.gdata.from_xml_opt_int(n, "vlan-id"), second_dot1q=yang.gdata.from_xml_opt_int(n, "second-dot1q"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad__dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad(yang.adata.MNode):
    vlan_id: ?int
    dot1q: ?int

    mut def __init__(self, vlan_id: ?int, dot1q: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.dot1q = dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _dot1q = self.dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _dot1q is not None:
            children['dot1q'] = yang.gdata.Leaf('uint32', _dot1q)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad(vlan_id=n.get_opt_int("vlan-id"), dot1q=n.get_opt_int("dot1q"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad(vlan_id=yang.gdata.from_xml_opt_int(n, "vlan-id"), dot1q=yang.gdata.from_xml_opt_int(n, "dot1q"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(yang.adata.MNode):
    dot1q: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q
    dot1ad: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if dot1q is not None:
            self.dot1q = dot1q
        else:
            self.dot1q = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q()
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        if dot1ad is not None:
            self.dot1ad = dot1ad
        else:
            self.dot1ad = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad()
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__end_vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__second_dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__second_dot1q_end_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact()
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress(yang.adata.MNode):
    source_mac: ?str

    mut def __init__(self, source_mac: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.source_mac = source_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_mac = self.source_mac
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('string', _source_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress(source_mac=n.get_opt_str("source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress(source_mac=yang.gdata.from_xml_opt_str(n, "source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q__end_vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q(yang.adata.MNode):
    vlan_id: value
    end_vlan_id: ?int
    vlan_id_2: ?int
    end_vlan_id_2: ?int
    vlan_id_3: ?int
    end_vlan_id_3: ?int
    vlan_id_4: ?int
    end_vlan_id_4: ?int
    vlan_id_5: ?int
    end_vlan_id_5: ?int
    vlan_id_6: ?int
    end_vlan_id_6: ?int
    vlan_id_7: ?int
    end_vlan_id_7: ?int
    vlan_id_8: ?int
    end_vlan_id_8: ?int
    vlan_id_9: ?int
    end_vlan_id_9: ?int

    mut def __init__(self, vlan_id: value, end_vlan_id: ?int, vlan_id_2: ?int, end_vlan_id_2: ?int, vlan_id_3: ?int, end_vlan_id_3: ?int, vlan_id_4: ?int, end_vlan_id_4: ?int, vlan_id_5: ?int, end_vlan_id_5: ?int, vlan_id_6: ?int, end_vlan_id_6: ?int, vlan_id_7: ?int, end_vlan_id_7: ?int, vlan_id_8: ?int, end_vlan_id_8: ?int, vlan_id_9: ?int, end_vlan_id_9: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.end_vlan_id = end_vlan_id
        self.vlan_id_2 = vlan_id_2
        self.end_vlan_id_2 = end_vlan_id_2
        self.vlan_id_3 = vlan_id_3
        self.end_vlan_id_3 = end_vlan_id_3
        self.vlan_id_4 = vlan_id_4
        self.end_vlan_id_4 = end_vlan_id_4
        self.vlan_id_5 = vlan_id_5
        self.end_vlan_id_5 = end_vlan_id_5
        self.vlan_id_6 = vlan_id_6
        self.end_vlan_id_6 = end_vlan_id_6
        self.vlan_id_7 = vlan_id_7
        self.end_vlan_id_7 = end_vlan_id_7
        self.vlan_id_8 = vlan_id_8
        self.end_vlan_id_8 = end_vlan_id_8
        self.vlan_id_9 = vlan_id_9
        self.end_vlan_id_9 = end_vlan_id_9

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _end_vlan_id = self.end_vlan_id
        _vlan_id_2 = self.vlan_id_2
        _end_vlan_id_2 = self.end_vlan_id_2
        _vlan_id_3 = self.vlan_id_3
        _end_vlan_id_3 = self.end_vlan_id_3
        _vlan_id_4 = self.vlan_id_4
        _end_vlan_id_4 = self.end_vlan_id_4
        _vlan_id_5 = self.vlan_id_5
        _end_vlan_id_5 = self.end_vlan_id_5
        _vlan_id_6 = self.vlan_id_6
        _end_vlan_id_6 = self.end_vlan_id_6
        _vlan_id_7 = self.vlan_id_7
        _end_vlan_id_7 = self.end_vlan_id_7
        _vlan_id_8 = self.vlan_id_8
        _end_vlan_id_8 = self.end_vlan_id_8
        _vlan_id_9 = self.vlan_id_9
        _end_vlan_id_9 = self.end_vlan_id_9
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('union', _vlan_id)
        if _end_vlan_id is not None:
            children['end-vlan-id'] = yang.gdata.Leaf('uint32', _end_vlan_id)
        if _vlan_id_2 is not None:
            children['vlan-id-2'] = yang.gdata.Leaf('uint32', _vlan_id_2)
        if _end_vlan_id_2 is not None:
            children['end-vlan-id-2'] = yang.gdata.Leaf('uint32', _end_vlan_id_2)
        if _vlan_id_3 is not None:
            children['vlan-id-3'] = yang.gdata.Leaf('uint32', _vlan_id_3)
        if _end_vlan_id_3 is not None:
            children['end-vlan-id-3'] = yang.gdata.Leaf('uint32', _end_vlan_id_3)
        if _vlan_id_4 is not None:
            children['vlan-id-4'] = yang.gdata.Leaf('uint32', _vlan_id_4)
        if _end_vlan_id_4 is not None:
            children['end-vlan-id-4'] = yang.gdata.Leaf('uint32', _end_vlan_id_4)
        if _vlan_id_5 is not None:
            children['vlan-id-5'] = yang.gdata.Leaf('uint32', _vlan_id_5)
        if _end_vlan_id_5 is not None:
            children['end-vlan-id-5'] = yang.gdata.Leaf('uint32', _end_vlan_id_5)
        if _vlan_id_6 is not None:
            children['vlan-id-6'] = yang.gdata.Leaf('uint32', _vlan_id_6)
        if _end_vlan_id_6 is not None:
            children['end-vlan-id-6'] = yang.gdata.Leaf('uint32', _end_vlan_id_6)
        if _vlan_id_7 is not None:
            children['vlan-id-7'] = yang.gdata.Leaf('uint32', _vlan_id_7)
        if _end_vlan_id_7 is not None:
            children['end-vlan-id-7'] = yang.gdata.Leaf('uint32', _end_vlan_id_7)
        if _vlan_id_8 is not None:
            children['vlan-id-8'] = yang.gdata.Leaf('uint32', _vlan_id_8)
        if _end_vlan_id_8 is not None:
            children['end-vlan-id-8'] = yang.gdata.Leaf('uint32', _end_vlan_id_8)
        if _vlan_id_9 is not None:
            children['vlan-id-9'] = yang.gdata.Leaf('uint32', _vlan_id_9)
        if _end_vlan_id_9 is not None:
            children['end-vlan-id-9'] = yang.gdata.Leaf('uint32', _end_vlan_id_9)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q(vlan_id=n.get_value("vlan-id"), end_vlan_id=n.get_opt_int("end-vlan-id"), vlan_id_2=n.get_opt_int("vlan-id-2"), end_vlan_id_2=n.get_opt_int("end-vlan-id-2"), vlan_id_3=n.get_opt_int("vlan-id-3"), end_vlan_id_3=n.get_opt_int("end-vlan-id-3"), vlan_id_4=n.get_opt_int("vlan-id-4"), end_vlan_id_4=n.get_opt_int("end-vlan-id-4"), vlan_id_5=n.get_opt_int("vlan-id-5"), end_vlan_id_5=n.get_opt_int("end-vlan-id-5"), vlan_id_6=n.get_opt_int("vlan-id-6"), end_vlan_id_6=n.get_opt_int("end-vlan-id-6"), vlan_id_7=n.get_opt_int("vlan-id-7"), end_vlan_id_7=n.get_opt_int("end-vlan-id-7"), vlan_id_8=n.get_opt_int("vlan-id-8"), end_vlan_id_8=n.get_opt_int("end-vlan-id-8"), vlan_id_9=n.get_opt_int("vlan-id-9"), end_vlan_id_9=n.get_opt_int("end-vlan-id-9"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q(vlan_id=yang.gdata.from_xml_value(n, "vlan-id"), end_vlan_id=yang.gdata.from_xml_opt_int(n, "end-vlan-id"), vlan_id_2=yang.gdata.from_xml_opt_int(n, "vlan-id-2"), end_vlan_id_2=yang.gdata.from_xml_opt_int(n, "end-vlan-id-2"), vlan_id_3=yang.gdata.from_xml_opt_int(n, "vlan-id-3"), end_vlan_id_3=yang.gdata.from_xml_opt_int(n, "end-vlan-id-3"), vlan_id_4=yang.gdata.from_xml_opt_int(n, "vlan-id-4"), end_vlan_id_4=yang.gdata.from_xml_opt_int(n, "end-vlan-id-4"), vlan_id_5=yang.gdata.from_xml_opt_int(n, "vlan-id-5"), end_vlan_id_5=yang.gdata.from_xml_opt_int(n, "end-vlan-id-5"), vlan_id_6=yang.gdata.from_xml_opt_int(n, "vlan-id-6"), end_vlan_id_6=yang.gdata.from_xml_opt_int(n, "end-vlan-id-6"), vlan_id_7=yang.gdata.from_xml_opt_int(n, "vlan-id-7"), end_vlan_id_7=yang.gdata.from_xml_opt_int(n, "end-vlan-id-7"), vlan_id_8=yang.gdata.from_xml_opt_int(n, "vlan-id-8"), end_vlan_id_8=yang.gdata.from_xml_opt_int(n, "end-vlan-id-8"), vlan_id_9=yang.gdata.from_xml_opt_int(n, "vlan-id-9"), end_vlan_id_9=yang.gdata.from_xml_opt_int(n, "end-vlan-id-9"))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact()
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress(yang.adata.MNode):
    source_mac: ?str

    mut def __init__(self, source_mac: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.source_mac = source_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_mac = self.source_mac
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('string', _source_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress(source_mac=n.get_opt_str("source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress(source_mac=yang.gdata.from_xml_opt_str(n, "source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q
    exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact
    ingress: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q=None, exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact=None, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.exact = exact
        self_exact = self.exact
        if self_exact is not None:
            self_exact._parent = self
        if ingress is not None:
            self.ingress = ingress
        else:
            self.ingress = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress()
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self

    mut def create_dot1q(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q(vlan_id)
        self.dot1q = res
        return res

    mut def create_exact(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact()
        self.exact = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _exact = self.exact
        _ingress = self.ingress
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _exact is not None:
            children['exact'] = _exact.to_gdata()
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q.from_gdata(n.get_opt_container("dot1q")), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact.from_gdata(n.get_opt_container("exact")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress.from_gdata(n.get_opt_container("ingress")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__exact.from_xml(yang.gdata.get_xml_opt_child(n, "exact")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q(yang.adata.MNode):
    vlan_id: ?value
    end_vlan_id: ?value
    vlan_id_2: ?value
    end_vlan_id_2: ?int
    vlan_id_3: ?value
    end_vlan_id_3: ?int
    vlan_id_4: ?value
    end_vlan_id_4: ?int
    vlan_id_5: ?value
    end_vlan_id_5: ?int
    vlan_id_6: ?value
    end_vlan_id_6: ?int
    vlan_id_7: ?value
    end_vlan_id_7: ?int
    vlan_id_8: ?value
    end_vlan_id_8: ?int
    vlan_id_9: ?value
    end_vlan_id_9: ?int
    second_dot1q: ?value
    second_dot1q_end_vlan_id: ?value
    exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact
    ingress: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress
    priority_tagged: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged

    mut def __init__(self, vlan_id: ?value, end_vlan_id: ?value, vlan_id_2: ?value, end_vlan_id_2: ?int, vlan_id_3: ?value, end_vlan_id_3: ?int, vlan_id_4: ?value, end_vlan_id_4: ?int, vlan_id_5: ?value, end_vlan_id_5: ?int, vlan_id_6: ?value, end_vlan_id_6: ?int, vlan_id_7: ?value, end_vlan_id_7: ?int, vlan_id_8: ?value, end_vlan_id_8: ?int, vlan_id_9: ?value, end_vlan_id_9: ?int, second_dot1q: ?value, second_dot1q_end_vlan_id: ?value, exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact=None, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress=None, priority_tagged: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.end_vlan_id = end_vlan_id
        self.vlan_id_2 = vlan_id_2
        self.end_vlan_id_2 = end_vlan_id_2
        self.vlan_id_3 = vlan_id_3
        self.end_vlan_id_3 = end_vlan_id_3
        self.vlan_id_4 = vlan_id_4
        self.end_vlan_id_4 = end_vlan_id_4
        self.vlan_id_5 = vlan_id_5
        self.end_vlan_id_5 = end_vlan_id_5
        self.vlan_id_6 = vlan_id_6
        self.end_vlan_id_6 = end_vlan_id_6
        self.vlan_id_7 = vlan_id_7
        self.end_vlan_id_7 = end_vlan_id_7
        self.vlan_id_8 = vlan_id_8
        self.end_vlan_id_8 = end_vlan_id_8
        self.vlan_id_9 = vlan_id_9
        self.end_vlan_id_9 = end_vlan_id_9
        self.second_dot1q = second_dot1q
        self.second_dot1q_end_vlan_id = second_dot1q_end_vlan_id
        self.exact = exact
        self_exact = self.exact
        if self_exact is not None:
            self_exact._parent = self
        if ingress is not None:
            self.ingress = ingress
        else:
            self.ingress = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress()
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self
        self.priority_tagged = priority_tagged
        self_priority_tagged = self.priority_tagged
        if self_priority_tagged is not None:
            self_priority_tagged._parent = self

    mut def create_exact(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact()
        self.exact = res
        return res

    mut def create_priority_tagged(self, dot1q):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged(dot1q)
        self.priority_tagged = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _end_vlan_id = self.end_vlan_id
        _vlan_id_2 = self.vlan_id_2
        _end_vlan_id_2 = self.end_vlan_id_2
        _vlan_id_3 = self.vlan_id_3
        _end_vlan_id_3 = self.end_vlan_id_3
        _vlan_id_4 = self.vlan_id_4
        _end_vlan_id_4 = self.end_vlan_id_4
        _vlan_id_5 = self.vlan_id_5
        _end_vlan_id_5 = self.end_vlan_id_5
        _vlan_id_6 = self.vlan_id_6
        _end_vlan_id_6 = self.end_vlan_id_6
        _vlan_id_7 = self.vlan_id_7
        _end_vlan_id_7 = self.end_vlan_id_7
        _vlan_id_8 = self.vlan_id_8
        _end_vlan_id_8 = self.end_vlan_id_8
        _vlan_id_9 = self.vlan_id_9
        _end_vlan_id_9 = self.end_vlan_id_9
        _second_dot1q = self.second_dot1q
        _second_dot1q_end_vlan_id = self.second_dot1q_end_vlan_id
        _exact = self.exact
        _ingress = self.ingress
        _priority_tagged = self.priority_tagged
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('union', _vlan_id)
        if _end_vlan_id is not None:
            children['end-vlan-id'] = yang.gdata.Leaf('union', _end_vlan_id)
        if _vlan_id_2 is not None:
            children['vlan-id-2'] = yang.gdata.Leaf('union', _vlan_id_2)
        if _end_vlan_id_2 is not None:
            children['end-vlan-id-2'] = yang.gdata.Leaf('uint32', _end_vlan_id_2)
        if _vlan_id_3 is not None:
            children['vlan-id-3'] = yang.gdata.Leaf('union', _vlan_id_3)
        if _end_vlan_id_3 is not None:
            children['end-vlan-id-3'] = yang.gdata.Leaf('uint32', _end_vlan_id_3)
        if _vlan_id_4 is not None:
            children['vlan-id-4'] = yang.gdata.Leaf('union', _vlan_id_4)
        if _end_vlan_id_4 is not None:
            children['end-vlan-id-4'] = yang.gdata.Leaf('uint32', _end_vlan_id_4)
        if _vlan_id_5 is not None:
            children['vlan-id-5'] = yang.gdata.Leaf('union', _vlan_id_5)
        if _end_vlan_id_5 is not None:
            children['end-vlan-id-5'] = yang.gdata.Leaf('uint32', _end_vlan_id_5)
        if _vlan_id_6 is not None:
            children['vlan-id-6'] = yang.gdata.Leaf('union', _vlan_id_6)
        if _end_vlan_id_6 is not None:
            children['end-vlan-id-6'] = yang.gdata.Leaf('uint32', _end_vlan_id_6)
        if _vlan_id_7 is not None:
            children['vlan-id-7'] = yang.gdata.Leaf('union', _vlan_id_7)
        if _end_vlan_id_7 is not None:
            children['end-vlan-id-7'] = yang.gdata.Leaf('uint32', _end_vlan_id_7)
        if _vlan_id_8 is not None:
            children['vlan-id-8'] = yang.gdata.Leaf('union', _vlan_id_8)
        if _end_vlan_id_8 is not None:
            children['end-vlan-id-8'] = yang.gdata.Leaf('uint32', _end_vlan_id_8)
        if _vlan_id_9 is not None:
            children['vlan-id-9'] = yang.gdata.Leaf('union', _vlan_id_9)
        if _end_vlan_id_9 is not None:
            children['end-vlan-id-9'] = yang.gdata.Leaf('uint32', _end_vlan_id_9)
        if _second_dot1q is not None:
            children['second-dot1q'] = yang.gdata.Leaf('union', _second_dot1q)
        if _second_dot1q_end_vlan_id is not None:
            children['second-dot1q-end-vlan-id'] = yang.gdata.Leaf('union', _second_dot1q_end_vlan_id)
        if _exact is not None:
            children['exact'] = _exact.to_gdata()
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        if _priority_tagged is not None:
            children['priority-tagged'] = _priority_tagged.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q(vlan_id=n.get_opt_value("vlan-id"), end_vlan_id=n.get_opt_value("end-vlan-id"), vlan_id_2=n.get_opt_value("vlan-id-2"), end_vlan_id_2=n.get_opt_int("end-vlan-id-2"), vlan_id_3=n.get_opt_value("vlan-id-3"), end_vlan_id_3=n.get_opt_int("end-vlan-id-3"), vlan_id_4=n.get_opt_value("vlan-id-4"), end_vlan_id_4=n.get_opt_int("end-vlan-id-4"), vlan_id_5=n.get_opt_value("vlan-id-5"), end_vlan_id_5=n.get_opt_int("end-vlan-id-5"), vlan_id_6=n.get_opt_value("vlan-id-6"), end_vlan_id_6=n.get_opt_int("end-vlan-id-6"), vlan_id_7=n.get_opt_value("vlan-id-7"), end_vlan_id_7=n.get_opt_int("end-vlan-id-7"), vlan_id_8=n.get_opt_value("vlan-id-8"), end_vlan_id_8=n.get_opt_int("end-vlan-id-8"), vlan_id_9=n.get_opt_value("vlan-id-9"), end_vlan_id_9=n.get_opt_int("end-vlan-id-9"), second_dot1q=n.get_opt_value("second-dot1q"), second_dot1q_end_vlan_id=n.get_opt_value("second-dot1q-end-vlan-id"), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact.from_gdata(n.get_opt_container("exact")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress.from_gdata(n.get_opt_container("ingress")), priority_tagged=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged.from_gdata(n.get_opt_container("priority-tagged")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q(vlan_id=yang.gdata.from_xml_opt_value(n, "vlan-id"), end_vlan_id=yang.gdata.from_xml_opt_value(n, "end-vlan-id"), vlan_id_2=yang.gdata.from_xml_opt_value(n, "vlan-id-2"), end_vlan_id_2=yang.gdata.from_xml_opt_int(n, "end-vlan-id-2"), vlan_id_3=yang.gdata.from_xml_opt_value(n, "vlan-id-3"), end_vlan_id_3=yang.gdata.from_xml_opt_int(n, "end-vlan-id-3"), vlan_id_4=yang.gdata.from_xml_opt_value(n, "vlan-id-4"), end_vlan_id_4=yang.gdata.from_xml_opt_int(n, "end-vlan-id-4"), vlan_id_5=yang.gdata.from_xml_opt_value(n, "vlan-id-5"), end_vlan_id_5=yang.gdata.from_xml_opt_int(n, "end-vlan-id-5"), vlan_id_6=yang.gdata.from_xml_opt_value(n, "vlan-id-6"), end_vlan_id_6=yang.gdata.from_xml_opt_int(n, "end-vlan-id-6"), vlan_id_7=yang.gdata.from_xml_opt_value(n, "vlan-id-7"), end_vlan_id_7=yang.gdata.from_xml_opt_int(n, "end-vlan-id-7"), vlan_id_8=yang.gdata.from_xml_opt_value(n, "vlan-id-8"), end_vlan_id_8=yang.gdata.from_xml_opt_int(n, "end-vlan-id-8"), vlan_id_9=yang.gdata.from_xml_opt_value(n, "vlan-id-9"), end_vlan_id_9=yang.gdata.from_xml_opt_int(n, "end-vlan-id-9"), second_dot1q=yang.gdata.from_xml_opt_value(n, "second-dot1q"), second_dot1q_end_vlan_id=yang.gdata.from_xml_opt_value(n, "second-dot1q-end-vlan-id"), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__exact.from_xml(yang.gdata.get_xml_opt_child(n, "exact")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")), priority_tagged=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q__priority_tagged.from_xml(yang.gdata.get_xml_opt_child(n, "priority-tagged")))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__end_vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__dot1q_end_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact()
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress(yang.adata.MNode):
    source_mac: ?str

    mut def __init__(self, source_mac: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.source_mac = source_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_mac = self.source_mac
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('string', _source_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress(source_mac=n.get_opt_str("source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress(source_mac=yang.gdata.from_xml_opt_str(n, "source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q__end_vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q(yang.adata.MNode):
    vlan_id: value
    end_vlan_id: ?int
    vlan_id_2: ?int
    end_vlan_id_2: ?int
    vlan_id_3: ?int
    end_vlan_id_3: ?int
    vlan_id_4: ?int
    end_vlan_id_4: ?int
    vlan_id_5: ?int
    end_vlan_id_5: ?int
    vlan_id_6: ?int
    end_vlan_id_6: ?int
    vlan_id_7: ?int
    end_vlan_id_7: ?int
    vlan_id_8: ?int
    end_vlan_id_8: ?int
    vlan_id_9: ?int
    end_vlan_id_9: ?int

    mut def __init__(self, vlan_id: value, end_vlan_id: ?int, vlan_id_2: ?int, end_vlan_id_2: ?int, vlan_id_3: ?int, end_vlan_id_3: ?int, vlan_id_4: ?int, end_vlan_id_4: ?int, vlan_id_5: ?int, end_vlan_id_5: ?int, vlan_id_6: ?int, end_vlan_id_6: ?int, vlan_id_7: ?int, end_vlan_id_7: ?int, vlan_id_8: ?int, end_vlan_id_8: ?int, vlan_id_9: ?int, end_vlan_id_9: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.end_vlan_id = end_vlan_id
        self.vlan_id_2 = vlan_id_2
        self.end_vlan_id_2 = end_vlan_id_2
        self.vlan_id_3 = vlan_id_3
        self.end_vlan_id_3 = end_vlan_id_3
        self.vlan_id_4 = vlan_id_4
        self.end_vlan_id_4 = end_vlan_id_4
        self.vlan_id_5 = vlan_id_5
        self.end_vlan_id_5 = end_vlan_id_5
        self.vlan_id_6 = vlan_id_6
        self.end_vlan_id_6 = end_vlan_id_6
        self.vlan_id_7 = vlan_id_7
        self.end_vlan_id_7 = end_vlan_id_7
        self.vlan_id_8 = vlan_id_8
        self.end_vlan_id_8 = end_vlan_id_8
        self.vlan_id_9 = vlan_id_9
        self.end_vlan_id_9 = end_vlan_id_9

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _end_vlan_id = self.end_vlan_id
        _vlan_id_2 = self.vlan_id_2
        _end_vlan_id_2 = self.end_vlan_id_2
        _vlan_id_3 = self.vlan_id_3
        _end_vlan_id_3 = self.end_vlan_id_3
        _vlan_id_4 = self.vlan_id_4
        _end_vlan_id_4 = self.end_vlan_id_4
        _vlan_id_5 = self.vlan_id_5
        _end_vlan_id_5 = self.end_vlan_id_5
        _vlan_id_6 = self.vlan_id_6
        _end_vlan_id_6 = self.end_vlan_id_6
        _vlan_id_7 = self.vlan_id_7
        _end_vlan_id_7 = self.end_vlan_id_7
        _vlan_id_8 = self.vlan_id_8
        _end_vlan_id_8 = self.end_vlan_id_8
        _vlan_id_9 = self.vlan_id_9
        _end_vlan_id_9 = self.end_vlan_id_9
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('union', _vlan_id)
        if _end_vlan_id is not None:
            children['end-vlan-id'] = yang.gdata.Leaf('uint32', _end_vlan_id)
        if _vlan_id_2 is not None:
            children['vlan-id-2'] = yang.gdata.Leaf('uint32', _vlan_id_2)
        if _end_vlan_id_2 is not None:
            children['end-vlan-id-2'] = yang.gdata.Leaf('uint32', _end_vlan_id_2)
        if _vlan_id_3 is not None:
            children['vlan-id-3'] = yang.gdata.Leaf('uint32', _vlan_id_3)
        if _end_vlan_id_3 is not None:
            children['end-vlan-id-3'] = yang.gdata.Leaf('uint32', _end_vlan_id_3)
        if _vlan_id_4 is not None:
            children['vlan-id-4'] = yang.gdata.Leaf('uint32', _vlan_id_4)
        if _end_vlan_id_4 is not None:
            children['end-vlan-id-4'] = yang.gdata.Leaf('uint32', _end_vlan_id_4)
        if _vlan_id_5 is not None:
            children['vlan-id-5'] = yang.gdata.Leaf('uint32', _vlan_id_5)
        if _end_vlan_id_5 is not None:
            children['end-vlan-id-5'] = yang.gdata.Leaf('uint32', _end_vlan_id_5)
        if _vlan_id_6 is not None:
            children['vlan-id-6'] = yang.gdata.Leaf('uint32', _vlan_id_6)
        if _end_vlan_id_6 is not None:
            children['end-vlan-id-6'] = yang.gdata.Leaf('uint32', _end_vlan_id_6)
        if _vlan_id_7 is not None:
            children['vlan-id-7'] = yang.gdata.Leaf('uint32', _vlan_id_7)
        if _end_vlan_id_7 is not None:
            children['end-vlan-id-7'] = yang.gdata.Leaf('uint32', _end_vlan_id_7)
        if _vlan_id_8 is not None:
            children['vlan-id-8'] = yang.gdata.Leaf('uint32', _vlan_id_8)
        if _end_vlan_id_8 is not None:
            children['end-vlan-id-8'] = yang.gdata.Leaf('uint32', _end_vlan_id_8)
        if _vlan_id_9 is not None:
            children['vlan-id-9'] = yang.gdata.Leaf('uint32', _vlan_id_9)
        if _end_vlan_id_9 is not None:
            children['end-vlan-id-9'] = yang.gdata.Leaf('uint32', _end_vlan_id_9)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q(vlan_id=n.get_value("vlan-id"), end_vlan_id=n.get_opt_int("end-vlan-id"), vlan_id_2=n.get_opt_int("vlan-id-2"), end_vlan_id_2=n.get_opt_int("end-vlan-id-2"), vlan_id_3=n.get_opt_int("vlan-id-3"), end_vlan_id_3=n.get_opt_int("end-vlan-id-3"), vlan_id_4=n.get_opt_int("vlan-id-4"), end_vlan_id_4=n.get_opt_int("end-vlan-id-4"), vlan_id_5=n.get_opt_int("vlan-id-5"), end_vlan_id_5=n.get_opt_int("end-vlan-id-5"), vlan_id_6=n.get_opt_int("vlan-id-6"), end_vlan_id_6=n.get_opt_int("end-vlan-id-6"), vlan_id_7=n.get_opt_int("vlan-id-7"), end_vlan_id_7=n.get_opt_int("end-vlan-id-7"), vlan_id_8=n.get_opt_int("vlan-id-8"), end_vlan_id_8=n.get_opt_int("end-vlan-id-8"), vlan_id_9=n.get_opt_int("vlan-id-9"), end_vlan_id_9=n.get_opt_int("end-vlan-id-9"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q(vlan_id=yang.gdata.from_xml_value(n, "vlan-id"), end_vlan_id=yang.gdata.from_xml_opt_int(n, "end-vlan-id"), vlan_id_2=yang.gdata.from_xml_opt_int(n, "vlan-id-2"), end_vlan_id_2=yang.gdata.from_xml_opt_int(n, "end-vlan-id-2"), vlan_id_3=yang.gdata.from_xml_opt_int(n, "vlan-id-3"), end_vlan_id_3=yang.gdata.from_xml_opt_int(n, "end-vlan-id-3"), vlan_id_4=yang.gdata.from_xml_opt_int(n, "vlan-id-4"), end_vlan_id_4=yang.gdata.from_xml_opt_int(n, "end-vlan-id-4"), vlan_id_5=yang.gdata.from_xml_opt_int(n, "vlan-id-5"), end_vlan_id_5=yang.gdata.from_xml_opt_int(n, "end-vlan-id-5"), vlan_id_6=yang.gdata.from_xml_opt_int(n, "vlan-id-6"), end_vlan_id_6=yang.gdata.from_xml_opt_int(n, "end-vlan-id-6"), vlan_id_7=yang.gdata.from_xml_opt_int(n, "vlan-id-7"), end_vlan_id_7=yang.gdata.from_xml_opt_int(n, "end-vlan-id-7"), vlan_id_8=yang.gdata.from_xml_opt_int(n, "vlan-id-8"), end_vlan_id_8=yang.gdata.from_xml_opt_int(n, "end-vlan-id-8"), vlan_id_9=yang.gdata.from_xml_opt_int(n, "vlan-id-9"), end_vlan_id_9=yang.gdata.from_xml_opt_int(n, "end-vlan-id-9"))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact()
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress(yang.adata.MNode):
    source_mac: ?str

    mut def __init__(self, source_mac: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.source_mac = source_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_mac = self.source_mac
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('string', _source_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress(source_mac=n.get_opt_str("source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress(source_mac=yang.gdata.from_xml_opt_str(n, "source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q
    exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact
    ingress: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q=None, exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact=None, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.exact = exact
        self_exact = self.exact
        if self_exact is not None:
            self_exact._parent = self
        if ingress is not None:
            self.ingress = ingress
        else:
            self.ingress = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress()
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self

    mut def create_dot1q(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q(vlan_id)
        self.dot1q = res
        return res

    mut def create_exact(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact()
        self.exact = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _exact = self.exact
        _ingress = self.ingress
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _exact is not None:
            children['exact'] = _exact.to_gdata()
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q.from_gdata(n.get_opt_container("dot1q")), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact.from_gdata(n.get_opt_container("exact")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress.from_gdata(n.get_opt_container("ingress")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__exact.from_xml(yang.gdata.get_xml_opt_child(n, "exact")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad(yang.adata.MNode):
    vlan_id: ?value
    end_vlan_id: ?value
    vlan_id_2: ?int
    end_vlan_id_2: ?int
    vlan_id_3: ?int
    end_vlan_id_3: ?int
    vlan_id_4: ?int
    end_vlan_id_4: ?int
    vlan_id_5: ?int
    end_vlan_id_5: ?int
    vlan_id_6: ?int
    end_vlan_id_6: ?int
    vlan_id_7: ?int
    end_vlan_id_7: ?int
    vlan_id_8: ?int
    end_vlan_id_8: ?int
    vlan_id_9: ?int
    end_vlan_id_9: ?int
    dot1q: ?value
    dot1q_end_vlan_id: ?value
    exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact
    ingress: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress
    priority_tagged: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged

    mut def __init__(self, vlan_id: ?value, end_vlan_id: ?value, vlan_id_2: ?int, end_vlan_id_2: ?int, vlan_id_3: ?int, end_vlan_id_3: ?int, vlan_id_4: ?int, end_vlan_id_4: ?int, vlan_id_5: ?int, end_vlan_id_5: ?int, vlan_id_6: ?int, end_vlan_id_6: ?int, vlan_id_7: ?int, end_vlan_id_7: ?int, vlan_id_8: ?int, end_vlan_id_8: ?int, vlan_id_9: ?int, end_vlan_id_9: ?int, dot1q: ?value, dot1q_end_vlan_id: ?value, exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact=None, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress=None, priority_tagged: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.end_vlan_id = end_vlan_id
        self.vlan_id_2 = vlan_id_2
        self.end_vlan_id_2 = end_vlan_id_2
        self.vlan_id_3 = vlan_id_3
        self.end_vlan_id_3 = end_vlan_id_3
        self.vlan_id_4 = vlan_id_4
        self.end_vlan_id_4 = end_vlan_id_4
        self.vlan_id_5 = vlan_id_5
        self.end_vlan_id_5 = end_vlan_id_5
        self.vlan_id_6 = vlan_id_6
        self.end_vlan_id_6 = end_vlan_id_6
        self.vlan_id_7 = vlan_id_7
        self.end_vlan_id_7 = end_vlan_id_7
        self.vlan_id_8 = vlan_id_8
        self.end_vlan_id_8 = end_vlan_id_8
        self.vlan_id_9 = vlan_id_9
        self.end_vlan_id_9 = end_vlan_id_9
        self.dot1q = dot1q
        self.dot1q_end_vlan_id = dot1q_end_vlan_id
        self.exact = exact
        self_exact = self.exact
        if self_exact is not None:
            self_exact._parent = self
        if ingress is not None:
            self.ingress = ingress
        else:
            self.ingress = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress()
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self
        self.priority_tagged = priority_tagged
        self_priority_tagged = self.priority_tagged
        if self_priority_tagged is not None:
            self_priority_tagged._parent = self

    mut def create_exact(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact()
        self.exact = res
        return res

    mut def create_priority_tagged(self, dot1q):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged(dot1q)
        self.priority_tagged = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _end_vlan_id = self.end_vlan_id
        _vlan_id_2 = self.vlan_id_2
        _end_vlan_id_2 = self.end_vlan_id_2
        _vlan_id_3 = self.vlan_id_3
        _end_vlan_id_3 = self.end_vlan_id_3
        _vlan_id_4 = self.vlan_id_4
        _end_vlan_id_4 = self.end_vlan_id_4
        _vlan_id_5 = self.vlan_id_5
        _end_vlan_id_5 = self.end_vlan_id_5
        _vlan_id_6 = self.vlan_id_6
        _end_vlan_id_6 = self.end_vlan_id_6
        _vlan_id_7 = self.vlan_id_7
        _end_vlan_id_7 = self.end_vlan_id_7
        _vlan_id_8 = self.vlan_id_8
        _end_vlan_id_8 = self.end_vlan_id_8
        _vlan_id_9 = self.vlan_id_9
        _end_vlan_id_9 = self.end_vlan_id_9
        _dot1q = self.dot1q
        _dot1q_end_vlan_id = self.dot1q_end_vlan_id
        _exact = self.exact
        _ingress = self.ingress
        _priority_tagged = self.priority_tagged
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('union', _vlan_id)
        if _end_vlan_id is not None:
            children['end-vlan-id'] = yang.gdata.Leaf('union', _end_vlan_id)
        if _vlan_id_2 is not None:
            children['vlan-id-2'] = yang.gdata.Leaf('uint32', _vlan_id_2)
        if _end_vlan_id_2 is not None:
            children['end-vlan-id-2'] = yang.gdata.Leaf('uint32', _end_vlan_id_2)
        if _vlan_id_3 is not None:
            children['vlan-id-3'] = yang.gdata.Leaf('uint32', _vlan_id_3)
        if _end_vlan_id_3 is not None:
            children['end-vlan-id-3'] = yang.gdata.Leaf('uint32', _end_vlan_id_3)
        if _vlan_id_4 is not None:
            children['vlan-id-4'] = yang.gdata.Leaf('uint32', _vlan_id_4)
        if _end_vlan_id_4 is not None:
            children['end-vlan-id-4'] = yang.gdata.Leaf('uint32', _end_vlan_id_4)
        if _vlan_id_5 is not None:
            children['vlan-id-5'] = yang.gdata.Leaf('uint32', _vlan_id_5)
        if _end_vlan_id_5 is not None:
            children['end-vlan-id-5'] = yang.gdata.Leaf('uint32', _end_vlan_id_5)
        if _vlan_id_6 is not None:
            children['vlan-id-6'] = yang.gdata.Leaf('uint32', _vlan_id_6)
        if _end_vlan_id_6 is not None:
            children['end-vlan-id-6'] = yang.gdata.Leaf('uint32', _end_vlan_id_6)
        if _vlan_id_7 is not None:
            children['vlan-id-7'] = yang.gdata.Leaf('uint32', _vlan_id_7)
        if _end_vlan_id_7 is not None:
            children['end-vlan-id-7'] = yang.gdata.Leaf('uint32', _end_vlan_id_7)
        if _vlan_id_8 is not None:
            children['vlan-id-8'] = yang.gdata.Leaf('uint32', _vlan_id_8)
        if _end_vlan_id_8 is not None:
            children['end-vlan-id-8'] = yang.gdata.Leaf('uint32', _end_vlan_id_8)
        if _vlan_id_9 is not None:
            children['vlan-id-9'] = yang.gdata.Leaf('uint32', _vlan_id_9)
        if _end_vlan_id_9 is not None:
            children['end-vlan-id-9'] = yang.gdata.Leaf('uint32', _end_vlan_id_9)
        if _dot1q is not None:
            children['dot1q'] = yang.gdata.Leaf('union', _dot1q)
        if _dot1q_end_vlan_id is not None:
            children['dot1q-end-vlan-id'] = yang.gdata.Leaf('union', _dot1q_end_vlan_id)
        if _exact is not None:
            children['exact'] = _exact.to_gdata()
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        if _priority_tagged is not None:
            children['priority-tagged'] = _priority_tagged.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad(vlan_id=n.get_opt_value("vlan-id"), end_vlan_id=n.get_opt_value("end-vlan-id"), vlan_id_2=n.get_opt_int("vlan-id-2"), end_vlan_id_2=n.get_opt_int("end-vlan-id-2"), vlan_id_3=n.get_opt_int("vlan-id-3"), end_vlan_id_3=n.get_opt_int("end-vlan-id-3"), vlan_id_4=n.get_opt_int("vlan-id-4"), end_vlan_id_4=n.get_opt_int("end-vlan-id-4"), vlan_id_5=n.get_opt_int("vlan-id-5"), end_vlan_id_5=n.get_opt_int("end-vlan-id-5"), vlan_id_6=n.get_opt_int("vlan-id-6"), end_vlan_id_6=n.get_opt_int("end-vlan-id-6"), vlan_id_7=n.get_opt_int("vlan-id-7"), end_vlan_id_7=n.get_opt_int("end-vlan-id-7"), vlan_id_8=n.get_opt_int("vlan-id-8"), end_vlan_id_8=n.get_opt_int("end-vlan-id-8"), vlan_id_9=n.get_opt_int("vlan-id-9"), end_vlan_id_9=n.get_opt_int("end-vlan-id-9"), dot1q=n.get_opt_value("dot1q"), dot1q_end_vlan_id=n.get_opt_value("dot1q-end-vlan-id"), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact.from_gdata(n.get_opt_container("exact")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress.from_gdata(n.get_opt_container("ingress")), priority_tagged=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged.from_gdata(n.get_opt_container("priority-tagged")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad(vlan_id=yang.gdata.from_xml_opt_value(n, "vlan-id"), end_vlan_id=yang.gdata.from_xml_opt_value(n, "end-vlan-id"), vlan_id_2=yang.gdata.from_xml_opt_int(n, "vlan-id-2"), end_vlan_id_2=yang.gdata.from_xml_opt_int(n, "end-vlan-id-2"), vlan_id_3=yang.gdata.from_xml_opt_int(n, "vlan-id-3"), end_vlan_id_3=yang.gdata.from_xml_opt_int(n, "end-vlan-id-3"), vlan_id_4=yang.gdata.from_xml_opt_int(n, "vlan-id-4"), end_vlan_id_4=yang.gdata.from_xml_opt_int(n, "end-vlan-id-4"), vlan_id_5=yang.gdata.from_xml_opt_int(n, "vlan-id-5"), end_vlan_id_5=yang.gdata.from_xml_opt_int(n, "end-vlan-id-5"), vlan_id_6=yang.gdata.from_xml_opt_int(n, "vlan-id-6"), end_vlan_id_6=yang.gdata.from_xml_opt_int(n, "end-vlan-id-6"), vlan_id_7=yang.gdata.from_xml_opt_int(n, "vlan-id-7"), end_vlan_id_7=yang.gdata.from_xml_opt_int(n, "end-vlan-id-7"), vlan_id_8=yang.gdata.from_xml_opt_int(n, "vlan-id-8"), end_vlan_id_8=yang.gdata.from_xml_opt_int(n, "end-vlan-id-8"), vlan_id_9=yang.gdata.from_xml_opt_int(n, "vlan-id-9"), end_vlan_id_9=yang.gdata.from_xml_opt_int(n, "end-vlan-id-9"), dot1q=yang.gdata.from_xml_opt_value(n, "dot1q"), dot1q_end_vlan_id=yang.gdata.from_xml_opt_value(n, "dot1q-end-vlan-id"), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__exact.from_xml(yang.gdata.get_xml_opt_child(n, "exact")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")), priority_tagged=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad__priority_tagged.from_xml(yang.gdata.get_xml_opt_child(n, "priority-tagged")))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id_2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id_4(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id_5(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id_6(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id_7(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id_8(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q__end_vlan_id_9(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q(yang.adata.MNode):
    vlan_id: value
    end_vlan_id: ?int
    vlan_id_2: ?int
    end_vlan_id_2: ?int
    vlan_id_3: ?int
    end_vlan_id_3: ?int
    vlan_id_4: ?int
    end_vlan_id_4: ?int
    vlan_id_5: ?int
    end_vlan_id_5: ?int
    vlan_id_6: ?int
    end_vlan_id_6: ?int
    vlan_id_7: ?int
    end_vlan_id_7: ?int
    vlan_id_8: ?int
    end_vlan_id_8: ?int
    vlan_id_9: ?int
    end_vlan_id_9: ?int

    mut def __init__(self, vlan_id: value, end_vlan_id: ?int, vlan_id_2: ?int, end_vlan_id_2: ?int, vlan_id_3: ?int, end_vlan_id_3: ?int, vlan_id_4: ?int, end_vlan_id_4: ?int, vlan_id_5: ?int, end_vlan_id_5: ?int, vlan_id_6: ?int, end_vlan_id_6: ?int, vlan_id_7: ?int, end_vlan_id_7: ?int, vlan_id_8: ?int, end_vlan_id_8: ?int, vlan_id_9: ?int, end_vlan_id_9: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.end_vlan_id = end_vlan_id
        self.vlan_id_2 = vlan_id_2
        self.end_vlan_id_2 = end_vlan_id_2
        self.vlan_id_3 = vlan_id_3
        self.end_vlan_id_3 = end_vlan_id_3
        self.vlan_id_4 = vlan_id_4
        self.end_vlan_id_4 = end_vlan_id_4
        self.vlan_id_5 = vlan_id_5
        self.end_vlan_id_5 = end_vlan_id_5
        self.vlan_id_6 = vlan_id_6
        self.end_vlan_id_6 = end_vlan_id_6
        self.vlan_id_7 = vlan_id_7
        self.end_vlan_id_7 = end_vlan_id_7
        self.vlan_id_8 = vlan_id_8
        self.end_vlan_id_8 = end_vlan_id_8
        self.vlan_id_9 = vlan_id_9
        self.end_vlan_id_9 = end_vlan_id_9

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _end_vlan_id = self.end_vlan_id
        _vlan_id_2 = self.vlan_id_2
        _end_vlan_id_2 = self.end_vlan_id_2
        _vlan_id_3 = self.vlan_id_3
        _end_vlan_id_3 = self.end_vlan_id_3
        _vlan_id_4 = self.vlan_id_4
        _end_vlan_id_4 = self.end_vlan_id_4
        _vlan_id_5 = self.vlan_id_5
        _end_vlan_id_5 = self.end_vlan_id_5
        _vlan_id_6 = self.vlan_id_6
        _end_vlan_id_6 = self.end_vlan_id_6
        _vlan_id_7 = self.vlan_id_7
        _end_vlan_id_7 = self.end_vlan_id_7
        _vlan_id_8 = self.vlan_id_8
        _end_vlan_id_8 = self.end_vlan_id_8
        _vlan_id_9 = self.vlan_id_9
        _end_vlan_id_9 = self.end_vlan_id_9
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('union', _vlan_id)
        if _end_vlan_id is not None:
            children['end-vlan-id'] = yang.gdata.Leaf('uint32', _end_vlan_id)
        if _vlan_id_2 is not None:
            children['vlan-id-2'] = yang.gdata.Leaf('uint32', _vlan_id_2)
        if _end_vlan_id_2 is not None:
            children['end-vlan-id-2'] = yang.gdata.Leaf('uint32', _end_vlan_id_2)
        if _vlan_id_3 is not None:
            children['vlan-id-3'] = yang.gdata.Leaf('uint32', _vlan_id_3)
        if _end_vlan_id_3 is not None:
            children['end-vlan-id-3'] = yang.gdata.Leaf('uint32', _end_vlan_id_3)
        if _vlan_id_4 is not None:
            children['vlan-id-4'] = yang.gdata.Leaf('uint32', _vlan_id_4)
        if _end_vlan_id_4 is not None:
            children['end-vlan-id-4'] = yang.gdata.Leaf('uint32', _end_vlan_id_4)
        if _vlan_id_5 is not None:
            children['vlan-id-5'] = yang.gdata.Leaf('uint32', _vlan_id_5)
        if _end_vlan_id_5 is not None:
            children['end-vlan-id-5'] = yang.gdata.Leaf('uint32', _end_vlan_id_5)
        if _vlan_id_6 is not None:
            children['vlan-id-6'] = yang.gdata.Leaf('uint32', _vlan_id_6)
        if _end_vlan_id_6 is not None:
            children['end-vlan-id-6'] = yang.gdata.Leaf('uint32', _end_vlan_id_6)
        if _vlan_id_7 is not None:
            children['vlan-id-7'] = yang.gdata.Leaf('uint32', _vlan_id_7)
        if _end_vlan_id_7 is not None:
            children['end-vlan-id-7'] = yang.gdata.Leaf('uint32', _end_vlan_id_7)
        if _vlan_id_8 is not None:
            children['vlan-id-8'] = yang.gdata.Leaf('uint32', _vlan_id_8)
        if _end_vlan_id_8 is not None:
            children['end-vlan-id-8'] = yang.gdata.Leaf('uint32', _end_vlan_id_8)
        if _vlan_id_9 is not None:
            children['vlan-id-9'] = yang.gdata.Leaf('uint32', _vlan_id_9)
        if _end_vlan_id_9 is not None:
            children['end-vlan-id-9'] = yang.gdata.Leaf('uint32', _end_vlan_id_9)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q(vlan_id=n.get_value("vlan-id"), end_vlan_id=n.get_opt_int("end-vlan-id"), vlan_id_2=n.get_opt_int("vlan-id-2"), end_vlan_id_2=n.get_opt_int("end-vlan-id-2"), vlan_id_3=n.get_opt_int("vlan-id-3"), end_vlan_id_3=n.get_opt_int("end-vlan-id-3"), vlan_id_4=n.get_opt_int("vlan-id-4"), end_vlan_id_4=n.get_opt_int("end-vlan-id-4"), vlan_id_5=n.get_opt_int("vlan-id-5"), end_vlan_id_5=n.get_opt_int("end-vlan-id-5"), vlan_id_6=n.get_opt_int("vlan-id-6"), end_vlan_id_6=n.get_opt_int("end-vlan-id-6"), vlan_id_7=n.get_opt_int("vlan-id-7"), end_vlan_id_7=n.get_opt_int("end-vlan-id-7"), vlan_id_8=n.get_opt_int("vlan-id-8"), end_vlan_id_8=n.get_opt_int("end-vlan-id-8"), vlan_id_9=n.get_opt_int("vlan-id-9"), end_vlan_id_9=n.get_opt_int("end-vlan-id-9"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q(vlan_id=yang.gdata.from_xml_value(n, "vlan-id"), end_vlan_id=yang.gdata.from_xml_opt_int(n, "end-vlan-id"), vlan_id_2=yang.gdata.from_xml_opt_int(n, "vlan-id-2"), end_vlan_id_2=yang.gdata.from_xml_opt_int(n, "end-vlan-id-2"), vlan_id_3=yang.gdata.from_xml_opt_int(n, "vlan-id-3"), end_vlan_id_3=yang.gdata.from_xml_opt_int(n, "end-vlan-id-3"), vlan_id_4=yang.gdata.from_xml_opt_int(n, "vlan-id-4"), end_vlan_id_4=yang.gdata.from_xml_opt_int(n, "end-vlan-id-4"), vlan_id_5=yang.gdata.from_xml_opt_int(n, "vlan-id-5"), end_vlan_id_5=yang.gdata.from_xml_opt_int(n, "end-vlan-id-5"), vlan_id_6=yang.gdata.from_xml_opt_int(n, "vlan-id-6"), end_vlan_id_6=yang.gdata.from_xml_opt_int(n, "end-vlan-id-6"), vlan_id_7=yang.gdata.from_xml_opt_int(n, "vlan-id-7"), end_vlan_id_7=yang.gdata.from_xml_opt_int(n, "end-vlan-id-7"), vlan_id_8=yang.gdata.from_xml_opt_int(n, "vlan-id-8"), end_vlan_id_8=yang.gdata.from_xml_opt_int(n, "end-vlan-id-8"), vlan_id_9=yang.gdata.from_xml_opt_int(n, "vlan-id-9"), end_vlan_id_9=yang.gdata.from_xml_opt_int(n, "end-vlan-id-9"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress(yang.adata.MNode):
    source_mac: ?str

    mut def __init__(self, source_mac: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.source_mac = source_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_mac = self.source_mac
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('string', _source_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress(source_mac=n.get_opt_str("source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress(source_mac=yang.gdata.from_xml_opt_str(n, "source-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q
    ingress: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q=None, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        if ingress is not None:
            self.ingress = ingress
        else:
            self.ingress = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress()
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self

    mut def create_dot1q(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q(vlan_id)
        self.dot1q = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _ingress = self.ingress
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q.from_gdata(n.get_opt_container("dot1q")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress.from_gdata(n.get_opt_container("ingress")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default()
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__vlan_ranges(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__outer_cos(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__second_dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__inner_cos(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe()
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress__destination_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress(yang.adata.MNode):
    source_mac: ?str
    destination_mac: ?str

    mut def __init__(self, source_mac: ?str, destination_mac: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.source_mac = source_mac
        self.destination_mac = destination_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_mac = self.source_mac
        _destination_mac = self.destination_mac
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('string', _source_mac)
        if _destination_mac is not None:
            children['destination-mac'] = yang.gdata.Leaf('string', _destination_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress(source_mac=n.get_opt_str("source-mac"), destination_mac=n.get_opt_str("destination-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress(source_mac=yang.gdata.from_xml_opt_str(n, "source-mac"), destination_mac=yang.gdata.from_xml_opt_str(n, "destination-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q(yang.adata.MNode):
    vlan_ranges: str
    outer_cos: ?int
    second_dot1q: ?str
    inner_cos: ?int
    exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact
    payload_ethertype_pppoe: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe
    ingress: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress

    mut def __init__(self, vlan_ranges: str, outer_cos: ?int, second_dot1q: ?str, inner_cos: ?int, exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact=None, payload_ethertype_pppoe: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe=None, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_ranges = vlan_ranges
        self.outer_cos = outer_cos
        self.second_dot1q = second_dot1q
        self.inner_cos = inner_cos
        self.exact = exact
        self_exact = self.exact
        if self_exact is not None:
            self_exact._parent = self
        self.payload_ethertype_pppoe = payload_ethertype_pppoe
        self_payload_ethertype_pppoe = self.payload_ethertype_pppoe
        if self_payload_ethertype_pppoe is not None:
            self_payload_ethertype_pppoe._parent = self
        if ingress is not None:
            self.ingress = ingress
        else:
            self.ingress = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress()
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self

    mut def create_exact(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact()
        self.exact = res
        return res

    mut def create_payload_ethertype_pppoe(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe()
        self.payload_ethertype_pppoe = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_ranges = self.vlan_ranges
        _outer_cos = self.outer_cos
        _second_dot1q = self.second_dot1q
        _inner_cos = self.inner_cos
        _exact = self.exact
        _payload_ethertype_pppoe = self.payload_ethertype_pppoe
        _ingress = self.ingress
        if _vlan_ranges is not None:
            children['vlan-ranges'] = yang.gdata.Leaf('string', _vlan_ranges)
        if _outer_cos is not None:
            children['outer-cos'] = yang.gdata.Leaf('uint32', _outer_cos)
        if _second_dot1q is not None:
            children['second-dot1q'] = yang.gdata.Leaf('string', _second_dot1q)
        if _inner_cos is not None:
            children['inner-cos'] = yang.gdata.Leaf('uint32', _inner_cos)
        if _exact is not None:
            children['exact'] = _exact.to_gdata()
        if _payload_ethertype_pppoe is not None:
            children['payload-ethertype-pppoe'] = _payload_ethertype_pppoe.to_gdata()
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q(vlan_ranges=n.get_str("vlan-ranges"), outer_cos=n.get_opt_int("outer-cos"), second_dot1q=n.get_opt_str("second-dot1q"), inner_cos=n.get_opt_int("inner-cos"), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact.from_gdata(n.get_opt_container("exact")), payload_ethertype_pppoe=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe.from_gdata(n.get_opt_container("payload-ethertype-pppoe")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress.from_gdata(n.get_opt_container("ingress")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q(vlan_ranges=yang.gdata.from_xml_str(n, "vlan-ranges"), outer_cos=yang.gdata.from_xml_opt_int(n, "outer-cos"), second_dot1q=yang.gdata.from_xml_opt_str(n, "second-dot1q"), inner_cos=yang.gdata.from_xml_opt_int(n, "inner-cos"), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__exact.from_xml(yang.gdata.get_xml_opt_child(n, "exact")), payload_ethertype_pppoe=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__payload_ethertype_pppoe.from_xml(yang.gdata.get_xml_opt_child(n, "payload-ethertype-pppoe")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__vlan_ranges(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__outer_cos(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__inner_cos(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe()
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress__destination_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress(yang.adata.MNode):
    source_mac: ?str
    destination_mac: ?str

    mut def __init__(self, source_mac: ?str, destination_mac: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.source_mac = source_mac
        self.destination_mac = destination_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_mac = self.source_mac
        _destination_mac = self.destination_mac
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('string', _source_mac)
        if _destination_mac is not None:
            children['destination-mac'] = yang.gdata.Leaf('string', _destination_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress(source_mac=n.get_opt_str("source-mac"), destination_mac=n.get_opt_str("destination-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress(source_mac=yang.gdata.from_xml_opt_str(n, "source-mac"), destination_mac=yang.gdata.from_xml_opt_str(n, "destination-mac"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad(yang.adata.MNode):
    vlan_ranges: str
    outer_cos: ?int
    dot1q: ?str
    inner_cos: ?int
    exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact
    payload_ethertype_pppoe: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe
    ingress: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress

    mut def __init__(self, vlan_ranges: str, outer_cos: ?int, dot1q: ?str, inner_cos: ?int, exact: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact=None, payload_ethertype_pppoe: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe=None, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_ranges = vlan_ranges
        self.outer_cos = outer_cos
        self.dot1q = dot1q
        self.inner_cos = inner_cos
        self.exact = exact
        self_exact = self.exact
        if self_exact is not None:
            self_exact._parent = self
        self.payload_ethertype_pppoe = payload_ethertype_pppoe
        self_payload_ethertype_pppoe = self.payload_ethertype_pppoe
        if self_payload_ethertype_pppoe is not None:
            self_payload_ethertype_pppoe._parent = self
        if ingress is not None:
            self.ingress = ingress
        else:
            self.ingress = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress()
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self

    mut def create_exact(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact()
        self.exact = res
        return res

    mut def create_payload_ethertype_pppoe(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe()
        self.payload_ethertype_pppoe = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_ranges = self.vlan_ranges
        _outer_cos = self.outer_cos
        _dot1q = self.dot1q
        _inner_cos = self.inner_cos
        _exact = self.exact
        _payload_ethertype_pppoe = self.payload_ethertype_pppoe
        _ingress = self.ingress
        if _vlan_ranges is not None:
            children['vlan-ranges'] = yang.gdata.Leaf('string', _vlan_ranges)
        if _outer_cos is not None:
            children['outer-cos'] = yang.gdata.Leaf('uint32', _outer_cos)
        if _dot1q is not None:
            children['dot1q'] = yang.gdata.Leaf('string', _dot1q)
        if _inner_cos is not None:
            children['inner-cos'] = yang.gdata.Leaf('uint32', _inner_cos)
        if _exact is not None:
            children['exact'] = _exact.to_gdata()
        if _payload_ethertype_pppoe is not None:
            children['payload-ethertype-pppoe'] = _payload_ethertype_pppoe.to_gdata()
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad(vlan_ranges=n.get_str("vlan-ranges"), outer_cos=n.get_opt_int("outer-cos"), dot1q=n.get_opt_str("dot1q"), inner_cos=n.get_opt_int("inner-cos"), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact.from_gdata(n.get_opt_container("exact")), payload_ethertype_pppoe=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe.from_gdata(n.get_opt_container("payload-ethertype-pppoe")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress.from_gdata(n.get_opt_container("ingress")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad(vlan_ranges=yang.gdata.from_xml_str(n, "vlan-ranges"), outer_cos=yang.gdata.from_xml_opt_int(n, "outer-cos"), dot1q=yang.gdata.from_xml_opt_str(n, "dot1q"), inner_cos=yang.gdata.from_xml_opt_int(n, "inner-cos"), exact=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__exact.from_xml(yang.gdata.get_xml_opt_child(n, "exact")), payload_ethertype_pppoe=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__payload_ethertype_pppoe.from_xml(yang.gdata.get_xml_opt_child(n, "payload-ethertype-pppoe")), ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q
    dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.dot1ad = dot1ad
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def create_dot1q(self, vlan_ranges):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q(vlan_ranges)
        self.dot1q = res
        return res

    mut def create_dot1ad(self, vlan_ranges):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad(vlan_ranges)
        self.dot1ad = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q
    dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad
    untagged: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged
    default: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default
    list_extended: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad=None, untagged: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged=None, default: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default=None, list_extended: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.dot1ad = dot1ad
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self
        self.untagged = untagged
        self_untagged = self.untagged
        if self_untagged is not None:
            self_untagged._parent = self
        self.default = default
        self_default = self.default
        if self_default is not None:
            self_default._parent = self
        if list_extended is not None:
            self.list_extended = list_extended
        else:
            self.list_extended = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended()
        self_list_extended = self.list_extended
        if self_list_extended is not None:
            self_list_extended._parent = self

    mut def create_dot1q(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q()
        self.dot1q = res
        return res

    mut def create_dot1ad(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad()
        self.dot1ad = res
        return res

    mut def create_untagged(self, dot1q):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged(dot1q)
        self.untagged = res
        return res

    mut def create_default(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default()
        self.default = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        _untagged = self.untagged
        _default = self.default
        _list_extended = self.list_extended
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        if _untagged is not None:
            children['untagged'] = _untagged.to_gdata()
        if _default is not None:
            children['default'] = _default.to_gdata()
        if _list_extended is not None:
            children['list-extended'] = _list_extended.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad.from_gdata(n.get_opt_container("dot1ad")), untagged=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged.from_gdata(n.get_opt_container("untagged")), default=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default.from_gdata(n.get_opt_container("default")), list_extended=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended.from_gdata(n.get_opt_container("list-extended")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")), untagged=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__untagged.from_xml(yang.gdata.get_xml_opt_child(n, "untagged")), default=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__default.from_xml(yang.gdata.get_xml_opt_child(n, "default")), list_extended=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation__list_extended.from_xml(yang.gdata.get_xml_opt_child(n, "list-extended")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q__second_dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q(yang.adata.MNode):
    vlan_id: int
    second_dot1q: ?int

    mut def __init__(self, vlan_id: int, second_dot1q: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.second_dot1q = second_dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _second_dot1q = self.second_dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _second_dot1q is not None:
            children['second-dot1q'] = yang.gdata.Leaf('uint32', _second_dot1q)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q(vlan_id=n.get_int("vlan-id"), second_dot1q=n.get_opt_int("second-dot1q"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"), second_dot1q=yang.gdata.from_xml_opt_int(n, "second-dot1q"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad__dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad(yang.adata.MNode):
    vlan_id: int
    dot1q: ?int

    mut def __init__(self, vlan_id: int, dot1q: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.dot1q = dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _dot1q = self.dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _dot1q is not None:
            children['dot1q'] = yang.gdata.Leaf('uint32', _dot1q)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad(vlan_id=n.get_int("vlan-id"), dot1q=n.get_opt_int("dot1q"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"), dot1q=yang.gdata.from_xml_opt_int(n, "dot1q"))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q
    dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.dot1ad = dot1ad
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def create_dot1q(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q(vlan_id)
        self.dot1q = res
        return res

    mut def create_dot1ad(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad(vlan_id)
        self.dot1ad = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop(yang.adata.MNode):
    one: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one
    two: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two

    mut def __init__(self, one: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one=None, two: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.one = one
        self_one = self.one
        if self_one is not None:
            self_one._parent = self
        self.two = two
        self_two = self.two
        if self_two is not None:
            self_two._parent = self

    mut def create_one(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one()
        self.one = res
        return res

    mut def create_two(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two()
        self.two = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _one = self.one
        _two = self.two
        if _one is not None:
            children['one'] = _one.to_gdata()
        if _two is not None:
            children['two'] = _two.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop(one=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one.from_gdata(n.get_opt_container("one")), two=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two.from_gdata(n.get_opt_container("two")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop(one=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__one.from_xml(yang.gdata.get_xml_opt_child(n, "one")), two=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop__two.from_xml(yang.gdata.get_xml_opt_child(n, "two")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q(yang.adata.MNode):
    vlan_id: int

    mut def __init__(self, vlan_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q(vlan_id=n.get_int("vlan-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad(yang.adata.MNode):
    vlan_id: int

    mut def __init__(self, vlan_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad(vlan_id=n.get_int("vlan-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q
    dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.dot1ad = dot1ad
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def create_dot1q(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q(vlan_id)
        self.dot1q = res
        return res

    mut def create_dot1ad(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad(vlan_id)
        self.dot1ad = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q__second_dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q(yang.adata.MNode):
    vlan_id: int
    second_dot1q: int

    mut def __init__(self, vlan_id: int, second_dot1q: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.second_dot1q = second_dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _second_dot1q = self.second_dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _second_dot1q is not None:
            children['second-dot1q'] = yang.gdata.Leaf('uint32', _second_dot1q)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q(vlan_id=n.get_int("vlan-id"), second_dot1q=n.get_int("second-dot1q"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"), second_dot1q=yang.gdata.from_xml_int(n, "second-dot1q"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad__dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad(yang.adata.MNode):
    vlan_id: int
    dot1q: int

    mut def __init__(self, vlan_id: int, dot1q: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.dot1q = dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _dot1q = self.dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _dot1q is not None:
            children['dot1q'] = yang.gdata.Leaf('uint32', _dot1q)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad(vlan_id=n.get_int("vlan-id"), dot1q=n.get_int("dot1q"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"), dot1q=yang.gdata.from_xml_int(n, "dot1q"))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q
    dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.dot1ad = dot1ad
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def create_dot1q(self, vlan_id, second_dot1q):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q(vlan_id, second_dot1q)
        self.dot1q = res
        return res

    mut def create_dot1ad(self, vlan_id, dot1q):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad(vlan_id, dot1q)
        self.dot1ad = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q(yang.adata.MNode):
    vlan_id: int

    mut def __init__(self, vlan_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q(vlan_id=n.get_int("vlan-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad(yang.adata.MNode):
    vlan_id: int

    mut def __init__(self, vlan_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad(vlan_id=n.get_int("vlan-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q
    dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.dot1ad = dot1ad
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def create_dot1q(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q(vlan_id)
        self.dot1q = res
        return res

    mut def create_dot1ad(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad(vlan_id)
        self.dot1ad = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q__second_dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q(yang.adata.MNode):
    vlan_id: int
    second_dot1q: int

    mut def __init__(self, vlan_id: int, second_dot1q: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.second_dot1q = second_dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _second_dot1q = self.second_dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _second_dot1q is not None:
            children['second-dot1q'] = yang.gdata.Leaf('uint32', _second_dot1q)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q(vlan_id=n.get_int("vlan-id"), second_dot1q=n.get_int("second-dot1q"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"), second_dot1q=yang.gdata.from_xml_int(n, "second-dot1q"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad__dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad(yang.adata.MNode):
    vlan_id: int
    dot1q: int

    mut def __init__(self, vlan_id: int, dot1q: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.dot1q = dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _dot1q = self.dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _dot1q is not None:
            children['dot1q'] = yang.gdata.Leaf('uint32', _dot1q)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad(vlan_id=n.get_int("vlan-id"), dot1q=n.get_int("dot1q"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"), dot1q=yang.gdata.from_xml_int(n, "dot1q"))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q
    dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.dot1ad = dot1ad
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def create_dot1q(self, vlan_id, second_dot1q):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q(vlan_id, second_dot1q)
        self.dot1q = res
        return res

    mut def create_dot1ad(self, vlan_id, dot1q):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad(vlan_id, dot1q)
        self.dot1ad = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate(yang.adata.MNode):
    one_to_one: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one
    one_to_two: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two
    two_to_one: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one
    two_to_two: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two

    mut def __init__(self, one_to_one: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one=None, one_to_two: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two=None, two_to_one: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one=None, two_to_two: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if one_to_one is not None:
            self.one_to_one = one_to_one
        else:
            self.one_to_one = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one()
        self_one_to_one = self.one_to_one
        if self_one_to_one is not None:
            self_one_to_one._parent = self
        if one_to_two is not None:
            self.one_to_two = one_to_two
        else:
            self.one_to_two = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two()
        self_one_to_two = self.one_to_two
        if self_one_to_two is not None:
            self_one_to_two._parent = self
        if two_to_one is not None:
            self.two_to_one = two_to_one
        else:
            self.two_to_one = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one()
        self_two_to_one = self.two_to_one
        if self_two_to_one is not None:
            self_two_to_one._parent = self
        if two_to_two is not None:
            self.two_to_two = two_to_two
        else:
            self.two_to_two = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two()
        self_two_to_two = self.two_to_two
        if self_two_to_two is not None:
            self_two_to_two._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _one_to_one = self.one_to_one
        _one_to_two = self.one_to_two
        _two_to_one = self.two_to_one
        _two_to_two = self.two_to_two
        if _one_to_one is not None:
            children['one-to-one'] = _one_to_one.to_gdata()
        if _one_to_two is not None:
            children['one-to-two'] = _one_to_two.to_gdata()
        if _two_to_one is not None:
            children['two-to-one'] = _two_to_one.to_gdata()
        if _two_to_two is not None:
            children['two-to-two'] = _two_to_two.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate(one_to_one=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one.from_gdata(n.get_opt_container("one-to-one")), one_to_two=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two.from_gdata(n.get_opt_container("one-to-two")), two_to_one=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one.from_gdata(n.get_opt_container("two-to-one")), two_to_two=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two.from_gdata(n.get_opt_container("two-to-two")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate(one_to_one=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_one.from_xml(yang.gdata.get_xml_opt_child(n, "one-to-one")), one_to_two=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__one_to_two.from_xml(yang.gdata.get_xml_opt_child(n, "one-to-two")), two_to_one=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_one.from_xml(yang.gdata.get_xml_opt_child(n, "two-to-one")), two_to_two=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate__two_to_two.from_xml(yang.gdata.get_xml_opt_child(n, "two-to-two")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag(yang.adata.MNode):
    push: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push
    pop: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop
    translate: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate

    mut def __init__(self, push: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push=None, pop: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop=None, translate: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if push is not None:
            self.push = push
        else:
            self.push = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push()
        self_push = self.push
        if self_push is not None:
            self_push._parent = self
        if pop is not None:
            self.pop = pop
        else:
            self.pop = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop()
        self_pop = self.pop
        if self_pop is not None:
            self_pop._parent = self
        if translate is not None:
            self.translate = translate
        else:
            self.translate = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate()
        self_translate = self.translate
        if self_translate is not None:
            self_translate._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _push = self.push
        _pop = self.pop
        _translate = self.translate
        if _push is not None:
            children['push'] = _push.to_gdata()
        if _pop is not None:
            children['pop'] = _pop.to_gdata()
        if _translate is not None:
            children['translate'] = _translate.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag(push=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push.from_gdata(n.get_opt_container("push")), pop=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop.from_gdata(n.get_opt_container("pop")), translate=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate.from_gdata(n.get_opt_container("translate")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag(push=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__push.from_xml(yang.gdata.get_xml_opt_child(n, "push")), pop=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__pop.from_xml(yang.gdata.get_xml_opt_child(n, "pop")), translate=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag__translate.from_xml(yang.gdata.get_xml_opt_child(n, "translate")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress(yang.adata.MNode):
    tag: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag

    mut def __init__(self, tag: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress(tag=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag.from_gdata(n.get_opt_container("tag")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress(tag=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite(yang.adata.MNode):
    ingress: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress

    mut def __init__(self, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if ingress is not None:
            self.ingress = ingress
        else:
            self.ingress = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress()
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress = self.ingress
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite(ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress.from_gdata(n.get_opt_container("ingress")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite(ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q__second_dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q(yang.adata.MNode):
    vlan_id: int
    second_dot1q: ?int

    mut def __init__(self, vlan_id: int, second_dot1q: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.second_dot1q = second_dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _second_dot1q = self.second_dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _second_dot1q is not None:
            children['second-dot1q'] = yang.gdata.Leaf('uint32', _second_dot1q)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q(vlan_id=n.get_int("vlan-id"), second_dot1q=n.get_opt_int("second-dot1q"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"), second_dot1q=yang.gdata.from_xml_opt_int(n, "second-dot1q"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad__dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad(yang.adata.MNode):
    vlan_id: int
    dot1q: ?int

    mut def __init__(self, vlan_id: int, dot1q: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_id = vlan_id
        self.dot1q = dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        _dot1q = self.dot1q
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        if _dot1q is not None:
            children['dot1q'] = yang.gdata.Leaf('uint32', _dot1q)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad(vlan_id=n.get_int("vlan-id"), dot1q=n.get_opt_int("dot1q"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad(vlan_id=yang.gdata.from_xml_int(n, "vlan-id"), dot1q=yang.gdata.from_xml_opt_int(n, "dot1q"))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation(yang.adata.MNode):
    dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q
    dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.dot1q = dot1q
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        self.dot1ad = dot1ad
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def create_dot1q(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q(vlan_id)
        self.dot1q = res
        return res

    mut def create_dot1ad(self, vlan_id):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad(vlan_id)
        self.dot1ad = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default(yang.adata.MNode):
    encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation

    mut def __init__(self, encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if encapsulation is not None:
            self.encapsulation = encapsulation
        else:
            self.encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation()
        self_encapsulation = self.encapsulation
        if self_encapsulation is not None:
            self_encapsulation._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            children['encapsulation'] = _encapsulation.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default(encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation.from_gdata(n.get_opt_container("encapsulation")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default(encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default__encapsulation.from_xml(yang.gdata.get_xml_opt_child(n, "encapsulation")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic(yang.adata.MNode):
    default: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default

    mut def __init__(self, default: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if default is not None:
            self.default = default
        else:
            self.default = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default()
        self_default = self.default
        if self_default is not None:
            self_default._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default = self.default
        if _default is not None:
            children['default'] = _default.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic(default=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default.from_gdata(n.get_opt_container("default")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic(default=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic__default.from_xml(yang.gdata.get_xml_opt_child(n, "default")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native__vlan(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native(yang.adata.MNode):
    vlan: ?int

    mut def __init__(self, vlan: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan = vlan

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan = self.vlan
        if _vlan is not None:
            children['vlan'] = yang.gdata.Leaf('uint32', _vlan)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native(vlan=n.get_opt_int("vlan"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native(vlan=yang.gdata.from_xml_opt_int(n, "vlan"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling__ethertype(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling(yang.adata.MNode):
    ethertype: ?str

    mut def __init__(self, ethertype: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.ethertype = ethertype

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ethertype = self.ethertype
        if _ethertype is not None:
            children['ethertype'] = yang.gdata.Leaf('enumeration', _ethertype)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling(ethertype=n.get_opt_str("ethertype"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling(ethertype=yang.gdata.from_xml_opt_str(n, "ethertype"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q(yang.adata.MNode):
    native: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native
    tunneling: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling

    mut def __init__(self, native: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native=None, tunneling: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if native is not None:
            self.native = native
        else:
            self.native = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native()
        self_native = self.native
        if self_native is not None:
            self_native._parent = self
        if tunneling is not None:
            self.tunneling = tunneling
        else:
            self.tunneling = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling()
        self_tunneling = self.tunneling
        if self_tunneling is not None:
            self_tunneling._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _native = self.native
        _tunneling = self.tunneling
        if _native is not None:
            children['native'] = _native.to_gdata()
        if _tunneling is not None:
            children['tunneling'] = _tunneling.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q(native=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native.from_gdata(n.get_opt_container("native")), tunneling=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling.from_gdata(n.get_opt_container("tunneling")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q(native=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__native.from_xml(yang.gdata.get_xml_opt_child(n, "native")), tunneling=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q__tunneling.from_xml(yang.gdata.get_xml_opt_child(n, "tunneling")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting(yang.adata.MNode):
    ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress
    egress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress

    mut def __init__(self, ingress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress=None, egress: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.ingress = ingress
        self_ingress = self.ingress
        if self_ingress is not None:
            self_ingress._parent = self
        self.egress = egress
        self_egress = self.egress
        if self_egress is not None:
            self_egress._parent = self

    mut def create_ingress(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress()
        self.ingress = res
        return res

    mut def create_egress(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress()
        self.egress = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress = self.ingress
        _egress = self.egress
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        if _egress is not None:
            children['egress'] = _egress.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting(ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress.from_gdata(n.get_opt_container("ingress")), egress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress.from_gdata(n.get_opt_container("egress")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting(ingress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__ingress.from_xml(yang.gdata.get_xml_opt_child(n, "ingress")), egress=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting__egress.from_xml(yang.gdata.get_xml_opt_child(n, "egress")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q__vlan_ranges(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q(yang.adata.MNode):
    vlan_ranges: ?str

    mut def __init__(self, vlan_ranges: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_ranges = vlan_ranges

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_ranges = self.vlan_ranges
        if _vlan_ranges is not None:
            children['vlan-ranges'] = yang.gdata.Leaf('string', _vlan_ranges)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q(vlan_ranges=n.get_opt_str("vlan-ranges"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q(vlan_ranges=yang.gdata.from_xml_opt_str(n, "vlan-ranges"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad__vlan_ranges(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad(yang.adata.MNode):
    vlan_ranges: ?str

    mut def __init__(self, vlan_ranges: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.vlan_ranges = vlan_ranges

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_ranges = self.vlan_ranges
        if _vlan_ranges is not None:
            children['vlan-ranges'] = yang.gdata.Leaf('string', _vlan_ranges)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad(vlan_ranges=n.get_opt_str("vlan-ranges"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad(vlan_ranges=yang.gdata.from_xml_opt_str(n, "vlan-ranges"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk(yang.adata.MNode):
    dot1q: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q
    dot1ad: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q=None, dot1ad: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if dot1q is not None:
            self.dot1q = dot1q
        else:
            self.dot1q = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q()
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        if dot1ad is not None:
            self.dot1ad = dot1ad
        else:
            self.dot1ad = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad()
        self_dot1ad = self.dot1ad
        if self_dot1ad is not None:
            self_dot1ad._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        _dot1ad = self.dot1ad
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _dot1ad is not None:
            children['dot1ad'] = _dot1ad.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q.from_gdata(n.get_opt_container("dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad.from_gdata(n.get_opt_container("dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q")), dot1ad=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk__dot1ad.from_xml(yang.gdata.get_xml_opt_child(n, "dot1ad")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__access(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched(yang.adata.MNode):
    trunk: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk
    access: ?int

    mut def __init__(self, trunk: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk=None, access: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if trunk is not None:
            self.trunk = trunk
        else:
            self.trunk = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk()
        self_trunk = self.trunk
        if self_trunk is not None:
            self_trunk._parent = self
        self.access = access

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _trunk = self.trunk
        _access = self.access
        if _trunk is not None:
            children['trunk'] = _trunk.to_gdata()
        if _access is not None:
            children['access'] = yang.gdata.Leaf('uint32', _access)
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched(trunk=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk.from_gdata(n.get_opt_container("trunk")), access=n.get_opt_int("access"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched(trunk=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched__trunk.from_xml(yang.gdata.get_xml_opt_child(n, "trunk")), access=yang.gdata.from_xml_opt_int(n, "access"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni(yang.adata.MNode):
    id: ?str

    mut def __init__(self, id: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni(id=n.get_opt_str("id"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni(id=yang.gdata.from_xml_opt_str(n, "id"))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet(yang.adata.MNode):
    uni: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni

    mut def __init__(self, uni: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if uni is not None:
            self.uni = uni
        else:
            self.uni = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni()
        self_uni = self.uni
        if self_uni is not None:
            self_uni._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _uni = self.uni
        if _uni is not None:
            children['uni'] = _uni.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet(uni=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni.from_gdata(n.get_opt_container("uni")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet(uni=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet__uni.from_xml(yang.gdata.get_xml_opt_child(n, "uni")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    sub_interface_type: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6
    um_interface_cfg_encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation
    shutdown: ?bool
    mtu: ?int
    description: ?str
    vrf: ?str
    carrier_delay: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay
    um_l2_ethernet_cfg_encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation
    l2transport_encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation
    rewrite: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite
    local_traffic: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic
    dot1q: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q
    mac_accounting: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting
    vlan_switched: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched
    ethernet: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet

    mut def __init__(self, interface_name: str, sub_interface_type: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type=None, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6=None, um_interface_cfg_encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation=None, shutdown: ?bool, mtu: ?int, description: ?str, vrf: ?str, carrier_delay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay=None, um_l2_ethernet_cfg_encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation=None, l2transport_encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation=None, rewrite: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite=None, local_traffic: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic=None, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q=None, mac_accounting: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting=None, vlan_switched: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched=None, ethernet: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface_name = interface_name
        if sub_interface_type is not None:
            self.sub_interface_type = sub_interface_type
        else:
            self.sub_interface_type = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()
        self_sub_interface_type = self.sub_interface_type
        if self_sub_interface_type is not None:
            self_sub_interface_type._parent = self
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        if um_interface_cfg_encapsulation is not None:
            self.um_interface_cfg_encapsulation = um_interface_cfg_encapsulation
        else:
            self.um_interface_cfg_encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()
        self_um_interface_cfg_encapsulation = self.um_interface_cfg_encapsulation
        if self_um_interface_cfg_encapsulation is not None:
            self_um_interface_cfg_encapsulation._parent = self
        self.shutdown = shutdown
        self.mtu = mtu
        self.description = description
        self.vrf = vrf
        if carrier_delay is not None:
            self.carrier_delay = carrier_delay
        else:
            self.carrier_delay = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay()
        self_carrier_delay = self.carrier_delay
        if self_carrier_delay is not None:
            self_carrier_delay._parent = self
        if um_l2_ethernet_cfg_encapsulation is not None:
            self.um_l2_ethernet_cfg_encapsulation = um_l2_ethernet_cfg_encapsulation
        else:
            self.um_l2_ethernet_cfg_encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()
        self_um_l2_ethernet_cfg_encapsulation = self.um_l2_ethernet_cfg_encapsulation
        if self_um_l2_ethernet_cfg_encapsulation is not None:
            self_um_l2_ethernet_cfg_encapsulation._parent = self
        if l2transport_encapsulation is not None:
            self.l2transport_encapsulation = l2transport_encapsulation
        else:
            self.l2transport_encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation()
        self_l2transport_encapsulation = self.l2transport_encapsulation
        if self_l2transport_encapsulation is not None:
            self_l2transport_encapsulation._parent = self
        if rewrite is not None:
            self.rewrite = rewrite
        else:
            self.rewrite = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite()
        self_rewrite = self.rewrite
        if self_rewrite is not None:
            self_rewrite._parent = self
        if local_traffic is not None:
            self.local_traffic = local_traffic
        else:
            self.local_traffic = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic()
        self_local_traffic = self.local_traffic
        if self_local_traffic is not None:
            self_local_traffic._parent = self
        if dot1q is not None:
            self.dot1q = dot1q
        else:
            self.dot1q = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q()
        self_dot1q = self.dot1q
        if self_dot1q is not None:
            self_dot1q._parent = self
        if mac_accounting is not None:
            self.mac_accounting = mac_accounting
        else:
            self.mac_accounting = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting()
        self_mac_accounting = self.mac_accounting
        if self_mac_accounting is not None:
            self_mac_accounting._parent = self
        if vlan_switched is not None:
            self.vlan_switched = vlan_switched
        else:
            self.vlan_switched = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched()
        self_vlan_switched = self.vlan_switched
        if self_vlan_switched is not None:
            self_vlan_switched._parent = self
        if ethernet is not None:
            self.ethernet = ethernet
        else:
            self.ethernet = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet()
        self_ethernet = self.ethernet
        if self_ethernet is not None:
            self_ethernet._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _sub_interface_type = self.sub_interface_type
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _um_interface_cfg_encapsulation = self.um_interface_cfg_encapsulation
        _shutdown = self.shutdown
        _mtu = self.mtu
        _description = self.description
        _vrf = self.vrf
        _carrier_delay = self.carrier_delay
        _um_l2_ethernet_cfg_encapsulation = self.um_l2_ethernet_cfg_encapsulation
        _l2transport_encapsulation = self.l2transport_encapsulation
        _rewrite = self.rewrite
        _local_traffic = self.local_traffic
        _dot1q = self.dot1q
        _mac_accounting = self.mac_accounting
        _vlan_switched = self.vlan_switched
        _ethernet = self.ethernet
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _sub_interface_type is not None:
            children['sub-interface-type'] = _sub_interface_type.to_gdata()
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        if _um_interface_cfg_encapsulation is not None:
            children['um-interface-cfg:encapsulation'] = _um_interface_cfg_encapsulation.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = yang.gdata.Leaf('empty', _shutdown)
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('uint32', _mtu)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        if _carrier_delay is not None:
            children['carrier-delay'] = _carrier_delay.to_gdata()
        if _um_l2_ethernet_cfg_encapsulation is not None:
            children['um-l2-ethernet-cfg:encapsulation'] = _um_l2_ethernet_cfg_encapsulation.to_gdata()
        if _l2transport_encapsulation is not None:
            children['l2transport-encapsulation'] = _l2transport_encapsulation.to_gdata()
        if _rewrite is not None:
            children['rewrite'] = _rewrite.to_gdata()
        if _local_traffic is not None:
            children['local-traffic'] = _local_traffic.to_gdata()
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        if _mac_accounting is not None:
            children['mac-accounting'] = _mac_accounting.to_gdata()
        if _vlan_switched is not None:
            children['vlan-switched'] = _vlan_switched.to_gdata()
        if _ethernet is not None:
            children['ethernet'] = _ethernet.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_gdata(n.get_opt_container("sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_gdata(n.get_opt_container("ipv6")), um_interface_cfg_encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_gdata(n.get_opt_container("um-interface-cfg:encapsulation")), shutdown=n.get_opt_bool("shutdown"), mtu=n.get_opt_int("mtu"), description=n.get_opt_str("description"), vrf=n.get_opt_str("vrf"), carrier_delay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay.from_gdata(n.get_opt_container("carrier-delay")), um_l2_ethernet_cfg_encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_gdata(n.get_opt_container("um-l2-ethernet-cfg:encapsulation")), l2transport_encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation.from_gdata(n.get_opt_container("l2transport-encapsulation")), rewrite=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite.from_gdata(n.get_opt_container("rewrite")), local_traffic=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic.from_gdata(n.get_opt_container("local-traffic")), dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q.from_gdata(n.get_opt_container("dot1q")), mac_accounting=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting.from_gdata(n.get_opt_container("mac-accounting")), vlan_switched=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched.from_gdata(n.get_opt_container("vlan-switched")), ethernet=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet.from_gdata(n.get_opt_container("ethernet")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_xml(yang.gdata.get_xml_opt_child(n, "sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")), um_interface_cfg_encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_xml(yang.gdata.get_xml_opt_child(n, "encapsulation")), shutdown=yang.gdata.from_xml_opt_bool(n, "shutdown"), mtu=yang.gdata.from_xml_opt_int(n, "mtu"), description=yang.gdata.from_xml_opt_str(n, "description"), vrf=yang.gdata.from_xml_opt_str(n, "vrf", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"), carrier_delay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__carrier_delay.from_xml(yang.gdata.get_xml_opt_child(n, "carrier-delay", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), um_l2_ethernet_cfg_encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_xml(yang.gdata.get_xml_opt_child(n, "encapsulation", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), l2transport_encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__l2transport_encapsulation.from_xml(yang.gdata.get_xml_opt_child(n, "l2transport-encapsulation", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), rewrite=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__rewrite.from_xml(yang.gdata.get_xml_opt_child(n, "rewrite", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), local_traffic=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__local_traffic.from_xml(yang.gdata.get_xml_opt_child(n, "local-traffic", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dot1q.from_xml(yang.gdata.get_xml_opt_child(n, "dot1q", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), mac_accounting=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mac_accounting.from_xml(yang.gdata.get_xml_opt_child(n, "mac-accounting", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), vlan_switched=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vlan_switched.from_xml(yang.gdata.get_xml_opt_child(n, "vlan-switched", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), ethernet=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ethernet.from_xml(yang.gdata.get_xml_opt_child(n, "ethernet", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_interface_cfg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_interface_cfg__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface = Cisco_IOS_XR_um_interface_cfg__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()



class Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict()
        return None



class Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter(yang.adata.MNode):
    strict: ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict

    mut def __init__(self, strict: ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        self.strict = strict
        self_strict = self.strict
        if self_strict is not None:
            self_strict._parent = self

    mut def create_strict(self):
        res = Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict()
        self.strict = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _strict = self.strict
        if _strict is not None:
            children['strict'] = _strict.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter(strict=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict.from_gdata(n.get_opt_container("strict")))
        return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter(strict=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict.from_xml(yang.gdata.get_xml_opt_child(n, "strict")))
        return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter()



class Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet(yang.adata.MNode):
    egress_filter: Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter

    mut def __init__(self, egress_filter: ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg"
        if egress_filter is not None:
            self.egress_filter = egress_filter
        else:
            self.egress_filter = Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter()
        self_egress_filter = self.egress_filter
        if self_egress_filter is not None:
            self_egress_filter._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _egress_filter = self.egress_filter
        if _egress_filter is not None:
            children['egress-filter'] = _egress_filter.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet(egress_filter=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter.from_gdata(n.get_opt_container("egress-filter")))
        return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet(egress_filter=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter.from_xml(yang.gdata.get_xml_opt_child(n, "egress-filter")))
        return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet()



mut def from_json_Cisco_IOS_XR_um_hostname_cfg__hostname__system_network_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_hostname_cfg__hostname(yang.adata.MNode):
    system_network_name: ?str

    mut def __init__(self, system_network_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg"
        self.system_network_name = system_network_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _system_network_name = self.system_network_name
        if _system_network_name is not None:
            children['system-network-name'] = yang.gdata.Leaf('string', _system_network_name)
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=n.get_opt_str("system-network-name"))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=yang.gdata.from_xml_opt_str(n, "system-network-name"))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()



class root(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_vrf_cfg__address_family
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrfs
    selective_vrf_download: Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download
    srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg
    vrf_groups: Cisco_IOS_XR_um_vrf_cfg__vrf_groups
    um_router_isis_cfg_router: Cisco_IOS_XR_um_router_isis_cfg__router
    as_format: Cisco_IOS_XR_um_router_bgp_cfg__as_format
    bmp: Cisco_IOS_XR_um_router_bgp_cfg__bmp
    um_router_bgp_cfg_router: Cisco_IOS_XR_um_router_bgp_cfg__router
    interfaces: Cisco_IOS_XR_um_interface_cfg__interfaces
    ethernet: Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet
    hostname: Cisco_IOS_XR_um_hostname_cfg__hostname

    mut def __init__(self, address_family: ?Cisco_IOS_XR_um_vrf_cfg__address_family=None, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrfs=None, selective_vrf_download: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download=None, srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg=None, vrf_groups: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups=None, um_router_isis_cfg_router: ?Cisco_IOS_XR_um_router_isis_cfg__router=None, as_format: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format=None, bmp: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp=None, um_router_bgp_cfg_router: ?Cisco_IOS_XR_um_router_bgp_cfg__router=None, interfaces: ?Cisco_IOS_XR_um_interface_cfg__interfaces=None, ethernet: ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet=None, hostname: ?Cisco_IOS_XR_um_hostname_cfg__hostname=None):
        self._ns = ""
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_vrf_cfg__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_vrf_cfg__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self
        if selective_vrf_download is not None:
            self.selective_vrf_download = selective_vrf_download
        else:
            self.selective_vrf_download = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()
        self_selective_vrf_download = self.selective_vrf_download
        if self_selective_vrf_download is not None:
            self_selective_vrf_download._parent = self
        self.srlg = srlg
        self_srlg = self.srlg
        if self_srlg is not None:
            self_srlg._parent = self
        if vrf_groups is not None:
            self.vrf_groups = vrf_groups
        else:
            self.vrf_groups = Cisco_IOS_XR_um_vrf_cfg__vrf_groups()
        self_vrf_groups = self.vrf_groups
        if self_vrf_groups is not None:
            self_vrf_groups._parent = self
        if um_router_isis_cfg_router is not None:
            self.um_router_isis_cfg_router = um_router_isis_cfg_router
        else:
            self.um_router_isis_cfg_router = Cisco_IOS_XR_um_router_isis_cfg__router()
        self_um_router_isis_cfg_router = self.um_router_isis_cfg_router
        if self_um_router_isis_cfg_router is not None:
            self_um_router_isis_cfg_router._parent = self
        if as_format is not None:
            self.as_format = as_format
        else:
            self.as_format = Cisco_IOS_XR_um_router_bgp_cfg__as_format()
        self_as_format = self.as_format
        if self_as_format is not None:
            self_as_format._parent = self
        if bmp is not None:
            self.bmp = bmp
        else:
            self.bmp = Cisco_IOS_XR_um_router_bgp_cfg__bmp()
        self_bmp = self.bmp
        if self_bmp is not None:
            self_bmp._parent = self
        if um_router_bgp_cfg_router is not None:
            self.um_router_bgp_cfg_router = um_router_bgp_cfg_router
        else:
            self.um_router_bgp_cfg_router = Cisco_IOS_XR_um_router_bgp_cfg__router()
        self_um_router_bgp_cfg_router = self.um_router_bgp_cfg_router
        if self_um_router_bgp_cfg_router is not None:
            self_um_router_bgp_cfg_router._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_interface_cfg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if ethernet is not None:
            self.ethernet = ethernet
        else:
            self.ethernet = Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet()
        self_ethernet = self.ethernet
        if self_ethernet is not None:
            self_ethernet._parent = self
        if hostname is not None:
            self.hostname = hostname
        else:
            self.hostname = Cisco_IOS_XR_um_hostname_cfg__hostname()
        self_hostname = self.hostname
        if self_hostname is not None:
            self_hostname._parent = self

    mut def create_srlg(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg()
        self.srlg = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        _vrfs = self.vrfs
        _selective_vrf_download = self.selective_vrf_download
        _srlg = self.srlg
        _vrf_groups = self.vrf_groups
        _um_router_isis_cfg_router = self.um_router_isis_cfg_router
        _as_format = self.as_format
        _bmp = self.bmp
        _um_router_bgp_cfg_router = self.um_router_bgp_cfg_router
        _interfaces = self.interfaces
        _ethernet = self.ethernet
        _hostname = self.hostname
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        if _selective_vrf_download is not None:
            children['selective-vrf-download'] = _selective_vrf_download.to_gdata()
        if _srlg is not None:
            children['srlg'] = _srlg.to_gdata()
        if _vrf_groups is not None:
            children['vrf-groups'] = _vrf_groups.to_gdata()
        if _um_router_isis_cfg_router is not None:
            children['um-router-isis-cfg:router'] = _um_router_isis_cfg_router.to_gdata()
        if _as_format is not None:
            children['as-format'] = _as_format.to_gdata()
        if _bmp is not None:
            children['bmp'] = _bmp.to_gdata()
        if _um_router_bgp_cfg_router is not None:
            children['um-router-bgp-cfg:router'] = _um_router_bgp_cfg_router.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _ethernet is not None:
            children['ethernet'] = _ethernet.to_gdata()
        if _hostname is not None:
            children['hostname'] = _hostname.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_gdata(n.get_opt_container("address-family")), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_gdata(n.get_opt_container("vrfs")), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_gdata(n.get_opt_container("selective-vrf-download")), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_gdata(n.get_opt_container("srlg")), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_gdata(n.get_opt_container("vrf-groups")), um_router_isis_cfg_router=Cisco_IOS_XR_um_router_isis_cfg__router.from_gdata(n.get_opt_container("um-router-isis-cfg:router")), as_format=Cisco_IOS_XR_um_router_bgp_cfg__as_format.from_gdata(n.get_opt_container("as-format")), bmp=Cisco_IOS_XR_um_router_bgp_cfg__bmp.from_gdata(n.get_opt_container("bmp")), um_router_bgp_cfg_router=Cisco_IOS_XR_um_router_bgp_cfg__router.from_gdata(n.get_opt_container("um-router-bgp-cfg:router")), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_gdata(n.get_opt_container("interfaces")), ethernet=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet.from_gdata(n.get_opt_container("ethernet")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_gdata(n.get_opt_container("hostname")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_xml(yang.gdata.get_xml_opt_child(n, "selective-vrf-download", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_xml(yang.gdata.get_xml_opt_child(n, "srlg", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-groups", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), um_router_isis_cfg_router=Cisco_IOS_XR_um_router_isis_cfg__router.from_xml(yang.gdata.get_xml_opt_child(n, "router", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg")), as_format=Cisco_IOS_XR_um_router_bgp_cfg__as_format.from_xml(yang.gdata.get_xml_opt_child(n, "as-format", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), bmp=Cisco_IOS_XR_um_router_bgp_cfg__bmp.from_xml(yang.gdata.get_xml_opt_child(n, "bmp", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), um_router_bgp_cfg_router=Cisco_IOS_XR_um_router_bgp_cfg__router.from_xml(yang.gdata.get_xml_opt_child(n, "router", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg")), ethernet=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet.from_xml(yang.gdata.get_xml_opt_child(n, "ethernet", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_xml(yang.gdata.get_xml_opt_child(n, "hostname", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg")))
        return root()


