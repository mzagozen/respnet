import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    mut def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology_name = topology_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology_name = self.topology_name
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.topology_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    mut def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology

    mut def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology = self.topology
        if _topology is not None:
            children['topology'] = _topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_gdata(n.get_opt_list("topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies

    mut def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topologies = self.topologies
        if _topologies is not None:
            children['topologies'] = _topologies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    mut def __init__(self, topology_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology_name = topology_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology_name = self.topology_name
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.topology_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=n.get_str("topology-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=yang.gdata.from_xml_str(n, "topology-name"))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'topology'
        self.elements = elements

    mut def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology

    mut def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(elements=topology)
        self.topology._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology = self.topology
        if _topology is not None:
            children['topology'] = _topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_gdata(n.get_opt_list("topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_xml(yang.gdata.get_xml_children(n, "topology")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies

    mut def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if topologies is not None:
            self.topologies = topologies
        else:
            self.topologies = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()
        self_topologies = self.topologies
        if self_topologies is not None:
            self_topologies._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topologies = self.topologies
        if _topologies is not None:
            children['topologies'] = _topologies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_gdata(n.get_opt_container("topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_xml(yang.gdata.get_xml_opt_child(n, "topologies")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()



class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()



class Cisco_IOS_XR_um_vrf_cfg__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        self.multicast = multicast
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        self.flowspec = flowspec
        self_flowspec = self.flowspec
        if self_flowspec is not None:
            self_flowspec._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()
        self.unicast = res
        return res

    mut def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        self.multicast = res
        return res

    mut def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        self.flowspec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        _flowspec = self.flowspec
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        if _flowspec is not None:
            children['flowspec'] = _flowspec.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_gdata(n.get_opt_container("multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_gdata(n.get_opt_container("flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_xml(yang.gdata.get_xml_opt_child(n, "flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        _stitching = self.stitching
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int("as-number"), index=n.get_int("index"), stitching=n.get_bool("stitching"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"), stitching=yang.gdata.from_xml_bool(n, "stitching"))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)
        self.two_byte_as_rt._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list("two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_xml(yang.gdata.get_xml_children(n, "two-byte-as-rt")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if two_byte_as_rts is not None:
            self.two_byte_as_rts = two_byte_as_rts
        else:
            self.two_byte_as_rts = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()
        self_two_byte_as_rts = self.two_byte_as_rts
        if self_two_byte_as_rts is not None:
            self_two_byte_as_rts._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container("two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as-rts")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target.from_gdata(n.get_opt_container("route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()
        self_import_ = self.import_
        if self_import_ is not None:
            self_import_._parent = self
        if export is not None:
            self.export = export
        else:
            self.export = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()
        self_export = self.export
        if self_export is not None:
            self_export._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        _export = self.export
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import.from_gdata(n.get_opt_container("import")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export.from_gdata(n.get_opt_container("export")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import.from_xml(yang.gdata.get_xml_opt_child(n, "import", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export.from_xml(yang.gdata.get_xml_opt_child(n, "export", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.unicast = unicast
        self_unicast = self.unicast
        if self_unicast is not None:
            self_unicast._parent = self
        self.multicast = multicast
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        self.flowspec = flowspec
        self_flowspec = self.flowspec
        if self_flowspec is not None:
            self_flowspec._parent = self

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()
        self.unicast = res
        return res

    mut def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        self.multicast = res
        return res

    mut def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        self.flowspec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        _multicast = self.multicast
        _flowspec = self.flowspec
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        if _flowspec is not None:
            children['flowspec'] = _flowspec.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_gdata(n.get_opt_container("unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_gdata(n.get_opt_container("multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_gdata(n.get_opt_container("flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_xml(yang.gdata.get_xml_opt_child(n, "flowspec")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(yang.adata.MNode):
    big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big

    mut def __init__(self, big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.big = big
        self_big = self.big
        if self_big is not None:
            self_big._parent = self

    mut def create_big(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        self.big = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _big = self.big
        if _big is not None:
            children['big'] = _big.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_gdata(n.get_opt_container("big")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_xml(yang.gdata.get_xml_opt_child(n, "big")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(yang.adata.MNode):
    id: ?str

    mut def __init__(self, id: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=n.get_opt_str("id"))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=yang.gdata.from_xml_opt_str(n, "id"))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__fallback_vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(yang.adata.MNode):
    as_number: str
    index: int

    mut def __init__(self, as_number: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number=n.get_str("as-number"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number=yang.gdata.from_xml_str(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(yang.adata.MNode):
    as_number: str
    index: int

    mut def __init__(self, as_number: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _index = self.index
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number=n.get_str("as-number"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number=yang.gdata.from_xml_str(n, "as-number"), index=yang.gdata.from_xml_int(n, "index"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(yang.adata.MNode):
    ipv4_address: str
    index: int

    mut def __init__(self, ipv4_address: str, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.ipv4_address = ipv4_address
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_address = self.ipv4_address
        _index = self.index
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address=n.get_str("ipv4-address"), index=n.get_int("index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address=yang.gdata.from_xml_str(n, "ipv4-address"), index=yang.gdata.from_xml_int(n, "index"))
        return None



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(yang.adata.MNode):
    two_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as
    four_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as
    ip_address: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address

    mut def __init__(self, two_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as=None, four_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as=None, ip_address: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.two_byte_as = two_byte_as
        self_two_byte_as = self.two_byte_as
        if self_two_byte_as is not None:
            self_two_byte_as._parent = self
        self.four_byte_as = four_byte_as
        self_four_byte_as = self.four_byte_as
        if self_four_byte_as is not None:
            self_four_byte_as._parent = self
        self.ip_address = ip_address
        self_ip_address = self.ip_address
        if self_ip_address is not None:
            self_ip_address._parent = self

    mut def create_two_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number, index)
        self.two_byte_as = res
        return res

    mut def create_four_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number, index)
        self.four_byte_as = res
        return res

    mut def create_ip_address(self, ipv4_address, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address, index)
        self.ip_address = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as = self.two_byte_as
        _four_byte_as = self.four_byte_as
        _ip_address = self.ip_address
        if _two_byte_as is not None:
            children['two-byte-as'] = _two_byte_as.to_gdata()
        if _four_byte_as is not None:
            children['four-byte-as'] = _four_byte_as.to_gdata()
        if _ip_address is not None:
            children['ip-address'] = _ip_address.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(two_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as.from_gdata(n.get_opt_container("two-byte-as")), four_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as.from_gdata(n.get_opt_container("four-byte-as")), ip_address=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address.from_gdata(n.get_opt_container("ip-address")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(two_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "two-byte-as")), four_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as.from_xml(yang.gdata.get_xml_opt_child(n, "four-byte-as")), ip_address=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address.from_xml(yang.gdata.get_xml_opt_child(n, "ip-address")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()



class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_family: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family
    mode: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode
    vpn: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn
    description: ?str
    remote_route_filtering: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering
    fallback_vrf: ?str
    rd: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd

    mut def __init__(self, vrf_name: str, address_family: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family=None, mode: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode=None, vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn=None, description: ?str, remote_route_filtering: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering=None, fallback_vrf: ?str, rd: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_name = vrf_name
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self
        if mode is not None:
            self.mode = mode
        else:
            self.mode = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()
        self_mode = self.mode
        if self_mode is not None:
            self_mode._parent = self
        if vpn is not None:
            self.vpn = vpn
        else:
            self.vpn = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()
        self_vpn = self.vpn
        if self_vpn is not None:
            self_vpn._parent = self
        self.description = description
        if remote_route_filtering is not None:
            self.remote_route_filtering = remote_route_filtering
        else:
            self.remote_route_filtering = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()
        self_remote_route_filtering = self.remote_route_filtering
        if self_remote_route_filtering is not None:
            self_remote_route_filtering._parent = self
        self.fallback_vrf = fallback_vrf
        if rd is not None:
            self.rd = rd
        else:
            self.rd = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()
        self_rd = self.rd
        if self_rd is not None:
            self_rd._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        _address_family = self.address_family
        _mode = self.mode
        _vpn = self.vpn
        _description = self.description
        _remote_route_filtering = self.remote_route_filtering
        _fallback_vrf = self.fallback_vrf
        _rd = self.rd
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        if _mode is not None:
            children['mode'] = _mode.to_gdata()
        if _vpn is not None:
            children['vpn'] = _vpn.to_gdata()
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _remote_route_filtering is not None:
            children['remote-route-filtering'] = _remote_route_filtering.to_gdata()
        if _fallback_vrf is not None:
            children['fallback-vrf'] = yang.gdata.Leaf('string', _fallback_vrf)
        if _rd is not None:
            children['rd'] = _rd.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_gdata(n.get_opt_container("address-family")), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_gdata(n.get_opt_container("mode")), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_gdata(n.get_opt_container("vpn")), description=n.get_opt_str("description"), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_gdata(n.get_opt_container("remote-route-filtering")), fallback_vrf=n.get_opt_str("fallback-vrf"), rd=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd.from_gdata(n.get_opt_container("rd")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family")), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_xml(yang.gdata.get_xml_opt_child(n, "mode")), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_xml(yang.gdata.get_xml_opt_child(n, "vpn")), description=yang.gdata.from_xml_opt_str(n, "description"), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_xml(yang.gdata.get_xml_opt_child(n, "remote-route-filtering")), fallback_vrf=yang.gdata.from_xml_opt_str(n, "fallback-vrf"), rd=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd.from_xml(yang.gdata.get_xml_opt_child(n, "rd", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()



class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return None



class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__srlg_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(yang.adata.MNode):
    srlg_name: str
    value: ?int
    description: ?str

    mut def __init__(self, srlg_name: str, value: ?int, description: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.srlg_name = srlg_name
        self.value = value
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg_name = self.srlg_name
        _value = self.value
        _description = self.description
        if _srlg_name is not None:
            children['srlg-name'] = yang.gdata.Leaf('string', _srlg_name)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.srlg_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=n.get_str("srlg-name"), value=n.get_opt_int("value"), description=n.get_opt_str("description"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=yang.gdata.from_xml_str(n, "srlg-name"), value=yang.gdata.from_xml_opt_int(n, "value"), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'name'
        self.elements = elements

    mut def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['srlg-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__names__name

    mut def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(elements=name)
        self.name._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_gdata(n.get_opt_list("name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_xml(yang.gdata.get_xml_children(n, "name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(yang.adata.MNode):
    priority: ?str

    mut def __init__(self, priority: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=n.get_opt_str("priority"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=yang.gdata.from_xml_opt_str(n, "priority"))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name__srlg_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(yang.adata.MNode):
    srlg_name: str

    mut def __init__(self, srlg_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.srlg_name = srlg_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg_name = self.srlg_name
        if _srlg_name is not None:
            children['srlg-name'] = yang.gdata.Leaf('string', _srlg_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.srlg_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=n.get_str("srlg-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=yang.gdata.from_xml_str(n, "srlg-name"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'name'
        self.elements = elements

    mut def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['srlg-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name

    mut def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(elements=name)
        self.name._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_gdata(n.get_opt_list("name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_xml(yang.gdata.get_xml_children(n, "name")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(yang.adata.MNode):
    index_number: int
    group_name: str

    mut def __init__(self, index_number: int, group_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.group_name = group_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _group_name = self.group_name
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=n.get_int("index-number"), group_name=n.get_str("group-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), group_name=yang.gdata.from_xml_str(n, "group-name"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'group'
        self.elements = elements

    mut def create(self, index_number, group_name):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number, group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group

    mut def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_gdata(n.get_opt_list("group")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return None



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names
    groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups

    mut def __init__(self, interface_name: str, include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical=None, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes=None, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.interface_name = interface_name
        self.include_optical = include_optical
        self_include_optical = self.include_optical
        if self_include_optical is not None:
            self_include_optical._parent = self
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self
        if names is not None:
            self.names = names
        else:
            self.names = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()
        self_names = self.names
        if self_names is not None:
            self_names._parent = self
        self.groups = groups
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self

    mut def create_include_optical(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical()
        self.include_optical = res
        return res

    mut def create_groups(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups()
        self.groups = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _include_optical = self.include_optical
        _indexes = self.indexes
        _names = self.names
        _groups = self.groups
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _include_optical is not None:
            children['include-optical'] = _include_optical.to_gdata()
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        if _names is not None:
            children['names'] = _names.to_gdata()
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_gdata(n.get_opt_container("include-optical")), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_gdata(n.get_opt_container("indexes")), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_gdata(n.get_opt_container("names")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_gdata(n.get_opt_container("groups")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_xml(yang.gdata.get_xml_opt_child(n, "include-optical")), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_xml(yang.gdata.get_xml_opt_child(n, "names")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.interface = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(yang.adata.MNode):
    group_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes

    mut def __init__(self, group_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group_name = group_name
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        _indexes = self.indexes
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=n.get_str("group-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_gdata(n.get_opt_container("indexes")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group

    mut def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_gdata(n.get_opt_list("group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__location_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: int
    priority: str

    mut def __init__(self, index_number: int, value: int, priority: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        _value = self.value
        _priority = self.priority
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=n.get_int("index-number"), value=n.get_int("value"), priority=n.get_str("priority"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=yang.gdata.from_xml_int(n, "index-number"), value=yang.gdata.from_xml_int(n, "value"), priority=yang.gdata.from_xml_str(n, "priority"))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(yang.adata.MNode):
    location_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes

    mut def __init__(self, location_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.location_name = location_name
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _location_name = self.location_name
        _indexes = self.indexes
        if _location_name is not None:
            children['location-name'] = yang.gdata.Leaf('string', _location_name)
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.location_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=n.get_str("location-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_gdata(n.get_opt_container("indexes")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=yang.gdata.from_xml_str(n, "location-name"), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'inherit-location'
        self.elements = elements

    mut def create(self, location_name):
        for e in self.elements:
            match = True
            if e.location_name != location_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['location-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(yang.adata.MNode):
    inherit_location: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location

    mut def __init__(self, inherit_location: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.inherit_location = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(elements=inherit_location)
        self.inherit_location._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inherit_location = self.inherit_location
        if _inherit_location is not None:
            children['inherit-location'] = _inherit_location.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_gdata(n.get_opt_list("inherit-location")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_xml(yang.gdata.get_xml_children(n, "inherit-location")))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()



class Cisco_IOS_XR_um_vrf_cfg__srlg(yang.adata.MNode):
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__names
    interfaces: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces
    groups: Cisco_IOS_XR_um_vrf_cfg__srlg__groups
    inherit_locations: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations

    mut def __init__(self, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__names=None, interfaces: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups=None, inherit_locations: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        if names is not None:
            self.names = names
        else:
            self.names = Cisco_IOS_XR_um_vrf_cfg__srlg__names()
        self_names = self.names
        if self_names is not None:
            self_names._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if groups is not None:
            self.groups = groups
        else:
            self.groups = Cisco_IOS_XR_um_vrf_cfg__srlg__groups()
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self
        if inherit_locations is not None:
            self.inherit_locations = inherit_locations
        else:
            self.inherit_locations = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()
        self_inherit_locations = self.inherit_locations
        if self_inherit_locations is not None:
            self_inherit_locations._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _names = self.names
        _interfaces = self.interfaces
        _groups = self.groups
        _inherit_locations = self.inherit_locations
        if _names is not None:
            children['names'] = _names.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        if _inherit_locations is not None:
            children['inherit-locations'] = _inherit_locations.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_gdata(n.get_opt_container("names")), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_gdata(n.get_opt_container("interfaces")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_gdata(n.get_opt_container("groups")), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_gdata(n.get_opt_container("inherit-locations")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_xml(yang.gdata.get_xml_opt_child(n, "names")), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_xml(yang.gdata.get_xml_opt_child(n, "inherit-locations")))
        return None



mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str

    mut def __init__(self, vrf_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_name = vrf_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(yang.adata.MNode):
    group_name: str
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs

    mut def __init__(self, group_name: str, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.group_name = group_name
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        _vrfs = self.vrfs
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=n.get_str("group-name"), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_gdata(n.get_opt_container("vrfs")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs")))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self._name = 'vrf-group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_vrf_cfg__vrf_groups(yang.adata.MNode):
    vrf_group: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group

    mut def __init__(self, vrf_group: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg"
        self.vrf_group = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(elements=vrf_group)
        self.vrf_group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_group = self.vrf_group
        if _vrf_group is not None:
            children['vrf-group'] = _vrf_group.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_gdata(n.get_opt_list("vrf-group")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_xml(yang.gdata.get_xml_children(n, "vrf-group")))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__process_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__is_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net__net_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(yang.adata.MNode):
    net_id: str

    mut def __init__(self, net_id: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.net_id = net_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _net_id = self.net_id
        if _net_id is not None:
            children['net-id'] = yang.gdata.Leaf('string', _net_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.net_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(net_id=n.get_str("net-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(net_id=yang.gdata.from_xml_str(n, "net-id"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'net'
        self.elements = elements

    mut def create(self, net_id):
        for e in self.elements:
            match = True
            if e.net_id != net_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(net_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['net-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(yang.adata.MNode):
    net: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net

    mut def __init__(self, net: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.net = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net(elements=net)
        self.net._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _net = self.net
        if _net is not None:
            children['net'] = _net.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(net=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net.from_gdata(n.get_opt_list("net")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(net=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net.from_xml(yang.gdata.get_xml_children(n, "net")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__saf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__adv_maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__adv_lifetime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__adv_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable(yang.adata.MNode):
    adv_maximum: ?int
    adv_lifetime: ?int
    adv_metric: ?int
    rx_process_enable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable

    mut def __init__(self, adv_maximum: ?int, adv_lifetime: ?int, adv_metric: ?int, rx_process_enable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.adv_maximum = adv_maximum
        self.adv_lifetime = adv_lifetime
        self.adv_metric = adv_metric
        self.rx_process_enable = rx_process_enable
        self_rx_process_enable = self.rx_process_enable
        if self_rx_process_enable is not None:
            self_rx_process_enable._parent = self

    mut def create_rx_process_enable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable()
        self.rx_process_enable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _adv_maximum = self.adv_maximum
        _adv_lifetime = self.adv_lifetime
        _adv_metric = self.adv_metric
        _rx_process_enable = self.rx_process_enable
        if _adv_maximum is not None:
            children['adv-maximum'] = yang.gdata.Leaf('uint32', _adv_maximum)
        if _adv_lifetime is not None:
            children['adv-lifetime'] = yang.gdata.Leaf('uint32', _adv_lifetime)
        if _adv_metric is not None:
            children['adv-metric'] = yang.gdata.Leaf('uint32', _adv_metric)
        if _rx_process_enable is not None:
            children['rx-process-enable'] = _rx_process_enable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable(adv_maximum=n.get_opt_int("adv-maximum"), adv_lifetime=n.get_opt_int("adv-lifetime"), adv_metric=n.get_opt_int("adv-metric"), rx_process_enable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable.from_gdata(n.get_opt_container("rx-process-enable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable(adv_maximum=yang.gdata.from_xml_opt_int(n, "adv-maximum"), adv_lifetime=yang.gdata.from_xml_opt_int(n, "adv-lifetime"), adv_metric=yang.gdata.from_xml_opt_int(n, "adv-metric"), rx_process_enable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable__rx_process_enable.from_xml(yang.gdata.get_xml_opt_child(n, "rx-process-enable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry(yang.adata.MNode):
    address: str

    mut def __init__(self, address: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address = address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry(address=n.get_str("address"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry(address=yang.gdata.from_xml_str(n, "address"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'track'
        self.elements = elements

    mut def create(self, address):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry(address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items(yang.adata.MNode):
    track: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track

    mut def __init__(self, track: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.track = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track(elements=track)
        self.track._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _track = self.track
        if _track is not None:
            children['track'] = _track.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items(track=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track.from_gdata(n.get_opt_list("track")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items(track=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items__track.from_xml(yang.gdata.get_xml_children(n, "track")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track__external_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry(yang.adata.MNode):
    address: str
    external_address: str

    mut def __init__(self, address: str, external_address: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address = address
        self.external_address = external_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _external_address = self.external_address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _external_address is not None:
            children['external-address'] = yang.gdata.Leaf('string', _external_address)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry(address=n.get_str("address"), external_address=n.get_str("external-address"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry(address=yang.gdata.from_xml_str(n, "address"), external_address=yang.gdata.from_xml_str(n, "external-address"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'track'
        self.elements = elements

    mut def create(self, address, external_address):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry(address, external_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items(yang.adata.MNode):
    track: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track

    mut def __init__(self, track: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.track = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track(elements=track)
        self.track._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _track = self.track
        if _track is not None:
            children['track'] = _track.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items(track=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track.from_gdata(n.get_opt_list("track")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items(track=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items__track.from_xml(yang.gdata.get_xml_children(n, "track")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect(yang.adata.MNode):
    abr_track_items: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items
    asbr_track_items: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items

    mut def __init__(self, abr_track_items: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items=None, asbr_track_items: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if abr_track_items is not None:
            self.abr_track_items = abr_track_items
        else:
            self.abr_track_items = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items()
        self_abr_track_items = self.abr_track_items
        if self_abr_track_items is not None:
            self_abr_track_items._parent = self
        if asbr_track_items is not None:
            self.asbr_track_items = asbr_track_items
        else:
            self.asbr_track_items = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items()
        self_asbr_track_items = self.asbr_track_items
        if self_asbr_track_items is not None:
            self_asbr_track_items._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _abr_track_items = self.abr_track_items
        _asbr_track_items = self.asbr_track_items
        if _abr_track_items is not None:
            children['abr-track-items'] = _abr_track_items.to_gdata()
        if _asbr_track_items is not None:
            children['asbr-track-items'] = _asbr_track_items.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect(abr_track_items=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items.from_gdata(n.get_opt_container("abr-track-items")), asbr_track_items=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items.from_gdata(n.get_opt_container("asbr-track-items")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect(abr_track_items=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__abr_track_items.from_xml(yang.gdata.get_xml_opt_child(n, "abr-track-items")), asbr_track_items=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect__asbr_track_items.from_xml(yang.gdata.get_xml_opt_child(n, "asbr-track-items")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate(yang.adata.MNode):
    external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external
    route_policy: ?str

    mut def __init__(self, external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external=None, route_policy: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.external = external
        self_external = self.external
        if self_external is not None:
            self_external._parent = self
        self.route_policy = route_policy

    mut def create_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external()
        self.external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _external = self.external
        _route_policy = self.route_policy
        if _external is not None:
            children['external'] = _external.to_gdata()
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate(external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external.from_gdata(n.get_opt_container("external")), route_policy=n.get_opt_str("route-policy"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate(external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate__external.from_xml(yang.gdata.get_xml_opt_child(n, "external")), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information(yang.adata.MNode):
    originate: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate

    mut def __init__(self, originate: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.originate = originate
        self_originate = self.originate
        if self_originate is not None:
            self_originate._parent = self

    mut def create_originate(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate()
        self.originate = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _originate = self.originate
        if _originate is not None:
            children['originate'] = _originate.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information(originate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate.from_gdata(n.get_opt_container("originate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information(originate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information__originate.from_xml(yang.gdata.get_xml_opt_child(n, "originate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__sr_prefer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__prefix_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection(yang.adata.MNode):
    prefix_list: ?str
    route_policy: ?str
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable

    mut def __init__(self, prefix_list: ?str, route_policy: ?str, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix_list = prefix_list
        self.route_policy = route_policy
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_list = self.prefix_list
        _route_policy = self.route_policy
        _disable = self.disable
        if _prefix_list is not None:
            children['prefix-list'] = yang.gdata.Leaf('string', _prefix_list)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection(prefix_list=n.get_opt_str("prefix-list"), route_policy=n.get_opt_str("route-policy"), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection(prefix_list=yang.gdata.from_xml_opt_str(n, "prefix-list"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled(yang.adata.MNode):
    protection: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection

    mut def __init__(self, protection: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if protection is not None:
            self.protection = protection
        else:
            self.protection = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection()
        self_protection = self.protection
        if self_protection is not None:
            self_protection._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _protection = self.protection
        if _protection is not None:
            children['protection'] = _protection.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled(protection=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection.from_gdata(n.get_opt_container("protection")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled(protection=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled__protection.from_xml(yang.gdata.get_xml_opt_child(n, "protection")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__address_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index__index_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index(yang.adata.MNode):
    index_id: int

    mut def __init__(self, index_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index_id = index_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_id = self.index_id
        if _index_id is not None:
            children['index-id'] = yang.gdata.Leaf('uint32', _index_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index(index_id=n.get_int("index-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index(index_id=yang.gdata.from_xml_int(n, "index-id"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute__absolute_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute(yang.adata.MNode):
    absolute_value: int

    mut def __init__(self, absolute_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.absolute_value = absolute_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _absolute_value = self.absolute_value
        if _absolute_value is not None:
            children['absolute-value'] = yang.gdata.Leaf('uint32', _absolute_value)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute(absolute_value=n.get_int("absolute-value"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute(absolute_value=yang.gdata.from_xml_int(n, "absolute-value"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry(yang.adata.MNode):
    address_prefix: str
    index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index
    absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute
    interface: ?str
    php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable
    explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null

    mut def __init__(self, address_prefix: str, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index=None, absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute=None, interface: ?str, php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable=None, explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_prefix = address_prefix
        self.index = index
        self_index = self.index
        if self_index is not None:
            self_index._parent = self
        self.absolute = absolute
        self_absolute = self.absolute
        if self_absolute is not None:
            self_absolute._parent = self
        self.interface = interface
        self.php_disable = php_disable
        self_php_disable = self.php_disable
        if self_php_disable is not None:
            self_php_disable._parent = self
        self.explicit_null = explicit_null
        self_explicit_null = self.explicit_null
        if self_explicit_null is not None:
            self_explicit_null._parent = self

    mut def create_index(self, index_id):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index(index_id)
        self.index = res
        return res

    mut def create_absolute(self, absolute_value):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute(absolute_value)
        self.absolute = res
        return res

    mut def create_php_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable()
        self.php_disable = res
        return res

    mut def create_explicit_null(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null()
        self.explicit_null = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_prefix = self.address_prefix
        _index = self.index
        _absolute = self.absolute
        _interface = self.interface
        _php_disable = self.php_disable
        _explicit_null = self.explicit_null
        if _address_prefix is not None:
            children['address-prefix'] = yang.gdata.Leaf('union', _address_prefix)
        if _index is not None:
            children['index'] = _index.to_gdata()
        if _absolute is not None:
            children['absolute'] = _absolute.to_gdata()
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        if _php_disable is not None:
            children['php-disable'] = _php_disable.to_gdata()
        if _explicit_null is not None:
            children['explicit-null'] = _explicit_null.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry(address_prefix=n.get_str("address-prefix"), index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index.from_gdata(n.get_opt_container("index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute.from_gdata(n.get_opt_container("absolute")), interface=n.get_opt_str("interface"), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable.from_gdata(n.get_opt_container("php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null.from_gdata(n.get_opt_container("explicit-null")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry(address_prefix=yang.gdata.from_xml_str(n, "address-prefix"), index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__absolute.from_xml(yang.gdata.get_xml_opt_child(n, "absolute")), interface=yang.gdata.from_xml_opt_str(n, "interface"), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__php_disable.from_xml(yang.gdata.get_xml_opt_child(n, "php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix__explicit_null.from_xml(yang.gdata.get_xml_opt_child(n, "explicit-null")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'prefix'
        self.elements = elements

    mut def create(self, address_prefix, index, absolute):
        for e in self.elements:
            match = True
            if e.address_prefix != address_prefix:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry(address_prefix, index, absolute)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes(yang.adata.MNode):
    prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix

    mut def __init__(self, prefix: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix(elements=prefix)
        self.prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix = self.prefix
        if _prefix is not None:
            children['prefix'] = _prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes(prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix.from_gdata(n.get_opt_list("prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes(prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes__prefix.from_xml(yang.gdata.get_xml_children(n, "prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__address_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__flex_algo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index__index_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index(yang.adata.MNode):
    index_id: int

    mut def __init__(self, index_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index_id = index_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_id = self.index_id
        if _index_id is not None:
            children['index-id'] = yang.gdata.Leaf('uint32', _index_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index(index_id=n.get_int("index-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index(index_id=yang.gdata.from_xml_int(n, "index-id"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute__absolute_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute(yang.adata.MNode):
    absolute_value: int

    mut def __init__(self, absolute_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.absolute_value = absolute_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _absolute_value = self.absolute_value
        if _absolute_value is not None:
            children['absolute-value'] = yang.gdata.Leaf('uint32', _absolute_value)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute(absolute_value=n.get_int("absolute-value"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute(absolute_value=yang.gdata.from_xml_int(n, "absolute-value"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry(yang.adata.MNode):
    address_prefix: str
    flex_algo: int
    index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index
    absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute
    interface: ?str
    php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable
    explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null

    mut def __init__(self, address_prefix: str, flex_algo: int, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index=None, absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute=None, interface: ?str, php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable=None, explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_prefix = address_prefix
        self.flex_algo = flex_algo
        self.index = index
        self_index = self.index
        if self_index is not None:
            self_index._parent = self
        self.absolute = absolute
        self_absolute = self.absolute
        if self_absolute is not None:
            self_absolute._parent = self
        self.interface = interface
        self.php_disable = php_disable
        self_php_disable = self.php_disable
        if self_php_disable is not None:
            self_php_disable._parent = self
        self.explicit_null = explicit_null
        self_explicit_null = self.explicit_null
        if self_explicit_null is not None:
            self_explicit_null._parent = self

    mut def create_index(self, index_id):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index(index_id)
        self.index = res
        return res

    mut def create_absolute(self, absolute_value):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute(absolute_value)
        self.absolute = res
        return res

    mut def create_php_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable()
        self.php_disable = res
        return res

    mut def create_explicit_null(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null()
        self.explicit_null = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_prefix = self.address_prefix
        _flex_algo = self.flex_algo
        _index = self.index
        _absolute = self.absolute
        _interface = self.interface
        _php_disable = self.php_disable
        _explicit_null = self.explicit_null
        if _address_prefix is not None:
            children['address-prefix'] = yang.gdata.Leaf('union', _address_prefix)
        if _flex_algo is not None:
            children['flex-algo'] = yang.gdata.Leaf('uint32', _flex_algo)
        if _index is not None:
            children['index'] = _index.to_gdata()
        if _absolute is not None:
            children['absolute'] = _absolute.to_gdata()
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        if _php_disable is not None:
            children['php-disable'] = _php_disable.to_gdata()
        if _explicit_null is not None:
            children['explicit-null'] = _explicit_null.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address_prefix), yang.gdata.yang_str(self.flex_algo)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry(address_prefix=n.get_str("address-prefix"), flex_algo=n.get_int("flex-algo"), index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index.from_gdata(n.get_opt_container("index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute.from_gdata(n.get_opt_container("absolute")), interface=n.get_opt_str("interface"), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable.from_gdata(n.get_opt_container("php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null.from_gdata(n.get_opt_container("explicit-null")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry(address_prefix=yang.gdata.from_xml_str(n, "address-prefix"), flex_algo=yang.gdata.from_xml_int(n, "flex-algo"), index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__absolute.from_xml(yang.gdata.get_xml_opt_child(n, "absolute")), interface=yang.gdata.from_xml_opt_str(n, "interface"), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__php_disable.from_xml(yang.gdata.get_xml_opt_child(n, "php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix__explicit_null.from_xml(yang.gdata.get_xml_opt_child(n, "explicit-null")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'prefix'
        self.elements = elements

    mut def create(self, address_prefix, flex_algo, index, absolute):
        for e in self.elements:
            match = True
            if e.address_prefix != address_prefix:
                match = False
                continue
            if e.flex_algo != flex_algo:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry(address_prefix, flex_algo, index, absolute)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address-prefix', 'flex-algo'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo(yang.adata.MNode):
    prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix

    mut def __init__(self, prefix: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix(elements=prefix)
        self.prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix = self.prefix
        if _prefix is not None:
            children['prefix'] = _prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo(prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix.from_gdata(n.get_opt_list("prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo(prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo__prefix.from_xml(yang.gdata.get_xml_children(n, "prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__address_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index__index_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index(yang.adata.MNode):
    index_id: int

    mut def __init__(self, index_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index_id = index_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_id = self.index_id
        if _index_id is not None:
            children['index-id'] = yang.gdata.Leaf('uint32', _index_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index(index_id=n.get_int("index-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index(index_id=yang.gdata.from_xml_int(n, "index-id"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute__absolute_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute(yang.adata.MNode):
    absolute_value: int

    mut def __init__(self, absolute_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.absolute_value = absolute_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _absolute_value = self.absolute_value
        if _absolute_value is not None:
            children['absolute-value'] = yang.gdata.Leaf('uint32', _absolute_value)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute(absolute_value=n.get_int("absolute-value"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute(absolute_value=yang.gdata.from_xml_int(n, "absolute-value"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry(yang.adata.MNode):
    address_prefix: str
    index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index
    absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute
    interface: ?str
    php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable
    explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null

    mut def __init__(self, address_prefix: str, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index=None, absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute=None, interface: ?str, php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable=None, explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_prefix = address_prefix
        self.index = index
        self_index = self.index
        if self_index is not None:
            self_index._parent = self
        self.absolute = absolute
        self_absolute = self.absolute
        if self_absolute is not None:
            self_absolute._parent = self
        self.interface = interface
        self.php_disable = php_disable
        self_php_disable = self.php_disable
        if self_php_disable is not None:
            self_php_disable._parent = self
        self.explicit_null = explicit_null
        self_explicit_null = self.explicit_null
        if self_explicit_null is not None:
            self_explicit_null._parent = self

    mut def create_index(self, index_id):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index(index_id)
        self.index = res
        return res

    mut def create_absolute(self, absolute_value):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute(absolute_value)
        self.absolute = res
        return res

    mut def create_php_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable()
        self.php_disable = res
        return res

    mut def create_explicit_null(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null()
        self.explicit_null = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_prefix = self.address_prefix
        _index = self.index
        _absolute = self.absolute
        _interface = self.interface
        _php_disable = self.php_disable
        _explicit_null = self.explicit_null
        if _address_prefix is not None:
            children['address-prefix'] = yang.gdata.Leaf('union', _address_prefix)
        if _index is not None:
            children['index'] = _index.to_gdata()
        if _absolute is not None:
            children['absolute'] = _absolute.to_gdata()
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        if _php_disable is not None:
            children['php-disable'] = _php_disable.to_gdata()
        if _explicit_null is not None:
            children['explicit-null'] = _explicit_null.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry(address_prefix=n.get_str("address-prefix"), index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index.from_gdata(n.get_opt_container("index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute.from_gdata(n.get_opt_container("absolute")), interface=n.get_opt_str("interface"), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable.from_gdata(n.get_opt_container("php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null.from_gdata(n.get_opt_container("explicit-null")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry(address_prefix=yang.gdata.from_xml_str(n, "address-prefix"), index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__absolute.from_xml(yang.gdata.get_xml_opt_child(n, "absolute")), interface=yang.gdata.from_xml_opt_str(n, "interface"), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__php_disable.from_xml(yang.gdata.get_xml_opt_child(n, "php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix__explicit_null.from_xml(yang.gdata.get_xml_opt_child(n, "explicit-null")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'prefix'
        self.elements = elements

    mut def create(self, address_prefix, index, absolute):
        for e in self.elements:
            match = True
            if e.address_prefix != address_prefix:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry(address_prefix, index, absolute)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf(yang.adata.MNode):
    prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix

    mut def __init__(self, prefix: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix(elements=prefix)
        self.prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix = self.prefix
        if _prefix is not None:
            children['prefix'] = _prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf(prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix.from_gdata(n.get_opt_list("prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf(prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf__prefix.from_xml(yang.gdata.get_xml_children(n, "prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map(yang.adata.MNode):
    prefixes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes
    flex_algo: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo
    strict_spf: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf

    mut def __init__(self, prefixes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes=None, flex_algo: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo=None, strict_spf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if prefixes is not None:
            self.prefixes = prefixes
        else:
            self.prefixes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes()
        self_prefixes = self.prefixes
        if self_prefixes is not None:
            self_prefixes._parent = self
        if flex_algo is not None:
            self.flex_algo = flex_algo
        else:
            self.flex_algo = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo()
        self_flex_algo = self.flex_algo
        if self_flex_algo is not None:
            self_flex_algo._parent = self
        if strict_spf is not None:
            self.strict_spf = strict_spf
        else:
            self.strict_spf = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf()
        self_strict_spf = self.strict_spf
        if self_strict_spf is not None:
            self_strict_spf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefixes = self.prefixes
        _flex_algo = self.flex_algo
        _strict_spf = self.strict_spf
        if _prefixes is not None:
            children['prefixes'] = _prefixes.to_gdata()
        if _flex_algo is not None:
            children['flex-algo'] = _flex_algo.to_gdata()
        if _strict_spf is not None:
            children['strict-spf'] = _strict_spf.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map(prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes.from_gdata(n.get_opt_container("prefixes")), flex_algo=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo.from_gdata(n.get_opt_container("flex-algo")), strict_spf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf.from_gdata(n.get_opt_container("strict-spf")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map(prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__prefixes.from_xml(yang.gdata.get_xml_opt_child(n, "prefixes")), flex_algo=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__flex_algo.from_xml(yang.gdata.get_xml_opt_child(n, "flex-algo")), strict_spf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map__strict_spf.from_xml(yang.gdata.get_xml_opt_child(n, "strict-spf")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(yang.adata.MNode):
    sr_prefer: ?bool
    unlabeled: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled
    connected_prefix_sid_map: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map

    mut def __init__(self, sr_prefer: ?bool, unlabeled: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled=None, connected_prefix_sid_map: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sr_prefer = sr_prefer
        if unlabeled is not None:
            self.unlabeled = unlabeled
        else:
            self.unlabeled = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled()
        self_unlabeled = self.unlabeled
        if self_unlabeled is not None:
            self_unlabeled._parent = self
        self.connected_prefix_sid_map = connected_prefix_sid_map
        self_connected_prefix_sid_map = self.connected_prefix_sid_map
        if self_connected_prefix_sid_map is not None:
            self_connected_prefix_sid_map._parent = self

    mut def create_connected_prefix_sid_map(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map()
        self.connected_prefix_sid_map = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sr_prefer = self.sr_prefer
        _unlabeled = self.unlabeled
        _connected_prefix_sid_map = self.connected_prefix_sid_map
        if _sr_prefer is not None:
            children['sr-prefer'] = yang.gdata.Leaf('boolean', _sr_prefer)
        if _unlabeled is not None:
            children['unlabeled'] = _unlabeled.to_gdata()
        if _connected_prefix_sid_map is not None:
            children['connected-prefix-sid-map'] = _connected_prefix_sid_map.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(sr_prefer=n.get_opt_bool("sr-prefer"), unlabeled=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled.from_gdata(n.get_opt_container("unlabeled")), connected_prefix_sid_map=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map.from_gdata(n.get_opt_container("connected-prefix-sid-map")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(sr_prefer=yang.gdata.from_xml_opt_bool(n, "sr-prefer"), unlabeled=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__unlabeled.from_xml(yang.gdata.get_xml_opt_child(n, "unlabeled")), connected_prefix_sid_map=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__connected_prefix_sid_map.from_xml(yang.gdata.get_xml_opt_child(n, "connected-prefix-sid-map")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive(disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable.from_gdata(n.get_opt_container("disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive(disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local(yang.adata.MNode):
    domain_wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide

    mut def __init__(self, domain_wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.domain_wide = domain_wide
        self_domain_wide = self.domain_wide
        if self_domain_wide is not None:
            self_domain_wide._parent = self

    mut def create_domain_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide()
        self.domain_wide = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _domain_wide = self.domain_wide
        if _domain_wide is not None:
            children['domain-wide'] = _domain_wide.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local(domain_wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide.from_gdata(n.get_opt_container("domain-wide")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local(domain_wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local__domain_wide.from_xml(yang.gdata.get_xml_opt_child(n, "domain-wide")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map(yang.adata.MNode):
    receive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive
    advertise_local: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local

    mut def __init__(self, receive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive=None, advertise_local: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.receive = receive
        self_receive = self.receive
        if self_receive is not None:
            self_receive._parent = self
        self.advertise_local = advertise_local
        self_advertise_local = self.advertise_local
        if self_advertise_local is not None:
            self_advertise_local._parent = self

    mut def create_receive(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive()
        self.receive = res
        return res

    mut def create_advertise_local(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local()
        self.advertise_local = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        _advertise_local = self.advertise_local
        if _receive is not None:
            children['receive'] = _receive.to_gdata()
        if _advertise_local is not None:
            children['advertise-local'] = _advertise_local.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map(receive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive.from_gdata(n.get_opt_container("receive")), advertise_local=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local.from_gdata(n.get_opt_container("advertise-local")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map(receive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__receive.from_xml(yang.gdata.get_xml_opt_child(n, "receive")), advertise_local=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map__advertise_local.from_xml(yang.gdata.get_xml_opt_child(n, "advertise-local")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__protected_adjacency_sid_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__locator_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__srv6_locator_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level__srv6_locator_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    srv6_locator_metric: ?int

    mut def __init__(self, level_id: int, srv6_locator_metric: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.srv6_locator_metric = srv6_locator_metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _srv6_locator_metric = self.srv6_locator_metric
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _srv6_locator_metric is not None:
            children['srv6-locator-metric'] = yang.gdata.Leaf('uint32', _srv6_locator_metric)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry(level_id=n.get_int("level-id"), srv6_locator_metric=n.get_opt_int("srv6-locator-metric"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), srv6_locator_metric=yang.gdata.from_xml_opt_int(n, "srv6-locator-metric"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric(yang.adata.MNode):
    srv6_locator_metric: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels

    mut def __init__(self, srv6_locator_metric: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.srv6_locator_metric = srv6_locator_metric
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srv6_locator_metric = self.srv6_locator_metric
        _levels = self.levels
        if _srv6_locator_metric is not None:
            children['srv6-locator-metric'] = yang.gdata.Leaf('uint32', _srv6_locator_metric)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric(srv6_locator_metric=n.get_opt_int("srv6-locator-metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric(srv6_locator_metric=yang.gdata.from_xml_opt_int(n, "srv6-locator-metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__srv6_locator_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level__srv6_locator_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry(yang.adata.MNode):
    level_id: int
    srv6_locator_tag: ?int

    mut def __init__(self, level_id: int, srv6_locator_tag: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.srv6_locator_tag = srv6_locator_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _srv6_locator_tag = self.srv6_locator_tag
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _srv6_locator_tag is not None:
            children['srv6-locator-tag'] = yang.gdata.Leaf('uint32', _srv6_locator_tag)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry(level_id=n.get_int("level-id"), srv6_locator_tag=n.get_opt_int("srv6-locator-tag"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), srv6_locator_tag=yang.gdata.from_xml_opt_int(n, "srv6-locator-tag"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag(yang.adata.MNode):
    srv6_locator_tag: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels

    mut def __init__(self, srv6_locator_tag: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.srv6_locator_tag = srv6_locator_tag
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srv6_locator_tag = self.srv6_locator_tag
        _levels = self.levels
        if _srv6_locator_tag is not None:
            children['srv6-locator-tag'] = yang.gdata.Leaf('uint32', _srv6_locator_tag)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag(srv6_locator_tag=n.get_opt_int("srv6-locator-tag"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag(srv6_locator_tag=yang.gdata.from_xml_opt_int(n, "srv6-locator-tag"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry(yang.adata.MNode):
    locator_name: str
    level: ?int
    metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric
    tag: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag

    mut def __init__(self, locator_name: str, level: ?int, metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric=None, tag: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.locator_name = locator_name
        self.level = level
        if metric is not None:
            self.metric = metric
        else:
            self.metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self
        if tag is not None:
            self.tag = tag
        else:
            self.tag = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _locator_name = self.locator_name
        _level = self.level
        _metric = self.metric
        _tag = self.tag
        if _locator_name is not None:
            children['locator-name'] = yang.gdata.Leaf('string', _locator_name)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.locator_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry(locator_name=n.get_str("locator-name"), level=n.get_opt_int("level"), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric.from_gdata(n.get_opt_container("metric")), tag=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag.from_gdata(n.get_opt_container("tag")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry(locator_name=yang.gdata.from_xml_str(n, "locator-name"), level=yang.gdata.from_xml_opt_int(n, "level"), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")), tag=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'locator'
        self.elements = elements

    mut def create(self, locator_name):
        for e in self.elements:
            match = True
            if e.locator_name != locator_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry(locator_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['locator-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators(yang.adata.MNode):
    locator: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator

    mut def __init__(self, locator: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.locator = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator(elements=locator)
        self.locator._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _locator = self.locator
        if _locator is not None:
            children['locator'] = _locator.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators(locator=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator.from_gdata(n.get_opt_list("locator")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators(locator=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators__locator.from_xml(yang.gdata.get_xml_children(n, "locator")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6(yang.adata.MNode):
    locators: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators

    mut def __init__(self, locators: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if locators is not None:
            self.locators = locators
        else:
            self.locators = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators()
        self_locators = self.locators
        if self_locators is not None:
            self_locators._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _locators = self.locators
        if _locators is not None:
            children['locators'] = _locators.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6(locators=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators.from_gdata(n.get_opt_container("locators")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6(locators=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6__locators.from_xml(yang.gdata.get_xml_opt_child(n, "locators")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(yang.adata.MNode):
    mpls: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls
    prefix_sid_map: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map
    bundle_member_adj_sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid
    labeled_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only
    protected_adjacency_sid_delay: ?int
    srv6: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6

    mut def __init__(self, mpls: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls=None, prefix_sid_map: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map=None, bundle_member_adj_sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid=None, labeled_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only=None, protected_adjacency_sid_delay: ?int, srv6: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls()
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self
        if prefix_sid_map is not None:
            self.prefix_sid_map = prefix_sid_map
        else:
            self.prefix_sid_map = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map()
        self_prefix_sid_map = self.prefix_sid_map
        if self_prefix_sid_map is not None:
            self_prefix_sid_map._parent = self
        self.bundle_member_adj_sid = bundle_member_adj_sid
        self_bundle_member_adj_sid = self.bundle_member_adj_sid
        if self_bundle_member_adj_sid is not None:
            self_bundle_member_adj_sid._parent = self
        self.labeled_only = labeled_only
        self_labeled_only = self.labeled_only
        if self_labeled_only is not None:
            self_labeled_only._parent = self
        self.protected_adjacency_sid_delay = protected_adjacency_sid_delay
        self.srv6 = srv6
        self_srv6 = self.srv6
        if self_srv6 is not None:
            self_srv6._parent = self

    mut def create_bundle_member_adj_sid(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid()
        self.bundle_member_adj_sid = res
        return res

    mut def create_labeled_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only()
        self.labeled_only = res
        return res

    mut def create_srv6(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6()
        self.srv6 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        _prefix_sid_map = self.prefix_sid_map
        _bundle_member_adj_sid = self.bundle_member_adj_sid
        _labeled_only = self.labeled_only
        _protected_adjacency_sid_delay = self.protected_adjacency_sid_delay
        _srv6 = self.srv6
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        if _prefix_sid_map is not None:
            children['prefix-sid-map'] = _prefix_sid_map.to_gdata()
        if _bundle_member_adj_sid is not None:
            children['bundle-member-adj-sid'] = _bundle_member_adj_sid.to_gdata()
        if _labeled_only is not None:
            children['labeled-only'] = _labeled_only.to_gdata()
        if _protected_adjacency_sid_delay is not None:
            children['protected-adjacency-sid-delay'] = yang.gdata.Leaf('uint32', _protected_adjacency_sid_delay)
        if _srv6 is not None:
            children['srv6'] = _srv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls.from_gdata(n.get_opt_container("mpls")), prefix_sid_map=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map.from_gdata(n.get_opt_container("prefix-sid-map")), bundle_member_adj_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid.from_gdata(n.get_opt_container("bundle-member-adj-sid")), labeled_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only.from_gdata(n.get_opt_container("labeled-only")), protected_adjacency_sid_delay=n.get_opt_int("protected-adjacency-sid-delay"), srv6=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6.from_gdata(n.get_opt_container("srv6")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")), prefix_sid_map=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__prefix_sid_map.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-sid-map")), bundle_member_adj_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__bundle_member_adj_sid.from_xml(yang.gdata.get_xml_opt_child(n, "bundle-member-adj-sid")), labeled_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__labeled_only.from_xml(yang.gdata.get_xml_opt_child(n, "labeled-only")), protected_adjacency_sid_delay=yang.gdata.from_xml_opt_int(n, "protected-adjacency-sid-delay"), srv6=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__srv6.from_xml(yang.gdata.get_xml_opt_child(n, "srv6")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__global_administrative_distance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source__address_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source__administrative_distance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source__prefix_access_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry(yang.adata.MNode):
    address_prefix: str
    administrative_distance: ?int
    prefix_access_list: ?str

    mut def __init__(self, address_prefix: str, administrative_distance: ?int, prefix_access_list: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_prefix = address_prefix
        self.administrative_distance = administrative_distance
        self.prefix_access_list = prefix_access_list

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_prefix = self.address_prefix
        _administrative_distance = self.administrative_distance
        _prefix_access_list = self.prefix_access_list
        if _address_prefix is not None:
            children['address-prefix'] = yang.gdata.Leaf('union', _address_prefix)
        if _administrative_distance is not None:
            children['administrative-distance'] = yang.gdata.Leaf('uint32', _administrative_distance)
        if _prefix_access_list is not None:
            children['prefix-access-list'] = yang.gdata.Leaf('string', _prefix_access_list)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry(address_prefix=n.get_str("address-prefix"), administrative_distance=n.get_opt_int("administrative-distance"), prefix_access_list=n.get_opt_str("prefix-access-list"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry(address_prefix=yang.gdata.from_xml_str(n, "address-prefix"), administrative_distance=yang.gdata.from_xml_opt_int(n, "administrative-distance"), prefix_access_list=yang.gdata.from_xml_opt_str(n, "prefix-access-list"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'route-source'
        self.elements = elements

    mut def create(self, address_prefix):
        for e in self.elements:
            match = True
            if e.address_prefix != address_prefix:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry(address_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources(yang.adata.MNode):
    route_source: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source

    mut def __init__(self, route_source: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.route_source = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source(elements=route_source)
        self.route_source._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_source = self.route_source
        if _route_source is not None:
            children['route-source'] = _route_source.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources(route_source=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source.from_gdata(n.get_opt_list("route-source")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources(route_source=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources__route_source.from_xml(yang.gdata.get_xml_children(n, "route-source")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance(yang.adata.MNode):
    global_administrative_distance: ?int
    route_sources: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources

    mut def __init__(self, global_administrative_distance: ?int, route_sources: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.global_administrative_distance = global_administrative_distance
        if route_sources is not None:
            self.route_sources = route_sources
        else:
            self.route_sources = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources()
        self_route_sources = self.route_sources
        if self_route_sources is not None:
            self_route_sources._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _global_administrative_distance = self.global_administrative_distance
        _route_sources = self.route_sources
        if _global_administrative_distance is not None:
            children['global-administrative-distance'] = yang.gdata.Leaf('uint32', _global_administrative_distance)
        if _route_sources is not None:
            children['route-sources'] = _route_sources.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance(global_administrative_distance=n.get_opt_int("global-administrative-distance"), route_sources=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources.from_gdata(n.get_opt_container("route-sources")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance(global_administrative_distance=yang.gdata.from_xml_opt_int(n, "global-administrative-distance"), route_sources=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance__route_sources.from_xml(yang.gdata.get_xml_opt_child(n, "route-sources")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list__prefix_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list(yang.adata.MNode):
    prefix_list: ?str
    route_policy: ?str

    mut def __init__(self, prefix_list: ?str, route_policy: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix_list = prefix_list
        self.route_policy = route_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_list = self.prefix_list
        _route_policy = self.route_policy
        if _prefix_list is not None:
            children['prefix-list'] = yang.gdata.Leaf('string', _prefix_list)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list(prefix_list=n.get_opt_str("prefix-list"), route_policy=n.get_opt_str("route-policy"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list(prefix_list=yang.gdata.from_xml_opt_str(n, "prefix-list"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__process_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match(yang.adata.MNode):
    internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal
    external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external
    nssa_external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external

    mut def __init__(self, internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal=None, external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external=None, nssa_external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.internal = internal
        self_internal = self.internal
        if self_internal is not None:
            self_internal._parent = self
        self.external = external
        self_external = self.external
        if self_external is not None:
            self_external._parent = self
        self.nssa_external = nssa_external
        self_nssa_external = self.nssa_external
        if self_nssa_external is not None:
            self_nssa_external._parent = self

    mut def create_internal(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal()
        self.internal = res
        return res

    mut def create_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external()
        self.external = res
        return res

    mut def create_nssa_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external()
        self.nssa_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _internal = self.internal
        _external = self.external
        _nssa_external = self.nssa_external
        if _internal is not None:
            children['internal'] = _internal.to_gdata()
        if _external is not None:
            children['external'] = _external.to_gdata()
        if _nssa_external is not None:
            children['nssa-external'] = _nssa_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal.from_gdata(n.get_opt_container("internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external.from_gdata(n.get_opt_container("external")), nssa_external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external.from_gdata(n.get_opt_container("nssa-external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__internal.from_xml(yang.gdata.get_xml_opt_child(n, "internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__external.from_xml(yang.gdata.get_xml_opt_child(n, "external")), nssa_external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match__nssa_external.from_xml(yang.gdata.get_xml_opt_child(n, "nssa-external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry(yang.adata.MNode):
    process_id: str
    match: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, process_id: str, match: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match=None, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.process_id = process_id
        if match is not None:
            self.match = match
        else:
            self.match = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match()
        self_match = self.match
        if self_match is not None:
            self_match._parent = self
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process_id = self.process_id
        _match = self.match
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _process_id is not None:
            children['process-id'] = yang.gdata.Leaf('string', _process_id)
        if _match is not None:
            children['match'] = _match.to_gdata()
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.process_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry(process_id=n.get_str("process-id"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match.from_gdata(n.get_opt_container("match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry(process_id=yang.gdata.from_xml_str(n, "process-id"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__match.from_xml(yang.gdata.get_xml_opt_child(n, "match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'ospf'
        self.elements = elements

    mut def create(self, process_id):
        for e in self.elements:
            match = True
            if e.process_id != process_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry(process_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['process-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__process_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match(yang.adata.MNode):
    internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal
    external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external
    nssa_external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external

    mut def __init__(self, internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal=None, external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external=None, nssa_external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.internal = internal
        self_internal = self.internal
        if self_internal is not None:
            self_internal._parent = self
        self.external = external
        self_external = self.external
        if self_external is not None:
            self_external._parent = self
        self.nssa_external = nssa_external
        self_nssa_external = self.nssa_external
        if self_nssa_external is not None:
            self_nssa_external._parent = self

    mut def create_internal(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal()
        self.internal = res
        return res

    mut def create_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external()
        self.external = res
        return res

    mut def create_nssa_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external()
        self.nssa_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _internal = self.internal
        _external = self.external
        _nssa_external = self.nssa_external
        if _internal is not None:
            children['internal'] = _internal.to_gdata()
        if _external is not None:
            children['external'] = _external.to_gdata()
        if _nssa_external is not None:
            children['nssa-external'] = _nssa_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal.from_gdata(n.get_opt_container("internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external.from_gdata(n.get_opt_container("external")), nssa_external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external.from_gdata(n.get_opt_container("nssa-external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__internal.from_xml(yang.gdata.get_xml_opt_child(n, "internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__external.from_xml(yang.gdata.get_xml_opt_child(n, "external")), nssa_external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match__nssa_external.from_xml(yang.gdata.get_xml_opt_child(n, "nssa-external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry(yang.adata.MNode):
    process_id: str
    match: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, process_id: str, match: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match=None, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.process_id = process_id
        if match is not None:
            self.match = match
        else:
            self.match = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match()
        self_match = self.match
        if self_match is not None:
            self_match._parent = self
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process_id = self.process_id
        _match = self.match
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _process_id is not None:
            children['process-id'] = yang.gdata.Leaf('string', _process_id)
        if _match is not None:
            children['match'] = _match.to_gdata()
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.process_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry(process_id=n.get_str("process-id"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match.from_gdata(n.get_opt_container("match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry(process_id=yang.gdata.from_xml_str(n, "process-id"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__match.from_xml(yang.gdata.get_xml_opt_child(n, "match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'ospfv3'
        self.elements = elements

    mut def create(self, process_id):
        for e in self.elements:
            match = True
            if e.process_id != process_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry(process_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['process-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__application_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry(yang.adata.MNode):
    application_name: str
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, application_name: str, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.application_name = application_name
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _application_name = self.application_name
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _application_name is not None:
            children['application-name'] = yang.gdata.Leaf('string', _application_name)
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.application_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry(application_name=n.get_str("application-name"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry(application_name=yang.gdata.from_xml_str(n, "application-name"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'application'
        self.elements = elements

    mut def create(self, application_name):
        for e in self.elements:
            match = True
            if e.application_name != application_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry(application_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['application-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications(yang.adata.MNode):
    application: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application

    mut def __init__(self, application: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.application = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application(elements=application)
        self.application._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _application = self.application
        if _application is not None:
            children['application'] = _application.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications(application=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application.from_gdata(n.get_opt_list("application")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications(application=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications__application.from_xml(yang.gdata.get_xml_children(n, "application")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__instance_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry(yang.adata.MNode):
    instance_id: str
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str
    down_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear

    mut def __init__(self, instance_id: str, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str, down_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.instance_id = instance_id
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type
        self.down_flag_clear = down_flag_clear
        self_down_flag_clear = self.down_flag_clear
        if self_down_flag_clear is not None:
            self_down_flag_clear._parent = self

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1()
        self.level_1 = res
        return res

    mut def create_down_flag_clear(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear()
        self.down_flag_clear = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance_id = self.instance_id
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        _down_flag_clear = self.down_flag_clear
        if _instance_id is not None:
            children['instance-id'] = yang.gdata.Leaf('string', _instance_id)
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        if _down_flag_clear is not None:
            children['down-flag-clear'] = _down_flag_clear.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.instance_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry(instance_id=n.get_str("instance-id"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"), down_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear.from_gdata(n.get_opt_container("down-flag-clear")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry(instance_id=yang.gdata.from_xml_str(n, "instance-id"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"), down_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis__down_flag_clear.from_xml(yang.gdata.get_xml_opt_child(n, "down-flag-clear")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'isis'
        self.elements = elements

    mut def create(self, instance_id):
        for e in self.elements:
            match = True
            if e.instance_id != instance_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry(instance_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['instance-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry(yang.adata.MNode):
    as_number: str
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, as_number: str, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.as_number = as_number
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry(as_number=n.get_str("as-number"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry(as_number=yang.gdata.from_xml_str(n, "as-number"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'as'
        self.elements = elements

    mut def create(self, as_number):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry(as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp(yang.adata.MNode):
    as_: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as

    mut def __init__(self, as_: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.as_ = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as(elements=as_)
        self.as_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_ = self.as_
        if _as_ is not None:
            children['as'] = _as_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp(as_=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as.from_gdata(n.get_opt_list("as")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp(as_=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp__as.from_xml(yang.gdata.get_xml_children(n, "as")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match(yang.adata.MNode):
    internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal
    external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external

    mut def __init__(self, internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal=None, external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.internal = internal
        self_internal = self.internal
        if self_internal is not None:
            self_internal._parent = self
        self.external = external
        self_external = self.external
        if self_external is not None:
            self_external._parent = self

    mut def create_internal(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal()
        self.internal = res
        return res

    mut def create_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external()
        self.external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _internal = self.internal
        _external = self.external
        if _internal is not None:
            children['internal'] = _internal.to_gdata()
        if _external is not None:
            children['external'] = _external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal.from_gdata(n.get_opt_container("internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external.from_gdata(n.get_opt_container("external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__internal.from_xml(yang.gdata.get_xml_opt_child(n, "internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match__external.from_xml(yang.gdata.get_xml_opt_child(n, "external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry(yang.adata.MNode):
    as_number: int
    match: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, as_number: int, match: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match=None, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.as_number = as_number
        if match is not None:
            self.match = match
        else:
            self.match = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match()
        self_match = self.match
        if self_match is not None:
            self_match._parent = self
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _match = self.match
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _match is not None:
            children['match'] = _match.to_gdata()
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry(as_number=n.get_int("as-number"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match.from_gdata(n.get_opt_container("match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__match.from_xml(yang.gdata.get_xml_opt_child(n, "match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'eigrp'
        self.elements = elements

    mut def create(self, as_number):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry(as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute(yang.adata.MNode):
    connected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected
    ospf: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf
    ospfv3: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3
    static: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static
    subscriber: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber
    rip: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip
    mobile: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile
    applications: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications
    isis: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis
    bgp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp
    eigrp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp

    mut def __init__(self, connected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected=None, ospf: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf_entry]=[], ospfv3: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3_entry]=[], static: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static=None, subscriber: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber=None, rip: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip=None, mobile: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile=None, applications: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications=None, isis: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis_entry]=[], bgp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp=None, eigrp: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.connected = connected
        self_connected = self.connected
        if self_connected is not None:
            self_connected._parent = self
        self.ospf = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf(elements=ospf)
        self.ospf._parent = self
        self.ospfv3 = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3(elements=ospfv3)
        self.ospfv3._parent = self
        self.static = static
        self_static = self.static
        if self_static is not None:
            self_static._parent = self
        self.subscriber = subscriber
        self_subscriber = self.subscriber
        if self_subscriber is not None:
            self_subscriber._parent = self
        self.rip = rip
        self_rip = self.rip
        if self_rip is not None:
            self_rip._parent = self
        self.mobile = mobile
        self_mobile = self.mobile
        if self_mobile is not None:
            self_mobile._parent = self
        if applications is not None:
            self.applications = applications
        else:
            self.applications = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications()
        self_applications = self.applications
        if self_applications is not None:
            self_applications._parent = self
        self.isis = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis(elements=isis)
        self.isis._parent = self
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self
        self.eigrp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp(elements=eigrp)
        self.eigrp._parent = self

    mut def create_connected(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected()
        self.connected = res
        return res

    mut def create_static(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static()
        self.static = res
        return res

    mut def create_subscriber(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber()
        self.subscriber = res
        return res

    mut def create_rip(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip()
        self.rip = res
        return res

    mut def create_mobile(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile()
        self.mobile = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _connected = self.connected
        _ospf = self.ospf
        _ospfv3 = self.ospfv3
        _static = self.static
        _subscriber = self.subscriber
        _rip = self.rip
        _mobile = self.mobile
        _applications = self.applications
        _isis = self.isis
        _bgp = self.bgp
        _eigrp = self.eigrp
        if _connected is not None:
            children['connected'] = _connected.to_gdata()
        if _ospf is not None:
            children['ospf'] = _ospf.to_gdata()
        if _ospfv3 is not None:
            children['ospfv3'] = _ospfv3.to_gdata()
        if _static is not None:
            children['static'] = _static.to_gdata()
        if _subscriber is not None:
            children['subscriber'] = _subscriber.to_gdata()
        if _rip is not None:
            children['rip'] = _rip.to_gdata()
        if _mobile is not None:
            children['mobile'] = _mobile.to_gdata()
        if _applications is not None:
            children['applications'] = _applications.to_gdata()
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _eigrp is not None:
            children['eigrp'] = _eigrp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute(connected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected.from_gdata(n.get_opt_container("connected")), ospf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf.from_gdata(n.get_opt_list("ospf")), ospfv3=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3.from_gdata(n.get_opt_list("ospfv3")), static=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static.from_gdata(n.get_opt_container("static")), subscriber=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber.from_gdata(n.get_opt_container("subscriber")), rip=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip.from_gdata(n.get_opt_container("rip")), mobile=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile.from_gdata(n.get_opt_container("mobile")), applications=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications.from_gdata(n.get_opt_container("applications")), isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis.from_gdata(n.get_opt_list("isis")), bgp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp.from_gdata(n.get_opt_container("bgp")), eigrp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp.from_gdata(n.get_opt_list("eigrp")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute(connected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__connected.from_xml(yang.gdata.get_xml_opt_child(n, "connected")), ospf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospf.from_xml(yang.gdata.get_xml_children(n, "ospf")), ospfv3=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__ospfv3.from_xml(yang.gdata.get_xml_children(n, "ospfv3")), static=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__static.from_xml(yang.gdata.get_xml_opt_child(n, "static")), subscriber=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__subscriber.from_xml(yang.gdata.get_xml_opt_child(n, "subscriber")), rip=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__rip.from_xml(yang.gdata.get_xml_opt_child(n, "rip")), mobile=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__mobile.from_xml(yang.gdata.get_xml_opt_child(n, "mobile")), applications=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__applications.from_xml(yang.gdata.get_xml_opt_child(n, "applications")), isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__isis.from_xml(yang.gdata.get_xml_children(n, "isis")), bgp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), eigrp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute__eigrp.from_xml(yang.gdata.get_xml_children(n, "eigrp")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id(yang.adata.MNode):
    interface_name: ?str
    ip_address: ?str

    mut def __init__(self, interface_name: ?str, ip_address: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name
        self.ip_address = ip_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _ip_address = self.ip_address
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id(interface_name=n.get_opt_str("interface-name"), ip_address=n.get_opt_str("ip-address"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id(interface_name=yang.gdata.from_xml_opt_str(n, "interface-name"), ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link(yang.adata.MNode):
    attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes

    mut def __init__(self, attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.attributes = attributes
        self_attributes = self.attributes
        if self_attributes is not None:
            self_attributes._parent = self

    mut def create_attributes(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes()
        self.attributes = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _attributes = self.attributes
        if _attributes is not None:
            children['attributes'] = _attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link(attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes.from_gdata(n.get_opt_container("attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link(attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link__attributes.from_xml(yang.gdata.get_xml_opt_child(n, "attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes(yang.adata.MNode):
    srlg: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg

    mut def __init__(self, srlg: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.srlg = srlg
        self_srlg = self.srlg
        if self_srlg is not None:
            self_srlg._parent = self

    mut def create_srlg(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg()
        self.srlg = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg = self.srlg
        if _srlg is not None:
            children['srlg'] = _srlg.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes(srlg=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg.from_gdata(n.get_opt_container("srlg")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes(srlg=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes__srlg.from_xml(yang.gdata.get_xml_opt_child(n, "srlg")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa(yang.adata.MNode):
    link_attributes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes

    mut def __init__(self, link_attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if link_attributes is not None:
            self.link_attributes = link_attributes
        else:
            self.link_attributes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes()
        self_link_attributes = self.link_attributes
        if self_link_attributes is not None:
            self_link_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _link_attributes = self.link_attributes
        if _link_attributes is not None:
            children['link-attributes'] = _link_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa(link_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes.from_gdata(n.get_opt_container("link-attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa(link_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa__link_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "link-attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes(yang.adata.MNode):
    srlg: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg

    mut def __init__(self, srlg: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.srlg = srlg
        self_srlg = self.srlg
        if self_srlg is not None:
            self_srlg._parent = self

    mut def create_srlg(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg()
        self.srlg = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg = self.srlg
        if _srlg is not None:
            children['srlg'] = _srlg.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes(srlg=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg.from_gdata(n.get_opt_container("srlg")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes(srlg=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes__srlg.from_xml(yang.gdata.get_xml_opt_child(n, "srlg")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo(yang.adata.MNode):
    link_attributes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes

    mut def __init__(self, link_attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if link_attributes is not None:
            self.link_attributes = link_attributes
        else:
            self.link_attributes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes()
        self_link_attributes = self.link_attributes
        if self_link_attributes is not None:
            self_link_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _link_attributes = self.link_attributes
        if _link_attributes is not None:
            children['link-attributes'] = _link_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo(link_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes.from_gdata(n.get_opt_container("link-attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo(link_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo__link_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "link-attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application(yang.adata.MNode):
    lfa: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa
    flex_algo: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo

    mut def __init__(self, lfa: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa=None, flex_algo: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if lfa is not None:
            self.lfa = lfa
        else:
            self.lfa = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa()
        self_lfa = self.lfa
        if self_lfa is not None:
            self_lfa._parent = self
        if flex_algo is not None:
            self.flex_algo = flex_algo
        else:
            self.flex_algo = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo()
        self_flex_algo = self.flex_algo
        if self_flex_algo is not None:
            self_flex_algo._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lfa = self.lfa
        _flex_algo = self.flex_algo
        if _lfa is not None:
            children['lfa'] = _lfa.to_gdata()
        if _flex_algo is not None:
            children['flex-algo'] = _flex_algo.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application(lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa.from_gdata(n.get_opt_container("lfa")), flex_algo=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo.from_gdata(n.get_opt_container("flex-algo")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application(lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__lfa.from_xml(yang.gdata.get_xml_opt_child(n, "lfa")), flex_algo=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application__flex_algo.from_xml(yang.gdata.get_xml_opt_child(n, "flex-algo")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise(yang.adata.MNode):
    passive_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only
    link: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link
    application: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application

    mut def __init__(self, passive_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only=None, link: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link=None, application: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.passive_only = passive_only
        self_passive_only = self.passive_only
        if self_passive_only is not None:
            self_passive_only._parent = self
        if link is not None:
            self.link = link
        else:
            self.link = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link()
        self_link = self.link
        if self_link is not None:
            self_link._parent = self
        if application is not None:
            self.application = application
        else:
            self.application = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application()
        self_application = self.application
        if self_application is not None:
            self_application._parent = self

    mut def create_passive_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only()
        self.passive_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _passive_only = self.passive_only
        _link = self.link
        _application = self.application
        if _passive_only is not None:
            children['passive-only'] = _passive_only.to_gdata()
        if _link is not None:
            children['link'] = _link.to_gdata()
        if _application is not None:
            children['application'] = _application.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise(passive_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only.from_gdata(n.get_opt_container("passive-only")), link=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link.from_gdata(n.get_opt_container("link")), application=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application.from_gdata(n.get_opt_container("application")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise(passive_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__passive_only.from_xml(yang.gdata.get_xml_opt_child(n, "passive-only")), link=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__link.from_xml(yang.gdata.get_xml_opt_child(n, "link")), application=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise__application.from_xml(yang.gdata.get_xml_opt_child(n, "application")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance__variance_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance__prefix_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance(yang.adata.MNode):
    variance_value: int
    prefix_list: ?str

    mut def __init__(self, variance_value: int, prefix_list: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.variance_value = variance_value
        self.prefix_list = prefix_list

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _variance_value = self.variance_value
        _prefix_list = self.prefix_list
        if _variance_value is not None:
            children['variance-value'] = yang.gdata.Leaf('uint32', _variance_value)
        if _prefix_list is not None:
            children['prefix-list'] = yang.gdata.Leaf('string', _prefix_list)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance(variance_value=n.get_int("variance-value"), prefix_list=n.get_opt_str("prefix-list"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance(variance_value=yang.gdata.from_xml_int(n, "variance-value"), prefix_list=yang.gdata.from_xml_opt_str(n, "prefix-list"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str

    mut def __init__(self, interface_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry(interface_name=n.get_str("interface-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude(yang.adata.MNode):
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces

    mut def __init__(self, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces.from_gdata(n.get_opt_container("interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__delay_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp(yang.adata.MNode):
    variance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance
    exclude: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude
    delay_interval: ?int

    mut def __init__(self, variance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance=None, exclude: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude=None, delay_interval: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.variance = variance
        self_variance = self.variance
        if self_variance is not None:
            self_variance._parent = self
        if exclude is not None:
            self.exclude = exclude
        else:
            self.exclude = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude()
        self_exclude = self.exclude
        if self_exclude is not None:
            self_exclude._parent = self
        self.delay_interval = delay_interval

    mut def create_variance(self, variance_value):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance(variance_value)
        self.variance = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _variance = self.variance
        _exclude = self.exclude
        _delay_interval = self.delay_interval
        if _variance is not None:
            children['variance'] = _variance.to_gdata()
        if _exclude is not None:
            children['exclude'] = _exclude.to_gdata()
        if _delay_interval is not None:
            children['delay-interval'] = yang.gdata.Leaf('uint32', _delay_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp(variance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance.from_gdata(n.get_opt_container("variance")), exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude.from_gdata(n.get_opt_container("exclude")), delay_interval=n.get_opt_int("delay-interval"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp(variance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__variance.from_xml(yang.gdata.get_xml_opt_child(n, "variance")), exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp__exclude.from_xml(yang.gdata.get_xml_opt_child(n, "exclude")), delay_interval=yang.gdata.from_xml_opt_int(n, "delay-interval"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance(yang.adata.MNode):
    type: ?str
    route_policy: ?str

    mut def __init__(self, type: ?str, route_policy: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.type = type
        self.route_policy = route_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        _route_policy = self.route_policy
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance(type=n.get_opt_str("type"), route_policy=n.get_opt_str("route-policy"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance(type=yang.gdata.from_xml_opt_str(n, "type"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance_rib_update_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop(yang.adata.MNode):
    avoidance: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance
    avoidance_rib_update_delay: ?int

    mut def __init__(self, avoidance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance=None, avoidance_rib_update_delay: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if avoidance is not None:
            self.avoidance = avoidance
        else:
            self.avoidance = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance()
        self_avoidance = self.avoidance
        if self_avoidance is not None:
            self_avoidance._parent = self
        self.avoidance_rib_update_delay = avoidance_rib_update_delay

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _avoidance = self.avoidance
        _avoidance_rib_update_delay = self.avoidance_rib_update_delay
        if _avoidance is not None:
            children['avoidance'] = _avoidance.to_gdata()
        if _avoidance_rib_update_delay is not None:
            children['avoidance-rib-update-delay'] = yang.gdata.Leaf('uint32', _avoidance_rib_update_delay)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop(avoidance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance.from_gdata(n.get_opt_container("avoidance")), avoidance_rib_update_delay=n.get_opt_int("avoidance-rib-update-delay"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop(avoidance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop__avoidance.from_xml(yang.gdata.get_xml_opt_child(n, "avoidance")), avoidance_rib_update_delay=yang.gdata.from_xml_opt_int(n, "avoidance-rib-update-delay"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only(yang.adata.MNode):
    bandwidth: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth

    mut def __init__(self, bandwidth: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.bandwidth = bandwidth
        self_bandwidth = self.bandwidth
        if self_bandwidth is not None:
            self_bandwidth._parent = self

    mut def create_bandwidth(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth()
        self.bandwidth = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bandwidth = self.bandwidth
        if _bandwidth is not None:
            children['bandwidth'] = _bandwidth.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only(bandwidth=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth.from_gdata(n.get_opt_container("bandwidth")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only(bandwidth=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only__bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "bandwidth")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight(yang.adata.MNode):
    ecmp_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only
    ucmp_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only

    mut def __init__(self, ecmp_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only=None, ucmp_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ecmp_only = ecmp_only
        self_ecmp_only = self.ecmp_only
        if self_ecmp_only is not None:
            self_ecmp_only._parent = self
        self.ucmp_only = ucmp_only
        self_ucmp_only = self.ucmp_only
        if self_ucmp_only is not None:
            self_ucmp_only._parent = self

    mut def create_ecmp_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only()
        self.ecmp_only = res
        return res

    mut def create_ucmp_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only()
        self.ucmp_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ecmp_only = self.ecmp_only
        _ucmp_only = self.ucmp_only
        if _ecmp_only is not None:
            children['ecmp-only'] = _ecmp_only.to_gdata()
        if _ucmp_only is not None:
            children['ucmp-only'] = _ucmp_only.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight(ecmp_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only.from_gdata(n.get_opt_container("ecmp-only")), ucmp_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only.from_gdata(n.get_opt_container("ucmp-only")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight(ecmp_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ecmp_only.from_xml(yang.gdata.get_xml_opt_child(n, "ecmp-only")), ucmp_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight__ucmp_only.from_xml(yang.gdata.get_xml_opt_child(n, "ucmp-only")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__address_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__unreachable_component_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable(yang.adata.MNode):
    unreachable_component_tag: ?int
    exclude: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude

    mut def __init__(self, unreachable_component_tag: ?int, exclude: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.unreachable_component_tag = unreachable_component_tag
        self.exclude = exclude
        self_exclude = self.exclude
        if self_exclude is not None:
            self_exclude._parent = self

    mut def create_exclude(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude()
        self.exclude = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unreachable_component_tag = self.unreachable_component_tag
        _exclude = self.exclude
        if _unreachable_component_tag is not None:
            children['unreachable-component-tag'] = yang.gdata.Leaf('uint32', _unreachable_component_tag)
        if _exclude is not None:
            children['exclude'] = _exclude.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable(unreachable_component_tag=n.get_opt_int("unreachable-component-tag"), exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude.from_gdata(n.get_opt_container("exclude")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable(unreachable_component_tag=yang.gdata.from_xml_opt_int(n, "unreachable-component-tag"), exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable__exclude.from_xml(yang.gdata.get_xml_opt_child(n, "exclude")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry(yang.adata.MNode):
    address_prefix: str
    tag: ?int
    level: ?int
    algorithm: ?int
    explicit: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit
    adv_unreachable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable
    partition_repair: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair

    mut def __init__(self, address_prefix: str, tag: ?int, level: ?int, algorithm: ?int, explicit: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit=None, adv_unreachable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable=None, partition_repair: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_prefix = address_prefix
        self.tag = tag
        self.level = level
        self.algorithm = algorithm
        self.explicit = explicit
        self_explicit = self.explicit
        if self_explicit is not None:
            self_explicit._parent = self
        self.adv_unreachable = adv_unreachable
        self_adv_unreachable = self.adv_unreachable
        if self_adv_unreachable is not None:
            self_adv_unreachable._parent = self
        self.partition_repair = partition_repair
        self_partition_repair = self.partition_repair
        if self_partition_repair is not None:
            self_partition_repair._parent = self

    mut def create_explicit(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit()
        self.explicit = res
        return res

    mut def create_adv_unreachable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable()
        self.adv_unreachable = res
        return res

    mut def create_partition_repair(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair()
        self.partition_repair = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_prefix = self.address_prefix
        _tag = self.tag
        _level = self.level
        _algorithm = self.algorithm
        _explicit = self.explicit
        _adv_unreachable = self.adv_unreachable
        _partition_repair = self.partition_repair
        if _address_prefix is not None:
            children['address-prefix'] = yang.gdata.Leaf('union', _address_prefix)
        if _tag is not None:
            children['tag'] = yang.gdata.Leaf('uint32', _tag)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        if _explicit is not None:
            children['explicit'] = _explicit.to_gdata()
        if _adv_unreachable is not None:
            children['adv-unreachable'] = _adv_unreachable.to_gdata()
        if _partition_repair is not None:
            children['partition-repair'] = _partition_repair.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry(address_prefix=n.get_str("address-prefix"), tag=n.get_opt_int("tag"), level=n.get_opt_int("level"), algorithm=n.get_opt_int("algorithm"), explicit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit.from_gdata(n.get_opt_container("explicit")), adv_unreachable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable.from_gdata(n.get_opt_container("adv-unreachable")), partition_repair=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair.from_gdata(n.get_opt_container("partition-repair")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry(address_prefix=yang.gdata.from_xml_str(n, "address-prefix"), tag=yang.gdata.from_xml_opt_int(n, "tag"), level=yang.gdata.from_xml_opt_int(n, "level"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"), explicit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__explicit.from_xml(yang.gdata.get_xml_opt_child(n, "explicit")), adv_unreachable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__adv_unreachable.from_xml(yang.gdata.get_xml_opt_child(n, "adv-unreachable")), partition_repair=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix__partition_repair.from_xml(yang.gdata.get_xml_opt_child(n, "partition-repair")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'summary-prefix'
        self.elements = elements

    mut def create(self, address_prefix):
        for e in self.elements:
            match = True
            if e.address_prefix != address_prefix:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry(address_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes(yang.adata.MNode):
    summary_prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix

    mut def __init__(self, summary_prefix: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.summary_prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix(elements=summary_prefix)
        self.summary_prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _summary_prefix = self.summary_prefix
        if _summary_prefix is not None:
            children['summary-prefix'] = _summary_prefix.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes(summary_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix.from_gdata(n.get_opt_list("summary-prefix")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes(summary_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes__summary_prefix.from_xml(yang.gdata.get_xml_children(n, "summary-prefix")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__default_metric_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level__default_metric_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    default_metric_value: int

    mut def __init__(self, level_id: int, default_metric_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.default_metric_value = default_metric_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _default_metric_value = self.default_metric_value
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _default_metric_value is not None:
            children['default-metric-value'] = yang.gdata.Leaf('uint32', _default_metric_value)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry(level_id=n.get_int("level-id"), default_metric_value=n.get_int("default-metric-value"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), default_metric_value=yang.gdata.from_xml_int(n, "default-metric-value"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, default_metric_value):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry(level_id, default_metric_value)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric(yang.adata.MNode):
    default_metric_value: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels

    mut def __init__(self, default_metric_value: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.default_metric_value = default_metric_value
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric_value = self.default_metric_value
        _levels = self.levels
        if _default_metric_value is not None:
            children['default-metric-value'] = yang.gdata.Leaf('uint32', _default_metric_value)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric(default_metric_value=n.get_opt_int("default-metric-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric(default_metric_value=yang.gdata.from_xml_opt_int(n, "default-metric-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric(yang.adata.MNode):
    default_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric

    mut def __init__(self, default_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if default_metric is not None:
            self.default_metric = default_metric
        else:
            self.default_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric()
        self_default_metric = self.default_metric
        if self_default_metric is not None:
            self_default_metric._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric = self.default_metric
        if _default_metric is not None:
            children['default-metric'] = _default_metric.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric(default_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric.from_gdata(n.get_opt_container("default-metric")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric(default_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric__default_metric.from_xml(yang.gdata.get_xml_opt_child(n, "default-metric")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(yang.adata.MNode):
    level_id: int
    narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow
    wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide
    transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition

    mut def __init__(self, level_id: int, narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow=None, wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide=None, transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.narrow = narrow
        self_narrow = self.narrow
        if self_narrow is not None:
            self_narrow._parent = self
        self.wide = wide
        self_wide = self.wide
        if self_wide is not None:
            self_wide._parent = self
        self.transition = transition
        self_transition = self.transition
        if self_transition is not None:
            self_transition._parent = self

    mut def create_narrow(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow()
        self.narrow = res
        return res

    mut def create_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide()
        self.wide = res
        return res

    mut def create_transition(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition()
        self.transition = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _narrow = self.narrow
        _wide = self.wide
        _transition = self.transition
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _narrow is not None:
            children['narrow'] = _narrow.to_gdata()
        if _wide is not None:
            children['wide'] = _wide.to_gdata()
        if _transition is not None:
            children['transition'] = _transition.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(level_id=n.get_int("level-id"), narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow.from_gdata(n.get_opt_container("narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide.from_gdata(n.get_opt_container("wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition.from_gdata(n.get_opt_container("transition")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow.from_xml(yang.gdata.get_xml_opt_child(n, "narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide.from_xml(yang.gdata.get_xml_opt_child(n, "wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition.from_xml(yang.gdata.get_xml_opt_child(n, "transition")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(yang.adata.MNode):
    narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow
    wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide
    transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels

    mut def __init__(self, narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow=None, wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide=None, transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.narrow = narrow
        self_narrow = self.narrow
        if self_narrow is not None:
            self_narrow._parent = self
        self.wide = wide
        self_wide = self.wide
        if self_wide is not None:
            self_wide._parent = self
        self.transition = transition
        self_transition = self.transition
        if self_transition is not None:
            self_transition._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_narrow(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow()
        self.narrow = res
        return res

    mut def create_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide()
        self.wide = res
        return res

    mut def create_transition(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition()
        self.transition = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _narrow = self.narrow
        _wide = self.wide
        _transition = self.transition
        _levels = self.levels
        if _narrow is not None:
            children['narrow'] = _narrow.to_gdata()
        if _wide is not None:
            children['wide'] = _wide.to_gdata()
        if _transition is not None:
            children['transition'] = _transition.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow.from_gdata(n.get_opt_container("narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide.from_gdata(n.get_opt_container("wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition.from_gdata(n.get_opt_container("transition")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow.from_xml(yang.gdata.get_xml_opt_child(n, "narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide.from_xml(yang.gdata.get_xml_opt_child(n, "wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition.from_xml(yang.gdata.get_xml_opt_child(n, "transition")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf__initial_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf__short_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf__long_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf__learn_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf__holddown_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf(yang.adata.MNode):
    initial_wait_time: ?int
    short_wait_time: ?int
    long_wait_time: ?int
    learn_interval_time: ?int
    holddown_interval_time: ?int

    mut def __init__(self, initial_wait_time: ?int, short_wait_time: ?int, long_wait_time: ?int, learn_interval_time: ?int, holddown_interval_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.initial_wait_time = initial_wait_time
        self.short_wait_time = short_wait_time
        self.long_wait_time = long_wait_time
        self.learn_interval_time = learn_interval_time
        self.holddown_interval_time = holddown_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait_time = self.initial_wait_time
        _short_wait_time = self.short_wait_time
        _long_wait_time = self.long_wait_time
        _learn_interval_time = self.learn_interval_time
        _holddown_interval_time = self.holddown_interval_time
        if _initial_wait_time is not None:
            children['initial-wait-time'] = yang.gdata.Leaf('uint32', _initial_wait_time)
        if _short_wait_time is not None:
            children['short-wait-time'] = yang.gdata.Leaf('uint32', _short_wait_time)
        if _long_wait_time is not None:
            children['long-wait-time'] = yang.gdata.Leaf('uint32', _long_wait_time)
        if _learn_interval_time is not None:
            children['learn-interval-time'] = yang.gdata.Leaf('uint32', _learn_interval_time)
        if _holddown_interval_time is not None:
            children['holddown-interval-time'] = yang.gdata.Leaf('uint32', _holddown_interval_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf(initial_wait_time=n.get_opt_int("initial-wait-time"), short_wait_time=n.get_opt_int("short-wait-time"), long_wait_time=n.get_opt_int("long-wait-time"), learn_interval_time=n.get_opt_int("learn-interval-time"), holddown_interval_time=n.get_opt_int("holddown-interval-time"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf(initial_wait_time=yang.gdata.from_xml_opt_int(n, "initial-wait-time"), short_wait_time=yang.gdata.from_xml_opt_int(n, "short-wait-time"), long_wait_time=yang.gdata.from_xml_opt_int(n, "long-wait-time"), learn_interval_time=yang.gdata.from_xml_opt_int(n, "learn-interval-time"), holddown_interval_time=yang.gdata.from_xml_opt_int(n, "holddown-interval-time"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait__maximum_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait(yang.adata.MNode):
    maximum_wait_time: ?int

    mut def __init__(self, maximum_wait_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.maximum_wait_time = maximum_wait_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_wait_time = self.maximum_wait_time
        if _maximum_wait_time is not None:
            children['maximum-wait-time'] = yang.gdata.Leaf('uint32', _maximum_wait_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait(maximum_wait_time=n.get_opt_int("maximum-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait(maximum_wait_time=yang.gdata.from_xml_opt_int(n, "maximum-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait__initial_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait(yang.adata.MNode):
    initial_wait_time: ?int

    mut def __init__(self, initial_wait_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.initial_wait_time = initial_wait_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait_time = self.initial_wait_time
        if _initial_wait_time is not None:
            children['initial-wait-time'] = yang.gdata.Leaf('uint32', _initial_wait_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait(initial_wait_time=n.get_opt_int("initial-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait(initial_wait_time=yang.gdata.from_xml_opt_int(n, "initial-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait__secondary_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait(yang.adata.MNode):
    secondary_wait_time: ?int

    mut def __init__(self, secondary_wait_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.secondary_wait_time = secondary_wait_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _secondary_wait_time = self.secondary_wait_time
        if _secondary_wait_time is not None:
            children['secondary-wait-time'] = yang.gdata.Leaf('uint32', _secondary_wait_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait(secondary_wait_time=n.get_opt_int("secondary-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait(secondary_wait_time=yang.gdata.from_xml_opt_int(n, "secondary-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf__initial_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf__short_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf__long_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf__learn_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf__holddown_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf(yang.adata.MNode):
    initial_wait_time: ?int
    short_wait_time: ?int
    long_wait_time: ?int
    learn_interval_time: ?int
    holddown_interval_time: ?int

    mut def __init__(self, initial_wait_time: ?int, short_wait_time: ?int, long_wait_time: ?int, learn_interval_time: ?int, holddown_interval_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.initial_wait_time = initial_wait_time
        self.short_wait_time = short_wait_time
        self.long_wait_time = long_wait_time
        self.learn_interval_time = learn_interval_time
        self.holddown_interval_time = holddown_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait_time = self.initial_wait_time
        _short_wait_time = self.short_wait_time
        _long_wait_time = self.long_wait_time
        _learn_interval_time = self.learn_interval_time
        _holddown_interval_time = self.holddown_interval_time
        if _initial_wait_time is not None:
            children['initial-wait-time'] = yang.gdata.Leaf('uint32', _initial_wait_time)
        if _short_wait_time is not None:
            children['short-wait-time'] = yang.gdata.Leaf('uint32', _short_wait_time)
        if _long_wait_time is not None:
            children['long-wait-time'] = yang.gdata.Leaf('uint32', _long_wait_time)
        if _learn_interval_time is not None:
            children['learn-interval-time'] = yang.gdata.Leaf('uint32', _learn_interval_time)
        if _holddown_interval_time is not None:
            children['holddown-interval-time'] = yang.gdata.Leaf('uint32', _holddown_interval_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf(initial_wait_time=n.get_opt_int("initial-wait-time"), short_wait_time=n.get_opt_int("short-wait-time"), long_wait_time=n.get_opt_int("long-wait-time"), learn_interval_time=n.get_opt_int("learn-interval-time"), holddown_interval_time=n.get_opt_int("holddown-interval-time"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf(initial_wait_time=yang.gdata.from_xml_opt_int(n, "initial-wait-time"), short_wait_time=yang.gdata.from_xml_opt_int(n, "short-wait-time"), long_wait_time=yang.gdata.from_xml_opt_int(n, "long-wait-time"), learn_interval_time=yang.gdata.from_xml_opt_int(n, "learn-interval-time"), holddown_interval_time=yang.gdata.from_xml_opt_int(n, "holddown-interval-time"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__maximum_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__initial_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__secondary_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry(yang.adata.MNode):
    level_id: int
    ietf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf
    maximum_wait_time: ?int
    initial_wait_time: ?int
    secondary_wait_time: ?int

    mut def __init__(self, level_id: int, ietf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf=None, maximum_wait_time: ?int, initial_wait_time: ?int, secondary_wait_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.ietf = ietf
        self_ietf = self.ietf
        if self_ietf is not None:
            self_ietf._parent = self
        self.maximum_wait_time = maximum_wait_time
        self.initial_wait_time = initial_wait_time
        self.secondary_wait_time = secondary_wait_time

    mut def create_ietf(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf()
        self.ietf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _ietf = self.ietf
        _maximum_wait_time = self.maximum_wait_time
        _initial_wait_time = self.initial_wait_time
        _secondary_wait_time = self.secondary_wait_time
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _ietf is not None:
            children['ietf'] = _ietf.to_gdata()
        if _maximum_wait_time is not None:
            children['maximum-wait-time'] = yang.gdata.Leaf('uint32', _maximum_wait_time)
        if _initial_wait_time is not None:
            children['initial-wait-time'] = yang.gdata.Leaf('uint32', _initial_wait_time)
        if _secondary_wait_time is not None:
            children['secondary-wait-time'] = yang.gdata.Leaf('uint32', _secondary_wait_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry(level_id=n.get_int("level-id"), ietf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf.from_gdata(n.get_opt_container("ietf")), maximum_wait_time=n.get_opt_int("maximum-wait-time"), initial_wait_time=n.get_opt_int("initial-wait-time"), secondary_wait_time=n.get_opt_int("secondary-wait-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), ietf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level__ietf.from_xml(yang.gdata.get_xml_opt_child(n, "ietf")), maximum_wait_time=yang.gdata.from_xml_opt_int(n, "maximum-wait-time"), initial_wait_time=yang.gdata.from_xml_opt_int(n, "initial-wait-time"), secondary_wait_time=yang.gdata.from_xml_opt_int(n, "secondary-wait-time"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval(yang.adata.MNode):
    ietf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf
    maximum_wait: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait
    initial_wait: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait
    secondary_wait: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels

    mut def __init__(self, ietf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf=None, maximum_wait: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait=None, initial_wait: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait=None, secondary_wait: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ietf = ietf
        self_ietf = self.ietf
        if self_ietf is not None:
            self_ietf._parent = self
        if maximum_wait is not None:
            self.maximum_wait = maximum_wait
        else:
            self.maximum_wait = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait()
        self_maximum_wait = self.maximum_wait
        if self_maximum_wait is not None:
            self_maximum_wait._parent = self
        if initial_wait is not None:
            self.initial_wait = initial_wait
        else:
            self.initial_wait = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait()
        self_initial_wait = self.initial_wait
        if self_initial_wait is not None:
            self_initial_wait._parent = self
        if secondary_wait is not None:
            self.secondary_wait = secondary_wait
        else:
            self.secondary_wait = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait()
        self_secondary_wait = self.secondary_wait
        if self_secondary_wait is not None:
            self_secondary_wait._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_ietf(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf()
        self.ietf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ietf = self.ietf
        _maximum_wait = self.maximum_wait
        _initial_wait = self.initial_wait
        _secondary_wait = self.secondary_wait
        _levels = self.levels
        if _ietf is not None:
            children['ietf'] = _ietf.to_gdata()
        if _maximum_wait is not None:
            children['maximum-wait'] = _maximum_wait.to_gdata()
        if _initial_wait is not None:
            children['initial-wait'] = _initial_wait.to_gdata()
        if _secondary_wait is not None:
            children['secondary-wait'] = _secondary_wait.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval(ietf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf.from_gdata(n.get_opt_container("ietf")), maximum_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait.from_gdata(n.get_opt_container("maximum-wait")), initial_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait.from_gdata(n.get_opt_container("initial-wait")), secondary_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait.from_gdata(n.get_opt_container("secondary-wait")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval(ietf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__ietf.from_xml(yang.gdata.get_xml_opt_child(n, "ietf")), maximum_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__maximum_wait.from_xml(yang.gdata.get_xml_opt_child(n, "maximum-wait")), initial_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__initial_wait.from_xml(yang.gdata.get_xml_opt_child(n, "initial-wait")), secondary_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__secondary_wait.from_xml(yang.gdata.get_xml_opt_child(n, "secondary-wait")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry(yang.adata.MNode):
    level_id: int
    interval: value

    mut def __init__(self, level_id: int, interval: value):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.interval = interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _interval = self.interval
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('union', _interval)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry(level_id=n.get_int("level-id"), interval=n.get_value("interval"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), interval=yang.gdata.from_xml_value(n, "interval"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, interval):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry(level_id, interval)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic(yang.adata.MNode):
    interval: ?value
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels

    mut def __init__(self, interval: ?value, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interval = interval
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interval = self.interval
        _levels = self.levels
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('union', _interval)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic(interval=n.get_opt_value("interval"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic(interval=yang.gdata.from_xml_opt_value(n, "interval"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority__tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority__access_list_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry(yang.adata.MNode):
    priority: str
    tag: ?int
    access_list_name: ?str

    mut def __init__(self, priority: str, tag: ?int, access_list_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.priority = priority
        self.tag = tag
        self.access_list_name = access_list_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        _tag = self.tag
        _access_list_name = self.access_list_name
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        if _tag is not None:
            children['tag'] = yang.gdata.Leaf('uint32', _tag)
        if _access_list_name is not None:
            children['access-list-name'] = yang.gdata.Leaf('string', _access_list_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.priority)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry(priority=n.get_str("priority"), tag=n.get_opt_int("tag"), access_list_name=n.get_opt_str("access-list-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry(priority=yang.gdata.from_xml_str(n, "priority"), tag=yang.gdata.from_xml_opt_int(n, "tag"), access_list_name=yang.gdata.from_xml_opt_str(n, "access-list-name"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'prefix-priority'
        self.elements = elements

    mut def create(self, priority):
        for e in self.elements:
            match = True
            if e.priority != priority:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry(priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['priority'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level__tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level__access_list_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry(yang.adata.MNode):
    level_id: int
    priority: str
    tag: ?int
    access_list_name: ?str

    mut def __init__(self, level_id: int, priority: str, tag: ?int, access_list_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.priority = priority
        self.tag = tag
        self.access_list_name = access_list_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _priority = self.priority
        _tag = self.tag
        _access_list_name = self.access_list_name
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        if _tag is not None:
            children['tag'] = yang.gdata.Leaf('uint32', _tag)
        if _access_list_name is not None:
            children['access-list-name'] = yang.gdata.Leaf('string', _access_list_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id), yang.gdata.yang_str(self.priority)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry(level_id=n.get_int("level-id"), priority=n.get_str("priority"), tag=n.get_opt_int("tag"), access_list_name=n.get_opt_str("access-list-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), priority=yang.gdata.from_xml_str(n, "priority"), tag=yang.gdata.from_xml_opt_int(n, "tag"), access_list_name=yang.gdata.from_xml_opt_str(n, "access-list-name"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, priority):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if e.priority != priority:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry(level_id, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id', 'priority'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority(yang.adata.MNode):
    prefix_priority: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels

    mut def __init__(self, prefix_priority: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority_entry]=[], levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix_priority = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority(elements=prefix_priority)
        self.prefix_priority._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_priority = self.prefix_priority
        _levels = self.levels
        if _prefix_priority is not None:
            children['prefix-priority'] = _prefix_priority.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority(prefix_priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority.from_gdata(n.get_opt_list("prefix-priority")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority(prefix_priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__prefix_priority.from_xml(yang.gdata.get_xml_children(n, "prefix-priority")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf(yang.adata.MNode):
    periodic: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic
    prefix_priority: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority

    mut def __init__(self, periodic: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic=None, prefix_priority: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if periodic is not None:
            self.periodic = periodic
        else:
            self.periodic = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic()
        self_periodic = self.periodic
        if self_periodic is not None:
            self_periodic._parent = self
        if prefix_priority is not None:
            self.prefix_priority = prefix_priority
        else:
            self.prefix_priority = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority()
        self_prefix_priority = self.prefix_priority
        if self_prefix_priority is not None:
            self_prefix_priority._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _periodic = self.periodic
        _prefix_priority = self.prefix_priority
        if _periodic is not None:
            children['periodic'] = _periodic.to_gdata()
        if _prefix_priority is not None:
            children['prefix-priority'] = _prefix_priority.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf(periodic=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic.from_gdata(n.get_opt_container("periodic")), prefix_priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority.from_gdata(n.get_opt_container("prefix-priority")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf(periodic=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__periodic.from_xml(yang.gdata.get_xml_opt_child(n, "periodic")), prefix_priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf__prefix_priority.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-priority")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__maximum_prefixes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level__maximum_prefixes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry(yang.adata.MNode):
    level_id: int
    maximum_prefixes: int

    mut def __init__(self, level_id: int, maximum_prefixes: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.maximum_prefixes = maximum_prefixes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _maximum_prefixes = self.maximum_prefixes
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _maximum_prefixes is not None:
            children['maximum-prefixes'] = yang.gdata.Leaf('uint32', _maximum_prefixes)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry(level_id=n.get_int("level-id"), maximum_prefixes=n.get_int("maximum-prefixes"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), maximum_prefixes=yang.gdata.from_xml_int(n, "maximum-prefixes"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, maximum_prefixes):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry(level_id, maximum_prefixes)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes(yang.adata.MNode):
    maximum_prefixes: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels

    mut def __init__(self, maximum_prefixes: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.maximum_prefixes = maximum_prefixes
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_prefixes = self.maximum_prefixes
        _levels = self.levels
        if _maximum_prefixes is not None:
            children['maximum-prefixes'] = yang.gdata.Leaf('uint32', _maximum_prefixes)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes(maximum_prefixes=n.get_opt_int("maximum-prefixes"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes(maximum_prefixes=yang.gdata.from_xml_opt_int(n, "maximum-prefixes"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate__into_level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry(yang.adata.MNode):
    level: int
    into_level: int
    route_policy: str

    mut def __init__(self, level: int, into_level: int, route_policy: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = level
        self.into_level = into_level
        self.route_policy = route_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        _into_level = self.into_level
        _route_policy = self.route_policy
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        if _into_level is not None:
            children['into-level'] = yang.gdata.Leaf('uint32', _into_level)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level), yang.gdata.yang_str(self.into_level)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry(level=n.get_int("level"), into_level=n.get_int("into-level"), route_policy=n.get_str("route-policy"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry(level=yang.gdata.from_xml_int(n, "level"), into_level=yang.gdata.from_xml_int(n, "into-level"), route_policy=yang.gdata.from_xml_str(n, "route-policy"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'propagate'
        self.elements = elements

    mut def create(self, level, into_level, route_policy):
        for e in self.elements:
            match = True
            if e.level != level:
                match = False
                continue
            if e.into_level != into_level:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry(level, into_level, route_policy)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level', 'into-level'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates(yang.adata.MNode):
    propagate: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate

    mut def __init__(self, propagate: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.propagate = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate(elements=propagate)
        self.propagate._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _propagate = self.propagate
        if _propagate is not None:
            children['propagate'] = _propagate.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates(propagate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate.from_gdata(n.get_opt_list("propagate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates(propagate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates__propagate.from_xml(yang.gdata.get_xml_children(n, "propagate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check(disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check(disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source(yang.adata.MNode):
    first_hop: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop

    mut def __init__(self, first_hop: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.first_hop = first_hop
        self_first_hop = self.first_hop
        if self_first_hop is not None:
            self_first_hop._parent = self

    mut def create_first_hop(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop()
        self.first_hop = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _first_hop = self.first_hop
        if _first_hop is not None:
            children['first-hop'] = _first_hop.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source(first_hop=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop.from_gdata(n.get_opt_container("first-hop")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source(first_hop=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source__first_hop.from_xml(yang.gdata.get_xml_opt_child(n, "first-hop")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route(yang.adata.MNode):
    source: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source

    mut def __init__(self, source: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if source is not None:
            self.source = source
        else:
            self.source = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source()
        self_source = self.source
        if self_source is not None:
            self_source._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source = self.source
        if _source is not None:
            children['source'] = _source.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route(source=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source.from_gdata(n.get_opt_container("source")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route(source=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route__source.from_xml(yang.gdata.get_xml_opt_child(n, "source")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send(yang.adata.MNode):
    always_set: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set
    never_set: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set

    mut def __init__(self, always_set: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set=None, never_set: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.always_set = always_set
        self_always_set = self.always_set
        if self_always_set is not None:
            self_always_set._parent = self
        self.never_set = never_set
        self_never_set = self.never_set
        if self_never_set is not None:
            self_never_set._parent = self

    mut def create_always_set(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set()
        self.always_set = res
        return res

    mut def create_never_set(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set()
        self.never_set = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always_set = self.always_set
        _never_set = self.never_set
        if _always_set is not None:
            children['always-set'] = _always_set.to_gdata()
        if _never_set is not None:
            children['never-set'] = _never_set.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send(always_set=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set.from_gdata(n.get_opt_container("always-set")), never_set=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set.from_gdata(n.get_opt_container("never-set")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send(always_set=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__always_set.from_xml(yang.gdata.get_xml_opt_child(n, "always-set")), never_set=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send__never_set.from_xml(yang.gdata.get_xml_opt_child(n, "never-set")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive(yang.adata.MNode):
    ignore: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore

    mut def __init__(self, ignore: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ignore = ignore
        self_ignore = self.ignore
        if self_ignore is not None:
            self_ignore._parent = self

    mut def create_ignore(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore()
        self.ignore = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ignore = self.ignore
        if _ignore is not None:
            children['ignore'] = _ignore.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive(ignore=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore.from_gdata(n.get_opt_container("ignore")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive(ignore=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive__ignore.from_xml(yang.gdata.get_xml_opt_child(n, "ignore")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit(yang.adata.MNode):
    send: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send
    receive: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive

    mut def __init__(self, send: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send=None, receive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if send is not None:
            self.send = send
        else:
            self.send = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send()
        self_send = self.send
        if self_send is not None:
            self_send._parent = self
        if receive is not None:
            self.receive = receive
        else:
            self.receive = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive()
        self_receive = self.receive
        if self_receive is not None:
            self_receive._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send = self.send
        _receive = self.receive
        if _send is not None:
            children['send'] = _send.to_gdata()
        if _receive is not None:
            children['receive'] = _receive.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit(send=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send.from_gdata(n.get_opt_container("send")), receive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive.from_gdata(n.get_opt_container("receive")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit(send=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__send.from_xml(yang.gdata.get_xml_opt_child(n, "send")), receive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit__receive.from_xml(yang.gdata.get_xml_opt_child(n, "receive")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__delay_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry(yang.adata.MNode):
    level_id: int
    critical: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical
    high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high
    medium: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium

    mut def __init__(self, level_id: int, critical: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical=None, high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high=None, medium: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.critical = critical
        self_critical = self.critical
        if self_critical is not None:
            self_critical._parent = self
        self.high = high
        self_high = self.high
        if self_high is not None:
            self_high._parent = self
        self.medium = medium
        self_medium = self.medium
        if self_medium is not None:
            self_medium._parent = self

    mut def create_critical(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical()
        self.critical = res
        return res

    mut def create_high(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high()
        self.high = res
        return res

    mut def create_medium(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium()
        self.medium = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _critical = self.critical
        _high = self.high
        _medium = self.medium
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _critical is not None:
            children['critical'] = _critical.to_gdata()
        if _high is not None:
            children['high'] = _high.to_gdata()
        if _medium is not None:
            children['medium'] = _medium.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry(level_id=n.get_int("level-id"), critical=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical.from_gdata(n.get_opt_container("critical")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high.from_gdata(n.get_opt_container("high")), medium=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium.from_gdata(n.get_opt_container("medium")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), critical=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__critical.from_xml(yang.gdata.get_xml_opt_child(n, "critical")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__high.from_xml(yang.gdata.get_xml_opt_child(n, "high")), medium=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level__medium.from_xml(yang.gdata.get_xml_opt_child(n, "medium")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit(yang.adata.MNode):
    critical: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical
    high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high
    medium: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels

    mut def __init__(self, critical: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical=None, high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high=None, medium: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.critical = critical
        self_critical = self.critical
        if self_critical is not None:
            self_critical._parent = self
        self.high = high
        self_high = self.high
        if self_high is not None:
            self_high._parent = self
        self.medium = medium
        self_medium = self.medium
        if self_medium is not None:
            self_medium._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_critical(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical()
        self.critical = res
        return res

    mut def create_high(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high()
        self.high = res
        return res

    mut def create_medium(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium()
        self.medium = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _critical = self.critical
        _high = self.high
        _medium = self.medium
        _levels = self.levels
        if _critical is not None:
            children['critical'] = _critical.to_gdata()
        if _high is not None:
            children['high'] = _high.to_gdata()
        if _medium is not None:
            children['medium'] = _medium.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit(critical=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical.from_gdata(n.get_opt_container("critical")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high.from_gdata(n.get_opt_container("high")), medium=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium.from_gdata(n.get_opt_container("medium")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit(critical=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__critical.from_xml(yang.gdata.get_xml_opt_child(n, "critical")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__high.from_xml(yang.gdata.get_xml_opt_child(n, "high")), medium=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__medium.from_xml(yang.gdata.get_xml_opt_child(n, "medium")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry(yang.adata.MNode):
    level_id: int
    candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only

    mut def __init__(self, level_id: int, candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.candidate_only = candidate_only
        self_candidate_only = self.candidate_only
        if self_candidate_only is not None:
            self_candidate_only._parent = self

    mut def create_candidate_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only()
        self.candidate_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _candidate_only = self.candidate_only
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _candidate_only is not None:
            children['candidate-only'] = _candidate_only.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry(level_id=n.get_int("level-id"), candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only.from_gdata(n.get_opt_container("candidate-only")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level__candidate_only.from_xml(yang.gdata.get_xml_opt_child(n, "candidate-only")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only(yang.adata.MNode):
    candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels

    mut def __init__(self, candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.candidate_only = candidate_only
        self_candidate_only = self.candidate_only
        if self_candidate_only is not None:
            self_candidate_only._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_candidate_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only()
        self.candidate_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _candidate_only = self.candidate_only
        _levels = self.levels
        if _candidate_only is not None:
            children['candidate-only'] = _candidate_only.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only(candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only.from_gdata(n.get_opt_container("candidate-only")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only(candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__candidate_only.from_xml(yang.gdata.get_xml_opt_child(n, "candidate-only")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link(yang.adata.MNode):
    priority_limit: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit
    use_candidate_only: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only

    mut def __init__(self, priority_limit: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit=None, use_candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if priority_limit is not None:
            self.priority_limit = priority_limit
        else:
            self.priority_limit = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit()
        self_priority_limit = self.priority_limit
        if self_priority_limit is not None:
            self_priority_limit._parent = self
        if use_candidate_only is not None:
            self.use_candidate_only = use_candidate_only
        else:
            self.use_candidate_only = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only()
        self_use_candidate_only = self.use_candidate_only
        if self_use_candidate_only is not None:
            self_use_candidate_only._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority_limit = self.priority_limit
        _use_candidate_only = self.use_candidate_only
        if _priority_limit is not None:
            children['priority-limit'] = _priority_limit.to_gdata()
        if _use_candidate_only is not None:
            children['use-candidate-only'] = _use_candidate_only.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link(priority_limit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit.from_gdata(n.get_opt_container("priority-limit")), use_candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only.from_gdata(n.get_opt_container("use-candidate-only")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link(priority_limit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__priority_limit.from_xml(yang.gdata.get_xml_opt_child(n, "priority-limit")), use_candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link__use_candidate_only.from_xml(yang.gdata.get_xml_opt_child(n, "use-candidate-only")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry(yang.adata.MNode):
    level_id: int
    critical: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical
    high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high
    medium: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium

    mut def __init__(self, level_id: int, critical: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical=None, high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high=None, medium: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.critical = critical
        self_critical = self.critical
        if self_critical is not None:
            self_critical._parent = self
        self.high = high
        self_high = self.high
        if self_high is not None:
            self_high._parent = self
        self.medium = medium
        self_medium = self.medium
        if self_medium is not None:
            self_medium._parent = self

    mut def create_critical(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical()
        self.critical = res
        return res

    mut def create_high(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high()
        self.high = res
        return res

    mut def create_medium(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium()
        self.medium = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _critical = self.critical
        _high = self.high
        _medium = self.medium
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _critical is not None:
            children['critical'] = _critical.to_gdata()
        if _high is not None:
            children['high'] = _high.to_gdata()
        if _medium is not None:
            children['medium'] = _medium.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry(level_id=n.get_int("level-id"), critical=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical.from_gdata(n.get_opt_container("critical")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high.from_gdata(n.get_opt_container("high")), medium=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium.from_gdata(n.get_opt_container("medium")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), critical=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__critical.from_xml(yang.gdata.get_xml_opt_child(n, "critical")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__high.from_xml(yang.gdata.get_xml_opt_child(n, "high")), medium=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level__medium.from_xml(yang.gdata.get_xml_opt_child(n, "medium")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit(yang.adata.MNode):
    critical: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical
    high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high
    medium: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels

    mut def __init__(self, critical: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical=None, high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high=None, medium: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.critical = critical
        self_critical = self.critical
        if self_critical is not None:
            self_critical._parent = self
        self.high = high
        self_high = self.high
        if self_high is not None:
            self_high._parent = self
        self.medium = medium
        self_medium = self.medium
        if self_medium is not None:
            self_medium._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_critical(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical()
        self.critical = res
        return res

    mut def create_high(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high()
        self.high = res
        return res

    mut def create_medium(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium()
        self.medium = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _critical = self.critical
        _high = self.high
        _medium = self.medium
        _levels = self.levels
        if _critical is not None:
            children['critical'] = _critical.to_gdata()
        if _high is not None:
            children['high'] = _high.to_gdata()
        if _medium is not None:
            children['medium'] = _medium.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit(critical=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical.from_gdata(n.get_opt_container("critical")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high.from_gdata(n.get_opt_container("high")), medium=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium.from_gdata(n.get_opt_container("medium")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit(critical=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__critical.from_xml(yang.gdata.get_xml_opt_child(n, "critical")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__high.from_xml(yang.gdata.get_xml_opt_child(n, "high")), medium=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__medium.from_xml(yang.gdata.get_xml_opt_child(n, "medium")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry(yang.adata.MNode):
    level_id: int
    candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only

    mut def __init__(self, level_id: int, candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.candidate_only = candidate_only
        self_candidate_only = self.candidate_only
        if self_candidate_only is not None:
            self_candidate_only._parent = self

    mut def create_candidate_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only()
        self.candidate_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _candidate_only = self.candidate_only
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _candidate_only is not None:
            children['candidate-only'] = _candidate_only.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry(level_id=n.get_int("level-id"), candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only.from_gdata(n.get_opt_container("candidate-only")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level__candidate_only.from_xml(yang.gdata.get_xml_opt_child(n, "candidate-only")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only(yang.adata.MNode):
    candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels

    mut def __init__(self, candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.candidate_only = candidate_only
        self_candidate_only = self.candidate_only
        if self_candidate_only is not None:
            self_candidate_only._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_candidate_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only()
        self.candidate_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _candidate_only = self.candidate_only
        _levels = self.levels
        if _candidate_only is not None:
            children['candidate-only'] = _candidate_only.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only(candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only.from_gdata(n.get_opt_container("candidate-only")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only(candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__candidate_only.from_xml(yang.gdata.get_xml_opt_child(n, "candidate-only")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry(yang.adata.MNode):
    level_id: int
    index: int

    mut def __init__(self, level_id: int, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _index = self.index
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry(level_id=n.get_int("level-id"), index=n.get_int("index"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), index=yang.gdata.from_xml_int(n, "index"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, index):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry(level_id, index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream(yang.adata.MNode):
    index: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels

    mut def __init__(self, index: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _levels = self.levels
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream(index=n.get_opt_int("index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream(index=yang.gdata.from_xml_opt_int(n, "index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry(yang.adata.MNode):
    level_id: int
    index: int

    mut def __init__(self, level_id: int, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _index = self.index
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry(level_id=n.get_int("level-id"), index=n.get_int("index"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), index=yang.gdata.from_xml_int(n, "index"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, index):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry(level_id, index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint(yang.adata.MNode):
    index: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels

    mut def __init__(self, index: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _levels = self.levels
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint(index=n.get_opt_int("index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint(index=yang.gdata.from_xml_opt_int(n, "index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    index: int

    mut def __init__(self, level_id: int, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _index = self.index
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry(level_id=n.get_int("level-id"), index=n.get_int("index"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), index=yang.gdata.from_xml_int(n, "index"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, index):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry(level_id, index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric(yang.adata.MNode):
    index: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels

    mut def __init__(self, index: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _levels = self.levels
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric(index=n.get_opt_int("index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric(index=yang.gdata.from_xml_opt_int(n, "index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry(yang.adata.MNode):
    level_id: int
    index: int

    mut def __init__(self, level_id: int, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _index = self.index
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry(level_id=n.get_int("level-id"), index=n.get_int("index"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), index=yang.gdata.from_xml_int(n, "index"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, index):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry(level_id, index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting(yang.adata.MNode):
    index: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels

    mut def __init__(self, index: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _levels = self.levels
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting(index=n.get_opt_int("index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting(index=yang.gdata.from_xml_opt_int(n, "index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry(yang.adata.MNode):
    level_id: int
    index: int

    mut def __init__(self, level_id: int, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _index = self.index
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry(level_id=n.get_int("level-id"), index=n.get_int("index"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), index=yang.gdata.from_xml_int(n, "index"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, index):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry(level_id, index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path(yang.adata.MNode):
    index: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels

    mut def __init__(self, index: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _levels = self.levels
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path(index=n.get_opt_int("index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path(index=yang.gdata.from_xml_opt_int(n, "index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry(yang.adata.MNode):
    level_id: int
    index: int

    mut def __init__(self, level_id: int, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _index = self.index
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry(level_id=n.get_int("level-id"), index=n.get_int("index"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), index=yang.gdata.from_xml_int(n, "index"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, index):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry(level_id, index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path(yang.adata.MNode):
    index: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels

    mut def __init__(self, index: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _levels = self.levels
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path(index=n.get_opt_int("index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path(index=yang.gdata.from_xml_opt_int(n, "index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry(yang.adata.MNode):
    level_id: int
    index: int

    mut def __init__(self, level_id: int, index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _index = self.index
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry(level_id=n.get_int("level-id"), index=n.get_int("index"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), index=yang.gdata.from_xml_int(n, "index"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, index):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry(level_id, index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint(yang.adata.MNode):
    index: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels

    mut def __init__(self, index: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _levels = self.levels
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint(index=n.get_opt_int("index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint(index=yang.gdata.from_xml_opt_int(n, "index"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker(yang.adata.MNode):
    downstream: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream
    lc_disjoint: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint
    lowest_backup_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric
    node_protecting: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting
    primary_path: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path
    secondary_path: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path
    srlg_disjoint: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint

    mut def __init__(self, downstream: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream=None, lc_disjoint: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint=None, lowest_backup_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric=None, node_protecting: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting=None, primary_path: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path=None, secondary_path: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path=None, srlg_disjoint: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if downstream is not None:
            self.downstream = downstream
        else:
            self.downstream = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream()
        self_downstream = self.downstream
        if self_downstream is not None:
            self_downstream._parent = self
        if lc_disjoint is not None:
            self.lc_disjoint = lc_disjoint
        else:
            self.lc_disjoint = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint()
        self_lc_disjoint = self.lc_disjoint
        if self_lc_disjoint is not None:
            self_lc_disjoint._parent = self
        if lowest_backup_metric is not None:
            self.lowest_backup_metric = lowest_backup_metric
        else:
            self.lowest_backup_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric()
        self_lowest_backup_metric = self.lowest_backup_metric
        if self_lowest_backup_metric is not None:
            self_lowest_backup_metric._parent = self
        if node_protecting is not None:
            self.node_protecting = node_protecting
        else:
            self.node_protecting = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting()
        self_node_protecting = self.node_protecting
        if self_node_protecting is not None:
            self_node_protecting._parent = self
        if primary_path is not None:
            self.primary_path = primary_path
        else:
            self.primary_path = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path()
        self_primary_path = self.primary_path
        if self_primary_path is not None:
            self_primary_path._parent = self
        if secondary_path is not None:
            self.secondary_path = secondary_path
        else:
            self.secondary_path = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path()
        self_secondary_path = self.secondary_path
        if self_secondary_path is not None:
            self_secondary_path._parent = self
        if srlg_disjoint is not None:
            self.srlg_disjoint = srlg_disjoint
        else:
            self.srlg_disjoint = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint()
        self_srlg_disjoint = self.srlg_disjoint
        if self_srlg_disjoint is not None:
            self_srlg_disjoint._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _downstream = self.downstream
        _lc_disjoint = self.lc_disjoint
        _lowest_backup_metric = self.lowest_backup_metric
        _node_protecting = self.node_protecting
        _primary_path = self.primary_path
        _secondary_path = self.secondary_path
        _srlg_disjoint = self.srlg_disjoint
        if _downstream is not None:
            children['downstream'] = _downstream.to_gdata()
        if _lc_disjoint is not None:
            children['lc-disjoint'] = _lc_disjoint.to_gdata()
        if _lowest_backup_metric is not None:
            children['lowest-backup-metric'] = _lowest_backup_metric.to_gdata()
        if _node_protecting is not None:
            children['node-protecting'] = _node_protecting.to_gdata()
        if _primary_path is not None:
            children['primary-path'] = _primary_path.to_gdata()
        if _secondary_path is not None:
            children['secondary-path'] = _secondary_path.to_gdata()
        if _srlg_disjoint is not None:
            children['srlg-disjoint'] = _srlg_disjoint.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker(downstream=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream.from_gdata(n.get_opt_container("downstream")), lc_disjoint=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint.from_gdata(n.get_opt_container("lc-disjoint")), lowest_backup_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric.from_gdata(n.get_opt_container("lowest-backup-metric")), node_protecting=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting.from_gdata(n.get_opt_container("node-protecting")), primary_path=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path.from_gdata(n.get_opt_container("primary-path")), secondary_path=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path.from_gdata(n.get_opt_container("secondary-path")), srlg_disjoint=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint.from_gdata(n.get_opt_container("srlg-disjoint")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker(downstream=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__downstream.from_xml(yang.gdata.get_xml_opt_child(n, "downstream")), lc_disjoint=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lc_disjoint.from_xml(yang.gdata.get_xml_opt_child(n, "lc-disjoint")), lowest_backup_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__lowest_backup_metric.from_xml(yang.gdata.get_xml_opt_child(n, "lowest-backup-metric")), node_protecting=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting.from_xml(yang.gdata.get_xml_opt_child(n, "node-protecting")), primary_path=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__primary_path.from_xml(yang.gdata.get_xml_opt_child(n, "primary-path")), secondary_path=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__secondary_path.from_xml(yang.gdata.get_xml_opt_child(n, "secondary-path")), srlg_disjoint=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint.from_xml(yang.gdata.get_xml_opt_child(n, "srlg-disjoint")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry(yang.adata.MNode):
    level_id: int
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable

    mut def __init__(self, level_id: int, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _disable = self.disable
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry(level_id=n.get_int("level-id"), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable.from_gdata(n.get_opt_container("disable")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _levels = self.levels
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing(disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable.from_gdata(n.get_opt_container("disable")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing(disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__prefix_list_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level__prefix_list_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry(yang.adata.MNode):
    level_id: int
    prefix_list_name: str

    mut def __init__(self, level_id: int, prefix_list_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.prefix_list_name = prefix_list_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _prefix_list_name = self.prefix_list_name
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _prefix_list_name is not None:
            children['prefix-list-name'] = yang.gdata.Leaf('string', _prefix_list_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry(level_id=n.get_int("level-id"), prefix_list_name=n.get_str("prefix-list-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), prefix_list_name=yang.gdata.from_xml_str(n, "prefix-list-name"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, prefix_list_name):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry(level_id, prefix_list_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list(yang.adata.MNode):
    prefix_list_name: ?str
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels

    mut def __init__(self, prefix_list_name: ?str, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix_list_name = prefix_list_name
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_list_name = self.prefix_list_name
        _levels = self.levels
        if _prefix_list_name is not None:
            children['prefix-list-name'] = yang.gdata.Leaf('string', _prefix_list_name)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list(prefix_list_name=n.get_opt_str("prefix-list-name"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list(prefix_list_name=yang.gdata.from_xml_opt_str(n, "prefix-list-name"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa(yang.adata.MNode):
    prefix_list: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list

    mut def __init__(self, prefix_list: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if prefix_list is not None:
            self.prefix_list = prefix_list
        else:
            self.prefix_list = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list()
        self_prefix_list = self.prefix_list
        if self_prefix_list is not None:
            self_prefix_list._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_list = self.prefix_list
        if _prefix_list is not None:
            children['prefix-list'] = _prefix_list.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa(prefix_list=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list.from_gdata(n.get_opt_container("prefix-list")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa(prefix_list=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa__prefix_list.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-list")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry(yang.adata.MNode):
    level_id: int
    weighted_global: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global

    mut def __init__(self, level_id: int, weighted_global: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.weighted_global = weighted_global
        self_weighted_global = self.weighted_global
        if self_weighted_global is not None:
            self_weighted_global._parent = self

    mut def create_weighted_global(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global()
        self.weighted_global = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _weighted_global = self.weighted_global
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _weighted_global is not None:
            children['weighted-global'] = _weighted_global.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry(level_id=n.get_int("level-id"), weighted_global=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global.from_gdata(n.get_opt_container("weighted-global")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), weighted_global=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level__weighted_global.from_xml(yang.gdata.get_xml_opt_child(n, "weighted-global")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection(yang.adata.MNode):
    weighted_global: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels

    mut def __init__(self, weighted_global: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.weighted_global = weighted_global
        self_weighted_global = self.weighted_global
        if self_weighted_global is not None:
            self_weighted_global._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_weighted_global(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global()
        self.weighted_global = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _weighted_global = self.weighted_global
        _levels = self.levels
        if _weighted_global is not None:
            children['weighted-global'] = _weighted_global.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection(weighted_global=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global.from_gdata(n.get_opt_container("weighted-global")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection(weighted_global=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__weighted_global.from_xml(yang.gdata.get_xml_opt_child(n, "weighted-global")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix(yang.adata.MNode):
    priority_limit: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit
    use_candidate_only: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only
    tiebreaker: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker
    load_sharing: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing
    remote_lfa: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa
    srlg_protection: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection

    mut def __init__(self, priority_limit: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit=None, use_candidate_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only=None, tiebreaker: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker=None, load_sharing: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing=None, remote_lfa: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa=None, srlg_protection: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if priority_limit is not None:
            self.priority_limit = priority_limit
        else:
            self.priority_limit = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit()
        self_priority_limit = self.priority_limit
        if self_priority_limit is not None:
            self_priority_limit._parent = self
        if use_candidate_only is not None:
            self.use_candidate_only = use_candidate_only
        else:
            self.use_candidate_only = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only()
        self_use_candidate_only = self.use_candidate_only
        if self_use_candidate_only is not None:
            self_use_candidate_only._parent = self
        if tiebreaker is not None:
            self.tiebreaker = tiebreaker
        else:
            self.tiebreaker = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker()
        self_tiebreaker = self.tiebreaker
        if self_tiebreaker is not None:
            self_tiebreaker._parent = self
        if load_sharing is not None:
            self.load_sharing = load_sharing
        else:
            self.load_sharing = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing()
        self_load_sharing = self.load_sharing
        if self_load_sharing is not None:
            self_load_sharing._parent = self
        if remote_lfa is not None:
            self.remote_lfa = remote_lfa
        else:
            self.remote_lfa = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa()
        self_remote_lfa = self.remote_lfa
        if self_remote_lfa is not None:
            self_remote_lfa._parent = self
        if srlg_protection is not None:
            self.srlg_protection = srlg_protection
        else:
            self.srlg_protection = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection()
        self_srlg_protection = self.srlg_protection
        if self_srlg_protection is not None:
            self_srlg_protection._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority_limit = self.priority_limit
        _use_candidate_only = self.use_candidate_only
        _tiebreaker = self.tiebreaker
        _load_sharing = self.load_sharing
        _remote_lfa = self.remote_lfa
        _srlg_protection = self.srlg_protection
        if _priority_limit is not None:
            children['priority-limit'] = _priority_limit.to_gdata()
        if _use_candidate_only is not None:
            children['use-candidate-only'] = _use_candidate_only.to_gdata()
        if _tiebreaker is not None:
            children['tiebreaker'] = _tiebreaker.to_gdata()
        if _load_sharing is not None:
            children['load-sharing'] = _load_sharing.to_gdata()
        if _remote_lfa is not None:
            children['remote-lfa'] = _remote_lfa.to_gdata()
        if _srlg_protection is not None:
            children['srlg-protection'] = _srlg_protection.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix(priority_limit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit.from_gdata(n.get_opt_container("priority-limit")), use_candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only.from_gdata(n.get_opt_container("use-candidate-only")), tiebreaker=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker.from_gdata(n.get_opt_container("tiebreaker")), load_sharing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing.from_gdata(n.get_opt_container("load-sharing")), remote_lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa.from_gdata(n.get_opt_container("remote-lfa")), srlg_protection=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection.from_gdata(n.get_opt_container("srlg-protection")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix(priority_limit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__priority_limit.from_xml(yang.gdata.get_xml_opt_child(n, "priority-limit")), use_candidate_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__use_candidate_only.from_xml(yang.gdata.get_xml_opt_child(n, "use-candidate-only")), tiebreaker=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__tiebreaker.from_xml(yang.gdata.get_xml_opt_child(n, "tiebreaker")), load_sharing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__load_sharing.from_xml(yang.gdata.get_xml_opt_child(n, "load-sharing")), remote_lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__remote_lfa.from_xml(yang.gdata.get_xml_opt_child(n, "remote-lfa")), srlg_protection=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix__srlg_protection.from_xml(yang.gdata.get_xml_opt_child(n, "srlg-protection")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute(yang.adata.MNode):
    delay_interval: ?int
    per_link: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link
    per_prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix

    mut def __init__(self, delay_interval: ?int, per_link: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link=None, per_prefix: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.delay_interval = delay_interval
        if per_link is not None:
            self.per_link = per_link
        else:
            self.per_link = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link()
        self_per_link = self.per_link
        if self_per_link is not None:
            self_per_link._parent = self
        if per_prefix is not None:
            self.per_prefix = per_prefix
        else:
            self.per_prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix()
        self_per_prefix = self.per_prefix
        if self_per_prefix is not None:
            self_per_prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay_interval = self.delay_interval
        _per_link = self.per_link
        _per_prefix = self.per_prefix
        if _delay_interval is not None:
            children['delay-interval'] = yang.gdata.Leaf('uint32', _delay_interval)
        if _per_link is not None:
            children['per-link'] = _per_link.to_gdata()
        if _per_prefix is not None:
            children['per-prefix'] = _per_prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute(delay_interval=n.get_opt_int("delay-interval"), per_link=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link.from_gdata(n.get_opt_container("per-link")), per_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix.from_gdata(n.get_opt_container("per-prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute(delay_interval=yang.gdata.from_xml_opt_int(n, "delay-interval"), per_link=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_link.from_xml(yang.gdata.get_xml_opt_child(n, "per-link")), per_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute__per_prefix.from_xml(yang.gdata.get_xml_opt_child(n, "per-prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__prefix_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence(yang.adata.MNode):
    prefix_list: ?str
    track_ip_frr: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr

    mut def __init__(self, prefix_list: ?str, track_ip_frr: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix_list = prefix_list
        self.track_ip_frr = track_ip_frr
        self_track_ip_frr = self.track_ip_frr
        if self_track_ip_frr is not None:
            self_track_ip_frr._parent = self

    mut def create_track_ip_frr(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr()
        self.track_ip_frr = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_list = self.prefix_list
        _track_ip_frr = self.track_ip_frr
        if _prefix_list is not None:
            children['prefix-list'] = yang.gdata.Leaf('string', _prefix_list)
        if _track_ip_frr is not None:
            children['track-ip-frr'] = _track_ip_frr.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence(prefix_list=n.get_opt_str("prefix-list"), track_ip_frr=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr.from_gdata(n.get_opt_container("track-ip-frr")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence(prefix_list=yang.gdata.from_xml_opt_str(n, "prefix-list"), track_ip_frr=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence__track_ip_frr.from_xml(yang.gdata.get_xml_opt_child(n, "track-ip-frr")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp(yang.adata.MNode):
    auto_config: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config

    mut def __init__(self, auto_config: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.auto_config = auto_config
        self_auto_config = self.auto_config
        if self_auto_config is not None:
            self_auto_config._parent = self

    mut def create_auto_config(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config()
        self.auto_config = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _auto_config = self.auto_config
        if _auto_config is not None:
            children['auto-config'] = _auto_config.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp(auto_config=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config.from_gdata(n.get_opt_container("auto-config")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp(auto_config=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp__auto_config.from_xml(yang.gdata.get_xml_opt_child(n, "auto-config")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id(yang.adata.MNode):
    ip_address: ?str
    interface: ?str

    mut def __init__(self, ip_address: ?str, interface: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ip_address = ip_address
        self.interface = interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_address = self.ip_address
        _interface = self.interface
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('string', _ip_address)
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id(ip_address=n.get_opt_str("ip-address"), interface=n.get_opt_str("interface"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id(ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"), interface=yang.gdata.from_xml_opt_str(n, "interface"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    default_metric: int

    mut def __init__(self, level_id: int, default_metric: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.default_metric = default_metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _default_metric = self.default_metric
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry(level_id=n.get_int("level-id"), default_metric=n.get_int("default-metric"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), default_metric=yang.gdata.from_xml_int(n, "default-metric"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, default_metric):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry(level_id, default_metric)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric(yang.adata.MNode):
    default_metric: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels

    mut def __init__(self, default_metric: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.default_metric = default_metric
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric = self.default_metric
        _levels = self.levels
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric(default_metric=n.get_opt_int("default-metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric(default_metric=yang.gdata.from_xml_opt_int(n, "default-metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel(yang.adata.MNode):
    restricted: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted
    preferred: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred
    anycast_prefer_igp_cost: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost
    metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric

    mut def __init__(self, restricted: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted=None, preferred: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred=None, anycast_prefer_igp_cost: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost=None, metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.restricted = restricted
        self_restricted = self.restricted
        if self_restricted is not None:
            self_restricted._parent = self
        self.preferred = preferred
        self_preferred = self.preferred
        if self_preferred is not None:
            self_preferred._parent = self
        self.anycast_prefer_igp_cost = anycast_prefer_igp_cost
        self_anycast_prefer_igp_cost = self.anycast_prefer_igp_cost
        if self_anycast_prefer_igp_cost is not None:
            self_anycast_prefer_igp_cost._parent = self
        if metric is not None:
            self.metric = metric
        else:
            self.metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self

    mut def create_restricted(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted()
        self.restricted = res
        return res

    mut def create_preferred(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred()
        self.preferred = res
        return res

    mut def create_anycast_prefer_igp_cost(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost()
        self.anycast_prefer_igp_cost = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restricted = self.restricted
        _preferred = self.preferred
        _anycast_prefer_igp_cost = self.anycast_prefer_igp_cost
        _metric = self.metric
        if _restricted is not None:
            children['restricted'] = _restricted.to_gdata()
        if _preferred is not None:
            children['preferred'] = _preferred.to_gdata()
        if _anycast_prefer_igp_cost is not None:
            children['anycast-prefer-igp-cost'] = _anycast_prefer_igp_cost.to_gdata()
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel(restricted=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted.from_gdata(n.get_opt_container("restricted")), preferred=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred.from_gdata(n.get_opt_container("preferred")), anycast_prefer_igp_cost=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost.from_gdata(n.get_opt_container("anycast-prefer-igp-cost")), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric.from_gdata(n.get_opt_container("metric")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel(restricted=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__restricted.from_xml(yang.gdata.get_xml_opt_child(n, "restricted")), preferred=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__preferred.from_xml(yang.gdata.get_xml_opt_child(n, "preferred")), anycast_prefer_igp_cost=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__anycast_prefer_igp_cost.from_xml(yang.gdata.get_xml_opt_child(n, "anycast-prefer-igp-cost")), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng(yang.adata.MNode):
    router_id: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id
    igp_intact: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact
    multicast_intact: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1
    level_2_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only
    tunnel: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel

    mut def __init__(self, router_id: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id=None, igp_intact: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact=None, multicast_intact: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact=None, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1=None, level_2_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only=None, tunnel: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if router_id is not None:
            self.router_id = router_id
        else:
            self.router_id = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id()
        self_router_id = self.router_id
        if self_router_id is not None:
            self_router_id._parent = self
        self.igp_intact = igp_intact
        self_igp_intact = self.igp_intact
        if self_igp_intact is not None:
            self_igp_intact._parent = self
        self.multicast_intact = multicast_intact
        self_multicast_intact = self.multicast_intact
        if self_multicast_intact is not None:
            self_multicast_intact._parent = self
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.level_2_only = level_2_only
        self_level_2_only = self.level_2_only
        if self_level_2_only is not None:
            self_level_2_only._parent = self
        if tunnel is not None:
            self.tunnel = tunnel
        else:
            self.tunnel = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel()
        self_tunnel = self.tunnel
        if self_tunnel is not None:
            self_tunnel._parent = self

    mut def create_igp_intact(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact()
        self.igp_intact = res
        return res

    mut def create_multicast_intact(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact()
        self.multicast_intact = res
        return res

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1()
        self.level_1 = res
        return res

    mut def create_level_2_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only()
        self.level_2_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        _igp_intact = self.igp_intact
        _multicast_intact = self.multicast_intact
        _level_1_2 = self.level_1_2
        _level_1 = self.level_1
        _level_2_only = self.level_2_only
        _tunnel = self.tunnel
        if _router_id is not None:
            children['router-id'] = _router_id.to_gdata()
        if _igp_intact is not None:
            children['igp-intact'] = _igp_intact.to_gdata()
        if _multicast_intact is not None:
            children['multicast-intact'] = _multicast_intact.to_gdata()
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _level_2_only is not None:
            children['level-2-only'] = _level_2_only.to_gdata()
        if _tunnel is not None:
            children['tunnel'] = _tunnel.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng(router_id=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id.from_gdata(n.get_opt_container("router-id")), igp_intact=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact.from_gdata(n.get_opt_container("igp-intact")), multicast_intact=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact.from_gdata(n.get_opt_container("multicast-intact")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1.from_gdata(n.get_opt_container("level-1")), level_2_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only.from_gdata(n.get_opt_container("level-2-only")), tunnel=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel.from_gdata(n.get_opt_container("tunnel")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng(router_id=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__router_id.from_xml(yang.gdata.get_xml_opt_child(n, "router-id")), igp_intact=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__igp_intact.from_xml(yang.gdata.get_xml_opt_child(n, "igp-intact")), multicast_intact=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__multicast_intact.from_xml(yang.gdata.get_xml_opt_child(n, "multicast-intact")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), level_2_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__level_2_only.from_xml(yang.gdata.get_xml_opt_child(n, "level-2-only")), tunnel=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng__tunnel.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls(yang.adata.MNode):
    ldp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp
    traffic_eng: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng

    mut def __init__(self, ldp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp=None, traffic_eng: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if ldp is not None:
            self.ldp = ldp
        else:
            self.ldp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp()
        self_ldp = self.ldp
        if self_ldp is not None:
            self_ldp._parent = self
        if traffic_eng is not None:
            self.traffic_eng = traffic_eng
        else:
            self.traffic_eng = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng()
        self_traffic_eng = self.traffic_eng
        if self_traffic_eng is not None:
            self_traffic_eng._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ldp = self.ldp
        _traffic_eng = self.traffic_eng
        if _ldp is not None:
            children['ldp'] = _ldp.to_gdata()
        if _traffic_eng is not None:
            children['traffic-eng'] = _traffic_eng.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls(ldp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp.from_gdata(n.get_opt_container("ldp")), traffic_eng=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng.from_gdata(n.get_opt_container("traffic-eng")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls(ldp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__ldp.from_xml(yang.gdata.get_xml_opt_child(n, "ldp")), traffic_eng=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls__traffic_eng.from_xml(yang.gdata.get_xml_opt_child(n, "traffic-eng")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(yang.adata.MNode):
    af_name: str
    saf_name: str
    prefix_unreachable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable
    partition_detect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect
    default_information: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information
    segment_routing: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing
    distance: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance
    distribute_list: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list
    redistribute: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute
    maximum_paths: ?int
    router_id: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id
    advertise: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise
    ucmp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp
    microloop: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop
    apply_weight: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight
    summary_prefixes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes
    metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric
    metric_style: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style
    spf_interval: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval
    spf: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf
    maximum_redistributed_prefixes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes
    propagates: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates
    adjacency_check: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check
    route: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route
    attached_bit: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit
    fast_reroute: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute
    monitor_convergence: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence
    mpls: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls
    single_topology: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology

    mut def __init__(self, af_name: str, saf_name: str, prefix_unreachable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable=None, partition_detect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect=None, default_information: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information=None, segment_routing: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing=None, distance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance=None, distribute_list: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list=None, redistribute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute=None, maximum_paths: ?int, router_id: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id=None, advertise: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise=None, ucmp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp=None, microloop: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop=None, apply_weight: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight=None, summary_prefixes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes=None, metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric=None, metric_style: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style=None, spf_interval: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval=None, spf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf=None, maximum_redistributed_prefixes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes=None, propagates: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates=None, adjacency_check: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check=None, route: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route=None, attached_bit: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit=None, fast_reroute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute=None, monitor_convergence: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence=None, mpls: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls=None, single_topology: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.af_name = af_name
        self.saf_name = saf_name
        self.prefix_unreachable = prefix_unreachable
        self_prefix_unreachable = self.prefix_unreachable
        if self_prefix_unreachable is not None:
            self_prefix_unreachable._parent = self
        self.partition_detect = partition_detect
        self_partition_detect = self.partition_detect
        if self_partition_detect is not None:
            self_partition_detect._parent = self
        if default_information is not None:
            self.default_information = default_information
        else:
            self.default_information = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information()
        self_default_information = self.default_information
        if self_default_information is not None:
            self_default_information._parent = self
        if segment_routing is not None:
            self.segment_routing = segment_routing
        else:
            self.segment_routing = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing()
        self_segment_routing = self.segment_routing
        if self_segment_routing is not None:
            self_segment_routing._parent = self
        if distance is not None:
            self.distance = distance
        else:
            self.distance = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance()
        self_distance = self.distance
        if self_distance is not None:
            self_distance._parent = self
        if distribute_list is not None:
            self.distribute_list = distribute_list
        else:
            self.distribute_list = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list()
        self_distribute_list = self.distribute_list
        if self_distribute_list is not None:
            self_distribute_list._parent = self
        if redistribute is not None:
            self.redistribute = redistribute
        else:
            self.redistribute = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute()
        self_redistribute = self.redistribute
        if self_redistribute is not None:
            self_redistribute._parent = self
        self.maximum_paths = maximum_paths
        if router_id is not None:
            self.router_id = router_id
        else:
            self.router_id = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id()
        self_router_id = self.router_id
        if self_router_id is not None:
            self_router_id._parent = self
        if advertise is not None:
            self.advertise = advertise
        else:
            self.advertise = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise()
        self_advertise = self.advertise
        if self_advertise is not None:
            self_advertise._parent = self
        if ucmp is not None:
            self.ucmp = ucmp
        else:
            self.ucmp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp()
        self_ucmp = self.ucmp
        if self_ucmp is not None:
            self_ucmp._parent = self
        if microloop is not None:
            self.microloop = microloop
        else:
            self.microloop = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop()
        self_microloop = self.microloop
        if self_microloop is not None:
            self_microloop._parent = self
        if apply_weight is not None:
            self.apply_weight = apply_weight
        else:
            self.apply_weight = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight()
        self_apply_weight = self.apply_weight
        if self_apply_weight is not None:
            self_apply_weight._parent = self
        self.summary_prefixes = summary_prefixes
        self_summary_prefixes = self.summary_prefixes
        if self_summary_prefixes is not None:
            self_summary_prefixes._parent = self
        if metric is not None:
            self.metric = metric
        else:
            self.metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self
        if metric_style is not None:
            self.metric_style = metric_style
        else:
            self.metric_style = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style()
        self_metric_style = self.metric_style
        if self_metric_style is not None:
            self_metric_style._parent = self
        if spf_interval is not None:
            self.spf_interval = spf_interval
        else:
            self.spf_interval = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval()
        self_spf_interval = self.spf_interval
        if self_spf_interval is not None:
            self_spf_interval._parent = self
        if spf is not None:
            self.spf = spf
        else:
            self.spf = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf()
        self_spf = self.spf
        if self_spf is not None:
            self_spf._parent = self
        if maximum_redistributed_prefixes is not None:
            self.maximum_redistributed_prefixes = maximum_redistributed_prefixes
        else:
            self.maximum_redistributed_prefixes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes()
        self_maximum_redistributed_prefixes = self.maximum_redistributed_prefixes
        if self_maximum_redistributed_prefixes is not None:
            self_maximum_redistributed_prefixes._parent = self
        if propagates is not None:
            self.propagates = propagates
        else:
            self.propagates = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates()
        self_propagates = self.propagates
        if self_propagates is not None:
            self_propagates._parent = self
        if adjacency_check is not None:
            self.adjacency_check = adjacency_check
        else:
            self.adjacency_check = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check()
        self_adjacency_check = self.adjacency_check
        if self_adjacency_check is not None:
            self_adjacency_check._parent = self
        if route is not None:
            self.route = route
        else:
            self.route = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route()
        self_route = self.route
        if self_route is not None:
            self_route._parent = self
        if attached_bit is not None:
            self.attached_bit = attached_bit
        else:
            self.attached_bit = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit()
        self_attached_bit = self.attached_bit
        if self_attached_bit is not None:
            self_attached_bit._parent = self
        if fast_reroute is not None:
            self.fast_reroute = fast_reroute
        else:
            self.fast_reroute = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute()
        self_fast_reroute = self.fast_reroute
        if self_fast_reroute is not None:
            self_fast_reroute._parent = self
        self.monitor_convergence = monitor_convergence
        self_monitor_convergence = self.monitor_convergence
        if self_monitor_convergence is not None:
            self_monitor_convergence._parent = self
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls()
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self
        self.single_topology = single_topology
        self_single_topology = self.single_topology
        if self_single_topology is not None:
            self_single_topology._parent = self

    mut def create_prefix_unreachable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable()
        self.prefix_unreachable = res
        return res

    mut def create_partition_detect(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect()
        self.partition_detect = res
        return res

    mut def create_summary_prefixes(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes()
        self.summary_prefixes = res
        return res

    mut def create_monitor_convergence(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence()
        self.monitor_convergence = res
        return res

    mut def create_single_topology(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology()
        self.single_topology = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        _saf_name = self.saf_name
        _prefix_unreachable = self.prefix_unreachable
        _partition_detect = self.partition_detect
        _default_information = self.default_information
        _segment_routing = self.segment_routing
        _distance = self.distance
        _distribute_list = self.distribute_list
        _redistribute = self.redistribute
        _maximum_paths = self.maximum_paths
        _router_id = self.router_id
        _advertise = self.advertise
        _ucmp = self.ucmp
        _microloop = self.microloop
        _apply_weight = self.apply_weight
        _summary_prefixes = self.summary_prefixes
        _metric = self.metric
        _metric_style = self.metric_style
        _spf_interval = self.spf_interval
        _spf = self.spf
        _maximum_redistributed_prefixes = self.maximum_redistributed_prefixes
        _propagates = self.propagates
        _adjacency_check = self.adjacency_check
        _route = self.route
        _attached_bit = self.attached_bit
        _fast_reroute = self.fast_reroute
        _monitor_convergence = self.monitor_convergence
        _mpls = self.mpls
        _single_topology = self.single_topology
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        if _saf_name is not None:
            children['saf-name'] = yang.gdata.Leaf('enumeration', _saf_name)
        if _prefix_unreachable is not None:
            children['prefix-unreachable'] = _prefix_unreachable.to_gdata()
        if _partition_detect is not None:
            children['partition-detect'] = _partition_detect.to_gdata()
        if _default_information is not None:
            children['default-information'] = _default_information.to_gdata()
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        if _distance is not None:
            children['distance'] = _distance.to_gdata()
        if _distribute_list is not None:
            children['distribute-list'] = _distribute_list.to_gdata()
        if _redistribute is not None:
            children['redistribute'] = _redistribute.to_gdata()
        if _maximum_paths is not None:
            children['maximum-paths'] = yang.gdata.Leaf('uint32', _maximum_paths)
        if _router_id is not None:
            children['router-id'] = _router_id.to_gdata()
        if _advertise is not None:
            children['advertise'] = _advertise.to_gdata()
        if _ucmp is not None:
            children['ucmp'] = _ucmp.to_gdata()
        if _microloop is not None:
            children['microloop'] = _microloop.to_gdata()
        if _apply_weight is not None:
            children['apply-weight'] = _apply_weight.to_gdata()
        if _summary_prefixes is not None:
            children['summary-prefixes'] = _summary_prefixes.to_gdata()
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        if _metric_style is not None:
            children['metric-style'] = _metric_style.to_gdata()
        if _spf_interval is not None:
            children['spf-interval'] = _spf_interval.to_gdata()
        if _spf is not None:
            children['spf'] = _spf.to_gdata()
        if _maximum_redistributed_prefixes is not None:
            children['maximum-redistributed-prefixes'] = _maximum_redistributed_prefixes.to_gdata()
        if _propagates is not None:
            children['propagates'] = _propagates.to_gdata()
        if _adjacency_check is not None:
            children['adjacency-check'] = _adjacency_check.to_gdata()
        if _route is not None:
            children['route'] = _route.to_gdata()
        if _attached_bit is not None:
            children['attached-bit'] = _attached_bit.to_gdata()
        if _fast_reroute is not None:
            children['fast-reroute'] = _fast_reroute.to_gdata()
        if _monitor_convergence is not None:
            children['monitor-convergence'] = _monitor_convergence.to_gdata()
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        if _single_topology is not None:
            children['single-topology'] = _single_topology.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name), yang.gdata.yang_str(self.saf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(af_name=n.get_str("af-name"), saf_name=n.get_str("saf-name"), prefix_unreachable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable.from_gdata(n.get_opt_container("prefix-unreachable")), partition_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect.from_gdata(n.get_opt_container("partition-detect")), default_information=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information.from_gdata(n.get_opt_container("default-information")), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing.from_gdata(n.get_opt_container("segment-routing")), distance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance.from_gdata(n.get_opt_container("distance")), distribute_list=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list.from_gdata(n.get_opt_container("distribute-list")), redistribute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute.from_gdata(n.get_opt_container("redistribute")), maximum_paths=n.get_opt_int("maximum-paths"), router_id=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id.from_gdata(n.get_opt_container("router-id")), advertise=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise.from_gdata(n.get_opt_container("advertise")), ucmp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp.from_gdata(n.get_opt_container("ucmp")), microloop=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop.from_gdata(n.get_opt_container("microloop")), apply_weight=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight.from_gdata(n.get_opt_container("apply-weight")), summary_prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes.from_gdata(n.get_opt_container("summary-prefixes")), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric.from_gdata(n.get_opt_container("metric")), metric_style=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style.from_gdata(n.get_opt_container("metric-style")), spf_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval.from_gdata(n.get_opt_container("spf-interval")), spf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf.from_gdata(n.get_opt_container("spf")), maximum_redistributed_prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes.from_gdata(n.get_opt_container("maximum-redistributed-prefixes")), propagates=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates.from_gdata(n.get_opt_container("propagates")), adjacency_check=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check.from_gdata(n.get_opt_container("adjacency-check")), route=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route.from_gdata(n.get_opt_container("route")), attached_bit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit.from_gdata(n.get_opt_container("attached-bit")), fast_reroute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute.from_gdata(n.get_opt_container("fast-reroute")), monitor_convergence=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence.from_gdata(n.get_opt_container("monitor-convergence")), mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls.from_gdata(n.get_opt_container("mpls")), single_topology=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology.from_gdata(n.get_opt_container("single-topology")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"), saf_name=yang.gdata.from_xml_str(n, "saf-name"), prefix_unreachable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__prefix_unreachable.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-unreachable")), partition_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__partition_detect.from_xml(yang.gdata.get_xml_opt_child(n, "partition-detect")), default_information=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__default_information.from_xml(yang.gdata.get_xml_opt_child(n, "default-information")), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing.from_xml(yang.gdata.get_xml_opt_child(n, "segment-routing")), distance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distance.from_xml(yang.gdata.get_xml_opt_child(n, "distance")), distribute_list=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__distribute_list.from_xml(yang.gdata.get_xml_opt_child(n, "distribute-list")), redistribute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__redistribute.from_xml(yang.gdata.get_xml_opt_child(n, "redistribute")), maximum_paths=yang.gdata.from_xml_opt_int(n, "maximum-paths"), router_id=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__router_id.from_xml(yang.gdata.get_xml_opt_child(n, "router-id")), advertise=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__advertise.from_xml(yang.gdata.get_xml_opt_child(n, "advertise")), ucmp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__ucmp.from_xml(yang.gdata.get_xml_opt_child(n, "ucmp")), microloop=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__microloop.from_xml(yang.gdata.get_xml_opt_child(n, "microloop")), apply_weight=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__apply_weight.from_xml(yang.gdata.get_xml_opt_child(n, "apply-weight")), summary_prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__summary_prefixes.from_xml(yang.gdata.get_xml_opt_child(n, "summary-prefixes")), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")), metric_style=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style.from_xml(yang.gdata.get_xml_opt_child(n, "metric-style")), spf_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf_interval.from_xml(yang.gdata.get_xml_opt_child(n, "spf-interval")), spf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__spf.from_xml(yang.gdata.get_xml_opt_child(n, "spf")), maximum_redistributed_prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__maximum_redistributed_prefixes.from_xml(yang.gdata.get_xml_opt_child(n, "maximum-redistributed-prefixes")), propagates=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__propagates.from_xml(yang.gdata.get_xml_opt_child(n, "propagates")), adjacency_check=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__adjacency_check.from_xml(yang.gdata.get_xml_opt_child(n, "adjacency-check")), route=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__route.from_xml(yang.gdata.get_xml_opt_child(n, "route")), attached_bit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__attached_bit.from_xml(yang.gdata.get_xml_opt_child(n, "attached-bit")), fast_reroute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__fast_reroute.from_xml(yang.gdata.get_xml_opt_child(n, "fast-reroute")), monitor_convergence=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__monitor_convergence.from_xml(yang.gdata.get_xml_opt_child(n, "monitor-convergence")), mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")), single_topology=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__single_topology.from_xml(yang.gdata.get_xml_opt_child(n, "single-topology")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name, saf_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if e.saf_name != saf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(af_name, saf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name', 'saf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__saf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate(yang.adata.MNode):
    external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external
    route_policy: ?str

    mut def __init__(self, external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external=None, route_policy: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.external = external
        self_external = self.external
        if self_external is not None:
            self_external._parent = self
        self.route_policy = route_policy

    mut def create_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external()
        self.external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _external = self.external
        _route_policy = self.route_policy
        if _external is not None:
            children['external'] = _external.to_gdata()
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate(external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external.from_gdata(n.get_opt_container("external")), route_policy=n.get_opt_str("route-policy"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate(external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate__external.from_xml(yang.gdata.get_xml_opt_child(n, "external")), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information(yang.adata.MNode):
    originate: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate

    mut def __init__(self, originate: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.originate = originate
        self_originate = self.originate
        if self_originate is not None:
            self_originate._parent = self

    mut def create_originate(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate()
        self.originate = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _originate = self.originate
        if _originate is not None:
            children['originate'] = _originate.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information(originate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate.from_gdata(n.get_opt_container("originate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information(originate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information__originate.from_xml(yang.gdata.get_xml_opt_child(n, "originate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls(yang.adata.MNode):
    connected_prefix_sid_map: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map

    mut def __init__(self, connected_prefix_sid_map: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.connected_prefix_sid_map = connected_prefix_sid_map
        self_connected_prefix_sid_map = self.connected_prefix_sid_map
        if self_connected_prefix_sid_map is not None:
            self_connected_prefix_sid_map._parent = self

    mut def create_connected_prefix_sid_map(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map()
        self.connected_prefix_sid_map = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _connected_prefix_sid_map = self.connected_prefix_sid_map
        if _connected_prefix_sid_map is not None:
            children['connected-prefix-sid-map'] = _connected_prefix_sid_map.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls(connected_prefix_sid_map=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map.from_gdata(n.get_opt_container("connected-prefix-sid-map")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls(connected_prefix_sid_map=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls__connected_prefix_sid_map.from_xml(yang.gdata.get_xml_opt_child(n, "connected-prefix-sid-map")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing(yang.adata.MNode):
    mpls: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls

    mut def __init__(self, mpls: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls()
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing(mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls.from_gdata(n.get_opt_container("mpls")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing(mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__global_administrative_distance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source__address_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source__administrative_distance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source__prefix_access_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry(yang.adata.MNode):
    address_prefix: str
    administrative_distance: ?int
    prefix_access_list: ?str

    mut def __init__(self, address_prefix: str, administrative_distance: ?int, prefix_access_list: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_prefix = address_prefix
        self.administrative_distance = administrative_distance
        self.prefix_access_list = prefix_access_list

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_prefix = self.address_prefix
        _administrative_distance = self.administrative_distance
        _prefix_access_list = self.prefix_access_list
        if _address_prefix is not None:
            children['address-prefix'] = yang.gdata.Leaf('union', _address_prefix)
        if _administrative_distance is not None:
            children['administrative-distance'] = yang.gdata.Leaf('uint32', _administrative_distance)
        if _prefix_access_list is not None:
            children['prefix-access-list'] = yang.gdata.Leaf('string', _prefix_access_list)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry(address_prefix=n.get_str("address-prefix"), administrative_distance=n.get_opt_int("administrative-distance"), prefix_access_list=n.get_opt_str("prefix-access-list"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry(address_prefix=yang.gdata.from_xml_str(n, "address-prefix"), administrative_distance=yang.gdata.from_xml_opt_int(n, "administrative-distance"), prefix_access_list=yang.gdata.from_xml_opt_str(n, "prefix-access-list"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'route-source'
        self.elements = elements

    mut def create(self, address_prefix):
        for e in self.elements:
            match = True
            if e.address_prefix != address_prefix:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry(address_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources(yang.adata.MNode):
    route_source: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source

    mut def __init__(self, route_source: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.route_source = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source(elements=route_source)
        self.route_source._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_source = self.route_source
        if _route_source is not None:
            children['route-source'] = _route_source.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources(route_source=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source.from_gdata(n.get_opt_list("route-source")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources(route_source=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources__route_source.from_xml(yang.gdata.get_xml_children(n, "route-source")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance(yang.adata.MNode):
    global_administrative_distance: ?int
    route_sources: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources

    mut def __init__(self, global_administrative_distance: ?int, route_sources: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.global_administrative_distance = global_administrative_distance
        if route_sources is not None:
            self.route_sources = route_sources
        else:
            self.route_sources = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources()
        self_route_sources = self.route_sources
        if self_route_sources is not None:
            self_route_sources._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _global_administrative_distance = self.global_administrative_distance
        _route_sources = self.route_sources
        if _global_administrative_distance is not None:
            children['global-administrative-distance'] = yang.gdata.Leaf('uint32', _global_administrative_distance)
        if _route_sources is not None:
            children['route-sources'] = _route_sources.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance(global_administrative_distance=n.get_opt_int("global-administrative-distance"), route_sources=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources.from_gdata(n.get_opt_container("route-sources")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance(global_administrative_distance=yang.gdata.from_xml_opt_int(n, "global-administrative-distance"), route_sources=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance__route_sources.from_xml(yang.gdata.get_xml_opt_child(n, "route-sources")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list__prefix_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list(yang.adata.MNode):
    prefix_list: ?str
    route_policy: ?str

    mut def __init__(self, prefix_list: ?str, route_policy: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix_list = prefix_list
        self.route_policy = route_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_list = self.prefix_list
        _route_policy = self.route_policy
        if _prefix_list is not None:
            children['prefix-list'] = yang.gdata.Leaf('string', _prefix_list)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list(prefix_list=n.get_opt_str("prefix-list"), route_policy=n.get_opt_str("route-policy"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list(prefix_list=yang.gdata.from_xml_opt_str(n, "prefix-list"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__process_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match(yang.adata.MNode):
    internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal
    external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external
    nssa_external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external

    mut def __init__(self, internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal=None, external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external=None, nssa_external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.internal = internal
        self_internal = self.internal
        if self_internal is not None:
            self_internal._parent = self
        self.external = external
        self_external = self.external
        if self_external is not None:
            self_external._parent = self
        self.nssa_external = nssa_external
        self_nssa_external = self.nssa_external
        if self_nssa_external is not None:
            self_nssa_external._parent = self

    mut def create_internal(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal()
        self.internal = res
        return res

    mut def create_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external()
        self.external = res
        return res

    mut def create_nssa_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external()
        self.nssa_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _internal = self.internal
        _external = self.external
        _nssa_external = self.nssa_external
        if _internal is not None:
            children['internal'] = _internal.to_gdata()
        if _external is not None:
            children['external'] = _external.to_gdata()
        if _nssa_external is not None:
            children['nssa-external'] = _nssa_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal.from_gdata(n.get_opt_container("internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external.from_gdata(n.get_opt_container("external")), nssa_external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external.from_gdata(n.get_opt_container("nssa-external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__internal.from_xml(yang.gdata.get_xml_opt_child(n, "internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__external.from_xml(yang.gdata.get_xml_opt_child(n, "external")), nssa_external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match__nssa_external.from_xml(yang.gdata.get_xml_opt_child(n, "nssa-external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry(yang.adata.MNode):
    process_id: str
    match: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, process_id: str, match: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match=None, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.process_id = process_id
        if match is not None:
            self.match = match
        else:
            self.match = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match()
        self_match = self.match
        if self_match is not None:
            self_match._parent = self
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process_id = self.process_id
        _match = self.match
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _process_id is not None:
            children['process-id'] = yang.gdata.Leaf('string', _process_id)
        if _match is not None:
            children['match'] = _match.to_gdata()
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.process_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry(process_id=n.get_str("process-id"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match.from_gdata(n.get_opt_container("match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry(process_id=yang.gdata.from_xml_str(n, "process-id"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__match.from_xml(yang.gdata.get_xml_opt_child(n, "match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'ospf'
        self.elements = elements

    mut def create(self, process_id):
        for e in self.elements:
            match = True
            if e.process_id != process_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry(process_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['process-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__process_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match(yang.adata.MNode):
    internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal
    external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external
    nssa_external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external

    mut def __init__(self, internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal=None, external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external=None, nssa_external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.internal = internal
        self_internal = self.internal
        if self_internal is not None:
            self_internal._parent = self
        self.external = external
        self_external = self.external
        if self_external is not None:
            self_external._parent = self
        self.nssa_external = nssa_external
        self_nssa_external = self.nssa_external
        if self_nssa_external is not None:
            self_nssa_external._parent = self

    mut def create_internal(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal()
        self.internal = res
        return res

    mut def create_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external()
        self.external = res
        return res

    mut def create_nssa_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external()
        self.nssa_external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _internal = self.internal
        _external = self.external
        _nssa_external = self.nssa_external
        if _internal is not None:
            children['internal'] = _internal.to_gdata()
        if _external is not None:
            children['external'] = _external.to_gdata()
        if _nssa_external is not None:
            children['nssa-external'] = _nssa_external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal.from_gdata(n.get_opt_container("internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external.from_gdata(n.get_opt_container("external")), nssa_external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external.from_gdata(n.get_opt_container("nssa-external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__internal.from_xml(yang.gdata.get_xml_opt_child(n, "internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__external.from_xml(yang.gdata.get_xml_opt_child(n, "external")), nssa_external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match__nssa_external.from_xml(yang.gdata.get_xml_opt_child(n, "nssa-external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry(yang.adata.MNode):
    process_id: str
    match: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, process_id: str, match: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match=None, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.process_id = process_id
        if match is not None:
            self.match = match
        else:
            self.match = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match()
        self_match = self.match
        if self_match is not None:
            self_match._parent = self
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process_id = self.process_id
        _match = self.match
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _process_id is not None:
            children['process-id'] = yang.gdata.Leaf('string', _process_id)
        if _match is not None:
            children['match'] = _match.to_gdata()
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.process_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry(process_id=n.get_str("process-id"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match.from_gdata(n.get_opt_container("match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry(process_id=yang.gdata.from_xml_str(n, "process-id"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__match.from_xml(yang.gdata.get_xml_opt_child(n, "match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'ospfv3'
        self.elements = elements

    mut def create(self, process_id):
        for e in self.elements:
            match = True
            if e.process_id != process_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry(process_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['process-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile(yang.adata.MNode):
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile(level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__application_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry(yang.adata.MNode):
    application_name: str
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, application_name: str, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.application_name = application_name
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _application_name = self.application_name
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _application_name is not None:
            children['application-name'] = yang.gdata.Leaf('string', _application_name)
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.application_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry(application_name=n.get_str("application-name"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry(application_name=yang.gdata.from_xml_str(n, "application-name"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'application'
        self.elements = elements

    mut def create(self, application_name):
        for e in self.elements:
            match = True
            if e.application_name != application_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry(application_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['application-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications(yang.adata.MNode):
    application: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application

    mut def __init__(self, application: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.application = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application(elements=application)
        self.application._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _application = self.application
        if _application is not None:
            children['application'] = _application.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications(application=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application.from_gdata(n.get_opt_list("application")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications(application=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications__application.from_xml(yang.gdata.get_xml_children(n, "application")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__instance_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry(yang.adata.MNode):
    instance_id: str
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str
    down_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear

    mut def __init__(self, instance_id: str, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str, down_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.instance_id = instance_id
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type
        self.down_flag_clear = down_flag_clear
        self_down_flag_clear = self.down_flag_clear
        if self_down_flag_clear is not None:
            self_down_flag_clear._parent = self

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1()
        self.level_1 = res
        return res

    mut def create_down_flag_clear(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear()
        self.down_flag_clear = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance_id = self.instance_id
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        _down_flag_clear = self.down_flag_clear
        if _instance_id is not None:
            children['instance-id'] = yang.gdata.Leaf('string', _instance_id)
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        if _down_flag_clear is not None:
            children['down-flag-clear'] = _down_flag_clear.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.instance_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry(instance_id=n.get_str("instance-id"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"), down_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear.from_gdata(n.get_opt_container("down-flag-clear")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry(instance_id=yang.gdata.from_xml_str(n, "instance-id"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"), down_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis__down_flag_clear.from_xml(yang.gdata.get_xml_opt_child(n, "down-flag-clear")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'isis'
        self.elements = elements

    mut def create(self, instance_id):
        for e in self.elements:
            match = True
            if e.instance_id != instance_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry(instance_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['instance-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry(yang.adata.MNode):
    as_number: str
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, as_number: str, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.as_number = as_number
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry(as_number=n.get_str("as-number"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry(as_number=yang.gdata.from_xml_str(n, "as-number"), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'as'
        self.elements = elements

    mut def create(self, as_number):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry(as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp(yang.adata.MNode):
    as_: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as

    mut def __init__(self, as_: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.as_ = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as(elements=as_)
        self.as_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_ = self.as_
        if _as_ is not None:
            children['as'] = _as_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp(as_=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as.from_gdata(n.get_opt_list("as")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp(as_=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp__as.from_xml(yang.gdata.get_xml_children(n, "as")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match(yang.adata.MNode):
    internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal
    external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external

    mut def __init__(self, internal: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal=None, external: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.internal = internal
        self_internal = self.internal
        if self_internal is not None:
            self_internal._parent = self
        self.external = external
        self_external = self.external
        if self_external is not None:
            self_external._parent = self

    mut def create_internal(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal()
        self.internal = res
        return res

    mut def create_external(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external()
        self.external = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _internal = self.internal
        _external = self.external
        if _internal is not None:
            children['internal'] = _internal.to_gdata()
        if _external is not None:
            children['external'] = _external.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal.from_gdata(n.get_opt_container("internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external.from_gdata(n.get_opt_container("external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match(internal=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__internal.from_xml(yang.gdata.get_xml_opt_child(n, "internal")), external=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match__external.from_xml(yang.gdata.get_xml_opt_child(n, "external")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__metric_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry(yang.adata.MNode):
    as_number: int
    match: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match
    level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2
    level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2
    level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1
    metric: ?int
    route_policy: ?str
    metric_type: ?str

    mut def __init__(self, as_number: int, match: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match=None, level_1_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2=None, level_2: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2=None, level_1: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1=None, metric: ?int, route_policy: ?str, metric_type: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.as_number = as_number
        if match is not None:
            self.match = match
        else:
            self.match = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match()
        self_match = self.match
        if self_match is not None:
            self_match._parent = self
        self.level_1_2 = level_1_2
        self_level_1_2 = self.level_1_2
        if self_level_1_2 is not None:
            self_level_1_2._parent = self
        self.level_2 = level_2
        self_level_2 = self.level_2
        if self_level_2 is not None:
            self_level_2._parent = self
        self.level_1 = level_1
        self_level_1 = self.level_1
        if self_level_1 is not None:
            self_level_1._parent = self
        self.metric = metric
        self.route_policy = route_policy
        self.metric_type = metric_type

    mut def create_level_1_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2()
        self.level_1_2 = res
        return res

    mut def create_level_2(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2()
        self.level_2 = res
        return res

    mut def create_level_1(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1()
        self.level_1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _match = self.match
        _level_1_2 = self.level_1_2
        _level_2 = self.level_2
        _level_1 = self.level_1
        _metric = self.metric
        _route_policy = self.route_policy
        _metric_type = self.metric_type
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _match is not None:
            children['match'] = _match.to_gdata()
        if _level_1_2 is not None:
            children['level-1-2'] = _level_1_2.to_gdata()
        if _level_2 is not None:
            children['level-2'] = _level_2.to_gdata()
        if _level_1 is not None:
            children['level-1'] = _level_1.to_gdata()
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _metric_type is not None:
            children['metric-type'] = yang.gdata.Leaf('enumeration', _metric_type)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry(as_number=n.get_int("as-number"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match.from_gdata(n.get_opt_container("match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2.from_gdata(n.get_opt_container("level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2.from_gdata(n.get_opt_container("level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1.from_gdata(n.get_opt_container("level-1")), metric=n.get_opt_int("metric"), route_policy=n.get_opt_str("route-policy"), metric_type=n.get_opt_str("metric-type"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry(as_number=yang.gdata.from_xml_int(n, "as-number"), match=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__match.from_xml(yang.gdata.get_xml_opt_child(n, "match")), level_1_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-1-2")), level_2=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_2.from_xml(yang.gdata.get_xml_opt_child(n, "level-2")), level_1=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp__level_1.from_xml(yang.gdata.get_xml_opt_child(n, "level-1")), metric=yang.gdata.from_xml_opt_int(n, "metric"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), metric_type=yang.gdata.from_xml_opt_str(n, "metric-type"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'eigrp'
        self.elements = elements

    mut def create(self, as_number):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry(as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute(yang.adata.MNode):
    connected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected
    ospf: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf
    ospfv3: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3
    static: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static
    subscriber: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber
    rip: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip
    mobile: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile
    applications: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications
    isis: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis
    bgp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp
    eigrp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp

    mut def __init__(self, connected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected=None, ospf: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf_entry]=[], ospfv3: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3_entry]=[], static: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static=None, subscriber: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber=None, rip: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip=None, mobile: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile=None, applications: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications=None, isis: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis_entry]=[], bgp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp=None, eigrp: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.connected = connected
        self_connected = self.connected
        if self_connected is not None:
            self_connected._parent = self
        self.ospf = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf(elements=ospf)
        self.ospf._parent = self
        self.ospfv3 = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3(elements=ospfv3)
        self.ospfv3._parent = self
        self.static = static
        self_static = self.static
        if self_static is not None:
            self_static._parent = self
        self.subscriber = subscriber
        self_subscriber = self.subscriber
        if self_subscriber is not None:
            self_subscriber._parent = self
        self.rip = rip
        self_rip = self.rip
        if self_rip is not None:
            self_rip._parent = self
        self.mobile = mobile
        self_mobile = self.mobile
        if self_mobile is not None:
            self_mobile._parent = self
        if applications is not None:
            self.applications = applications
        else:
            self.applications = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications()
        self_applications = self.applications
        if self_applications is not None:
            self_applications._parent = self
        self.isis = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis(elements=isis)
        self.isis._parent = self
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self
        self.eigrp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp(elements=eigrp)
        self.eigrp._parent = self

    mut def create_connected(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected()
        self.connected = res
        return res

    mut def create_static(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static()
        self.static = res
        return res

    mut def create_subscriber(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber()
        self.subscriber = res
        return res

    mut def create_rip(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip()
        self.rip = res
        return res

    mut def create_mobile(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile()
        self.mobile = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _connected = self.connected
        _ospf = self.ospf
        _ospfv3 = self.ospfv3
        _static = self.static
        _subscriber = self.subscriber
        _rip = self.rip
        _mobile = self.mobile
        _applications = self.applications
        _isis = self.isis
        _bgp = self.bgp
        _eigrp = self.eigrp
        if _connected is not None:
            children['connected'] = _connected.to_gdata()
        if _ospf is not None:
            children['ospf'] = _ospf.to_gdata()
        if _ospfv3 is not None:
            children['ospfv3'] = _ospfv3.to_gdata()
        if _static is not None:
            children['static'] = _static.to_gdata()
        if _subscriber is not None:
            children['subscriber'] = _subscriber.to_gdata()
        if _rip is not None:
            children['rip'] = _rip.to_gdata()
        if _mobile is not None:
            children['mobile'] = _mobile.to_gdata()
        if _applications is not None:
            children['applications'] = _applications.to_gdata()
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _eigrp is not None:
            children['eigrp'] = _eigrp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute(connected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected.from_gdata(n.get_opt_container("connected")), ospf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf.from_gdata(n.get_opt_list("ospf")), ospfv3=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3.from_gdata(n.get_opt_list("ospfv3")), static=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static.from_gdata(n.get_opt_container("static")), subscriber=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber.from_gdata(n.get_opt_container("subscriber")), rip=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip.from_gdata(n.get_opt_container("rip")), mobile=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile.from_gdata(n.get_opt_container("mobile")), applications=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications.from_gdata(n.get_opt_container("applications")), isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis.from_gdata(n.get_opt_list("isis")), bgp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp.from_gdata(n.get_opt_container("bgp")), eigrp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp.from_gdata(n.get_opt_list("eigrp")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute(connected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__connected.from_xml(yang.gdata.get_xml_opt_child(n, "connected")), ospf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospf.from_xml(yang.gdata.get_xml_children(n, "ospf")), ospfv3=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__ospfv3.from_xml(yang.gdata.get_xml_children(n, "ospfv3")), static=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__static.from_xml(yang.gdata.get_xml_opt_child(n, "static")), subscriber=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__subscriber.from_xml(yang.gdata.get_xml_opt_child(n, "subscriber")), rip=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__rip.from_xml(yang.gdata.get_xml_opt_child(n, "rip")), mobile=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__mobile.from_xml(yang.gdata.get_xml_opt_child(n, "mobile")), applications=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__applications.from_xml(yang.gdata.get_xml_opt_child(n, "applications")), isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__isis.from_xml(yang.gdata.get_xml_children(n, "isis")), bgp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), eigrp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute__eigrp.from_xml(yang.gdata.get_xml_children(n, "eigrp")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link(yang.adata.MNode):
    attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes

    mut def __init__(self, attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.attributes = attributes
        self_attributes = self.attributes
        if self_attributes is not None:
            self_attributes._parent = self

    mut def create_attributes(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes()
        self.attributes = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _attributes = self.attributes
        if _attributes is not None:
            children['attributes'] = _attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link(attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes.from_gdata(n.get_opt_container("attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link(attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link__attributes.from_xml(yang.gdata.get_xml_opt_child(n, "attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes(yang.adata.MNode):
    srlg: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg

    mut def __init__(self, srlg: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.srlg = srlg
        self_srlg = self.srlg
        if self_srlg is not None:
            self_srlg._parent = self

    mut def create_srlg(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg()
        self.srlg = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg = self.srlg
        if _srlg is not None:
            children['srlg'] = _srlg.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes(srlg=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg.from_gdata(n.get_opt_container("srlg")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes(srlg=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes__srlg.from_xml(yang.gdata.get_xml_opt_child(n, "srlg")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa(yang.adata.MNode):
    link_attributes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes

    mut def __init__(self, link_attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if link_attributes is not None:
            self.link_attributes = link_attributes
        else:
            self.link_attributes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes()
        self_link_attributes = self.link_attributes
        if self_link_attributes is not None:
            self_link_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _link_attributes = self.link_attributes
        if _link_attributes is not None:
            children['link-attributes'] = _link_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa(link_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes.from_gdata(n.get_opt_container("link-attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa(link_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa__link_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "link-attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes(yang.adata.MNode):
    srlg: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg

    mut def __init__(self, srlg: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.srlg = srlg
        self_srlg = self.srlg
        if self_srlg is not None:
            self_srlg._parent = self

    mut def create_srlg(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg()
        self.srlg = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg = self.srlg
        if _srlg is not None:
            children['srlg'] = _srlg.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes(srlg=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg.from_gdata(n.get_opt_container("srlg")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes(srlg=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes__srlg.from_xml(yang.gdata.get_xml_opt_child(n, "srlg")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo(yang.adata.MNode):
    link_attributes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes

    mut def __init__(self, link_attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if link_attributes is not None:
            self.link_attributes = link_attributes
        else:
            self.link_attributes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes()
        self_link_attributes = self.link_attributes
        if self_link_attributes is not None:
            self_link_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _link_attributes = self.link_attributes
        if _link_attributes is not None:
            children['link-attributes'] = _link_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo(link_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes.from_gdata(n.get_opt_container("link-attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo(link_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo__link_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "link-attributes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application(yang.adata.MNode):
    lfa: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa
    flex_algo: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo

    mut def __init__(self, lfa: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa=None, flex_algo: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if lfa is not None:
            self.lfa = lfa
        else:
            self.lfa = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa()
        self_lfa = self.lfa
        if self_lfa is not None:
            self_lfa._parent = self
        if flex_algo is not None:
            self.flex_algo = flex_algo
        else:
            self.flex_algo = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo()
        self_flex_algo = self.flex_algo
        if self_flex_algo is not None:
            self_flex_algo._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lfa = self.lfa
        _flex_algo = self.flex_algo
        if _lfa is not None:
            children['lfa'] = _lfa.to_gdata()
        if _flex_algo is not None:
            children['flex-algo'] = _flex_algo.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application(lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa.from_gdata(n.get_opt_container("lfa")), flex_algo=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo.from_gdata(n.get_opt_container("flex-algo")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application(lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__lfa.from_xml(yang.gdata.get_xml_opt_child(n, "lfa")), flex_algo=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application__flex_algo.from_xml(yang.gdata.get_xml_opt_child(n, "flex-algo")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise(yang.adata.MNode):
    passive_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only
    link: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link
    application: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application

    mut def __init__(self, passive_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only=None, link: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link=None, application: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.passive_only = passive_only
        self_passive_only = self.passive_only
        if self_passive_only is not None:
            self_passive_only._parent = self
        if link is not None:
            self.link = link
        else:
            self.link = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link()
        self_link = self.link
        if self_link is not None:
            self_link._parent = self
        if application is not None:
            self.application = application
        else:
            self.application = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application()
        self_application = self.application
        if self_application is not None:
            self_application._parent = self

    mut def create_passive_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only()
        self.passive_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _passive_only = self.passive_only
        _link = self.link
        _application = self.application
        if _passive_only is not None:
            children['passive-only'] = _passive_only.to_gdata()
        if _link is not None:
            children['link'] = _link.to_gdata()
        if _application is not None:
            children['application'] = _application.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise(passive_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only.from_gdata(n.get_opt_container("passive-only")), link=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link.from_gdata(n.get_opt_container("link")), application=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application.from_gdata(n.get_opt_container("application")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise(passive_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__passive_only.from_xml(yang.gdata.get_xml_opt_child(n, "passive-only")), link=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__link.from_xml(yang.gdata.get_xml_opt_child(n, "link")), application=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise__application.from_xml(yang.gdata.get_xml_opt_child(n, "application")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance__variance_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance__prefix_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance(yang.adata.MNode):
    variance_value: int
    prefix_list: ?str

    mut def __init__(self, variance_value: int, prefix_list: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.variance_value = variance_value
        self.prefix_list = prefix_list

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _variance_value = self.variance_value
        _prefix_list = self.prefix_list
        if _variance_value is not None:
            children['variance-value'] = yang.gdata.Leaf('uint32', _variance_value)
        if _prefix_list is not None:
            children['prefix-list'] = yang.gdata.Leaf('string', _prefix_list)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance(variance_value=n.get_int("variance-value"), prefix_list=n.get_opt_str("prefix-list"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance(variance_value=yang.gdata.from_xml_int(n, "variance-value"), prefix_list=yang.gdata.from_xml_opt_str(n, "prefix-list"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str

    mut def __init__(self, interface_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry(interface_name=n.get_str("interface-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude(yang.adata.MNode):
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces

    mut def __init__(self, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces.from_gdata(n.get_opt_container("interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__delay_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp(yang.adata.MNode):
    variance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance
    exclude: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude
    delay_interval: ?int

    mut def __init__(self, variance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance=None, exclude: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude=None, delay_interval: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.variance = variance
        self_variance = self.variance
        if self_variance is not None:
            self_variance._parent = self
        if exclude is not None:
            self.exclude = exclude
        else:
            self.exclude = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude()
        self_exclude = self.exclude
        if self_exclude is not None:
            self_exclude._parent = self
        self.delay_interval = delay_interval

    mut def create_variance(self, variance_value):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance(variance_value)
        self.variance = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _variance = self.variance
        _exclude = self.exclude
        _delay_interval = self.delay_interval
        if _variance is not None:
            children['variance'] = _variance.to_gdata()
        if _exclude is not None:
            children['exclude'] = _exclude.to_gdata()
        if _delay_interval is not None:
            children['delay-interval'] = yang.gdata.Leaf('uint32', _delay_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp(variance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance.from_gdata(n.get_opt_container("variance")), exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude.from_gdata(n.get_opt_container("exclude")), delay_interval=n.get_opt_int("delay-interval"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp(variance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__variance.from_xml(yang.gdata.get_xml_opt_child(n, "variance")), exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp__exclude.from_xml(yang.gdata.get_xml_opt_child(n, "exclude")), delay_interval=yang.gdata.from_xml_opt_int(n, "delay-interval"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance(yang.adata.MNode):
    protected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected
    segment_routing: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing

    mut def __init__(self, protected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected=None, segment_routing: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.protected = protected
        self_protected = self.protected
        if self_protected is not None:
            self_protected._parent = self
        self.segment_routing = segment_routing
        self_segment_routing = self.segment_routing
        if self_segment_routing is not None:
            self_segment_routing._parent = self

    mut def create_protected(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected()
        self.protected = res
        return res

    mut def create_segment_routing(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing()
        self.segment_routing = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _protected = self.protected
        _segment_routing = self.segment_routing
        if _protected is not None:
            children['protected'] = _protected.to_gdata()
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance(protected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected.from_gdata(n.get_opt_container("protected")), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing.from_gdata(n.get_opt_container("segment-routing")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance(protected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__protected.from_xml(yang.gdata.get_xml_opt_child(n, "protected")), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance__segment_routing.from_xml(yang.gdata.get_xml_opt_child(n, "segment-routing")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance_rib_update_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop(yang.adata.MNode):
    avoidance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance
    avoidance_rib_update_delay: ?int

    mut def __init__(self, avoidance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance=None, avoidance_rib_update_delay: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.avoidance = avoidance
        self_avoidance = self.avoidance
        if self_avoidance is not None:
            self_avoidance._parent = self
        self.avoidance_rib_update_delay = avoidance_rib_update_delay

    mut def create_avoidance(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance()
        self.avoidance = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _avoidance = self.avoidance
        _avoidance_rib_update_delay = self.avoidance_rib_update_delay
        if _avoidance is not None:
            children['avoidance'] = _avoidance.to_gdata()
        if _avoidance_rib_update_delay is not None:
            children['avoidance-rib-update-delay'] = yang.gdata.Leaf('uint32', _avoidance_rib_update_delay)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop(avoidance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance.from_gdata(n.get_opt_container("avoidance")), avoidance_rib_update_delay=n.get_opt_int("avoidance-rib-update-delay"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop(avoidance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop__avoidance.from_xml(yang.gdata.get_xml_opt_child(n, "avoidance")), avoidance_rib_update_delay=yang.gdata.from_xml_opt_int(n, "avoidance-rib-update-delay"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only(yang.adata.MNode):
    bandwidth: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth

    mut def __init__(self, bandwidth: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.bandwidth = bandwidth
        self_bandwidth = self.bandwidth
        if self_bandwidth is not None:
            self_bandwidth._parent = self

    mut def create_bandwidth(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth()
        self.bandwidth = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bandwidth = self.bandwidth
        if _bandwidth is not None:
            children['bandwidth'] = _bandwidth.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only(bandwidth=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth.from_gdata(n.get_opt_container("bandwidth")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only(bandwidth=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only__bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "bandwidth")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight(yang.adata.MNode):
    ecmp_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only
    ucmp_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only

    mut def __init__(self, ecmp_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only=None, ucmp_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ecmp_only = ecmp_only
        self_ecmp_only = self.ecmp_only
        if self_ecmp_only is not None:
            self_ecmp_only._parent = self
        self.ucmp_only = ucmp_only
        self_ucmp_only = self.ucmp_only
        if self_ucmp_only is not None:
            self_ucmp_only._parent = self

    mut def create_ecmp_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only()
        self.ecmp_only = res
        return res

    mut def create_ucmp_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only()
        self.ucmp_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ecmp_only = self.ecmp_only
        _ucmp_only = self.ucmp_only
        if _ecmp_only is not None:
            children['ecmp-only'] = _ecmp_only.to_gdata()
        if _ucmp_only is not None:
            children['ucmp-only'] = _ucmp_only.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight(ecmp_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only.from_gdata(n.get_opt_container("ecmp-only")), ucmp_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only.from_gdata(n.get_opt_container("ucmp-only")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight(ecmp_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ecmp_only.from_xml(yang.gdata.get_xml_opt_child(n, "ecmp-only")), ucmp_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight__ucmp_only.from_xml(yang.gdata.get_xml_opt_child(n, "ucmp-only")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__address_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry(yang.adata.MNode):
    address_prefix: str
    tag: ?int
    level: ?int
    algorithm: ?int
    explicit: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit

    mut def __init__(self, address_prefix: str, tag: ?int, level: ?int, algorithm: ?int, explicit: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_prefix = address_prefix
        self.tag = tag
        self.level = level
        self.algorithm = algorithm
        self.explicit = explicit
        self_explicit = self.explicit
        if self_explicit is not None:
            self_explicit._parent = self

    mut def create_explicit(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit()
        self.explicit = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_prefix = self.address_prefix
        _tag = self.tag
        _level = self.level
        _algorithm = self.algorithm
        _explicit = self.explicit
        if _address_prefix is not None:
            children['address-prefix'] = yang.gdata.Leaf('union', _address_prefix)
        if _tag is not None:
            children['tag'] = yang.gdata.Leaf('uint32', _tag)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        if _explicit is not None:
            children['explicit'] = _explicit.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry(address_prefix=n.get_str("address-prefix"), tag=n.get_opt_int("tag"), level=n.get_opt_int("level"), algorithm=n.get_opt_int("algorithm"), explicit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit.from_gdata(n.get_opt_container("explicit")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry(address_prefix=yang.gdata.from_xml_str(n, "address-prefix"), tag=yang.gdata.from_xml_opt_int(n, "tag"), level=yang.gdata.from_xml_opt_int(n, "level"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"), explicit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix__explicit.from_xml(yang.gdata.get_xml_opt_child(n, "explicit")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'summary-prefix'
        self.elements = elements

    mut def create(self, address_prefix):
        for e in self.elements:
            match = True
            if e.address_prefix != address_prefix:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry(address_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes(yang.adata.MNode):
    summary_prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix

    mut def __init__(self, summary_prefix: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.summary_prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix(elements=summary_prefix)
        self.summary_prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _summary_prefix = self.summary_prefix
        if _summary_prefix is not None:
            children['summary-prefix'] = _summary_prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes(summary_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix.from_gdata(n.get_opt_list("summary-prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes(summary_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes__summary_prefix.from_xml(yang.gdata.get_xml_children(n, "summary-prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__default_metric_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level__default_metric_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    default_metric_value: int

    mut def __init__(self, level_id: int, default_metric_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.default_metric_value = default_metric_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _default_metric_value = self.default_metric_value
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _default_metric_value is not None:
            children['default-metric-value'] = yang.gdata.Leaf('uint32', _default_metric_value)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry(level_id=n.get_int("level-id"), default_metric_value=n.get_int("default-metric-value"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), default_metric_value=yang.gdata.from_xml_int(n, "default-metric-value"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, default_metric_value):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry(level_id, default_metric_value)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric(yang.adata.MNode):
    default_metric_value: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels

    mut def __init__(self, default_metric_value: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.default_metric_value = default_metric_value
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric_value = self.default_metric_value
        _levels = self.levels
        if _default_metric_value is not None:
            children['default-metric-value'] = yang.gdata.Leaf('uint32', _default_metric_value)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric(default_metric_value=n.get_opt_int("default-metric-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric(default_metric_value=yang.gdata.from_xml_opt_int(n, "default-metric-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric(yang.adata.MNode):
    default_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric

    mut def __init__(self, default_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if default_metric is not None:
            self.default_metric = default_metric
        else:
            self.default_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric()
        self_default_metric = self.default_metric
        if self_default_metric is not None:
            self_default_metric._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric = self.default_metric
        if _default_metric is not None:
            children['default-metric'] = _default_metric.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric(default_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric.from_gdata(n.get_opt_container("default-metric")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric(default_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric__default_metric.from_xml(yang.gdata.get_xml_opt_child(n, "default-metric")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry(yang.adata.MNode):
    level_id: int
    narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow
    wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide
    transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition

    mut def __init__(self, level_id: int, narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow=None, wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide=None, transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.narrow = narrow
        self_narrow = self.narrow
        if self_narrow is not None:
            self_narrow._parent = self
        self.wide = wide
        self_wide = self.wide
        if self_wide is not None:
            self_wide._parent = self
        self.transition = transition
        self_transition = self.transition
        if self_transition is not None:
            self_transition._parent = self

    mut def create_narrow(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow()
        self.narrow = res
        return res

    mut def create_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide()
        self.wide = res
        return res

    mut def create_transition(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition()
        self.transition = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _narrow = self.narrow
        _wide = self.wide
        _transition = self.transition
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _narrow is not None:
            children['narrow'] = _narrow.to_gdata()
        if _wide is not None:
            children['wide'] = _wide.to_gdata()
        if _transition is not None:
            children['transition'] = _transition.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry(level_id=n.get_int("level-id"), narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow.from_gdata(n.get_opt_container("narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide.from_gdata(n.get_opt_container("wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition.from_gdata(n.get_opt_container("transition")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__narrow.from_xml(yang.gdata.get_xml_opt_child(n, "narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__wide.from_xml(yang.gdata.get_xml_opt_child(n, "wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level__transition.from_xml(yang.gdata.get_xml_opt_child(n, "transition")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style(yang.adata.MNode):
    narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow
    wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide
    transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels

    mut def __init__(self, narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow=None, wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide=None, transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.narrow = narrow
        self_narrow = self.narrow
        if self_narrow is not None:
            self_narrow._parent = self
        self.wide = wide
        self_wide = self.wide
        if self_wide is not None:
            self_wide._parent = self
        self.transition = transition
        self_transition = self.transition
        if self_transition is not None:
            self_transition._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_narrow(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow()
        self.narrow = res
        return res

    mut def create_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide()
        self.wide = res
        return res

    mut def create_transition(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition()
        self.transition = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _narrow = self.narrow
        _wide = self.wide
        _transition = self.transition
        _levels = self.levels
        if _narrow is not None:
            children['narrow'] = _narrow.to_gdata()
        if _wide is not None:
            children['wide'] = _wide.to_gdata()
        if _transition is not None:
            children['transition'] = _transition.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style(narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow.from_gdata(n.get_opt_container("narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide.from_gdata(n.get_opt_container("wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition.from_gdata(n.get_opt_container("transition")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style(narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__narrow.from_xml(yang.gdata.get_xml_opt_child(n, "narrow")), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__wide.from_xml(yang.gdata.get_xml_opt_child(n, "wide")), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__transition.from_xml(yang.gdata.get_xml_opt_child(n, "transition")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf__initial_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf__short_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf__long_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf__learn_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf__holddown_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf(yang.adata.MNode):
    initial_wait_time: ?int
    short_wait_time: ?int
    long_wait_time: ?int
    learn_interval_time: ?int
    holddown_interval_time: ?int

    mut def __init__(self, initial_wait_time: ?int, short_wait_time: ?int, long_wait_time: ?int, learn_interval_time: ?int, holddown_interval_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.initial_wait_time = initial_wait_time
        self.short_wait_time = short_wait_time
        self.long_wait_time = long_wait_time
        self.learn_interval_time = learn_interval_time
        self.holddown_interval_time = holddown_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait_time = self.initial_wait_time
        _short_wait_time = self.short_wait_time
        _long_wait_time = self.long_wait_time
        _learn_interval_time = self.learn_interval_time
        _holddown_interval_time = self.holddown_interval_time
        if _initial_wait_time is not None:
            children['initial-wait-time'] = yang.gdata.Leaf('uint32', _initial_wait_time)
        if _short_wait_time is not None:
            children['short-wait-time'] = yang.gdata.Leaf('uint32', _short_wait_time)
        if _long_wait_time is not None:
            children['long-wait-time'] = yang.gdata.Leaf('uint32', _long_wait_time)
        if _learn_interval_time is not None:
            children['learn-interval-time'] = yang.gdata.Leaf('uint32', _learn_interval_time)
        if _holddown_interval_time is not None:
            children['holddown-interval-time'] = yang.gdata.Leaf('uint32', _holddown_interval_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf(initial_wait_time=n.get_opt_int("initial-wait-time"), short_wait_time=n.get_opt_int("short-wait-time"), long_wait_time=n.get_opt_int("long-wait-time"), learn_interval_time=n.get_opt_int("learn-interval-time"), holddown_interval_time=n.get_opt_int("holddown-interval-time"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf(initial_wait_time=yang.gdata.from_xml_opt_int(n, "initial-wait-time"), short_wait_time=yang.gdata.from_xml_opt_int(n, "short-wait-time"), long_wait_time=yang.gdata.from_xml_opt_int(n, "long-wait-time"), learn_interval_time=yang.gdata.from_xml_opt_int(n, "learn-interval-time"), holddown_interval_time=yang.gdata.from_xml_opt_int(n, "holddown-interval-time"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait__maximum_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait(yang.adata.MNode):
    maximum_wait_time: ?int

    mut def __init__(self, maximum_wait_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.maximum_wait_time = maximum_wait_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_wait_time = self.maximum_wait_time
        if _maximum_wait_time is not None:
            children['maximum-wait-time'] = yang.gdata.Leaf('uint32', _maximum_wait_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait(maximum_wait_time=n.get_opt_int("maximum-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait(maximum_wait_time=yang.gdata.from_xml_opt_int(n, "maximum-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait__initial_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait(yang.adata.MNode):
    initial_wait_time: ?int

    mut def __init__(self, initial_wait_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.initial_wait_time = initial_wait_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait_time = self.initial_wait_time
        if _initial_wait_time is not None:
            children['initial-wait-time'] = yang.gdata.Leaf('uint32', _initial_wait_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait(initial_wait_time=n.get_opt_int("initial-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait(initial_wait_time=yang.gdata.from_xml_opt_int(n, "initial-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait__secondary_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait(yang.adata.MNode):
    secondary_wait_time: ?int

    mut def __init__(self, secondary_wait_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.secondary_wait_time = secondary_wait_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _secondary_wait_time = self.secondary_wait_time
        if _secondary_wait_time is not None:
            children['secondary-wait-time'] = yang.gdata.Leaf('uint32', _secondary_wait_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait(secondary_wait_time=n.get_opt_int("secondary-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait(secondary_wait_time=yang.gdata.from_xml_opt_int(n, "secondary-wait-time"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf__initial_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf__short_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf__long_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf__learn_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf__holddown_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf(yang.adata.MNode):
    initial_wait_time: ?int
    short_wait_time: ?int
    long_wait_time: ?int
    learn_interval_time: ?int
    holddown_interval_time: ?int

    mut def __init__(self, initial_wait_time: ?int, short_wait_time: ?int, long_wait_time: ?int, learn_interval_time: ?int, holddown_interval_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.initial_wait_time = initial_wait_time
        self.short_wait_time = short_wait_time
        self.long_wait_time = long_wait_time
        self.learn_interval_time = learn_interval_time
        self.holddown_interval_time = holddown_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait_time = self.initial_wait_time
        _short_wait_time = self.short_wait_time
        _long_wait_time = self.long_wait_time
        _learn_interval_time = self.learn_interval_time
        _holddown_interval_time = self.holddown_interval_time
        if _initial_wait_time is not None:
            children['initial-wait-time'] = yang.gdata.Leaf('uint32', _initial_wait_time)
        if _short_wait_time is not None:
            children['short-wait-time'] = yang.gdata.Leaf('uint32', _short_wait_time)
        if _long_wait_time is not None:
            children['long-wait-time'] = yang.gdata.Leaf('uint32', _long_wait_time)
        if _learn_interval_time is not None:
            children['learn-interval-time'] = yang.gdata.Leaf('uint32', _learn_interval_time)
        if _holddown_interval_time is not None:
            children['holddown-interval-time'] = yang.gdata.Leaf('uint32', _holddown_interval_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf(initial_wait_time=n.get_opt_int("initial-wait-time"), short_wait_time=n.get_opt_int("short-wait-time"), long_wait_time=n.get_opt_int("long-wait-time"), learn_interval_time=n.get_opt_int("learn-interval-time"), holddown_interval_time=n.get_opt_int("holddown-interval-time"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf(initial_wait_time=yang.gdata.from_xml_opt_int(n, "initial-wait-time"), short_wait_time=yang.gdata.from_xml_opt_int(n, "short-wait-time"), long_wait_time=yang.gdata.from_xml_opt_int(n, "long-wait-time"), learn_interval_time=yang.gdata.from_xml_opt_int(n, "learn-interval-time"), holddown_interval_time=yang.gdata.from_xml_opt_int(n, "holddown-interval-time"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__maximum_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__secondary_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__initial_wait_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry(yang.adata.MNode):
    level_id: int
    ietf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf
    maximum_wait_time: ?int
    secondary_wait_time: ?int
    initial_wait_time: ?int

    mut def __init__(self, level_id: int, ietf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf=None, maximum_wait_time: ?int, secondary_wait_time: ?int, initial_wait_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.ietf = ietf
        self_ietf = self.ietf
        if self_ietf is not None:
            self_ietf._parent = self
        self.maximum_wait_time = maximum_wait_time
        self.secondary_wait_time = secondary_wait_time
        self.initial_wait_time = initial_wait_time

    mut def create_ietf(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf()
        self.ietf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _ietf = self.ietf
        _maximum_wait_time = self.maximum_wait_time
        _secondary_wait_time = self.secondary_wait_time
        _initial_wait_time = self.initial_wait_time
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _ietf is not None:
            children['ietf'] = _ietf.to_gdata()
        if _maximum_wait_time is not None:
            children['maximum-wait-time'] = yang.gdata.Leaf('uint32', _maximum_wait_time)
        if _secondary_wait_time is not None:
            children['secondary-wait-time'] = yang.gdata.Leaf('uint32', _secondary_wait_time)
        if _initial_wait_time is not None:
            children['initial-wait-time'] = yang.gdata.Leaf('uint32', _initial_wait_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry(level_id=n.get_int("level-id"), ietf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf.from_gdata(n.get_opt_container("ietf")), maximum_wait_time=n.get_opt_int("maximum-wait-time"), secondary_wait_time=n.get_opt_int("secondary-wait-time"), initial_wait_time=n.get_opt_int("initial-wait-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), ietf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level__ietf.from_xml(yang.gdata.get_xml_opt_child(n, "ietf")), maximum_wait_time=yang.gdata.from_xml_opt_int(n, "maximum-wait-time"), secondary_wait_time=yang.gdata.from_xml_opt_int(n, "secondary-wait-time"), initial_wait_time=yang.gdata.from_xml_opt_int(n, "initial-wait-time"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval(yang.adata.MNode):
    ietf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf
    maximum_wait: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait
    initial_wait: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait
    secondary_wait: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels

    mut def __init__(self, ietf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf=None, maximum_wait: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait=None, initial_wait: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait=None, secondary_wait: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ietf = ietf
        self_ietf = self.ietf
        if self_ietf is not None:
            self_ietf._parent = self
        if maximum_wait is not None:
            self.maximum_wait = maximum_wait
        else:
            self.maximum_wait = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait()
        self_maximum_wait = self.maximum_wait
        if self_maximum_wait is not None:
            self_maximum_wait._parent = self
        if initial_wait is not None:
            self.initial_wait = initial_wait
        else:
            self.initial_wait = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait()
        self_initial_wait = self.initial_wait
        if self_initial_wait is not None:
            self_initial_wait._parent = self
        if secondary_wait is not None:
            self.secondary_wait = secondary_wait
        else:
            self.secondary_wait = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait()
        self_secondary_wait = self.secondary_wait
        if self_secondary_wait is not None:
            self_secondary_wait._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_ietf(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf()
        self.ietf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ietf = self.ietf
        _maximum_wait = self.maximum_wait
        _initial_wait = self.initial_wait
        _secondary_wait = self.secondary_wait
        _levels = self.levels
        if _ietf is not None:
            children['ietf'] = _ietf.to_gdata()
        if _maximum_wait is not None:
            children['maximum-wait'] = _maximum_wait.to_gdata()
        if _initial_wait is not None:
            children['initial-wait'] = _initial_wait.to_gdata()
        if _secondary_wait is not None:
            children['secondary-wait'] = _secondary_wait.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval(ietf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf.from_gdata(n.get_opt_container("ietf")), maximum_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait.from_gdata(n.get_opt_container("maximum-wait")), initial_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait.from_gdata(n.get_opt_container("initial-wait")), secondary_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait.from_gdata(n.get_opt_container("secondary-wait")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval(ietf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__ietf.from_xml(yang.gdata.get_xml_opt_child(n, "ietf")), maximum_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__maximum_wait.from_xml(yang.gdata.get_xml_opt_child(n, "maximum-wait")), initial_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__initial_wait.from_xml(yang.gdata.get_xml_opt_child(n, "initial-wait")), secondary_wait=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__secondary_wait.from_xml(yang.gdata.get_xml_opt_child(n, "secondary-wait")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry(yang.adata.MNode):
    level_id: int
    interval: value

    mut def __init__(self, level_id: int, interval: value):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.interval = interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _interval = self.interval
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('union', _interval)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry(level_id=n.get_int("level-id"), interval=n.get_value("interval"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), interval=yang.gdata.from_xml_value(n, "interval"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, interval):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry(level_id, interval)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic(yang.adata.MNode):
    interval: ?value
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels

    mut def __init__(self, interval: ?value, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interval = interval
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interval = self.interval
        _levels = self.levels
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('union', _interval)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic(interval=n.get_opt_value("interval"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic(interval=yang.gdata.from_xml_opt_value(n, "interval"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority__tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority__access_list_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry(yang.adata.MNode):
    priority: str
    tag: ?int
    access_list_name: ?str

    mut def __init__(self, priority: str, tag: ?int, access_list_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.priority = priority
        self.tag = tag
        self.access_list_name = access_list_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        _tag = self.tag
        _access_list_name = self.access_list_name
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        if _tag is not None:
            children['tag'] = yang.gdata.Leaf('uint32', _tag)
        if _access_list_name is not None:
            children['access-list-name'] = yang.gdata.Leaf('string', _access_list_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.priority)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry(priority=n.get_str("priority"), tag=n.get_opt_int("tag"), access_list_name=n.get_opt_str("access-list-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry(priority=yang.gdata.from_xml_str(n, "priority"), tag=yang.gdata.from_xml_opt_int(n, "tag"), access_list_name=yang.gdata.from_xml_opt_str(n, "access-list-name"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'prefix-priority'
        self.elements = elements

    mut def create(self, priority):
        for e in self.elements:
            match = True
            if e.priority != priority:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry(priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['priority'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level__tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level__access_list_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry(yang.adata.MNode):
    level_id: int
    priority: str
    tag: ?int
    access_list_name: ?str

    mut def __init__(self, level_id: int, priority: str, tag: ?int, access_list_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.priority = priority
        self.tag = tag
        self.access_list_name = access_list_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _priority = self.priority
        _tag = self.tag
        _access_list_name = self.access_list_name
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        if _tag is not None:
            children['tag'] = yang.gdata.Leaf('uint32', _tag)
        if _access_list_name is not None:
            children['access-list-name'] = yang.gdata.Leaf('string', _access_list_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id), yang.gdata.yang_str(self.priority)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry(level_id=n.get_int("level-id"), priority=n.get_str("priority"), tag=n.get_opt_int("tag"), access_list_name=n.get_opt_str("access-list-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), priority=yang.gdata.from_xml_str(n, "priority"), tag=yang.gdata.from_xml_opt_int(n, "tag"), access_list_name=yang.gdata.from_xml_opt_str(n, "access-list-name"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, priority):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if e.priority != priority:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry(level_id, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id', 'priority'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority(yang.adata.MNode):
    prefix_priority: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels

    mut def __init__(self, prefix_priority: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority_entry]=[], levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix_priority = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority(elements=prefix_priority)
        self.prefix_priority._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_priority = self.prefix_priority
        _levels = self.levels
        if _prefix_priority is not None:
            children['prefix-priority'] = _prefix_priority.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority(prefix_priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority.from_gdata(n.get_opt_list("prefix-priority")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority(prefix_priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__prefix_priority.from_xml(yang.gdata.get_xml_children(n, "prefix-priority")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf(yang.adata.MNode):
    periodic: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic
    prefix_priority: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority

    mut def __init__(self, periodic: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic=None, prefix_priority: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if periodic is not None:
            self.periodic = periodic
        else:
            self.periodic = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic()
        self_periodic = self.periodic
        if self_periodic is not None:
            self_periodic._parent = self
        if prefix_priority is not None:
            self.prefix_priority = prefix_priority
        else:
            self.prefix_priority = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority()
        self_prefix_priority = self.prefix_priority
        if self_prefix_priority is not None:
            self_prefix_priority._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _periodic = self.periodic
        _prefix_priority = self.prefix_priority
        if _periodic is not None:
            children['periodic'] = _periodic.to_gdata()
        if _prefix_priority is not None:
            children['prefix-priority'] = _prefix_priority.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf(periodic=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic.from_gdata(n.get_opt_container("periodic")), prefix_priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority.from_gdata(n.get_opt_container("prefix-priority")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf(periodic=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__periodic.from_xml(yang.gdata.get_xml_opt_child(n, "periodic")), prefix_priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf__prefix_priority.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-priority")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__maximum_prefixes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level__maximum_prefixes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry(yang.adata.MNode):
    level_id: int
    maximum_prefixes: int

    mut def __init__(self, level_id: int, maximum_prefixes: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.maximum_prefixes = maximum_prefixes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _maximum_prefixes = self.maximum_prefixes
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _maximum_prefixes is not None:
            children['maximum-prefixes'] = yang.gdata.Leaf('uint32', _maximum_prefixes)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry(level_id=n.get_int("level-id"), maximum_prefixes=n.get_int("maximum-prefixes"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), maximum_prefixes=yang.gdata.from_xml_int(n, "maximum-prefixes"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, maximum_prefixes):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry(level_id, maximum_prefixes)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes(yang.adata.MNode):
    maximum_prefixes: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels

    mut def __init__(self, maximum_prefixes: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.maximum_prefixes = maximum_prefixes
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_prefixes = self.maximum_prefixes
        _levels = self.levels
        if _maximum_prefixes is not None:
            children['maximum-prefixes'] = yang.gdata.Leaf('uint32', _maximum_prefixes)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes(maximum_prefixes=n.get_opt_int("maximum-prefixes"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes(maximum_prefixes=yang.gdata.from_xml_opt_int(n, "maximum-prefixes"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate__into_level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry(yang.adata.MNode):
    level: int
    into_level: int
    route_policy: str

    mut def __init__(self, level: int, into_level: int, route_policy: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = level
        self.into_level = into_level
        self.route_policy = route_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        _into_level = self.into_level
        _route_policy = self.route_policy
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        if _into_level is not None:
            children['into-level'] = yang.gdata.Leaf('uint32', _into_level)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level), yang.gdata.yang_str(self.into_level)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry(level=n.get_int("level"), into_level=n.get_int("into-level"), route_policy=n.get_str("route-policy"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry(level=yang.gdata.from_xml_int(n, "level"), into_level=yang.gdata.from_xml_int(n, "into-level"), route_policy=yang.gdata.from_xml_str(n, "route-policy"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'propagate'
        self.elements = elements

    mut def create(self, level, into_level, route_policy):
        for e in self.elements:
            match = True
            if e.level != level:
                match = False
                continue
            if e.into_level != into_level:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry(level, into_level, route_policy)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level', 'into-level'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates(yang.adata.MNode):
    propagate: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate

    mut def __init__(self, propagate: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.propagate = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate(elements=propagate)
        self.propagate._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _propagate = self.propagate
        if _propagate is not None:
            children['propagate'] = _propagate.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates(propagate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate.from_gdata(n.get_opt_list("propagate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates(propagate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates__propagate.from_xml(yang.gdata.get_xml_children(n, "propagate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check(disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable.from_gdata(n.get_opt_container("disable")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check(disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source(yang.adata.MNode):
    first_hop: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop

    mut def __init__(self, first_hop: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.first_hop = first_hop
        self_first_hop = self.first_hop
        if self_first_hop is not None:
            self_first_hop._parent = self

    mut def create_first_hop(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop()
        self.first_hop = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _first_hop = self.first_hop
        if _first_hop is not None:
            children['first-hop'] = _first_hop.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source(first_hop=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop.from_gdata(n.get_opt_container("first-hop")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source(first_hop=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source__first_hop.from_xml(yang.gdata.get_xml_opt_child(n, "first-hop")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route(yang.adata.MNode):
    source: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source

    mut def __init__(self, source: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if source is not None:
            self.source = source
        else:
            self.source = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source()
        self_source = self.source
        if self_source is not None:
            self_source._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source = self.source
        if _source is not None:
            children['source'] = _source.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route(source=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source.from_gdata(n.get_opt_container("source")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route(source=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route__source.from_xml(yang.gdata.get_xml_opt_child(n, "source")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send(yang.adata.MNode):
    always_set: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set
    never_set: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set

    mut def __init__(self, always_set: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set=None, never_set: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.always_set = always_set
        self_always_set = self.always_set
        if self_always_set is not None:
            self_always_set._parent = self
        self.never_set = never_set
        self_never_set = self.never_set
        if self_never_set is not None:
            self_never_set._parent = self

    mut def create_always_set(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set()
        self.always_set = res
        return res

    mut def create_never_set(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set()
        self.never_set = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always_set = self.always_set
        _never_set = self.never_set
        if _always_set is not None:
            children['always-set'] = _always_set.to_gdata()
        if _never_set is not None:
            children['never-set'] = _never_set.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send(always_set=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set.from_gdata(n.get_opt_container("always-set")), never_set=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set.from_gdata(n.get_opt_container("never-set")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send(always_set=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__always_set.from_xml(yang.gdata.get_xml_opt_child(n, "always-set")), never_set=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send__never_set.from_xml(yang.gdata.get_xml_opt_child(n, "never-set")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive(yang.adata.MNode):
    ignore: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore

    mut def __init__(self, ignore: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ignore = ignore
        self_ignore = self.ignore
        if self_ignore is not None:
            self_ignore._parent = self

    mut def create_ignore(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore()
        self.ignore = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ignore = self.ignore
        if _ignore is not None:
            children['ignore'] = _ignore.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive(ignore=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore.from_gdata(n.get_opt_container("ignore")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive(ignore=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive__ignore.from_xml(yang.gdata.get_xml_opt_child(n, "ignore")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit(yang.adata.MNode):
    send: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send
    receive: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive

    mut def __init__(self, send: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send=None, receive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if send is not None:
            self.send = send
        else:
            self.send = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send()
        self_send = self.send
        if self_send is not None:
            self_send._parent = self
        if receive is not None:
            self.receive = receive
        else:
            self.receive = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive()
        self_receive = self.receive
        if self_receive is not None:
            self_receive._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send = self.send
        _receive = self.receive
        if _send is not None:
            children['send'] = _send.to_gdata()
        if _receive is not None:
            children['receive'] = _receive.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit(send=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send.from_gdata(n.get_opt_container("send")), receive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive.from_gdata(n.get_opt_container("receive")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit(send=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__send.from_xml(yang.gdata.get_xml_opt_child(n, "send")), receive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit__receive.from_xml(yang.gdata.get_xml_opt_child(n, "receive")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__topology_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute__delay_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute(yang.adata.MNode):
    delay_interval: ?int

    mut def __init__(self, delay_interval: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.delay_interval = delay_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay_interval = self.delay_interval
        if _delay_interval is not None:
            children['delay-interval'] = yang.gdata.Leaf('uint32', _delay_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute(delay_interval=n.get_opt_int("delay-interval"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute(delay_interval=yang.gdata.from_xml_opt_int(n, "delay-interval"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__prefix_list(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence(yang.adata.MNode):
    prefix_list: ?str
    track_ip_frr: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr

    mut def __init__(self, prefix_list: ?str, track_ip_frr: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.prefix_list = prefix_list
        self.track_ip_frr = track_ip_frr
        self_track_ip_frr = self.track_ip_frr
        if self_track_ip_frr is not None:
            self_track_ip_frr._parent = self

    mut def create_track_ip_frr(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr()
        self.track_ip_frr = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_list = self.prefix_list
        _track_ip_frr = self.track_ip_frr
        if _prefix_list is not None:
            children['prefix-list'] = yang.gdata.Leaf('string', _prefix_list)
        if _track_ip_frr is not None:
            children['track-ip-frr'] = _track_ip_frr.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence(prefix_list=n.get_opt_str("prefix-list"), track_ip_frr=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr.from_gdata(n.get_opt_container("track-ip-frr")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence(prefix_list=yang.gdata.from_xml_opt_str(n, "prefix-list"), track_ip_frr=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence__track_ip_frr.from_xml(yang.gdata.get_xml_opt_child(n, "track-ip-frr")))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry(yang.adata.MNode):
    af_name: str
    saf_name: str
    topology_name: str
    default_information: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information
    segment_routing: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing
    distance: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance
    distribute_list: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list
    redistribute: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute
    maximum_paths: ?int
    advertise: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise
    ucmp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp
    microloop: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop
    apply_weight: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight
    summary_prefixes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes
    metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric
    metric_style: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style
    spf_interval: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval
    spf: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf
    maximum_redistributed_prefixes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes
    propagates: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates
    adjacency_check: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check
    route: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route
    attached_bit: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit
    topology_id: ?int
    fast_reroute: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute
    monitor_convergence: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence

    mut def __init__(self, af_name: str, saf_name: str, topology_name: str, default_information: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information=None, segment_routing: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing=None, distance: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance=None, distribute_list: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list=None, redistribute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute=None, maximum_paths: ?int, advertise: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise=None, ucmp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp=None, microloop: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop=None, apply_weight: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight=None, summary_prefixes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes=None, metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric=None, metric_style: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style=None, spf_interval: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval=None, spf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf=None, maximum_redistributed_prefixes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes=None, propagates: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates=None, adjacency_check: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check=None, route: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route=None, attached_bit: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit=None, topology_id: ?int, fast_reroute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute=None, monitor_convergence: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.af_name = af_name
        self.saf_name = saf_name
        self.topology_name = topology_name
        if default_information is not None:
            self.default_information = default_information
        else:
            self.default_information = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information()
        self_default_information = self.default_information
        if self_default_information is not None:
            self_default_information._parent = self
        if segment_routing is not None:
            self.segment_routing = segment_routing
        else:
            self.segment_routing = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing()
        self_segment_routing = self.segment_routing
        if self_segment_routing is not None:
            self_segment_routing._parent = self
        if distance is not None:
            self.distance = distance
        else:
            self.distance = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance()
        self_distance = self.distance
        if self_distance is not None:
            self_distance._parent = self
        if distribute_list is not None:
            self.distribute_list = distribute_list
        else:
            self.distribute_list = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list()
        self_distribute_list = self.distribute_list
        if self_distribute_list is not None:
            self_distribute_list._parent = self
        if redistribute is not None:
            self.redistribute = redistribute
        else:
            self.redistribute = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute()
        self_redistribute = self.redistribute
        if self_redistribute is not None:
            self_redistribute._parent = self
        self.maximum_paths = maximum_paths
        if advertise is not None:
            self.advertise = advertise
        else:
            self.advertise = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise()
        self_advertise = self.advertise
        if self_advertise is not None:
            self_advertise._parent = self
        if ucmp is not None:
            self.ucmp = ucmp
        else:
            self.ucmp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp()
        self_ucmp = self.ucmp
        if self_ucmp is not None:
            self_ucmp._parent = self
        if microloop is not None:
            self.microloop = microloop
        else:
            self.microloop = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop()
        self_microloop = self.microloop
        if self_microloop is not None:
            self_microloop._parent = self
        if apply_weight is not None:
            self.apply_weight = apply_weight
        else:
            self.apply_weight = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight()
        self_apply_weight = self.apply_weight
        if self_apply_weight is not None:
            self_apply_weight._parent = self
        if summary_prefixes is not None:
            self.summary_prefixes = summary_prefixes
        else:
            self.summary_prefixes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes()
        self_summary_prefixes = self.summary_prefixes
        if self_summary_prefixes is not None:
            self_summary_prefixes._parent = self
        if metric is not None:
            self.metric = metric
        else:
            self.metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self
        if metric_style is not None:
            self.metric_style = metric_style
        else:
            self.metric_style = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style()
        self_metric_style = self.metric_style
        if self_metric_style is not None:
            self_metric_style._parent = self
        if spf_interval is not None:
            self.spf_interval = spf_interval
        else:
            self.spf_interval = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval()
        self_spf_interval = self.spf_interval
        if self_spf_interval is not None:
            self_spf_interval._parent = self
        if spf is not None:
            self.spf = spf
        else:
            self.spf = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf()
        self_spf = self.spf
        if self_spf is not None:
            self_spf._parent = self
        if maximum_redistributed_prefixes is not None:
            self.maximum_redistributed_prefixes = maximum_redistributed_prefixes
        else:
            self.maximum_redistributed_prefixes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes()
        self_maximum_redistributed_prefixes = self.maximum_redistributed_prefixes
        if self_maximum_redistributed_prefixes is not None:
            self_maximum_redistributed_prefixes._parent = self
        if propagates is not None:
            self.propagates = propagates
        else:
            self.propagates = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates()
        self_propagates = self.propagates
        if self_propagates is not None:
            self_propagates._parent = self
        if adjacency_check is not None:
            self.adjacency_check = adjacency_check
        else:
            self.adjacency_check = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check()
        self_adjacency_check = self.adjacency_check
        if self_adjacency_check is not None:
            self_adjacency_check._parent = self
        if route is not None:
            self.route = route
        else:
            self.route = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route()
        self_route = self.route
        if self_route is not None:
            self_route._parent = self
        if attached_bit is not None:
            self.attached_bit = attached_bit
        else:
            self.attached_bit = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit()
        self_attached_bit = self.attached_bit
        if self_attached_bit is not None:
            self_attached_bit._parent = self
        self.topology_id = topology_id
        if fast_reroute is not None:
            self.fast_reroute = fast_reroute
        else:
            self.fast_reroute = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute()
        self_fast_reroute = self.fast_reroute
        if self_fast_reroute is not None:
            self_fast_reroute._parent = self
        self.monitor_convergence = monitor_convergence
        self_monitor_convergence = self.monitor_convergence
        if self_monitor_convergence is not None:
            self_monitor_convergence._parent = self

    mut def create_monitor_convergence(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence()
        self.monitor_convergence = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        _saf_name = self.saf_name
        _topology_name = self.topology_name
        _default_information = self.default_information
        _segment_routing = self.segment_routing
        _distance = self.distance
        _distribute_list = self.distribute_list
        _redistribute = self.redistribute
        _maximum_paths = self.maximum_paths
        _advertise = self.advertise
        _ucmp = self.ucmp
        _microloop = self.microloop
        _apply_weight = self.apply_weight
        _summary_prefixes = self.summary_prefixes
        _metric = self.metric
        _metric_style = self.metric_style
        _spf_interval = self.spf_interval
        _spf = self.spf
        _maximum_redistributed_prefixes = self.maximum_redistributed_prefixes
        _propagates = self.propagates
        _adjacency_check = self.adjacency_check
        _route = self.route
        _attached_bit = self.attached_bit
        _topology_id = self.topology_id
        _fast_reroute = self.fast_reroute
        _monitor_convergence = self.monitor_convergence
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        if _saf_name is not None:
            children['saf-name'] = yang.gdata.Leaf('enumeration', _saf_name)
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        if _default_information is not None:
            children['default-information'] = _default_information.to_gdata()
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        if _distance is not None:
            children['distance'] = _distance.to_gdata()
        if _distribute_list is not None:
            children['distribute-list'] = _distribute_list.to_gdata()
        if _redistribute is not None:
            children['redistribute'] = _redistribute.to_gdata()
        if _maximum_paths is not None:
            children['maximum-paths'] = yang.gdata.Leaf('uint32', _maximum_paths)
        if _advertise is not None:
            children['advertise'] = _advertise.to_gdata()
        if _ucmp is not None:
            children['ucmp'] = _ucmp.to_gdata()
        if _microloop is not None:
            children['microloop'] = _microloop.to_gdata()
        if _apply_weight is not None:
            children['apply-weight'] = _apply_weight.to_gdata()
        if _summary_prefixes is not None:
            children['summary-prefixes'] = _summary_prefixes.to_gdata()
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        if _metric_style is not None:
            children['metric-style'] = _metric_style.to_gdata()
        if _spf_interval is not None:
            children['spf-interval'] = _spf_interval.to_gdata()
        if _spf is not None:
            children['spf'] = _spf.to_gdata()
        if _maximum_redistributed_prefixes is not None:
            children['maximum-redistributed-prefixes'] = _maximum_redistributed_prefixes.to_gdata()
        if _propagates is not None:
            children['propagates'] = _propagates.to_gdata()
        if _adjacency_check is not None:
            children['adjacency-check'] = _adjacency_check.to_gdata()
        if _route is not None:
            children['route'] = _route.to_gdata()
        if _attached_bit is not None:
            children['attached-bit'] = _attached_bit.to_gdata()
        if _topology_id is not None:
            children['topology-id'] = yang.gdata.Leaf('uint32', _topology_id)
        if _fast_reroute is not None:
            children['fast-reroute'] = _fast_reroute.to_gdata()
        if _monitor_convergence is not None:
            children['monitor-convergence'] = _monitor_convergence.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name), yang.gdata.yang_str(self.saf_name), yang.gdata.yang_str(self.topology_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry(af_name=n.get_str("af-name"), saf_name=n.get_str("saf-name"), topology_name=n.get_str("topology-name"), default_information=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information.from_gdata(n.get_opt_container("default-information")), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing.from_gdata(n.get_opt_container("segment-routing")), distance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance.from_gdata(n.get_opt_container("distance")), distribute_list=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list.from_gdata(n.get_opt_container("distribute-list")), redistribute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute.from_gdata(n.get_opt_container("redistribute")), maximum_paths=n.get_opt_int("maximum-paths"), advertise=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise.from_gdata(n.get_opt_container("advertise")), ucmp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp.from_gdata(n.get_opt_container("ucmp")), microloop=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop.from_gdata(n.get_opt_container("microloop")), apply_weight=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight.from_gdata(n.get_opt_container("apply-weight")), summary_prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes.from_gdata(n.get_opt_container("summary-prefixes")), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric.from_gdata(n.get_opt_container("metric")), metric_style=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style.from_gdata(n.get_opt_container("metric-style")), spf_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval.from_gdata(n.get_opt_container("spf-interval")), spf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf.from_gdata(n.get_opt_container("spf")), maximum_redistributed_prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes.from_gdata(n.get_opt_container("maximum-redistributed-prefixes")), propagates=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates.from_gdata(n.get_opt_container("propagates")), adjacency_check=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check.from_gdata(n.get_opt_container("adjacency-check")), route=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route.from_gdata(n.get_opt_container("route")), attached_bit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit.from_gdata(n.get_opt_container("attached-bit")), topology_id=n.get_opt_int("topology-id"), fast_reroute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute.from_gdata(n.get_opt_container("fast-reroute")), monitor_convergence=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence.from_gdata(n.get_opt_container("monitor-convergence")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry(af_name=yang.gdata.from_xml_str(n, "af-name"), saf_name=yang.gdata.from_xml_str(n, "saf-name"), topology_name=yang.gdata.from_xml_str(n, "topology-name"), default_information=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__default_information.from_xml(yang.gdata.get_xml_opt_child(n, "default-information")), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__segment_routing.from_xml(yang.gdata.get_xml_opt_child(n, "segment-routing")), distance=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distance.from_xml(yang.gdata.get_xml_opt_child(n, "distance")), distribute_list=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__distribute_list.from_xml(yang.gdata.get_xml_opt_child(n, "distribute-list")), redistribute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__redistribute.from_xml(yang.gdata.get_xml_opt_child(n, "redistribute")), maximum_paths=yang.gdata.from_xml_opt_int(n, "maximum-paths"), advertise=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__advertise.from_xml(yang.gdata.get_xml_opt_child(n, "advertise")), ucmp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__ucmp.from_xml(yang.gdata.get_xml_opt_child(n, "ucmp")), microloop=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__microloop.from_xml(yang.gdata.get_xml_opt_child(n, "microloop")), apply_weight=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__apply_weight.from_xml(yang.gdata.get_xml_opt_child(n, "apply-weight")), summary_prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__summary_prefixes.from_xml(yang.gdata.get_xml_opt_child(n, "summary-prefixes")), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")), metric_style=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__metric_style.from_xml(yang.gdata.get_xml_opt_child(n, "metric-style")), spf_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf_interval.from_xml(yang.gdata.get_xml_opt_child(n, "spf-interval")), spf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__spf.from_xml(yang.gdata.get_xml_opt_child(n, "spf")), maximum_redistributed_prefixes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__maximum_redistributed_prefixes.from_xml(yang.gdata.get_xml_opt_child(n, "maximum-redistributed-prefixes")), propagates=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__propagates.from_xml(yang.gdata.get_xml_opt_child(n, "propagates")), adjacency_check=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__adjacency_check.from_xml(yang.gdata.get_xml_opt_child(n, "adjacency-check")), route=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__route.from_xml(yang.gdata.get_xml_opt_child(n, "route")), attached_bit=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__attached_bit.from_xml(yang.gdata.get_xml_opt_child(n, "attached-bit")), topology_id=yang.gdata.from_xml_opt_int(n, "topology-id"), fast_reroute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__fast_reroute.from_xml(yang.gdata.get_xml_opt_child(n, "fast-reroute")), monitor_convergence=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology__monitor_convergence.from_xml(yang.gdata.get_xml_opt_child(n, "monitor-convergence")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'address-family-topology'
        self.elements = elements

    mut def create(self, af_name, saf_name, topology_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if e.saf_name != saf_name:
                match = False
                continue
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry(af_name, saf_name, topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name', 'saf-name', 'topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family
    address_family_topology: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]=[], address_family_topology: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_family = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family(elements=address_family)
        self.address_family._parent = self
        self.address_family_topology = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology(elements=address_family_topology)
        self.address_family_topology._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        _address_family_topology = self.address_family_topology
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        if _address_family_topology is not None:
            children['address-family-topology'] = _address_family_topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family.from_gdata(n.get_opt_list("address-family")), address_family_topology=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology.from_gdata(n.get_opt_list("address-family-topology")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")), address_family_topology=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_topology.from_xml(yang.gdata.get_xml_children(n, "address-family-topology")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__circuit_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__csnp_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level__csnp_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry(yang.adata.MNode):
    level_id: int
    csnp_interval_time: int

    mut def __init__(self, level_id: int, csnp_interval_time: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.csnp_interval_time = csnp_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _csnp_interval_time = self.csnp_interval_time
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _csnp_interval_time is not None:
            children['csnp-interval-time'] = yang.gdata.Leaf('uint32', _csnp_interval_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry(level_id=n.get_int("level-id"), csnp_interval_time=n.get_int("csnp-interval-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), csnp_interval_time=yang.gdata.from_xml_int(n, "csnp-interval-time"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, csnp_interval_time):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry(level_id, csnp_interval_time)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval(yang.adata.MNode):
    csnp_interval_time: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels

    mut def __init__(self, csnp_interval_time: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.csnp_interval_time = csnp_interval_time
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_interval_time = self.csnp_interval_time
        _levels = self.levels
        if _csnp_interval_time is not None:
            children['csnp-interval-time'] = yang.gdata.Leaf('uint32', _csnp_interval_time)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval(csnp_interval_time=n.get_opt_int("csnp-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval(csnp_interval_time=yang.gdata.from_xml_opt_int(n, "csnp-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry(yang.adata.MNode):
    level_id: int
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable
    sometimes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes

    mut def __init__(self, level_id: int, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable=None, sometimes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.sometimes = sometimes
        self_sometimes = self.sometimes
        if self_sometimes is not None:
            self_sometimes._parent = self

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable()
        self.disable = res
        return res

    mut def create_sometimes(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes()
        self.sometimes = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _disable = self.disable
        _sometimes = self.sometimes
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _sometimes is not None:
            children['sometimes'] = _sometimes.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry(level_id=n.get_int("level-id"), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable.from_gdata(n.get_opt_container("disable")), sometimes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes.from_gdata(n.get_opt_container("sometimes")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), sometimes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level__sometimes.from_xml(yang.gdata.get_xml_opt_child(n, "sometimes")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding(yang.adata.MNode):
    always: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable
    sometimes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels

    mut def __init__(self, always: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always=None, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable=None, sometimes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.always = always
        self_always = self.always
        if self_always is not None:
            self_always._parent = self
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        self.sometimes = sometimes
        self_sometimes = self.sometimes
        if self_sometimes is not None:
            self_sometimes._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_always(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always()
        self.always = res
        return res

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable()
        self.disable = res
        return res

    mut def create_sometimes(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes()
        self.sometimes = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always = self.always
        _disable = self.disable
        _sometimes = self.sometimes
        _levels = self.levels
        if _always is not None:
            children['always'] = _always.to_gdata()
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        if _sometimes is not None:
            children['sometimes'] = _sometimes.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding(always=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always.from_gdata(n.get_opt_container("always")), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable.from_gdata(n.get_opt_container("disable")), sometimes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes.from_gdata(n.get_opt_container("sometimes")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding(always=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__always.from_xml(yang.gdata.get_xml_opt_child(n, "always")), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")), sometimes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__sometimes.from_xml(yang.gdata.get_xml_opt_child(n, "sometimes")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__hello_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level__hello_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry(yang.adata.MNode):
    level_id: int
    hello_interval_time: int

    mut def __init__(self, level_id: int, hello_interval_time: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.hello_interval_time = hello_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _hello_interval_time = self.hello_interval_time
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _hello_interval_time is not None:
            children['hello-interval-time'] = yang.gdata.Leaf('uint32', _hello_interval_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry(level_id=n.get_int("level-id"), hello_interval_time=n.get_int("hello-interval-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), hello_interval_time=yang.gdata.from_xml_int(n, "hello-interval-time"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, hello_interval_time):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry(level_id, hello_interval_time)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval(yang.adata.MNode):
    hello_interval_time: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels

    mut def __init__(self, hello_interval_time: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.hello_interval_time = hello_interval_time
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_interval_time = self.hello_interval_time
        _levels = self.levels
        if _hello_interval_time is not None:
            children['hello-interval-time'] = yang.gdata.Leaf('uint32', _hello_interval_time)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval(hello_interval_time=n.get_opt_int("hello-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval(hello_interval_time=yang.gdata.from_xml_opt_int(n, "hello-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__hello_multiplier_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level__hello_multiplier_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry(yang.adata.MNode):
    level_id: int
    hello_multiplier_value: int

    mut def __init__(self, level_id: int, hello_multiplier_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.hello_multiplier_value = hello_multiplier_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _hello_multiplier_value = self.hello_multiplier_value
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _hello_multiplier_value is not None:
            children['hello-multiplier-value'] = yang.gdata.Leaf('uint32', _hello_multiplier_value)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry(level_id=n.get_int("level-id"), hello_multiplier_value=n.get_int("hello-multiplier-value"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), hello_multiplier_value=yang.gdata.from_xml_int(n, "hello-multiplier-value"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, hello_multiplier_value):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry(level_id, hello_multiplier_value)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier(yang.adata.MNode):
    hello_multiplier_value: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels

    mut def __init__(self, hello_multiplier_value: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.hello_multiplier_value = hello_multiplier_value
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_multiplier_value = self.hello_multiplier_value
        _levels = self.levels
        if _hello_multiplier_value is not None:
            children['hello-multiplier-value'] = yang.gdata.Leaf('uint32', _hello_multiplier_value)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier(hello_multiplier_value=n.get_opt_int("hello-multiplier-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier(hello_multiplier_value=yang.gdata.from_xml_opt_int(n, "hello-multiplier-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__lsp_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level__lsp_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry(yang.adata.MNode):
    level_id: int
    lsp_interval_time: int

    mut def __init__(self, level_id: int, lsp_interval_time: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.lsp_interval_time = lsp_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _lsp_interval_time = self.lsp_interval_time
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _lsp_interval_time is not None:
            children['lsp-interval-time'] = yang.gdata.Leaf('uint32', _lsp_interval_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry(level_id=n.get_int("level-id"), lsp_interval_time=n.get_int("lsp-interval-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), lsp_interval_time=yang.gdata.from_xml_int(n, "lsp-interval-time"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, lsp_interval_time):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry(level_id, lsp_interval_time)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval(yang.adata.MNode):
    lsp_interval_time: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels

    mut def __init__(self, lsp_interval_time: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.lsp_interval_time = lsp_interval_time
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lsp_interval_time = self.lsp_interval_time
        _levels = self.levels
        if _lsp_interval_time is not None:
            children['lsp-interval-time'] = yang.gdata.Leaf('uint32', _lsp_interval_time)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval(lsp_interval_time=n.get_opt_int("lsp-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval(lsp_interval_time=yang.gdata.from_xml_opt_int(n, "lsp-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text(yang.adata.MNode):
    encrypted: str

    mut def __init__(self, encrypted: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.encrypted = encrypted

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text(encrypted=n.get_str("encrypted"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text(encrypted=yang.gdata.from_xml_str(n, "encrypted"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5(yang.adata.MNode):
    encrypted: str

    mut def __init__(self, encrypted: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.encrypted = encrypted

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5(encrypted=n.get_str("encrypted"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5(encrypted=yang.gdata.from_xml_str(n, "encrypted"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain__keychain_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain(yang.adata.MNode):
    keychain_name: str

    mut def __init__(self, keychain_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.keychain_name = keychain_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain_name = self.keychain_name
        if _keychain_name is not None:
            children['keychain-name'] = yang.gdata.Leaf('string', _keychain_name)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain(keychain_name=n.get_str("keychain-name"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain(keychain_name=yang.gdata.from_xml_str(n, "keychain-name"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password(yang.adata.MNode):
    text: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text
    hmac_md5: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5
    keychain: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain
    send_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only

    mut def __init__(self, text: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text=None, hmac_md5: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5=None, keychain: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain=None, send_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.text = text
        self_text = self.text
        if self_text is not None:
            self_text._parent = self
        self.hmac_md5 = hmac_md5
        self_hmac_md5 = self.hmac_md5
        if self_hmac_md5 is not None:
            self_hmac_md5._parent = self
        self.keychain = keychain
        self_keychain = self.keychain
        if self_keychain is not None:
            self_keychain._parent = self
        self.send_only = send_only
        self_send_only = self.send_only
        if self_send_only is not None:
            self_send_only._parent = self

    mut def create_text(self, encrypted):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text(encrypted)
        self.text = res
        return res

    mut def create_hmac_md5(self, encrypted):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5(encrypted)
        self.hmac_md5 = res
        return res

    mut def create_keychain(self, keychain_name):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain(keychain_name)
        self.keychain = res
        return res

    mut def create_send_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only()
        self.send_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _text = self.text
        _hmac_md5 = self.hmac_md5
        _keychain = self.keychain
        _send_only = self.send_only
        if _text is not None:
            children['text'] = _text.to_gdata()
        if _hmac_md5 is not None:
            children['hmac-md5'] = _hmac_md5.to_gdata()
        if _keychain is not None:
            children['keychain'] = _keychain.to_gdata()
        if _send_only is not None:
            children['send-only'] = _send_only.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password(text=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text.from_gdata(n.get_opt_container("text")), hmac_md5=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5.from_gdata(n.get_opt_container("hmac-md5")), keychain=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain.from_gdata(n.get_opt_container("keychain")), send_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only.from_gdata(n.get_opt_container("send-only")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password(text=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__text.from_xml(yang.gdata.get_xml_opt_child(n, "text")), hmac_md5=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__hmac_md5.from_xml(yang.gdata.get_xml_opt_child(n, "hmac-md5")), keychain=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__keychain.from_xml(yang.gdata.get_xml_opt_child(n, "keychain")), send_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password__send_only.from_xml(yang.gdata.get_xml_opt_child(n, "send-only")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text(yang.adata.MNode):
    encrypted: str

    mut def __init__(self, encrypted: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.encrypted = encrypted

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text(encrypted=n.get_str("encrypted"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text(encrypted=yang.gdata.from_xml_str(n, "encrypted"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5(yang.adata.MNode):
    encrypted: str

    mut def __init__(self, encrypted: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.encrypted = encrypted

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5(encrypted=n.get_str("encrypted"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5(encrypted=yang.gdata.from_xml_str(n, "encrypted"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain__keychain_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain(yang.adata.MNode):
    keychain_name: str

    mut def __init__(self, keychain_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.keychain_name = keychain_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain_name = self.keychain_name
        if _keychain_name is not None:
            children['keychain-name'] = yang.gdata.Leaf('string', _keychain_name)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain(keychain_name=n.get_str("keychain-name"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain(keychain_name=yang.gdata.from_xml_str(n, "keychain-name"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry(yang.adata.MNode):
    level_id: int
    text: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text
    hmac_md5: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5
    keychain: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain
    send_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only

    mut def __init__(self, level_id: int, text: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text=None, hmac_md5: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5=None, keychain: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain=None, send_only: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.text = text
        self_text = self.text
        if self_text is not None:
            self_text._parent = self
        self.hmac_md5 = hmac_md5
        self_hmac_md5 = self.hmac_md5
        if self_hmac_md5 is not None:
            self_hmac_md5._parent = self
        self.keychain = keychain
        self_keychain = self.keychain
        if self_keychain is not None:
            self_keychain._parent = self
        self.send_only = send_only
        self_send_only = self.send_only
        if self_send_only is not None:
            self_send_only._parent = self

    mut def create_text(self, encrypted):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text(encrypted)
        self.text = res
        return res

    mut def create_hmac_md5(self, encrypted):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5(encrypted)
        self.hmac_md5 = res
        return res

    mut def create_keychain(self, keychain_name):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain(keychain_name)
        self.keychain = res
        return res

    mut def create_send_only(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only()
        self.send_only = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _text = self.text
        _hmac_md5 = self.hmac_md5
        _keychain = self.keychain
        _send_only = self.send_only
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _text is not None:
            children['text'] = _text.to_gdata()
        if _hmac_md5 is not None:
            children['hmac-md5'] = _hmac_md5.to_gdata()
        if _keychain is not None:
            children['keychain'] = _keychain.to_gdata()
        if _send_only is not None:
            children['send-only'] = _send_only.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry(level_id=n.get_int("level-id"), text=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text.from_gdata(n.get_opt_container("text")), hmac_md5=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5.from_gdata(n.get_opt_container("hmac-md5")), keychain=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain.from_gdata(n.get_opt_container("keychain")), send_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only.from_gdata(n.get_opt_container("send-only")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), text=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__text.from_xml(yang.gdata.get_xml_opt_child(n, "text")), hmac_md5=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__hmac_md5.from_xml(yang.gdata.get_xml_opt_child(n, "hmac-md5")), keychain=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__keychain.from_xml(yang.gdata.get_xml_opt_child(n, "keychain")), send_only=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level__send_only.from_xml(yang.gdata.get_xml_opt_child(n, "send-only")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, text, hmac_md5, keychain):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry(level_id, text, hmac_md5, keychain)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry(yang.adata.MNode):
    level_id: int
    encrypted: str

    mut def __init__(self, level_id: int, encrypted: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.encrypted = encrypted

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _encrypted = self.encrypted
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry(level_id=n.get_int("level-id"), encrypted=n.get_str("encrypted"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), encrypted=yang.gdata.from_xml_str(n, "encrypted"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, encrypted):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry(level_id, encrypted)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept(yang.adata.MNode):
    encrypted: ?str
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels

    mut def __init__(self, encrypted: ?str, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.encrypted = encrypted
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        _levels = self.levels
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept(encrypted=n.get_opt_str("encrypted"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept(encrypted=yang.gdata.from_xml_opt_str(n, "encrypted"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__number_of_lsps(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level__number_of_lsps(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry(yang.adata.MNode):
    level_id: int
    number_of_lsps: int

    mut def __init__(self, level_id: int, number_of_lsps: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.number_of_lsps = number_of_lsps

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _number_of_lsps = self.number_of_lsps
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _number_of_lsps is not None:
            children['number-of-lsps'] = yang.gdata.Leaf('uint32', _number_of_lsps)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry(level_id=n.get_int("level-id"), number_of_lsps=n.get_int("number-of-lsps"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), number_of_lsps=yang.gdata.from_xml_int(n, "number-of-lsps"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, number_of_lsps):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry(level_id, number_of_lsps)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold(yang.adata.MNode):
    number_of_lsps: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels

    mut def __init__(self, number_of_lsps: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.number_of_lsps = number_of_lsps
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _number_of_lsps = self.number_of_lsps
        _levels = self.levels
        if _number_of_lsps is not None:
            children['number-of-lsps'] = yang.gdata.Leaf('uint32', _number_of_lsps)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold(number_of_lsps=n.get_opt_int("number-of-lsps"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold(number_of_lsps=yang.gdata.from_xml_opt_int(n, "number-of-lsps"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood(yang.adata.MNode):
    threshold: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold

    mut def __init__(self, threshold: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if threshold is not None:
            self.threshold = threshold
        else:
            self.threshold = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold()
        self_threshold = self.threshold
        if self_threshold is not None:
            self_threshold._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _threshold = self.threshold
        if _threshold is not None:
            children['threshold'] = _threshold.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood(threshold=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold.from_gdata(n.get_opt_container("threshold")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood(threshold=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood__threshold.from_xml(yang.gdata.get_xml_opt_child(n, "threshold")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp(yang.adata.MNode):
    fast_flood: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood

    mut def __init__(self, fast_flood: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if fast_flood is not None:
            self.fast_flood = fast_flood
        else:
            self.fast_flood = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood()
        self_fast_flood = self.fast_flood
        if self_fast_flood is not None:
            self_fast_flood._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fast_flood = self.fast_flood
        if _fast_flood is not None:
            children['fast-flood'] = _fast_flood.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp(fast_flood=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood.from_gdata(n.get_opt_container("fast-flood")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp(fast_flood=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp__fast_flood.from_xml(yang.gdata.get_xml_opt_child(n, "fast-flood")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__priority_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level__priority_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry(yang.adata.MNode):
    level_id: int
    priority_value: int

    mut def __init__(self, level_id: int, priority_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.priority_value = priority_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _priority_value = self.priority_value
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _priority_value is not None:
            children['priority-value'] = yang.gdata.Leaf('uint32', _priority_value)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry(level_id=n.get_int("level-id"), priority_value=n.get_int("priority-value"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), priority_value=yang.gdata.from_xml_int(n, "priority-value"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, priority_value):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry(level_id, priority_value)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority(yang.adata.MNode):
    priority_value: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels

    mut def __init__(self, priority_value: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.priority_value = priority_value
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority_value = self.priority_value
        _levels = self.levels
        if _priority_value is not None:
            children['priority-value'] = yang.gdata.Leaf('uint32', _priority_value)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority(priority_value=n.get_opt_int("priority-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority(priority_value=yang.gdata.from_xml_opt_int(n, "priority-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__retransmit_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level__retransmit_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry(yang.adata.MNode):
    level_id: int
    retransmit_interval_time: int

    mut def __init__(self, level_id: int, retransmit_interval_time: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.retransmit_interval_time = retransmit_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _retransmit_interval_time = self.retransmit_interval_time
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _retransmit_interval_time is not None:
            children['retransmit-interval-time'] = yang.gdata.Leaf('uint32', _retransmit_interval_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry(level_id=n.get_int("level-id"), retransmit_interval_time=n.get_int("retransmit-interval-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), retransmit_interval_time=yang.gdata.from_xml_int(n, "retransmit-interval-time"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, retransmit_interval_time):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry(level_id, retransmit_interval_time)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval(yang.adata.MNode):
    retransmit_interval_time: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels

    mut def __init__(self, retransmit_interval_time: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.retransmit_interval_time = retransmit_interval_time
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _retransmit_interval_time = self.retransmit_interval_time
        _levels = self.levels
        if _retransmit_interval_time is not None:
            children['retransmit-interval-time'] = yang.gdata.Leaf('uint32', _retransmit_interval_time)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval(retransmit_interval_time=n.get_opt_int("retransmit-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval(retransmit_interval_time=yang.gdata.from_xml_opt_int(n, "retransmit-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__retransmit_throttle_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level__retransmit_throttle_interval_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry(yang.adata.MNode):
    level_id: int
    retransmit_throttle_interval_time: int

    mut def __init__(self, level_id: int, retransmit_throttle_interval_time: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.retransmit_throttle_interval_time = retransmit_throttle_interval_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _retransmit_throttle_interval_time = self.retransmit_throttle_interval_time
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _retransmit_throttle_interval_time is not None:
            children['retransmit-throttle-interval-time'] = yang.gdata.Leaf('uint32', _retransmit_throttle_interval_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry(level_id=n.get_int("level-id"), retransmit_throttle_interval_time=n.get_int("retransmit-throttle-interval-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), retransmit_throttle_interval_time=yang.gdata.from_xml_int(n, "retransmit-throttle-interval-time"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, retransmit_throttle_interval_time):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry(level_id, retransmit_throttle_interval_time)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval(yang.adata.MNode):
    retransmit_throttle_interval_time: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels

    mut def __init__(self, retransmit_throttle_interval_time: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.retransmit_throttle_interval_time = retransmit_throttle_interval_time
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _retransmit_throttle_interval_time = self.retransmit_throttle_interval_time
        _levels = self.levels
        if _retransmit_throttle_interval_time is not None:
            children['retransmit-throttle-interval-time'] = yang.gdata.Leaf('uint32', _retransmit_throttle_interval_time)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval(retransmit_throttle_interval_time=n.get_opt_int("retransmit-throttle-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval(retransmit_throttle_interval_time=yang.gdata.from_xml_opt_int(n, "retransmit-throttle-interval-time"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down(yang.adata.MNode):
    fast_detect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect

    mut def __init__(self, fast_detect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.fast_detect = fast_detect
        self_fast_detect = self.fast_detect
        if self_fast_detect is not None:
            self_fast_detect._parent = self

    mut def create_fast_detect(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect()
        self.fast_detect = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fast_detect = self.fast_detect
        if _fast_detect is not None:
            children['fast-detect'] = _fast_detect.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down(fast_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect.from_gdata(n.get_opt_container("fast-detect")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down(fast_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down__fast_detect.from_xml(yang.gdata.get_xml_opt_child(n, "fast-detect")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry(yang.adata.MNode):
    level_id: int
    n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear

    mut def __init__(self, level_id: int, n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.n_flag_clear = n_flag_clear
        self_n_flag_clear = self.n_flag_clear
        if self_n_flag_clear is not None:
            self_n_flag_clear._parent = self

    mut def create_n_flag_clear(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear()
        self.n_flag_clear = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _n_flag_clear = self.n_flag_clear
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _n_flag_clear is not None:
            children['n-flag-clear'] = _n_flag_clear.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry(level_id=n.get_int("level-id"), n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear.from_gdata(n.get_opt_container("n-flag-clear")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level__n_flag_clear.from_xml(yang.gdata.get_xml_opt_child(n, "n-flag-clear")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry(yang.adata.MNode):
    level_id: int

    mut def __init__(self, level_id: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry(level_id=n.get_int("level-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes(yang.adata.MNode):
    n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels
    anycast: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast
    anycast_levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels

    mut def __init__(self, n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels=None, anycast: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast=None, anycast_levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.n_flag_clear = n_flag_clear
        self_n_flag_clear = self.n_flag_clear
        if self_n_flag_clear is not None:
            self_n_flag_clear._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self
        self.anycast = anycast
        self_anycast = self.anycast
        if self_anycast is not None:
            self_anycast._parent = self
        if anycast_levels is not None:
            self.anycast_levels = anycast_levels
        else:
            self.anycast_levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels()
        self_anycast_levels = self.anycast_levels
        if self_anycast_levels is not None:
            self_anycast_levels._parent = self

    mut def create_n_flag_clear(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear()
        self.n_flag_clear = res
        return res

    mut def create_anycast(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast()
        self.anycast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _n_flag_clear = self.n_flag_clear
        _levels = self.levels
        _anycast = self.anycast
        _anycast_levels = self.anycast_levels
        if _n_flag_clear is not None:
            children['n-flag-clear'] = _n_flag_clear.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        if _anycast is not None:
            children['anycast'] = _anycast.to_gdata()
        if _anycast_levels is not None:
            children['anycast-levels'] = _anycast_levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes(n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear.from_gdata(n.get_opt_container("n-flag-clear")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels.from_gdata(n.get_opt_container("levels")), anycast=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast.from_gdata(n.get_opt_container("anycast")), anycast_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels.from_gdata(n.get_opt_container("anycast-levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes(n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__n_flag_clear.from_xml(yang.gdata.get_xml_opt_child(n, "n-flag-clear")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")), anycast=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast.from_xml(yang.gdata.get_xml_opt_child(n, "anycast")), anycast_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes__anycast_levels.from_xml(yang.gdata.get_xml_opt_child(n, "anycast-levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__affinity_names(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies__anomaly(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies(yang.adata.MNode):
    anomaly: list[str]

    mut def __init__(self, anomaly: ?list[str]=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if anomaly is not None:
            self.anomaly = anomaly
        else:
            self.anomaly = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['anomaly'] = yang.gdata.LeafList(self.anomaly)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies(anomaly=n.get_opt_strs("anomaly"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies(anomaly=yang.gdata.from_xml_opt_strs(n, "anomaly"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos(yang.adata.MNode):
    affinity_names: list[str]
    anomalies: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies

    mut def __init__(self, affinity_names: ?list[str]=None, anomalies: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if affinity_names is not None:
            self.affinity_names = affinity_names
        else:
            self.affinity_names = []
        if anomalies is not None:
            self.anomalies = anomalies
        else:
            self.anomalies = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies()
        self_anomalies = self.anomalies
        if self_anomalies is not None:
            self_anomalies._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _anomalies = self.anomalies
        children['affinity-names'] = yang.gdata.LeafList(self.affinity_names)
        if _anomalies is not None:
            children['anomalies'] = _anomalies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos(affinity_names=n.get_opt_strs("affinity-names"), anomalies=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies.from_gdata(n.get_opt_container("anomalies")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos(affinity_names=yang.gdata.from_xml_opt_strs(n, "affinity-names"), anomalies=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos__anomalies.from_xml(yang.gdata.get_xml_opt_child(n, "anomalies")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity(yang.adata.MNode):
    flex_algos: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos

    mut def __init__(self, flex_algos: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if flex_algos is not None:
            self.flex_algos = flex_algos
        else:
            self.flex_algos = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos()
        self_flex_algos = self.flex_algos
        if self_flex_algos is not None:
            self_flex_algos._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flex_algos = self.flex_algos
        if _flex_algos is not None:
            children['flex-algos'] = _flex_algos.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity(flex_algos=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos.from_gdata(n.get_opt_container("flex-algos")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity(flex_algos=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity__flex_algos.from_xml(yang.gdata.get_xml_opt_child(n, "flex-algos")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics(yang.adata.MNode):
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum
    high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high
    disabled: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled

    mut def __init__(self, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum=None, high: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high=None, disabled: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self
        self.high = high
        self_high = self.high
        if self_high is not None:
            self_high._parent = self
        self.disabled = disabled
        self_disabled = self.disabled
        if self_disabled is not None:
            self_disabled._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum()
        self.maximum = res
        return res

    mut def create_high(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high()
        self.high = res
        return res

    mut def create_disabled(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled()
        self.disabled = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        _high = self.high
        _disabled = self.disabled
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        if _high is not None:
            children['high'] = _high.to_gdata()
        if _disabled is not None:
            children['disabled'] = _disabled.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics(maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum.from_gdata(n.get_opt_container("maximum")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high.from_gdata(n.get_opt_container("high")), disabled=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled.from_gdata(n.get_opt_container("disabled")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics(maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")), high=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__high.from_xml(yang.gdata.get_xml_opt_child(n, "high")), disabled=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics__disabled.from_xml(yang.gdata.get_xml_opt_child(n, "disabled")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override(yang.adata.MNode):
    metrics: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics

    mut def __init__(self, metrics: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if metrics is not None:
            self.metrics = metrics
        else:
            self.metrics = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics()
        self_metrics = self.metrics
        if self_metrics is not None:
            self_metrics._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _metrics = self.metrics
        if _metrics is not None:
            children['metrics'] = _metrics.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override(metrics=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics.from_gdata(n.get_opt_container("metrics")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override(metrics=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override__metrics.from_xml(yang.gdata.get_xml_opt_child(n, "metrics")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize__offset(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize(yang.adata.MNode):
    interval: ?int
    offset: ?int

    mut def __init__(self, interval: ?int, offset: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interval = interval
        self.offset = offset

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interval = self.interval
        _offset = self.offset
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('uint32', _interval)
        if _offset is not None:
            children['offset'] = yang.gdata.Leaf('uint32', _offset)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize(interval=n.get_opt_int("interval"), offset=n.get_opt_int("offset"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize(interval=yang.gdata.from_xml_opt_int(n, "interval"), offset=yang.gdata.from_xml_opt_int(n, "offset"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay(yang.adata.MNode):
    normalize: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize

    mut def __init__(self, normalize: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if normalize is not None:
            self.normalize = normalize
        else:
            self.normalize = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize()
        self_normalize = self.normalize
        if self_normalize is not None:
            self_normalize._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _normalize = self.normalize
        if _normalize is not None:
            children['normalize'] = _normalize.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay(normalize=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize.from_gdata(n.get_opt_container("normalize")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay(normalize=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay__normalize.from_xml(yang.gdata.get_xml_opt_child(n, "normalize")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(yang.adata.MNode):
    ipv4: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4
    ipv6: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4=None, ipv6: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ipv4 = ipv4
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        self.ipv6 = ipv6
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def create_ipv4(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4()
        self.ipv4 = res
        return res

    mut def create_ipv6(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6()
        self.ipv6 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(ipv4=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(ipv4=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(yang.adata.MNode):
    fast_detect: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect
    minimum_interval: ?int
    multiplier: ?int

    mut def __init__(self, fast_detect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect=None, minimum_interval: ?int, multiplier: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if fast_detect is not None:
            self.fast_detect = fast_detect
        else:
            self.fast_detect = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect()
        self_fast_detect = self.fast_detect
        if self_fast_detect is not None:
            self_fast_detect._parent = self
        self.minimum_interval = minimum_interval
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fast_detect = self.fast_detect
        _minimum_interval = self.minimum_interval
        _multiplier = self.multiplier
        if _fast_detect is not None:
            children['fast-detect'] = _fast_detect.to_gdata()
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('uint32', _minimum_interval)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(fast_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect.from_gdata(n.get_opt_container("fast-detect")), minimum_interval=n.get_opt_int("minimum-interval"), multiplier=n.get_opt_int("multiplier"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(fast_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect.from_xml(yang.gdata.get_xml_opt_child(n, "fast-detect")), minimum_interval=yang.gdata.from_xml_opt_int(n, "minimum-interval"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__mesh_group_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group(yang.adata.MNode):
    mesh_group_number: ?int
    blocked: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked

    mut def __init__(self, mesh_group_number: ?int, blocked: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.mesh_group_number = mesh_group_number
        self.blocked = blocked
        self_blocked = self.blocked
        if self_blocked is not None:
            self_blocked._parent = self

    mut def create_blocked(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked()
        self.blocked = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mesh_group_number = self.mesh_group_number
        _blocked = self.blocked
        if _mesh_group_number is not None:
            children['mesh-group-number'] = yang.gdata.Leaf('uint32', _mesh_group_number)
        if _blocked is not None:
            children['blocked'] = _blocked.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group(mesh_group_number=n.get_opt_int("mesh-group-number"), blocked=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked.from_gdata(n.get_opt_container("blocked")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group(mesh_group_number=yang.gdata.from_xml_opt_int(n, "mesh-group-number"), blocked=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group__blocked.from_xml(yang.gdata.get_xml_opt_child(n, "blocked")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__saf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    default_metric: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum

    mut def __init__(self, level_id: int, default_metric: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.default_metric = default_metric
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _default_metric = self.default_metric
        _maximum = self.maximum
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(level_id=n.get_int("level-id"), default_metric=n.get_opt_int("default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum.from_gdata(n.get_opt_container("maximum")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), default_metric=yang.gdata.from_xml_opt_int(n, "default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth__threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth(yang.adata.MNode):
    multiplier: ?int
    threshold: ?int

    mut def __init__(self, multiplier: ?int, threshold: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.multiplier = multiplier
        self.threshold = threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _multiplier = self.multiplier
        _threshold = self.threshold
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _threshold is not None:
            children['threshold'] = yang.gdata.Leaf('uint32', _threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth(multiplier=n.get_opt_int("multiplier"), threshold=n.get_opt_int("threshold"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth(multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), threshold=yang.gdata.from_xml_opt_int(n, "threshold"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay(yang.adata.MNode):
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum

    mut def __init__(self, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay(increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum.from_gdata(n.get_opt_container("maximum")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay(increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss(yang.adata.MNode):
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum

    mut def __init__(self, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss(increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum.from_gdata(n.get_opt_container("maximum")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss(increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric(yang.adata.MNode):
    delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay
    loss: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum

    mut def __init__(self, delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay=None, loss: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss=None, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.delay = delay
        self_delay = self.delay
        if self_delay is not None:
            self_delay._parent = self
        self.loss = loss
        self_loss = self.loss
        if self_loss is not None:
            self_loss._parent = self
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_delay(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay()
        self.delay = res
        return res

    mut def create_loss(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss()
        self.loss = res
        return res

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay = self.delay
        _loss = self.loss
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        if _loss is not None:
            children['loss'] = _loss.to_gdata()
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric(delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay.from_gdata(n.get_opt_container("delay")), loss=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss.from_gdata(n.get_opt_container("loss")), increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum.from_gdata(n.get_opt_container("maximum")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric(delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__delay.from_xml(yang.gdata.get_xml_opt_child(n, "delay")), loss=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__loss.from_xml(yang.gdata.get_xml_opt_child(n, "loss")), increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay(yang.adata.MNode):
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum

    mut def __init__(self, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay(increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum.from_gdata(n.get_opt_container("maximum")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay(increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss(yang.adata.MNode):
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum

    mut def __init__(self, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss(increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum.from_gdata(n.get_opt_container("maximum")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss(increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry(yang.adata.MNode):
    level_id: int
    delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay
    loss: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum

    mut def __init__(self, level_id: int, delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay=None, loss: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss=None, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.delay = delay
        self_delay = self.delay
        if self_delay is not None:
            self_delay._parent = self
        self.loss = loss
        self_loss = self.loss
        if self_loss is not None:
            self_loss._parent = self
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_delay(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay()
        self.delay = res
        return res

    mut def create_loss(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss()
        self.loss = res
        return res

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _delay = self.delay
        _loss = self.loss
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        if _loss is not None:
            children['loss'] = _loss.to_gdata()
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry(level_id=n.get_int("level-id"), delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay.from_gdata(n.get_opt_container("delay")), loss=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss.from_gdata(n.get_opt_container("loss")), increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum.from_gdata(n.get_opt_container("maximum")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__delay.from_xml(yang.gdata.get_xml_opt_child(n, "delay")), loss=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__loss.from_xml(yang.gdata.get_xml_opt_child(n, "loss")), increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay(yang.adata.MNode):
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum

    mut def __init__(self, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay(increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum.from_gdata(n.get_opt_container("maximum")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay(increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss(yang.adata.MNode):
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum

    mut def __init__(self, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss(increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum.from_gdata(n.get_opt_container("maximum")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss(increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay(yang.adata.MNode):
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum

    mut def __init__(self, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay(increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum.from_gdata(n.get_opt_container("maximum")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay(increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss(yang.adata.MNode):
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum

    mut def __init__(self, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss(increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum.from_gdata(n.get_opt_container("maximum")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss(increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__increment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry(yang.adata.MNode):
    level_id: int
    delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay
    loss: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum

    mut def __init__(self, level_id: int, delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay=None, loss: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss=None, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.delay = delay
        self_delay = self.delay
        if self_delay is not None:
            self_delay._parent = self
        self.loss = loss
        self_loss = self.loss
        if self_loss is not None:
            self_loss._parent = self
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_delay(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay()
        self.delay = res
        return res

    mut def create_loss(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss()
        self.loss = res
        return res

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _delay = self.delay
        _loss = self.loss
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        if _loss is not None:
            children['loss'] = _loss.to_gdata()
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry(level_id=n.get_int("level-id"), delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay.from_gdata(n.get_opt_container("delay")), loss=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss.from_gdata(n.get_opt_container("loss")), increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum.from_gdata(n.get_opt_container("maximum")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__delay.from_xml(yang.gdata.get_xml_opt_child(n, "delay")), loss=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__loss.from_xml(yang.gdata.get_xml_opt_child(n, "loss")), increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly(yang.adata.MNode):
    te_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric
    te_metric_levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels
    delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay
    loss: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss
    increment: ?int
    multiplier: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels

    mut def __init__(self, te_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric=None, te_metric_levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels=None, delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay=None, loss: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss=None, increment: ?int, multiplier: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if te_metric is not None:
            self.te_metric = te_metric
        else:
            self.te_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric()
        self_te_metric = self.te_metric
        if self_te_metric is not None:
            self_te_metric._parent = self
        if te_metric_levels is not None:
            self.te_metric_levels = te_metric_levels
        else:
            self.te_metric_levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels()
        self_te_metric_levels = self.te_metric_levels
        if self_te_metric_levels is not None:
            self_te_metric_levels._parent = self
        self.delay = delay
        self_delay = self.delay
        if self_delay is not None:
            self_delay._parent = self
        self.loss = loss
        self_loss = self.loss
        if self_loss is not None:
            self_loss._parent = self
        self.increment = increment
        self.multiplier = multiplier
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_delay(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay()
        self.delay = res
        return res

    mut def create_loss(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss()
        self.loss = res
        return res

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _te_metric = self.te_metric
        _te_metric_levels = self.te_metric_levels
        _delay = self.delay
        _loss = self.loss
        _increment = self.increment
        _multiplier = self.multiplier
        _maximum = self.maximum
        _levels = self.levels
        if _te_metric is not None:
            children['te-metric'] = _te_metric.to_gdata()
        if _te_metric_levels is not None:
            children['te-metric-levels'] = _te_metric_levels.to_gdata()
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        if _loss is not None:
            children['loss'] = _loss.to_gdata()
        if _increment is not None:
            children['increment'] = yang.gdata.Leaf('uint32', _increment)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly(te_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric.from_gdata(n.get_opt_container("te-metric")), te_metric_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels.from_gdata(n.get_opt_container("te-metric-levels")), delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay.from_gdata(n.get_opt_container("delay")), loss=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss.from_gdata(n.get_opt_container("loss")), increment=n.get_opt_int("increment"), multiplier=n.get_opt_int("multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum.from_gdata(n.get_opt_container("maximum")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly(te_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric.from_xml(yang.gdata.get_xml_opt_child(n, "te-metric")), te_metric_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__te_metric_levels.from_xml(yang.gdata.get_xml_opt_child(n, "te-metric-levels")), delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__delay.from_xml(yang.gdata.get_xml_opt_child(n, "delay")), loss=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__loss.from_xml(yang.gdata.get_xml_opt_child(n, "loss")), increment=yang.gdata.from_xml_opt_int(n, "increment"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback(yang.adata.MNode):
    bandwidth: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth
    anomaly: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly

    mut def __init__(self, bandwidth: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth=None, anomaly: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if bandwidth is not None:
            self.bandwidth = bandwidth
        else:
            self.bandwidth = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth()
        self_bandwidth = self.bandwidth
        if self_bandwidth is not None:
            self_bandwidth._parent = self
        if anomaly is not None:
            self.anomaly = anomaly
        else:
            self.anomaly = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly()
        self_anomaly = self.anomaly
        if self_anomaly is not None:
            self_anomaly._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bandwidth = self.bandwidth
        _anomaly = self.anomaly
        if _bandwidth is not None:
            children['bandwidth'] = _bandwidth.to_gdata()
        if _anomaly is not None:
            children['anomaly'] = _anomaly.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback(bandwidth=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth.from_gdata(n.get_opt_container("bandwidth")), anomaly=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly.from_gdata(n.get_opt_container("anomaly")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback(bandwidth=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "bandwidth")), anomaly=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback__anomaly.from_xml(yang.gdata.get_xml_opt_child(n, "anomaly")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(yang.adata.MNode):
    default_metric: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels
    fallback: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback

    mut def __init__(self, default_metric: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels=None, fallback: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.default_metric = default_metric
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self
        if fallback is not None:
            self.fallback = fallback
        else:
            self.fallback = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback()
        self_fallback = self.fallback
        if self_fallback is not None:
            self_fallback._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric = self.default_metric
        _maximum = self.maximum
        _levels = self.levels
        _fallback = self.fallback
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        if _fallback is not None:
            children['fallback'] = _fallback.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(default_metric=n.get_opt_int("default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum.from_gdata(n.get_opt_container("maximum")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels.from_gdata(n.get_opt_container("levels")), fallback=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback.from_gdata(n.get_opt_container("fallback")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(default_metric=yang.gdata.from_xml_opt_int(n, "default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")), fallback=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__fallback.from_xml(yang.gdata.get_xml_opt_child(n, "fallback")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric__flex_algo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric(yang.adata.MNode):
    flex_algo: ?int

    mut def __init__(self, flex_algo: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.flex_algo = flex_algo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flex_algo = self.flex_algo
        if _flex_algo is not None:
            children['flex-algo'] = yang.gdata.Leaf('uint32', _flex_algo)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric(flex_algo=n.get_opt_int("flex-algo"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric(flex_algo=yang.gdata.from_xml_opt_int(n, "flex-algo"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level__flex_algo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry(yang.adata.MNode):
    level_id: int
    flex_algo: int

    mut def __init__(self, level_id: int, flex_algo: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.flex_algo = flex_algo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _flex_algo = self.flex_algo
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _flex_algo is not None:
            children['flex-algo'] = yang.gdata.Leaf('uint32', _flex_algo)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry(level_id=n.get_int("level-id"), flex_algo=n.get_int("flex-algo"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), flex_algo=yang.gdata.from_xml_int(n, "flex-algo"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, flex_algo):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry(level_id, flex_algo)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync(yang.adata.MNode):
    level: ?int

    mut def __init__(self, level: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = level

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync(level=n.get_opt_int("level"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync(level=yang.gdata.from_xml_opt_int(n, "level"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp(yang.adata.MNode):
    sync: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync

    mut def __init__(self, sync: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sync = sync
        self_sync = self.sync
        if self_sync is not None:
            self_sync._parent = self

    mut def create_sync(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync()
        self.sync = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sync = self.sync
        if _sync is not None:
            children['sync'] = _sync.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp(sync=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync.from_gdata(n.get_opt_container("sync")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp(sync=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp__sync.from_xml(yang.gdata.get_xml_opt_child(n, "sync")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls(yang.adata.MNode):
    ldp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp

    mut def __init__(self, ldp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if ldp is not None:
            self.ldp = ldp
        else:
            self.ldp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp()
        self_ldp = self.ldp
        if self_ldp is not None:
            self_ldp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ldp = self.ldp
        if _ldp is not None:
            children['ldp'] = _ldp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls(ldp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp.from_gdata(n.get_opt_container("ldp")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls(ldp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls__ldp.from_xml(yang.gdata.get_xml_opt_child(n, "ldp")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__interface_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level__interface_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry(yang.adata.MNode):
    level_id: int
    interface_tag: int

    mut def __init__(self, level_id: int, interface_tag: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.interface_tag = interface_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _interface_tag = self.interface_tag
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _interface_tag is not None:
            children['interface-tag'] = yang.gdata.Leaf('uint32', _interface_tag)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry(level_id=n.get_int("level-id"), interface_tag=n.get_int("interface-tag"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), interface_tag=yang.gdata.from_xml_int(n, "interface-tag"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, interface_tag):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry(level_id, interface_tag)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag(yang.adata.MNode):
    interface_tag: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels

    mut def __init__(self, interface_tag: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_tag = interface_tag
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_tag = self.interface_tag
        _levels = self.levels
        if _interface_tag is not None:
            children['interface-tag'] = yang.gdata.Leaf('uint32', _interface_tag)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag(interface_tag=n.get_opt_int("interface-tag"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag(interface_tag=yang.gdata.from_xml_opt_int(n, "interface-tag"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index__sid_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(yang.adata.MNode):
    sid_index: int

    mut def __init__(self, sid_index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_index = sid_index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_index = self.sid_index
        if _sid_index is not None:
            children['sid-index'] = yang.gdata.Leaf('uint32', _sid_index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(sid_index=n.get_int("sid-index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(sid_index=yang.gdata.from_xml_int(n, "sid-index"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute__sid_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute(yang.adata.MNode):
    sid_value: int

    mut def __init__(self, sid_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_value = sid_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_value = self.sid_value
        if _sid_value is not None:
            children['sid-value'] = yang.gdata.Leaf('uint32', _sid_value)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute(sid_value=n.get_int("sid-value"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute(sid_value=yang.gdata.from_xml_int(n, "sid-value"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(yang.adata.MNode):
    index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index
    absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute
    php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable
    explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null
    n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear

    mut def __init__(self, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index=None, absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute=None, php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable=None, explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null=None, n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        self_index = self.index
        if self_index is not None:
            self_index._parent = self
        self.absolute = absolute
        self_absolute = self.absolute
        if self_absolute is not None:
            self_absolute._parent = self
        self.php_disable = php_disable
        self_php_disable = self.php_disable
        if self_php_disable is not None:
            self_php_disable._parent = self
        self.explicit_null = explicit_null
        self_explicit_null = self.explicit_null
        if self_explicit_null is not None:
            self_explicit_null._parent = self
        self.n_flag_clear = n_flag_clear
        self_n_flag_clear = self.n_flag_clear
        if self_n_flag_clear is not None:
            self_n_flag_clear._parent = self

    mut def create_index(self, sid_index):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(sid_index)
        self.index = res
        return res

    mut def create_absolute(self, sid_value):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute(sid_value)
        self.absolute = res
        return res

    mut def create_php_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable()
        self.php_disable = res
        return res

    mut def create_explicit_null(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null()
        self.explicit_null = res
        return res

    mut def create_n_flag_clear(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear()
        self.n_flag_clear = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _absolute = self.absolute
        _php_disable = self.php_disable
        _explicit_null = self.explicit_null
        _n_flag_clear = self.n_flag_clear
        if _index is not None:
            children['index'] = _index.to_gdata()
        if _absolute is not None:
            children['absolute'] = _absolute.to_gdata()
        if _php_disable is not None:
            children['php-disable'] = _php_disable.to_gdata()
        if _explicit_null is not None:
            children['explicit-null'] = _explicit_null.to_gdata()
        if _n_flag_clear is not None:
            children['n-flag-clear'] = _n_flag_clear.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index.from_gdata(n.get_opt_container("index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute.from_gdata(n.get_opt_container("absolute")), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable.from_gdata(n.get_opt_container("php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null.from_gdata(n.get_opt_container("explicit-null")), n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear.from_gdata(n.get_opt_container("n-flag-clear")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__absolute.from_xml(yang.gdata.get_xml_opt_child(n, "absolute")), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__php_disable.from_xml(yang.gdata.get_xml_opt_child(n, "php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__explicit_null.from_xml(yang.gdata.get_xml_opt_child(n, "explicit-null")), n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__n_flag_clear.from_xml(yang.gdata.get_xml_opt_child(n, "n-flag-clear")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index__sid_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index(yang.adata.MNode):
    sid_index: int

    mut def __init__(self, sid_index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_index = sid_index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_index = self.sid_index
        if _sid_index is not None:
            children['sid-index'] = yang.gdata.Leaf('uint32', _sid_index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index(sid_index=n.get_int("sid-index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index(sid_index=yang.gdata.from_xml_int(n, "sid-index"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute__sid_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute(yang.adata.MNode):
    sid_value: int

    mut def __init__(self, sid_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_value = sid_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_value = self.sid_value
        if _sid_value is not None:
            children['sid-value'] = yang.gdata.Leaf('uint32', _sid_value)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute(sid_value=n.get_int("sid-value"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute(sid_value=yang.gdata.from_xml_int(n, "sid-value"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf(yang.adata.MNode):
    index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index
    absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute
    php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable
    explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null
    n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear

    mut def __init__(self, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index=None, absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute=None, php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable=None, explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null=None, n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = index
        self_index = self.index
        if self_index is not None:
            self_index._parent = self
        self.absolute = absolute
        self_absolute = self.absolute
        if self_absolute is not None:
            self_absolute._parent = self
        self.php_disable = php_disable
        self_php_disable = self.php_disable
        if self_php_disable is not None:
            self_php_disable._parent = self
        self.explicit_null = explicit_null
        self_explicit_null = self.explicit_null
        if self_explicit_null is not None:
            self_explicit_null._parent = self
        self.n_flag_clear = n_flag_clear
        self_n_flag_clear = self.n_flag_clear
        if self_n_flag_clear is not None:
            self_n_flag_clear._parent = self

    mut def create_index(self, sid_index):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index(sid_index)
        self.index = res
        return res

    mut def create_absolute(self, sid_value):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute(sid_value)
        self.absolute = res
        return res

    mut def create_php_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable()
        self.php_disable = res
        return res

    mut def create_explicit_null(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null()
        self.explicit_null = res
        return res

    mut def create_n_flag_clear(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear()
        self.n_flag_clear = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _absolute = self.absolute
        _php_disable = self.php_disable
        _explicit_null = self.explicit_null
        _n_flag_clear = self.n_flag_clear
        if _index is not None:
            children['index'] = _index.to_gdata()
        if _absolute is not None:
            children['absolute'] = _absolute.to_gdata()
        if _php_disable is not None:
            children['php-disable'] = _php_disable.to_gdata()
        if _explicit_null is not None:
            children['explicit-null'] = _explicit_null.to_gdata()
        if _n_flag_clear is not None:
            children['n-flag-clear'] = _n_flag_clear.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index.from_gdata(n.get_opt_container("index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute.from_gdata(n.get_opt_container("absolute")), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable.from_gdata(n.get_opt_container("php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null.from_gdata(n.get_opt_container("explicit-null")), n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear.from_gdata(n.get_opt_container("n-flag-clear")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__absolute.from_xml(yang.gdata.get_xml_opt_child(n, "absolute")), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__php_disable.from_xml(yang.gdata.get_xml_opt_child(n, "php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__explicit_null.from_xml(yang.gdata.get_xml_opt_child(n, "explicit-null")), n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf__n_flag_clear.from_xml(yang.gdata.get_xml_opt_child(n, "n-flag-clear")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__algorithm_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index__sid_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index(yang.adata.MNode):
    sid_index: int

    mut def __init__(self, sid_index: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_index = sid_index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_index = self.sid_index
        if _sid_index is not None:
            children['sid-index'] = yang.gdata.Leaf('uint32', _sid_index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index(sid_index=n.get_int("sid-index"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index(sid_index=yang.gdata.from_xml_int(n, "sid-index"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute__sid_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute(yang.adata.MNode):
    sid_value: int

    mut def __init__(self, sid_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_value = sid_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_value = self.sid_value
        if _sid_value is not None:
            children['sid-value'] = yang.gdata.Leaf('uint32', _sid_value)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute(sid_value=n.get_int("sid-value"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute(sid_value=yang.gdata.from_xml_int(n, "sid-value"))
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry(yang.adata.MNode):
    algorithm_number: int
    index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index
    absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute
    php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable
    explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null
    n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear

    mut def __init__(self, algorithm_number: int, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index=None, absolute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute=None, php_disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable=None, explicit_null: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null=None, n_flag_clear: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.algorithm_number = algorithm_number
        self.index = index
        self_index = self.index
        if self_index is not None:
            self_index._parent = self
        self.absolute = absolute
        self_absolute = self.absolute
        if self_absolute is not None:
            self_absolute._parent = self
        self.php_disable = php_disable
        self_php_disable = self.php_disable
        if self_php_disable is not None:
            self_php_disable._parent = self
        self.explicit_null = explicit_null
        self_explicit_null = self.explicit_null
        if self_explicit_null is not None:
            self_explicit_null._parent = self
        self.n_flag_clear = n_flag_clear
        self_n_flag_clear = self.n_flag_clear
        if self_n_flag_clear is not None:
            self_n_flag_clear._parent = self

    mut def create_index(self, sid_index):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index(sid_index)
        self.index = res
        return res

    mut def create_absolute(self, sid_value):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute(sid_value)
        self.absolute = res
        return res

    mut def create_php_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable()
        self.php_disable = res
        return res

    mut def create_explicit_null(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null()
        self.explicit_null = res
        return res

    mut def create_n_flag_clear(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear()
        self.n_flag_clear = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _algorithm_number = self.algorithm_number
        _index = self.index
        _absolute = self.absolute
        _php_disable = self.php_disable
        _explicit_null = self.explicit_null
        _n_flag_clear = self.n_flag_clear
        if _algorithm_number is not None:
            children['algorithm-number'] = yang.gdata.Leaf('uint32', _algorithm_number)
        if _index is not None:
            children['index'] = _index.to_gdata()
        if _absolute is not None:
            children['absolute'] = _absolute.to_gdata()
        if _php_disable is not None:
            children['php-disable'] = _php_disable.to_gdata()
        if _explicit_null is not None:
            children['explicit-null'] = _explicit_null.to_gdata()
        if _n_flag_clear is not None:
            children['n-flag-clear'] = _n_flag_clear.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.algorithm_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry(algorithm_number=n.get_int("algorithm-number"), index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index.from_gdata(n.get_opt_container("index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute.from_gdata(n.get_opt_container("absolute")), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable.from_gdata(n.get_opt_container("php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null.from_gdata(n.get_opt_container("explicit-null")), n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear.from_gdata(n.get_opt_container("n-flag-clear")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry(algorithm_number=yang.gdata.from_xml_int(n, "algorithm-number"), index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")), absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__absolute.from_xml(yang.gdata.get_xml_opt_child(n, "absolute")), php_disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__php_disable.from_xml(yang.gdata.get_xml_opt_child(n, "php-disable")), explicit_null=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__explicit_null.from_xml(yang.gdata.get_xml_opt_child(n, "explicit-null")), n_flag_clear=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm__n_flag_clear.from_xml(yang.gdata.get_xml_opt_child(n, "n-flag-clear")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'algorithm'
        self.elements = elements

    mut def create(self, algorithm_number, index, absolute):
        for e in self.elements:
            match = True
            if e.algorithm_number != algorithm_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry(algorithm_number, index, absolute)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['algorithm-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms(yang.adata.MNode):
    algorithm: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm

    mut def __init__(self, algorithm: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.algorithm = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm(elements=algorithm)
        self.algorithm._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _algorithm = self.algorithm
        if _algorithm is not None:
            children['algorithm'] = _algorithm.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms(algorithm=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm.from_gdata(n.get_opt_list("algorithm")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms(algorithm=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms__algorithm.from_xml(yang.gdata.get_xml_children(n, "algorithm")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(yang.adata.MNode):
    sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid
    strict_spf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf
    algorithms: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms

    mut def __init__(self, sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid=None, strict_spf: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf=None, algorithms: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid = sid
        self_sid = self.sid
        if self_sid is not None:
            self_sid._parent = self
        self.strict_spf = strict_spf
        self_strict_spf = self.strict_spf
        if self_strict_spf is not None:
            self_strict_spf._parent = self
        if algorithms is not None:
            self.algorithms = algorithms
        else:
            self.algorithms = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms()
        self_algorithms = self.algorithms
        if self_algorithms is not None:
            self_algorithms._parent = self

    mut def create_sid(self, index, absolute):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(index, absolute)
        self.sid = res
        return res

    mut def create_strict_spf(self, index, absolute):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf(index, absolute)
        self.strict_spf = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid = self.sid
        _strict_spf = self.strict_spf
        _algorithms = self.algorithms
        if _sid is not None:
            children['sid'] = _sid.to_gdata()
        if _strict_spf is not None:
            children['strict-spf'] = _strict_spf.to_gdata()
        if _algorithms is not None:
            children['algorithms'] = _algorithms.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid.from_gdata(n.get_opt_container("sid")), strict_spf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf.from_gdata(n.get_opt_container("strict-spf")), algorithms=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms.from_gdata(n.get_opt_container("algorithms")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid.from_xml(yang.gdata.get_xml_opt_child(n, "sid")), strict_spf=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__strict_spf.from_xml(yang.gdata.get_xml_opt_child(n, "strict-spf")), algorithms=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__algorithms.from_xml(yang.gdata.get_xml_opt_child(n, "algorithms")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__sid_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry(yang.adata.MNode):
    sid_index: int
    protected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected

    mut def __init__(self, sid_index: int, protected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_index = sid_index
        self.protected = protected
        self_protected = self.protected
        if self_protected is not None:
            self_protected._parent = self

    mut def create_protected(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected()
        self.protected = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_index = self.sid_index
        _protected = self.protected
        if _sid_index is not None:
            children['sid-index'] = yang.gdata.Leaf('uint32', _sid_index)
        if _protected is not None:
            children['protected'] = _protected.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.sid_index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry(sid_index=n.get_int("sid-index"), protected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected.from_gdata(n.get_opt_container("protected")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry(sid_index=yang.gdata.from_xml_int(n, "sid-index"), protected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index__protected.from_xml(yang.gdata.get_xml_opt_child(n, "protected")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'index'
        self.elements = elements

    mut def create(self, sid_index):
        for e in self.elements:
            match = True
            if e.sid_index != sid_index:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry(sid_index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['sid-index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.index = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index(elements=index)
        self.index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index.from_gdata(n.get_opt_list("index")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes__index.from_xml(yang.gdata.get_xml_children(n, "index")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__sid_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry(yang.adata.MNode):
    sid_value: int
    protected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected

    mut def __init__(self, sid_value: int, protected: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.sid_value = sid_value
        self.protected = protected
        self_protected = self.protected
        if self_protected is not None:
            self_protected._parent = self

    mut def create_protected(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected()
        self.protected = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_value = self.sid_value
        _protected = self.protected
        if _sid_value is not None:
            children['sid-value'] = yang.gdata.Leaf('uint32', _sid_value)
        if _protected is not None:
            children['protected'] = _protected.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.sid_value)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry(sid_value=n.get_int("sid-value"), protected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected.from_gdata(n.get_opt_container("protected")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry(sid_value=yang.gdata.from_xml_int(n, "sid-value"), protected=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute__protected.from_xml(yang.gdata.get_xml_opt_child(n, "protected")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'absolute'
        self.elements = elements

    mut def create(self, sid_value):
        for e in self.elements:
            match = True
            if e.sid_value != sid_value:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry(sid_value)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['sid-value'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes(yang.adata.MNode):
    absolute: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute

    mut def __init__(self, absolute: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.absolute = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute(elements=absolute)
        self.absolute._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _absolute = self.absolute
        if _absolute is not None:
            children['absolute'] = _absolute.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes(absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute.from_gdata(n.get_opt_list("absolute")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes(absolute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes__absolute.from_xml(yang.gdata.get_xml_children(n, "absolute")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid(yang.adata.MNode):
    indexes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes
    absolutes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes

    mut def __init__(self, indexes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes=None, absolutes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if indexes is not None:
            self.indexes = indexes
        else:
            self.indexes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes()
        self_indexes = self.indexes
        if self_indexes is not None:
            self_indexes._parent = self
        if absolutes is not None:
            self.absolutes = absolutes
        else:
            self.absolutes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes()
        self_absolutes = self.absolutes
        if self_absolutes is not None:
            self_absolutes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _indexes = self.indexes
        _absolutes = self.absolutes
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        if _absolutes is not None:
            children['absolutes'] = _absolutes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid(indexes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes.from_gdata(n.get_opt_container("indexes")), absolutes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes.from_gdata(n.get_opt_container("absolutes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid(indexes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__indexes.from_xml(yang.gdata.get_xml_opt_child(n, "indexes")), absolutes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid__absolutes.from_xml(yang.gdata.get_xml_opt_child(n, "absolutes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry(yang.adata.MNode):
    level_id: int
    per_link_computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation
    per_prefix_computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation

    mut def __init__(self, level_id: int, per_link_computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation=None, per_prefix_computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.per_link_computation = per_link_computation
        self_per_link_computation = self.per_link_computation
        if self_per_link_computation is not None:
            self_per_link_computation._parent = self
        self.per_prefix_computation = per_prefix_computation
        self_per_prefix_computation = self.per_prefix_computation
        if self_per_prefix_computation is not None:
            self_per_prefix_computation._parent = self

    mut def create_per_link_computation(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation()
        self.per_link_computation = res
        return res

    mut def create_per_prefix_computation(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation()
        self.per_prefix_computation = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _per_link_computation = self.per_link_computation
        _per_prefix_computation = self.per_prefix_computation
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _per_link_computation is not None:
            children['per-link-computation'] = _per_link_computation.to_gdata()
        if _per_prefix_computation is not None:
            children['per-prefix-computation'] = _per_prefix_computation.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry(level_id=n.get_int("level-id"), per_link_computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation.from_gdata(n.get_opt_container("per-link-computation")), per_prefix_computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation.from_gdata(n.get_opt_container("per-prefix-computation")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), per_link_computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_link_computation.from_xml(yang.gdata.get_xml_opt_child(n, "per-link-computation")), per_prefix_computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level__per_prefix_computation.from_xml(yang.gdata.get_xml_opt_child(n, "per-prefix-computation")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation(yang.adata.MNode):
    per_link_computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation
    per_prefix_computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels

    mut def __init__(self, per_link_computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation=None, per_prefix_computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.per_link_computation = per_link_computation
        self_per_link_computation = self.per_link_computation
        if self_per_link_computation is not None:
            self_per_link_computation._parent = self
        self.per_prefix_computation = per_prefix_computation
        self_per_prefix_computation = self.per_prefix_computation
        if self_per_prefix_computation is not None:
            self_per_prefix_computation._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_per_link_computation(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation()
        self.per_link_computation = res
        return res

    mut def create_per_prefix_computation(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation()
        self.per_prefix_computation = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _per_link_computation = self.per_link_computation
        _per_prefix_computation = self.per_prefix_computation
        _levels = self.levels
        if _per_link_computation is not None:
            children['per-link-computation'] = _per_link_computation.to_gdata()
        if _per_prefix_computation is not None:
            children['per-prefix-computation'] = _per_prefix_computation.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation(per_link_computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation.from_gdata(n.get_opt_container("per-link-computation")), per_prefix_computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation.from_gdata(n.get_opt_container("per-prefix-computation")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation(per_link_computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_link_computation.from_xml(yang.gdata.get_xml_opt_child(n, "per-link-computation")), per_prefix_computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__per_prefix_computation.from_xml(yang.gdata.get_xml_opt_child(n, "per-prefix-computation")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    level: ?int

    mut def __init__(self, interface_name: str, level: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name
        self.level = level

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _level = self.level
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry(interface_name=n.get_str("interface-name"), level=n.get_opt_int("level"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), level=yang.gdata.from_xml_opt_int(n, "level"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude(yang.adata.MNode):
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces

    mut def __init__(self, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces.from_gdata(n.get_opt_container("interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    level: ?int

    mut def __init__(self, interface_name: str, level: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name
        self.level = level

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _level = self.level
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry(interface_name=n.get_str("interface-name"), level=n.get_opt_int("level"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), level=yang.gdata.from_xml_opt_int(n, "level"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate(yang.adata.MNode):
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces

    mut def __init__(self, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces.from_gdata(n.get_opt_container("interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link(yang.adata.MNode):
    exclude: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude
    lfa_candidate: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate

    mut def __init__(self, exclude: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude=None, lfa_candidate: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if exclude is not None:
            self.exclude = exclude
        else:
            self.exclude = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude()
        self_exclude = self.exclude
        if self_exclude is not None:
            self_exclude._parent = self
        if lfa_candidate is not None:
            self.lfa_candidate = lfa_candidate
        else:
            self.lfa_candidate = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate()
        self_lfa_candidate = self.lfa_candidate
        if self_lfa_candidate is not None:
            self_lfa_candidate._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exclude = self.exclude
        _lfa_candidate = self.lfa_candidate
        if _exclude is not None:
            children['exclude'] = _exclude.to_gdata()
        if _lfa_candidate is not None:
            children['lfa-candidate'] = _lfa_candidate.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link(exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude.from_gdata(n.get_opt_container("exclude")), lfa_candidate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate.from_gdata(n.get_opt_container("lfa-candidate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link(exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__exclude.from_xml(yang.gdata.get_xml_opt_child(n, "exclude")), lfa_candidate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link__lfa_candidate.from_xml(yang.gdata.get_xml_opt_child(n, "lfa-candidate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry(yang.adata.MNode):
    level_id: int
    mpls_ldp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp

    mut def __init__(self, level_id: int, mpls_ldp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.mpls_ldp = mpls_ldp
        self_mpls_ldp = self.mpls_ldp
        if self_mpls_ldp is not None:
            self_mpls_ldp._parent = self

    mut def create_mpls_ldp(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp()
        self.mpls_ldp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _mpls_ldp = self.mpls_ldp
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _mpls_ldp is not None:
            children['mpls-ldp'] = _mpls_ldp.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry(level_id=n.get_int("level-id"), mpls_ldp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp.from_gdata(n.get_opt_container("mpls-ldp")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), mpls_ldp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level__mpls_ldp.from_xml(yang.gdata.get_xml_opt_child(n, "mpls-ldp")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel(yang.adata.MNode):
    mpls_ldp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels

    mut def __init__(self, mpls_ldp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.mpls_ldp = mpls_ldp
        self_mpls_ldp = self.mpls_ldp
        if self_mpls_ldp is not None:
            self_mpls_ldp._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_mpls_ldp(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp()
        self.mpls_ldp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls_ldp = self.mpls_ldp
        _levels = self.levels
        if _mpls_ldp is not None:
            children['mpls-ldp'] = _mpls_ldp.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel(mpls_ldp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp.from_gdata(n.get_opt_container("mpls-ldp")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel(mpls_ldp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__mpls_ldp.from_xml(yang.gdata.get_xml_opt_child(n, "mpls-ldp")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    metric: int

    mut def __init__(self, level_id: int, metric: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.metric = metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _metric = self.metric
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry(level_id=n.get_int("level-id"), metric=n.get_int("metric"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), metric=yang.gdata.from_xml_int(n, "metric"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, metric):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry(level_id, metric)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric(yang.adata.MNode):
    metric: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels

    mut def __init__(self, metric: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.metric = metric
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _metric = self.metric
        _levels = self.levels
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric(metric=n.get_opt_int("metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric(metric=yang.gdata.from_xml_opt_int(n, "metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa(yang.adata.MNode):
    tunnel: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel
    maximum_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric

    mut def __init__(self, tunnel: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel=None, maximum_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if tunnel is not None:
            self.tunnel = tunnel
        else:
            self.tunnel = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel()
        self_tunnel = self.tunnel
        if self_tunnel is not None:
            self_tunnel._parent = self
        if maximum_metric is not None:
            self.maximum_metric = maximum_metric
        else:
            self.maximum_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric()
        self_maximum_metric = self.maximum_metric
        if self_maximum_metric is not None:
            self_maximum_metric._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel = self.tunnel
        _maximum_metric = self.maximum_metric
        if _tunnel is not None:
            children['tunnel'] = _tunnel.to_gdata()
        if _maximum_metric is not None:
            children['maximum-metric'] = _maximum_metric.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa(tunnel=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel.from_gdata(n.get_opt_container("tunnel")), maximum_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric.from_gdata(n.get_opt_container("maximum-metric")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa(tunnel=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__tunnel.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel")), maximum_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa__maximum_metric.from_xml(yang.gdata.get_xml_opt_child(n, "maximum-metric")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry(yang.adata.MNode):
    level_id: int
    ti_lfa: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa

    mut def __init__(self, level_id: int, ti_lfa: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.ti_lfa = ti_lfa
        self_ti_lfa = self.ti_lfa
        if self_ti_lfa is not None:
            self_ti_lfa._parent = self

    mut def create_ti_lfa(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa()
        self.ti_lfa = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _ti_lfa = self.ti_lfa
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _ti_lfa is not None:
            children['ti-lfa'] = _ti_lfa.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry(level_id=n.get_int("level-id"), ti_lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa.from_gdata(n.get_opt_container("ti-lfa")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), ti_lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level__ti_lfa.from_xml(yang.gdata.get_xml_opt_child(n, "ti-lfa")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix(yang.adata.MNode):
    ti_lfa: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels

    mut def __init__(self, ti_lfa: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.ti_lfa = ti_lfa
        self_ti_lfa = self.ti_lfa
        if self_ti_lfa is not None:
            self_ti_lfa._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_ti_lfa(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa()
        self.ti_lfa = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ti_lfa = self.ti_lfa
        _levels = self.levels
        if _ti_lfa is not None:
            children['ti-lfa'] = _ti_lfa.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix(ti_lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa.from_gdata(n.get_opt_container("ti-lfa")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix(ti_lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__ti_lfa.from_xml(yang.gdata.get_xml_opt_child(n, "ti-lfa")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__preference_order(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level__preference_order(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry(yang.adata.MNode):
    level_id: int
    preference_order: int

    mut def __init__(self, level_id: int, preference_order: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.preference_order = preference_order

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _preference_order = self.preference_order
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _preference_order is not None:
            children['preference-order'] = yang.gdata.Leaf('uint32', _preference_order)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry(level_id=n.get_int("level-id"), preference_order=n.get_int("preference-order"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), preference_order=yang.gdata.from_xml_int(n, "preference-order"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, preference_order):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry(level_id, preference_order)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index(yang.adata.MNode):
    preference_order: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels

    mut def __init__(self, preference_order: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.preference_order = preference_order
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _preference_order = self.preference_order
        _levels = self.levels
        if _preference_order is not None:
            children['preference-order'] = yang.gdata.Leaf('uint32', _preference_order)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index(preference_order=n.get_opt_int("preference-order"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index(preference_order=yang.gdata.from_xml_opt_int(n, "preference-order"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting(yang.adata.MNode):
    index: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index

    mut def __init__(self, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if index is not None:
            self.index = index
        else:
            self.index = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index()
        self_index = self.index
        if self_index is not None:
            self_index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index.from_gdata(n.get_opt_container("index")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__preference_order(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level__preference_order(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry(yang.adata.MNode):
    level_id: int
    preference_order: int

    mut def __init__(self, level_id: int, preference_order: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.preference_order = preference_order

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _preference_order = self.preference_order
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _preference_order is not None:
            children['preference-order'] = yang.gdata.Leaf('uint32', _preference_order)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry(level_id=n.get_int("level-id"), preference_order=n.get_int("preference-order"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), preference_order=yang.gdata.from_xml_int(n, "preference-order"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, preference_order):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry(level_id, preference_order)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index(yang.adata.MNode):
    preference_order: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels

    mut def __init__(self, preference_order: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.preference_order = preference_order
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _preference_order = self.preference_order
        _levels = self.levels
        if _preference_order is not None:
            children['preference-order'] = yang.gdata.Leaf('uint32', _preference_order)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index(preference_order=n.get_opt_int("preference-order"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index(preference_order=yang.gdata.from_xml_opt_int(n, "preference-order"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint(yang.adata.MNode):
    index: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index

    mut def __init__(self, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if index is not None:
            self.index = index
        else:
            self.index = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index()
        self_index = self.index
        if self_index is not None:
            self_index._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index.from_gdata(n.get_opt_container("index")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint__index.from_xml(yang.gdata.get_xml_opt_child(n, "index")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry(yang.adata.MNode):
    level_id: int
    default_backup_path: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path

    mut def __init__(self, level_id: int, default_backup_path: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.default_backup_path = default_backup_path
        self_default_backup_path = self.default_backup_path
        if self_default_backup_path is not None:
            self_default_backup_path._parent = self

    mut def create_default_backup_path(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path()
        self.default_backup_path = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _default_backup_path = self.default_backup_path
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _default_backup_path is not None:
            children['default-backup-path'] = _default_backup_path.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry(level_id=n.get_int("level-id"), default_backup_path=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path.from_gdata(n.get_opt_container("default-backup-path")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), default_backup_path=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level__default_backup_path.from_xml(yang.gdata.get_xml_opt_child(n, "default-backup-path")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default(yang.adata.MNode):
    default_backup_path: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels

    mut def __init__(self, default_backup_path: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.default_backup_path = default_backup_path
        self_default_backup_path = self.default_backup_path
        if self_default_backup_path is not None:
            self_default_backup_path._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def create_default_backup_path(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path()
        self.default_backup_path = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_backup_path = self.default_backup_path
        _levels = self.levels
        if _default_backup_path is not None:
            children['default-backup-path'] = _default_backup_path.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default(default_backup_path=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path.from_gdata(n.get_opt_container("default-backup-path")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default(default_backup_path=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__default_backup_path.from_xml(yang.gdata.get_xml_opt_child(n, "default-backup-path")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker(yang.adata.MNode):
    node_protecting: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting
    srlg_disjoint: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint
    default: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default

    mut def __init__(self, node_protecting: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting=None, srlg_disjoint: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint=None, default: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if node_protecting is not None:
            self.node_protecting = node_protecting
        else:
            self.node_protecting = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting()
        self_node_protecting = self.node_protecting
        if self_node_protecting is not None:
            self_node_protecting._parent = self
        if srlg_disjoint is not None:
            self.srlg_disjoint = srlg_disjoint
        else:
            self.srlg_disjoint = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint()
        self_srlg_disjoint = self.srlg_disjoint
        if self_srlg_disjoint is not None:
            self_srlg_disjoint._parent = self
        if default is not None:
            self.default = default
        else:
            self.default = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default()
        self_default = self.default
        if self_default is not None:
            self_default._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _node_protecting = self.node_protecting
        _srlg_disjoint = self.srlg_disjoint
        _default = self.default
        if _node_protecting is not None:
            children['node-protecting'] = _node_protecting.to_gdata()
        if _srlg_disjoint is not None:
            children['srlg-disjoint'] = _srlg_disjoint.to_gdata()
        if _default is not None:
            children['default'] = _default.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker(node_protecting=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting.from_gdata(n.get_opt_container("node-protecting")), srlg_disjoint=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint.from_gdata(n.get_opt_container("srlg-disjoint")), default=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default.from_gdata(n.get_opt_container("default")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker(node_protecting=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__node_protecting.from_xml(yang.gdata.get_xml_opt_child(n, "node-protecting")), srlg_disjoint=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__srlg_disjoint.from_xml(yang.gdata.get_xml_opt_child(n, "srlg-disjoint")), default=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker__default.from_xml(yang.gdata.get_xml_opt_child(n, "default")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    level: ?int

    mut def __init__(self, interface_name: str, level: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name
        self.level = level

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _level = self.level
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry(interface_name=n.get_str("interface-name"), level=n.get_opt_int("level"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), level=yang.gdata.from_xml_opt_int(n, "level"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude(yang.adata.MNode):
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces

    mut def __init__(self, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces.from_gdata(n.get_opt_container("interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    level: ?int

    mut def __init__(self, interface_name: str, level: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name
        self.level = level

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _level = self.level
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry(interface_name=n.get_str("interface-name"), level=n.get_opt_int("level"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), level=yang.gdata.from_xml_opt_int(n, "level"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate(yang.adata.MNode):
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces

    mut def __init__(self, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces.from_gdata(n.get_opt_container("interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate(interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix(yang.adata.MNode):
    remote_lfa: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa
    per_prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix
    tiebreaker: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker
    exclude: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude
    lfa_candidate: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate

    mut def __init__(self, remote_lfa: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa=None, per_prefix: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix=None, tiebreaker: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker=None, exclude: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude=None, lfa_candidate: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if remote_lfa is not None:
            self.remote_lfa = remote_lfa
        else:
            self.remote_lfa = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa()
        self_remote_lfa = self.remote_lfa
        if self_remote_lfa is not None:
            self_remote_lfa._parent = self
        if per_prefix is not None:
            self.per_prefix = per_prefix
        else:
            self.per_prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix()
        self_per_prefix = self.per_prefix
        if self_per_prefix is not None:
            self_per_prefix._parent = self
        if tiebreaker is not None:
            self.tiebreaker = tiebreaker
        else:
            self.tiebreaker = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker()
        self_tiebreaker = self.tiebreaker
        if self_tiebreaker is not None:
            self_tiebreaker._parent = self
        if exclude is not None:
            self.exclude = exclude
        else:
            self.exclude = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude()
        self_exclude = self.exclude
        if self_exclude is not None:
            self_exclude._parent = self
        if lfa_candidate is not None:
            self.lfa_candidate = lfa_candidate
        else:
            self.lfa_candidate = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate()
        self_lfa_candidate = self.lfa_candidate
        if self_lfa_candidate is not None:
            self_lfa_candidate._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _remote_lfa = self.remote_lfa
        _per_prefix = self.per_prefix
        _tiebreaker = self.tiebreaker
        _exclude = self.exclude
        _lfa_candidate = self.lfa_candidate
        if _remote_lfa is not None:
            children['remote-lfa'] = _remote_lfa.to_gdata()
        if _per_prefix is not None:
            children['per-prefix'] = _per_prefix.to_gdata()
        if _tiebreaker is not None:
            children['tiebreaker'] = _tiebreaker.to_gdata()
        if _exclude is not None:
            children['exclude'] = _exclude.to_gdata()
        if _lfa_candidate is not None:
            children['lfa-candidate'] = _lfa_candidate.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix(remote_lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa.from_gdata(n.get_opt_container("remote-lfa")), per_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix.from_gdata(n.get_opt_container("per-prefix")), tiebreaker=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker.from_gdata(n.get_opt_container("tiebreaker")), exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude.from_gdata(n.get_opt_container("exclude")), lfa_candidate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate.from_gdata(n.get_opt_container("lfa-candidate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix(remote_lfa=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__remote_lfa.from_xml(yang.gdata.get_xml_opt_child(n, "remote-lfa")), per_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__per_prefix.from_xml(yang.gdata.get_xml_opt_child(n, "per-prefix")), tiebreaker=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__tiebreaker.from_xml(yang.gdata.get_xml_opt_child(n, "tiebreaker")), exclude=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__exclude.from_xml(yang.gdata.get_xml_opt_child(n, "exclude")), lfa_candidate=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix__lfa_candidate.from_xml(yang.gdata.get_xml_opt_child(n, "lfa-candidate")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute(yang.adata.MNode):
    computation: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation
    per_link: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link
    per_prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix

    mut def __init__(self, computation: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation=None, per_link: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link=None, per_prefix: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if computation is not None:
            self.computation = computation
        else:
            self.computation = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation()
        self_computation = self.computation
        if self_computation is not None:
            self_computation._parent = self
        if per_link is not None:
            self.per_link = per_link
        else:
            self.per_link = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link()
        self_per_link = self.per_link
        if self_per_link is not None:
            self_per_link._parent = self
        if per_prefix is not None:
            self.per_prefix = per_prefix
        else:
            self.per_prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix()
        self_per_prefix = self.per_prefix
        if self_per_prefix is not None:
            self_per_prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _computation = self.computation
        _per_link = self.per_link
        _per_prefix = self.per_prefix
        if _computation is not None:
            children['computation'] = _computation.to_gdata()
        if _per_link is not None:
            children['per-link'] = _per_link.to_gdata()
        if _per_prefix is not None:
            children['per-prefix'] = _per_prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute(computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation.from_gdata(n.get_opt_container("computation")), per_link=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link.from_gdata(n.get_opt_container("per-link")), per_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix.from_gdata(n.get_opt_container("per-prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute(computation=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__computation.from_xml(yang.gdata.get_xml_opt_child(n, "computation")), per_link=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_link.from_xml(yang.gdata.get_xml_opt_child(n, "per-link")), per_prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute__per_prefix.from_xml(yang.gdata.get_xml_opt_child(n, "per-prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group__link_group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group(yang.adata.MNode):
    link_group_name: str
    level: ?int

    mut def __init__(self, link_group_name: str, level: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.link_group_name = link_group_name
        self.level = level

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _link_group_name = self.link_group_name
        _level = self.level
        if _link_group_name is not None:
            children['link-group-name'] = yang.gdata.Leaf('string', _link_group_name)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group(link_group_name=n.get_str("link-group-name"), level=n.get_opt_int("level"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group(link_group_name=yang.gdata.from_xml_str(n, "link-group-name"), level=yang.gdata.from_xml_opt_int(n, "level"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__weight_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level__weight_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry(yang.adata.MNode):
    level_id: int
    weight_value: int

    mut def __init__(self, level_id: int, weight_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.weight_value = weight_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _weight_value = self.weight_value
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _weight_value is not None:
            children['weight-value'] = yang.gdata.Leaf('uint32', _weight_value)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry(level_id=n.get_int("level-id"), weight_value=n.get_int("weight-value"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), weight_value=yang.gdata.from_xml_int(n, "weight-value"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, weight_value):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry(level_id, weight_value)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight(yang.adata.MNode):
    weight_value: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels

    mut def __init__(self, weight_value: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.weight_value = weight_value
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _weight_value = self.weight_value
        _levels = self.levels
        if _weight_value is not None:
            children['weight-value'] = yang.gdata.Leaf('uint32', _weight_value)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight(weight_value=n.get_opt_int("weight-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight(weight_value=yang.gdata.from_xml_opt_int(n, "weight-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__absolute_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level__absolute_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry(yang.adata.MNode):
    level_id: int
    absolute_metric: int

    mut def __init__(self, level_id: int, absolute_metric: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.absolute_metric = absolute_metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _absolute_metric = self.absolute_metric
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _absolute_metric is not None:
            children['absolute-metric'] = yang.gdata.Leaf('uint32', _absolute_metric)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry(level_id=n.get_int("level-id"), absolute_metric=n.get_int("absolute-metric"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), absolute_metric=yang.gdata.from_xml_int(n, "absolute-metric"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, absolute_metric):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry(level_id, absolute_metric)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect(yang.adata.MNode):
    absolute_metric: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels

    mut def __init__(self, absolute_metric: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.absolute_metric = absolute_metric
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _absolute_metric = self.absolute_metric
        _levels = self.levels
        if _absolute_metric is not None:
            children['absolute-metric'] = yang.gdata.Leaf('uint32', _absolute_metric)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect(absolute_metric=n.get_opt_int("absolute-metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect(absolute_metric=yang.gdata.from_xml_opt_int(n, "absolute-metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric(yang.adata.MNode):
    proactive_protect: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect

    mut def __init__(self, proactive_protect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if proactive_protect is not None:
            self.proactive_protect = proactive_protect
        else:
            self.proactive_protect = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect()
        self_proactive_protect = self.proactive_protect
        if self_proactive_protect is not None:
            self_proactive_protect._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _proactive_protect = self.proactive_protect
        if _proactive_protect is not None:
            children['proactive-protect'] = _proactive_protect.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric(proactive_protect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect.from_gdata(n.get_opt_container("proactive-protect")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric(proactive_protect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric__proactive_protect.from_xml(yang.gdata.get_xml_opt_child(n, "proactive-protect")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level__route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry(yang.adata.MNode):
    level_id: int
    route_policy: ?str

    mut def __init__(self, level_id: int, route_policy: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.route_policy = route_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _route_policy = self.route_policy
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry(level_id=n.get_int("level-id"), route_policy=n.get_opt_str("route-policy"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix(yang.adata.MNode):
    route_policy: ?str
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels

    mut def __init__(self, route_policy: ?str, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.route_policy = route_policy
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        _levels = self.levels
        if _route_policy is not None:
            children['route-policy'] = yang.gdata.Leaf('string', _route_policy)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix(route_policy=n.get_opt_str("route-policy"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix(route_policy=yang.gdata.from_xml_opt_str(n, "route-policy"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise(yang.adata.MNode):
    prefix: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix

    mut def __init__(self, prefix: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if prefix is not None:
            self.prefix = prefix
        else:
            self.prefix = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix()
        self_prefix = self.prefix
        if self_prefix is not None:
            self_prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix = self.prefix
        if _prefix is not None:
            children['prefix'] = _prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise(prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix.from_gdata(n.get_opt_container("prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise(prefix=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise__prefix.from_xml(yang.gdata.get_xml_opt_child(n, "prefix")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(yang.adata.MNode):
    af_name: str
    saf_name: str
    metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric
    te_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric
    te_metric_levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels
    mpls: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls
    tag: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag
    prefix_sid: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid
    adjacency_sid: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid
    fast_reroute: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute
    link_group: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group
    weight: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight
    auto_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric
    advertise: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable

    mut def __init__(self, af_name: str, saf_name: str, metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric=None, te_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric=None, te_metric_levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels=None, mpls: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls=None, tag: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag=None, prefix_sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid=None, adjacency_sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid=None, fast_reroute: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute=None, link_group: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group=None, weight: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight=None, auto_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric=None, advertise: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise=None, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.af_name = af_name
        self.saf_name = saf_name
        if metric is not None:
            self.metric = metric
        else:
            self.metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self
        if te_metric is not None:
            self.te_metric = te_metric
        else:
            self.te_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric()
        self_te_metric = self.te_metric
        if self_te_metric is not None:
            self_te_metric._parent = self
        if te_metric_levels is not None:
            self.te_metric_levels = te_metric_levels
        else:
            self.te_metric_levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels()
        self_te_metric_levels = self.te_metric_levels
        if self_te_metric_levels is not None:
            self_te_metric_levels._parent = self
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls()
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self
        if tag is not None:
            self.tag = tag
        else:
            self.tag = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self
        if prefix_sid is not None:
            self.prefix_sid = prefix_sid
        else:
            self.prefix_sid = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid()
        self_prefix_sid = self.prefix_sid
        if self_prefix_sid is not None:
            self_prefix_sid._parent = self
        if adjacency_sid is not None:
            self.adjacency_sid = adjacency_sid
        else:
            self.adjacency_sid = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid()
        self_adjacency_sid = self.adjacency_sid
        if self_adjacency_sid is not None:
            self_adjacency_sid._parent = self
        if fast_reroute is not None:
            self.fast_reroute = fast_reroute
        else:
            self.fast_reroute = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute()
        self_fast_reroute = self.fast_reroute
        if self_fast_reroute is not None:
            self_fast_reroute._parent = self
        self.link_group = link_group
        self_link_group = self.link_group
        if self_link_group is not None:
            self_link_group._parent = self
        if weight is not None:
            self.weight = weight
        else:
            self.weight = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight()
        self_weight = self.weight
        if self_weight is not None:
            self_weight._parent = self
        if auto_metric is not None:
            self.auto_metric = auto_metric
        else:
            self.auto_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric()
        self_auto_metric = self.auto_metric
        if self_auto_metric is not None:
            self_auto_metric._parent = self
        if advertise is not None:
            self.advertise = advertise
        else:
            self.advertise = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise()
        self_advertise = self.advertise
        if self_advertise is not None:
            self_advertise._parent = self
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_link_group(self, link_group_name):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group(link_group_name)
        self.link_group = res
        return res

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        _saf_name = self.saf_name
        _metric = self.metric
        _te_metric = self.te_metric
        _te_metric_levels = self.te_metric_levels
        _mpls = self.mpls
        _tag = self.tag
        _prefix_sid = self.prefix_sid
        _adjacency_sid = self.adjacency_sid
        _fast_reroute = self.fast_reroute
        _link_group = self.link_group
        _weight = self.weight
        _auto_metric = self.auto_metric
        _advertise = self.advertise
        _disable = self.disable
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        if _saf_name is not None:
            children['saf-name'] = yang.gdata.Leaf('enumeration', _saf_name)
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        if _te_metric is not None:
            children['te-metric'] = _te_metric.to_gdata()
        if _te_metric_levels is not None:
            children['te-metric-levels'] = _te_metric_levels.to_gdata()
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        if _prefix_sid is not None:
            children['prefix-sid'] = _prefix_sid.to_gdata()
        if _adjacency_sid is not None:
            children['adjacency-sid'] = _adjacency_sid.to_gdata()
        if _fast_reroute is not None:
            children['fast-reroute'] = _fast_reroute.to_gdata()
        if _link_group is not None:
            children['link-group'] = _link_group.to_gdata()
        if _weight is not None:
            children['weight'] = _weight.to_gdata()
        if _auto_metric is not None:
            children['auto-metric'] = _auto_metric.to_gdata()
        if _advertise is not None:
            children['advertise'] = _advertise.to_gdata()
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name), yang.gdata.yang_str(self.saf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(af_name=n.get_str("af-name"), saf_name=n.get_str("saf-name"), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric.from_gdata(n.get_opt_container("metric")), te_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric.from_gdata(n.get_opt_container("te-metric")), te_metric_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels.from_gdata(n.get_opt_container("te-metric-levels")), mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls.from_gdata(n.get_opt_container("mpls")), tag=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag.from_gdata(n.get_opt_container("tag")), prefix_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid.from_gdata(n.get_opt_container("prefix-sid")), adjacency_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid.from_gdata(n.get_opt_container("adjacency-sid")), fast_reroute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute.from_gdata(n.get_opt_container("fast-reroute")), link_group=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group.from_gdata(n.get_opt_container("link-group")), weight=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight.from_gdata(n.get_opt_container("weight")), auto_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric.from_gdata(n.get_opt_container("auto-metric")), advertise=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise.from_gdata(n.get_opt_container("advertise")), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable.from_gdata(n.get_opt_container("disable")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"), saf_name=yang.gdata.from_xml_str(n, "saf-name"), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")), te_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric.from_xml(yang.gdata.get_xml_opt_child(n, "te-metric")), te_metric_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__te_metric_levels.from_xml(yang.gdata.get_xml_opt_child(n, "te-metric-levels")), mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")), tag=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")), prefix_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-sid")), adjacency_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__adjacency_sid.from_xml(yang.gdata.get_xml_opt_child(n, "adjacency-sid")), fast_reroute=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__fast_reroute.from_xml(yang.gdata.get_xml_opt_child(n, "fast-reroute")), link_group=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__link_group.from_xml(yang.gdata.get_xml_opt_child(n, "link-group")), weight=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__weight.from_xml(yang.gdata.get_xml_opt_child(n, "weight")), auto_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__auto_metric.from_xml(yang.gdata.get_xml_opt_child(n, "auto-metric")), advertise=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__advertise.from_xml(yang.gdata.get_xml_opt_child(n, "advertise")), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name, saf_name, link_group):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if e.saf_name != saf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(af_name, saf_name, link_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name', 'saf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__saf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum()
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    default_metric: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum

    mut def __init__(self, level_id: int, default_metric: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.default_metric = default_metric
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _default_metric = self.default_metric
        _maximum = self.maximum
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry(level_id=n.get_int("level-id"), default_metric=n.get_opt_int("default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum.from_gdata(n.get_opt_container("maximum")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), default_metric=yang.gdata.from_xml_opt_int(n, "default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth__threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth(yang.adata.MNode):
    multiplier: ?int
    threshold: ?int

    mut def __init__(self, multiplier: ?int, threshold: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.multiplier = multiplier
        self.threshold = threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _multiplier = self.multiplier
        _threshold = self.threshold
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        if _threshold is not None:
            children['threshold'] = yang.gdata.Leaf('uint32', _threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth(multiplier=n.get_opt_int("multiplier"), threshold=n.get_opt_int("threshold"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth(multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"), threshold=yang.gdata.from_xml_opt_int(n, "threshold"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback(yang.adata.MNode):
    bandwidth: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth

    mut def __init__(self, bandwidth: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if bandwidth is not None:
            self.bandwidth = bandwidth
        else:
            self.bandwidth = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth()
        self_bandwidth = self.bandwidth
        if self_bandwidth is not None:
            self_bandwidth._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bandwidth = self.bandwidth
        if _bandwidth is not None:
            children['bandwidth'] = _bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback(bandwidth=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth.from_gdata(n.get_opt_container("bandwidth")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback(bandwidth=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback__bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "bandwidth")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric(yang.adata.MNode):
    default_metric: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels
    fallback: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback

    mut def __init__(self, default_metric: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels=None, fallback: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.default_metric = default_metric
        self.maximum = maximum
        self_maximum = self.maximum
        if self_maximum is not None:
            self_maximum._parent = self
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self
        if fallback is not None:
            self.fallback = fallback
        else:
            self.fallback = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback()
        self_fallback = self.fallback
        if self_fallback is not None:
            self_fallback._parent = self

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric = self.default_metric
        _maximum = self.maximum
        _levels = self.levels
        _fallback = self.fallback
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        if _fallback is not None:
            children['fallback'] = _fallback.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric(default_metric=n.get_opt_int("default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum.from_gdata(n.get_opt_container("maximum")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels.from_gdata(n.get_opt_container("levels")), fallback=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback.from_gdata(n.get_opt_container("fallback")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric(default_metric=yang.gdata.from_xml_opt_int(n, "default-metric"), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__maximum.from_xml(yang.gdata.get_xml_opt_child(n, "maximum")), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")), fallback=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric__fallback.from_xml(yang.gdata.get_xml_opt_child(n, "fallback")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric__flex_algo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric(yang.adata.MNode):
    flex_algo: ?int

    mut def __init__(self, flex_algo: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.flex_algo = flex_algo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flex_algo = self.flex_algo
        if _flex_algo is not None:
            children['flex-algo'] = yang.gdata.Leaf('uint32', _flex_algo)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric(flex_algo=n.get_opt_int("flex-algo"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric(flex_algo=yang.gdata.from_xml_opt_int(n, "flex-algo"))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level__flex_algo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry(yang.adata.MNode):
    level_id: int
    flex_algo: int

    mut def __init__(self, level_id: int, flex_algo: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.flex_algo = flex_algo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _flex_algo = self.flex_algo
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _flex_algo is not None:
            children['flex-algo'] = yang.gdata.Leaf('uint32', _flex_algo)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry(level_id=n.get_int("level-id"), flex_algo=n.get_int("flex-algo"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), flex_algo=yang.gdata.from_xml_int(n, "flex-algo"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, flex_algo):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry(level_id, flex_algo)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__interface_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level__interface_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry(yang.adata.MNode):
    level_id: int
    interface_tag: int

    mut def __init__(self, level_id: int, interface_tag: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.interface_tag = interface_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _interface_tag = self.interface_tag
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _interface_tag is not None:
            children['interface-tag'] = yang.gdata.Leaf('uint32', _interface_tag)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry(level_id=n.get_int("level-id"), interface_tag=n.get_int("interface-tag"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), interface_tag=yang.gdata.from_xml_int(n, "interface-tag"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, interface_tag):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry(level_id, interface_tag)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag(yang.adata.MNode):
    interface_tag: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels

    mut def __init__(self, interface_tag: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_tag = interface_tag
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_tag = self.interface_tag
        _levels = self.levels
        if _interface_tag is not None:
            children['interface-tag'] = yang.gdata.Leaf('uint32', _interface_tag)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag(interface_tag=n.get_opt_int("interface-tag"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag(interface_tag=yang.gdata.from_xml_opt_int(n, "interface-tag"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group__link_group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group(yang.adata.MNode):
    link_group_name: str
    level: ?int

    mut def __init__(self, link_group_name: str, level: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.link_group_name = link_group_name
        self.level = level

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _link_group_name = self.link_group_name
        _level = self.level
        if _link_group_name is not None:
            children['link-group-name'] = yang.gdata.Leaf('string', _link_group_name)
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint32', _level)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group(link_group_name=n.get_str("link-group-name"), level=n.get_opt_int("level"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group(link_group_name=yang.gdata.from_xml_str(n, "link-group-name"), level=yang.gdata.from_xml_opt_int(n, "level"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__weight_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level__weight_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry(yang.adata.MNode):
    level_id: int
    weight_value: int

    mut def __init__(self, level_id: int, weight_value: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.weight_value = weight_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _weight_value = self.weight_value
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _weight_value is not None:
            children['weight-value'] = yang.gdata.Leaf('uint32', _weight_value)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry(level_id=n.get_int("level-id"), weight_value=n.get_int("weight-value"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), weight_value=yang.gdata.from_xml_int(n, "weight-value"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, weight_value):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry(level_id, weight_value)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight(yang.adata.MNode):
    weight_value: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels

    mut def __init__(self, weight_value: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.weight_value = weight_value
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _weight_value = self.weight_value
        _levels = self.levels
        if _weight_value is not None:
            children['weight-value'] = yang.gdata.Leaf('uint32', _weight_value)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight(weight_value=n.get_opt_int("weight-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight(weight_value=yang.gdata.from_xml_opt_int(n, "weight-value"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight()



mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__absolute_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level__absolute_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry(yang.adata.MNode):
    level_id: int
    absolute_metric: int

    mut def __init__(self, level_id: int, absolute_metric: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level_id = level_id
        self.absolute_metric = absolute_metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        _absolute_metric = self.absolute_metric
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        if _absolute_metric is not None:
            children['absolute-metric'] = yang.gdata.Leaf('uint32', _absolute_metric)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.level_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry(level_id=n.get_int("level-id"), absolute_metric=n.get_int("absolute-metric"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry(level_id=yang.gdata.from_xml_int(n, "level-id"), absolute_metric=yang.gdata.from_xml_int(n, "absolute-metric"))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id, absolute_metric):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry(level_id, absolute_metric)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level(elements=level)
        self.level._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level.from_gdata(n.get_opt_list("level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels__level.from_xml(yang.gdata.get_xml_children(n, "level")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect(yang.adata.MNode):
    absolute_metric: ?int
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels

    mut def __init__(self, absolute_metric: ?int, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.absolute_metric = absolute_metric
        if levels is not None:
            self.levels = levels
        else:
            self.levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels()
        self_levels = self.levels
        if self_levels is not None:
            self_levels._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _absolute_metric = self.absolute_metric
        _levels = self.levels
        if _absolute_metric is not None:
            children['absolute-metric'] = yang.gdata.Leaf('uint32', _absolute_metric)
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect(absolute_metric=n.get_opt_int("absolute-metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels.from_gdata(n.get_opt_container("levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect(absolute_metric=yang.gdata.from_xml_opt_int(n, "absolute-metric"), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect__levels.from_xml(yang.gdata.get_xml_opt_child(n, "levels")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric(yang.adata.MNode):
    proactive_protect: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect

    mut def __init__(self, proactive_protect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if proactive_protect is not None:
            self.proactive_protect = proactive_protect
        else:
            self.proactive_protect = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect()
        self_proactive_protect = self.proactive_protect
        if self_proactive_protect is not None:
            self_proactive_protect._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _proactive_protect = self.proactive_protect
        if _proactive_protect is not None:
            children['proactive-protect'] = _proactive_protect.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric(proactive_protect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect.from_gdata(n.get_opt_container("proactive-protect")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric(proactive_protect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric__proactive_protect.from_xml(yang.gdata.get_xml_opt_child(n, "proactive-protect")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable()
        return None



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry(yang.adata.MNode):
    af_name: str
    saf_name: str
    topology_name: str
    metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric
    te_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric
    te_metric_levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels
    tag: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag
    link_group: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group
    weight: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight
    auto_metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric
    disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable

    mut def __init__(self, af_name: str, saf_name: str, topology_name: str, metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric=None, te_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric=None, te_metric_levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels=None, tag: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag=None, link_group: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group=None, weight: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight=None, auto_metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric=None, disable: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.af_name = af_name
        self.saf_name = saf_name
        self.topology_name = topology_name
        if metric is not None:
            self.metric = metric
        else:
            self.metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self
        if te_metric is not None:
            self.te_metric = te_metric
        else:
            self.te_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric()
        self_te_metric = self.te_metric
        if self_te_metric is not None:
            self_te_metric._parent = self
        if te_metric_levels is not None:
            self.te_metric_levels = te_metric_levels
        else:
            self.te_metric_levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels()
        self_te_metric_levels = self.te_metric_levels
        if self_te_metric_levels is not None:
            self_te_metric_levels._parent = self
        if tag is not None:
            self.tag = tag
        else:
            self.tag = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self
        self.link_group = link_group
        self_link_group = self.link_group
        if self_link_group is not None:
            self_link_group._parent = self
        if weight is not None:
            self.weight = weight
        else:
            self.weight = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight()
        self_weight = self.weight
        if self_weight is not None:
            self_weight._parent = self
        if auto_metric is not None:
            self.auto_metric = auto_metric
        else:
            self.auto_metric = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric()
        self_auto_metric = self.auto_metric
        if self_auto_metric is not None:
            self_auto_metric._parent = self
        self.disable = disable
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self

    mut def create_link_group(self, link_group_name):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group(link_group_name)
        self.link_group = res
        return res

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        _saf_name = self.saf_name
        _topology_name = self.topology_name
        _metric = self.metric
        _te_metric = self.te_metric
        _te_metric_levels = self.te_metric_levels
        _tag = self.tag
        _link_group = self.link_group
        _weight = self.weight
        _auto_metric = self.auto_metric
        _disable = self.disable
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        if _saf_name is not None:
            children['saf-name'] = yang.gdata.Leaf('enumeration', _saf_name)
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        if _te_metric is not None:
            children['te-metric'] = _te_metric.to_gdata()
        if _te_metric_levels is not None:
            children['te-metric-levels'] = _te_metric_levels.to_gdata()
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        if _link_group is not None:
            children['link-group'] = _link_group.to_gdata()
        if _weight is not None:
            children['weight'] = _weight.to_gdata()
        if _auto_metric is not None:
            children['auto-metric'] = _auto_metric.to_gdata()
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name), yang.gdata.yang_str(self.saf_name), yang.gdata.yang_str(self.topology_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry(af_name=n.get_str("af-name"), saf_name=n.get_str("saf-name"), topology_name=n.get_str("topology-name"), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric.from_gdata(n.get_opt_container("metric")), te_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric.from_gdata(n.get_opt_container("te-metric")), te_metric_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels.from_gdata(n.get_opt_container("te-metric-levels")), tag=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag.from_gdata(n.get_opt_container("tag")), link_group=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group.from_gdata(n.get_opt_container("link-group")), weight=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight.from_gdata(n.get_opt_container("weight")), auto_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric.from_gdata(n.get_opt_container("auto-metric")), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable.from_gdata(n.get_opt_container("disable")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry(af_name=yang.gdata.from_xml_str(n, "af-name"), saf_name=yang.gdata.from_xml_str(n, "saf-name"), topology_name=yang.gdata.from_xml_str(n, "topology-name"), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")), te_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric.from_xml(yang.gdata.get_xml_opt_child(n, "te-metric")), te_metric_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__te_metric_levels.from_xml(yang.gdata.get_xml_opt_child(n, "te-metric-levels")), tag=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")), link_group=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__link_group.from_xml(yang.gdata.get_xml_opt_child(n, "link-group")), weight=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__weight.from_xml(yang.gdata.get_xml_opt_child(n, "weight")), auto_metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__auto_metric.from_xml(yang.gdata.get_xml_opt_child(n, "auto-metric")), disable=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology__disable.from_xml(yang.gdata.get_xml_opt_child(n, "disable")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'address-family-topology'
        self.elements = elements

    mut def create(self, af_name, saf_name, topology_name, link_group):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if e.saf_name != saf_name:
                match = False
                continue
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry(af_name, saf_name, topology_name, link_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name', 'saf-name', 'topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family
    address_family_topology: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]=[], address_family_topology: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.address_family = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family(elements=address_family)
        self.address_family._parent = self
        self.address_family_topology = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology(elements=address_family_topology)
        self.address_family_topology._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        _address_family_topology = self.address_family_topology
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        if _address_family_topology is not None:
            children['address-family-topology'] = _address_family_topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family.from_gdata(n.get_opt_list("address-family")), address_family_topology=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology.from_gdata(n.get_opt_list("address-family-topology")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")), address_family_topology=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_topology.from_xml(yang.gdata.get_xml_children(n, "address-family-topology")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    circuit_type: ?str
    csnp_interval: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval
    hello_padding: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding
    hello_interval: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval
    hello_multiplier: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier
    lsp_interval: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval
    hello_password: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password
    hello_password_levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels
    hello_password_accept: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept
    lsp: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp
    priority: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority
    point_to_point: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point
    retransmit_interval: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval
    retransmit_throttle_interval: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval
    link_down: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down
    prefix_attributes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes
    affinity: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity
    override: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override
    delay: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay
    bfd: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd
    passive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive
    suppressed: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed
    shutdown: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown
    mesh_group: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group
    address_families: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families

    mut def __init__(self, interface_name: str, circuit_type: ?str, csnp_interval: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval=None, hello_padding: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding=None, hello_interval: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval=None, hello_multiplier: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier=None, lsp_interval: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval=None, hello_password: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password=None, hello_password_levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels=None, hello_password_accept: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept=None, lsp: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp=None, priority: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority=None, point_to_point: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point=None, retransmit_interval: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval=None, retransmit_throttle_interval: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval=None, link_down: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down=None, prefix_attributes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes=None, affinity: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity=None, override: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override=None, delay: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay=None, bfd: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd=None, passive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive=None, suppressed: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed=None, shutdown: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown=None, mesh_group: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group=None, address_families: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface_name = interface_name
        self.circuit_type = circuit_type
        if csnp_interval is not None:
            self.csnp_interval = csnp_interval
        else:
            self.csnp_interval = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval()
        self_csnp_interval = self.csnp_interval
        if self_csnp_interval is not None:
            self_csnp_interval._parent = self
        if hello_padding is not None:
            self.hello_padding = hello_padding
        else:
            self.hello_padding = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding()
        self_hello_padding = self.hello_padding
        if self_hello_padding is not None:
            self_hello_padding._parent = self
        if hello_interval is not None:
            self.hello_interval = hello_interval
        else:
            self.hello_interval = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval()
        self_hello_interval = self.hello_interval
        if self_hello_interval is not None:
            self_hello_interval._parent = self
        if hello_multiplier is not None:
            self.hello_multiplier = hello_multiplier
        else:
            self.hello_multiplier = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier()
        self_hello_multiplier = self.hello_multiplier
        if self_hello_multiplier is not None:
            self_hello_multiplier._parent = self
        if lsp_interval is not None:
            self.lsp_interval = lsp_interval
        else:
            self.lsp_interval = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval()
        self_lsp_interval = self.lsp_interval
        if self_lsp_interval is not None:
            self_lsp_interval._parent = self
        self.hello_password = hello_password
        self_hello_password = self.hello_password
        if self_hello_password is not None:
            self_hello_password._parent = self
        if hello_password_levels is not None:
            self.hello_password_levels = hello_password_levels
        else:
            self.hello_password_levels = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels()
        self_hello_password_levels = self.hello_password_levels
        if self_hello_password_levels is not None:
            self_hello_password_levels._parent = self
        if hello_password_accept is not None:
            self.hello_password_accept = hello_password_accept
        else:
            self.hello_password_accept = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept()
        self_hello_password_accept = self.hello_password_accept
        if self_hello_password_accept is not None:
            self_hello_password_accept._parent = self
        if lsp is not None:
            self.lsp = lsp
        else:
            self.lsp = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp()
        self_lsp = self.lsp
        if self_lsp is not None:
            self_lsp._parent = self
        if priority is not None:
            self.priority = priority
        else:
            self.priority = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority()
        self_priority = self.priority
        if self_priority is not None:
            self_priority._parent = self
        self.point_to_point = point_to_point
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        if retransmit_interval is not None:
            self.retransmit_interval = retransmit_interval
        else:
            self.retransmit_interval = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval()
        self_retransmit_interval = self.retransmit_interval
        if self_retransmit_interval is not None:
            self_retransmit_interval._parent = self
        if retransmit_throttle_interval is not None:
            self.retransmit_throttle_interval = retransmit_throttle_interval
        else:
            self.retransmit_throttle_interval = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval()
        self_retransmit_throttle_interval = self.retransmit_throttle_interval
        if self_retransmit_throttle_interval is not None:
            self_retransmit_throttle_interval._parent = self
        if link_down is not None:
            self.link_down = link_down
        else:
            self.link_down = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down()
        self_link_down = self.link_down
        if self_link_down is not None:
            self_link_down._parent = self
        if prefix_attributes is not None:
            self.prefix_attributes = prefix_attributes
        else:
            self.prefix_attributes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes()
        self_prefix_attributes = self.prefix_attributes
        if self_prefix_attributes is not None:
            self_prefix_attributes._parent = self
        if affinity is not None:
            self.affinity = affinity
        else:
            self.affinity = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity()
        self_affinity = self.affinity
        if self_affinity is not None:
            self_affinity._parent = self
        if override is not None:
            self.override = override
        else:
            self.override = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override()
        self_override = self.override
        if self_override is not None:
            self_override._parent = self
        if delay is not None:
            self.delay = delay
        else:
            self.delay = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay()
        self_delay = self.delay
        if self_delay is not None:
            self_delay._parent = self
        if bfd is not None:
            self.bfd = bfd
        else:
            self.bfd = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd()
        self_bfd = self.bfd
        if self_bfd is not None:
            self_bfd._parent = self
        self.passive = passive
        self_passive = self.passive
        if self_passive is not None:
            self_passive._parent = self
        self.suppressed = suppressed
        self_suppressed = self.suppressed
        if self_suppressed is not None:
            self_suppressed._parent = self
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        if mesh_group is not None:
            self.mesh_group = mesh_group
        else:
            self.mesh_group = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group()
        self_mesh_group = self.mesh_group
        if self_mesh_group is not None:
            self_mesh_group._parent = self
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self

    mut def create_hello_password(self, text, hmac_md5, keychain):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password(text, hmac_md5, keychain)
        self.hello_password = res
        return res

    mut def create_point_to_point(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point()
        self.point_to_point = res
        return res

    mut def create_passive(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive()
        self.passive = res
        return res

    mut def create_suppressed(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed()
        self.suppressed = res
        return res

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown()
        self.shutdown = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _circuit_type = self.circuit_type
        _csnp_interval = self.csnp_interval
        _hello_padding = self.hello_padding
        _hello_interval = self.hello_interval
        _hello_multiplier = self.hello_multiplier
        _lsp_interval = self.lsp_interval
        _hello_password = self.hello_password
        _hello_password_levels = self.hello_password_levels
        _hello_password_accept = self.hello_password_accept
        _lsp = self.lsp
        _priority = self.priority
        _point_to_point = self.point_to_point
        _retransmit_interval = self.retransmit_interval
        _retransmit_throttle_interval = self.retransmit_throttle_interval
        _link_down = self.link_down
        _prefix_attributes = self.prefix_attributes
        _affinity = self.affinity
        _override = self.override
        _delay = self.delay
        _bfd = self.bfd
        _passive = self.passive
        _suppressed = self.suppressed
        _shutdown = self.shutdown
        _mesh_group = self.mesh_group
        _address_families = self.address_families
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _circuit_type is not None:
            children['circuit-type'] = yang.gdata.Leaf('enumeration', _circuit_type)
        if _csnp_interval is not None:
            children['csnp-interval'] = _csnp_interval.to_gdata()
        if _hello_padding is not None:
            children['hello-padding'] = _hello_padding.to_gdata()
        if _hello_interval is not None:
            children['hello-interval'] = _hello_interval.to_gdata()
        if _hello_multiplier is not None:
            children['hello-multiplier'] = _hello_multiplier.to_gdata()
        if _lsp_interval is not None:
            children['lsp-interval'] = _lsp_interval.to_gdata()
        if _hello_password is not None:
            children['hello-password'] = _hello_password.to_gdata()
        if _hello_password_levels is not None:
            children['hello-password-levels'] = _hello_password_levels.to_gdata()
        if _hello_password_accept is not None:
            children['hello-password-accept'] = _hello_password_accept.to_gdata()
        if _lsp is not None:
            children['lsp'] = _lsp.to_gdata()
        if _priority is not None:
            children['priority'] = _priority.to_gdata()
        if _point_to_point is not None:
            children['point-to-point'] = _point_to_point.to_gdata()
        if _retransmit_interval is not None:
            children['retransmit-interval'] = _retransmit_interval.to_gdata()
        if _retransmit_throttle_interval is not None:
            children['retransmit-throttle-interval'] = _retransmit_throttle_interval.to_gdata()
        if _link_down is not None:
            children['link-down'] = _link_down.to_gdata()
        if _prefix_attributes is not None:
            children['prefix-attributes'] = _prefix_attributes.to_gdata()
        if _affinity is not None:
            children['affinity'] = _affinity.to_gdata()
        if _override is not None:
            children['override'] = _override.to_gdata()
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        if _bfd is not None:
            children['bfd'] = _bfd.to_gdata()
        if _passive is not None:
            children['passive'] = _passive.to_gdata()
        if _suppressed is not None:
            children['suppressed'] = _suppressed.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        if _mesh_group is not None:
            children['mesh-group'] = _mesh_group.to_gdata()
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(interface_name=n.get_str("interface-name"), circuit_type=n.get_opt_str("circuit-type"), csnp_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval.from_gdata(n.get_opt_container("csnp-interval")), hello_padding=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding.from_gdata(n.get_opt_container("hello-padding")), hello_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval.from_gdata(n.get_opt_container("hello-interval")), hello_multiplier=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier.from_gdata(n.get_opt_container("hello-multiplier")), lsp_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval.from_gdata(n.get_opt_container("lsp-interval")), hello_password=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password.from_gdata(n.get_opt_container("hello-password")), hello_password_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels.from_gdata(n.get_opt_container("hello-password-levels")), hello_password_accept=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept.from_gdata(n.get_opt_container("hello-password-accept")), lsp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp.from_gdata(n.get_opt_container("lsp")), priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority.from_gdata(n.get_opt_container("priority")), point_to_point=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point.from_gdata(n.get_opt_container("point-to-point")), retransmit_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval.from_gdata(n.get_opt_container("retransmit-interval")), retransmit_throttle_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval.from_gdata(n.get_opt_container("retransmit-throttle-interval")), link_down=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down.from_gdata(n.get_opt_container("link-down")), prefix_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes.from_gdata(n.get_opt_container("prefix-attributes")), affinity=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity.from_gdata(n.get_opt_container("affinity")), override=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override.from_gdata(n.get_opt_container("override")), delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay.from_gdata(n.get_opt_container("delay")), bfd=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd.from_gdata(n.get_opt_container("bfd")), passive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive.from_gdata(n.get_opt_container("passive")), suppressed=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed.from_gdata(n.get_opt_container("suppressed")), shutdown=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown.from_gdata(n.get_opt_container("shutdown")), mesh_group=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group.from_gdata(n.get_opt_container("mesh-group")), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families.from_gdata(n.get_opt_container("address-families")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), circuit_type=yang.gdata.from_xml_opt_str(n, "circuit-type"), csnp_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__csnp_interval.from_xml(yang.gdata.get_xml_opt_child(n, "csnp-interval")), hello_padding=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_padding.from_xml(yang.gdata.get_xml_opt_child(n, "hello-padding")), hello_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_interval.from_xml(yang.gdata.get_xml_opt_child(n, "hello-interval")), hello_multiplier=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_multiplier.from_xml(yang.gdata.get_xml_opt_child(n, "hello-multiplier")), lsp_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp_interval.from_xml(yang.gdata.get_xml_opt_child(n, "lsp-interval")), hello_password=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password.from_xml(yang.gdata.get_xml_opt_child(n, "hello-password")), hello_password_levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_levels.from_xml(yang.gdata.get_xml_opt_child(n, "hello-password-levels")), hello_password_accept=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__hello_password_accept.from_xml(yang.gdata.get_xml_opt_child(n, "hello-password-accept")), lsp=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__lsp.from_xml(yang.gdata.get_xml_opt_child(n, "lsp")), priority=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__priority.from_xml(yang.gdata.get_xml_opt_child(n, "priority")), point_to_point=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point.from_xml(yang.gdata.get_xml_opt_child(n, "point-to-point")), retransmit_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_interval.from_xml(yang.gdata.get_xml_opt_child(n, "retransmit-interval")), retransmit_throttle_interval=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__retransmit_throttle_interval.from_xml(yang.gdata.get_xml_opt_child(n, "retransmit-throttle-interval")), link_down=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__link_down.from_xml(yang.gdata.get_xml_opt_child(n, "link-down")), prefix_attributes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__prefix_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-attributes")), affinity=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__affinity.from_xml(yang.gdata.get_xml_opt_child(n, "affinity")), override=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__override.from_xml(yang.gdata.get_xml_opt_child(n, "override")), delay=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__delay.from_xml(yang.gdata.get_xml_opt_child(n, "delay")), bfd=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd.from_xml(yang.gdata.get_xml_opt_child(n, "bfd")), passive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive.from_xml(yang.gdata.get_xml_opt_child(n, "passive")), suppressed=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__suppressed.from_xml(yang.gdata.get_xml_opt_child(n, "suppressed")), shutdown=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")), mesh_group=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__mesh_group.from_xml(yang.gdata.get_xml_opt_child(n, "mesh-group")), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(yang.adata.MNode):
    process_id: str
    is_type: ?str
    nets: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets
    address_families: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces

    mut def __init__(self, process_id: str, is_type: ?str, nets: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets=None, address_families: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families=None, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.process_id = process_id
        self.is_type = is_type
        if nets is not None:
            self.nets = nets
        else:
            self.nets = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets()
        self_nets = self.nets
        if self_nets is not None:
            self_nets._parent = self
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process_id = self.process_id
        _is_type = self.is_type
        _nets = self.nets
        _address_families = self.address_families
        _interfaces = self.interfaces
        if _process_id is not None:
            children['process-id'] = yang.gdata.Leaf('string', _process_id)
        if _is_type is not None:
            children['is-type'] = yang.gdata.Leaf('enumeration', _is_type)
        if _nets is not None:
            children['nets'] = _nets.to_gdata()
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.process_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(process_id=n.get_str("process-id"), is_type=n.get_opt_str("is-type"), nets=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets.from_gdata(n.get_opt_container("nets")), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families.from_gdata(n.get_opt_container("address-families")), interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces.from_gdata(n.get_opt_container("interfaces")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(process_id=yang.gdata.from_xml_str(n, "process-id"), is_type=yang.gdata.from_xml_opt_str(n, "is-type"), nets=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets.from_xml(yang.gdata.get_xml_opt_child(n, "nets")), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self._name = 'process'
        self.elements = elements

    mut def create(self, process_id):
        for e in self.elements:
            match = True
            if e.process_id != process_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(process_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['process-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(yang.adata.MNode):
    process: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process

    mut def __init__(self, process: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        self.process = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process(elements=process)
        self.process._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process = self.process
        if _process is not None:
            children['process'] = _process.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(process=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process.from_gdata(n.get_opt_list("process")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(process=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process.from_xml(yang.gdata.get_xml_children(n, "process")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes()



class Cisco_IOS_XR_um_router_isis_cfg__router__isis(yang.adata.MNode):
    processes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes

    mut def __init__(self, processes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if processes is not None:
            self.processes = processes
        else:
            self.processes = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes()
        self_processes = self.processes
        if self_processes is not None:
            self_processes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _processes = self.processes
        if _processes is not None:
            children['processes'] = _processes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis(processes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes.from_gdata(n.get_opt_container("processes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis(processes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes.from_xml(yang.gdata.get_xml_opt_child(n, "processes")))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis()



class Cisco_IOS_XR_um_router_isis_cfg__router(yang.adata.MNode):
    isis: Cisco_IOS_XR_um_router_isis_cfg__router__isis

    mut def __init__(self, isis: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg"
        if isis is not None:
            self.isis = isis
        else:
            self.isis = Cisco_IOS_XR_um_router_isis_cfg__router__isis()
        self_isis = self.isis
        if self_isis is not None:
            self_isis._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _isis = self.isis
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router(isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis.from_gdata(n.get_opt_container("isis")))
        return Cisco_IOS_XR_um_router_isis_cfg__router()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router(isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis.from_xml(yang.gdata.get_xml_opt_child(n, "isis")))
        return Cisco_IOS_XR_um_router_isis_cfg__router()



class Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__as_format(yang.adata.MNode):
    asdot: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot
    asplain: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain

    mut def __init__(self, asdot: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot=None, asplain: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.asdot = asdot
        self_asdot = self.asdot
        if self_asdot is not None:
            self_asdot._parent = self
        self.asplain = asplain
        self_asplain = self.asplain
        if self_asplain is not None:
            self_asplain._parent = self

    mut def create_asdot(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        self.asdot = res
        return res

    mut def create_asplain(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        self.asplain = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _asdot = self.asdot
        _asplain = self.asplain
        if _asdot is not None:
            children['asdot'] = _asdot.to_gdata()
        if _asplain is not None:
            children['asplain'] = _asplain.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__as_format:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format(asdot=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot.from_gdata(n.get_opt_container("asdot")), asplain=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain.from_gdata(n.get_opt_container("asplain")))
        return Cisco_IOS_XR_um_router_bgp_cfg__as_format()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__as_format:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format(asdot=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot.from_xml(yang.gdata.get_xml_opt_child(n, "asdot")), asplain=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain.from_xml(yang.gdata.get_xml_opt_child(n, "asplain")))
        return Cisco_IOS_XR_um_router_bgp_cfg__as_format()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__bmp_server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(yang.adata.MNode):
    host_name: str
    port: ?int

    mut def __init__(self, host_name: str, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.host_name = host_name
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        _port = self.port
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name=n.get_str("host-name"), port=n.get_opt_int("port"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name=yang.gdata.from_xml_str(n, "host-name"), port=yang.gdata.from_xml_opt_int(n, "port"))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__flapping_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__max_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__initial_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__spread(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(yang.adata.MNode):
    initial_delay: int
    spread: ?int

    mut def __init__(self, initial_delay: int, spread: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.initial_delay = initial_delay
        self.spread = spread

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_delay = self.initial_delay
        _spread = self.spread
        if _initial_delay is not None:
            children['initial-delay'] = yang.gdata.Leaf('uint32', _initial_delay)
        if _spread is not None:
            children['spread'] = yang.gdata.Leaf('uint32', _spread)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay=n.get_int("initial-delay"), spread=n.get_opt_int("spread"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay=yang.gdata.from_xml_int(n, "initial-delay"), spread=yang.gdata.from_xml_opt_int(n, "spread"))
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(yang.adata.MNode):
    delay: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay
    skip: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip

    mut def __init__(self, delay: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay=None, skip: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.delay = delay
        self_delay = self.delay
        if self_delay is not None:
            self_delay._parent = self
        self.skip = skip
        self_skip = self.skip
        if self_skip is not None:
            self_skip._parent = self

    mut def create_delay(self, initial_delay):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay)
        self.delay = res
        return res

    mut def create_skip(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        self.skip = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay = self.delay
        _skip = self.skip
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        if _skip is not None:
            children['skip'] = _skip.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(delay=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay.from_gdata(n.get_opt_container("delay")), skip=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip.from_gdata(n.get_opt_container("skip")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(delay=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay.from_xml(yang.gdata.get_xml_opt_child(n, "delay")), skip=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip.from_xml(yang.gdata.get_xml_opt_child(n, "skip")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__stats_reporting_period(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__dscp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__precedence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__keep_alive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(yang.adata.MNode):
    keep_alive: ?int
    mss: ?int

    mut def __init__(self, keep_alive: ?int, mss: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.keep_alive = keep_alive
        self.mss = mss

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keep_alive = self.keep_alive
        _mss = self.mss
        if _keep_alive is not None:
            children['keep-alive'] = yang.gdata.Leaf('uint32', _keep_alive)
        if _mss is not None:
            children['mss'] = yang.gdata.Leaf('uint32', _mss)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(keep_alive=n.get_opt_int("keep-alive"), mss=n.get_opt_int("mss"))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(keep_alive=yang.gdata.from_xml_opt_int(n, "keep-alive"), mss=yang.gdata.from_xml_opt_int(n, "mss"))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(yang.adata.MNode):
    bmp_server_id: int
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown
    host: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host
    initial_delay: ?int
    flapping_delay: ?int
    max_buffer_size: ?int
    initial_refresh: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh
    stats_reporting_period: ?int
    description: ?str
    dscp: ?str
    precedence: ?str
    update_source: ?str
    vrf: ?str
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp

    mut def __init__(self, bmp_server_id: int, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown=None, host: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host=None, initial_delay: ?int, flapping_delay: ?int, max_buffer_size: ?int, initial_refresh: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh=None, stats_reporting_period: ?int, description: ?str, dscp: ?str, precedence: ?str, update_source: ?str, vrf: ?str, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.bmp_server_id = bmp_server_id
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.host = host
        self_host = self.host
        if self_host is not None:
            self_host._parent = self
        self.initial_delay = initial_delay
        self.flapping_delay = flapping_delay
        self.max_buffer_size = max_buffer_size
        if initial_refresh is not None:
            self.initial_refresh = initial_refresh
        else:
            self.initial_refresh = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()
        self_initial_refresh = self.initial_refresh
        if self_initial_refresh is not None:
            self_initial_refresh._parent = self
        self.stats_reporting_period = stats_reporting_period
        self.description = description
        self.dscp = dscp
        self.precedence = precedence
        self.update_source = update_source
        self.vrf = vrf
        if tcp is not None:
            self.tcp = tcp
        else:
            self.tcp = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()
        self_tcp = self.tcp
        if self_tcp is not None:
            self_tcp._parent = self

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        self.shutdown = res
        return res

    mut def create_host(self, host_name):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name)
        self.host = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_server_id = self.bmp_server_id
        _shutdown = self.shutdown
        _host = self.host
        _initial_delay = self.initial_delay
        _flapping_delay = self.flapping_delay
        _max_buffer_size = self.max_buffer_size
        _initial_refresh = self.initial_refresh
        _stats_reporting_period = self.stats_reporting_period
        _description = self.description
        _dscp = self.dscp
        _precedence = self.precedence
        _update_source = self.update_source
        _vrf = self.vrf
        _tcp = self.tcp
        if _bmp_server_id is not None:
            children['bmp-server-id'] = yang.gdata.Leaf('uint32', _bmp_server_id)
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        if _host is not None:
            children['host'] = _host.to_gdata()
        if _initial_delay is not None:
            children['initial-delay'] = yang.gdata.Leaf('uint32', _initial_delay)
        if _flapping_delay is not None:
            children['flapping-delay'] = yang.gdata.Leaf('uint32', _flapping_delay)
        if _max_buffer_size is not None:
            children['max-buffer-size'] = yang.gdata.Leaf('uint32', _max_buffer_size)
        if _initial_refresh is not None:
            children['initial-refresh'] = _initial_refresh.to_gdata()
        if _stats_reporting_period is not None:
            children['stats-reporting-period'] = yang.gdata.Leaf('uint32', _stats_reporting_period)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _dscp is not None:
            children['dscp'] = yang.gdata.Leaf('enumeration', _dscp)
        if _precedence is not None:
            children['precedence'] = yang.gdata.Leaf('enumeration', _precedence)
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf)
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.bmp_server_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id=n.get_int("bmp-server-id"), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown.from_gdata(n.get_opt_container("shutdown")), host=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host.from_gdata(n.get_opt_container("host")), initial_delay=n.get_opt_int("initial-delay"), flapping_delay=n.get_opt_int("flapping-delay"), max_buffer_size=n.get_opt_int("max-buffer-size"), initial_refresh=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh.from_gdata(n.get_opt_container("initial-refresh")), stats_reporting_period=n.get_opt_int("stats-reporting-period"), description=n.get_opt_str("description"), dscp=n.get_opt_str("dscp"), precedence=n.get_opt_str("precedence"), update_source=n.get_opt_str("update-source"), vrf=n.get_opt_str("vrf"), tcp=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp.from_gdata(n.get_opt_container("tcp")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id=yang.gdata.from_xml_int(n, "bmp-server-id"), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")), host=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host.from_xml(yang.gdata.get_xml_opt_child(n, "host")), initial_delay=yang.gdata.from_xml_opt_int(n, "initial-delay"), flapping_delay=yang.gdata.from_xml_opt_int(n, "flapping-delay"), max_buffer_size=yang.gdata.from_xml_opt_int(n, "max-buffer-size"), initial_refresh=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh.from_xml(yang.gdata.get_xml_opt_child(n, "initial-refresh")), stats_reporting_period=yang.gdata.from_xml_opt_int(n, "stats-reporting-period"), description=yang.gdata.from_xml_opt_str(n, "description"), dscp=yang.gdata.from_xml_opt_str(n, "dscp"), precedence=yang.gdata.from_xml_opt_str(n, "precedence"), update_source=yang.gdata.from_xml_opt_str(n, "update-source"), vrf=yang.gdata.from_xml_opt_str(n, "vrf"), tcp=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp.from_xml(yang.gdata.get_xml_opt_child(n, "tcp")))

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'server'
        self.elements = elements

    mut def create(self, bmp_server_id, host):
        for e in self.elements:
            match = True
            if e.bmp_server_id != bmp_server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id, host)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['bmp-server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry.from_xml(node))
        return res



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__max_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__mode_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__scan_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(yang.adata.MNode):
    mode_name: str
    advertisement_interval: ?int
    scan_time: ?int

    mut def __init__(self, mode_name: str, advertisement_interval: ?int, scan_time: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.mode_name = mode_name
        self.advertisement_interval = advertisement_interval
        self.scan_time = scan_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode_name = self.mode_name
        _advertisement_interval = self.advertisement_interval
        _scan_time = self.scan_time
        if _mode_name is not None:
            children['mode-name'] = yang.gdata.Leaf('enumeration', _mode_name)
        if _advertisement_interval is not None:
            children['advertisement-interval'] = yang.gdata.Leaf('uint32', _advertisement_interval)
        if _scan_time is not None:
            children['scan-time'] = yang.gdata.Leaf('uint32', _scan_time)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.mode_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name=n.get_str("mode-name"), advertisement_interval=n.get_opt_int("advertisement-interval"), scan_time=n.get_opt_int("scan-time"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name=yang.gdata.from_xml_str(n, "mode-name"), advertisement_interval=yang.gdata.from_xml_opt_int(n, "advertisement-interval"), scan_time=yang.gdata.from_xml_opt_int(n, "scan-time"))

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'bmp-mode'
        self.elements = elements

    mut def create(self, mode_name):
        for e in self.elements:
            match = True
            if e.mode_name != mode_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['mode-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(yang.adata.MNode):
    bmp_mode: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode

    mut def __init__(self, bmp_mode: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.bmp_mode = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(elements=bmp_mode)
        self.bmp_mode._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_mode = self.bmp_mode
        if _bmp_mode is not None:
            children['bmp-mode'] = _bmp_mode.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(bmp_mode=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode.from_gdata(n.get_opt_list("bmp-mode")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(bmp_mode=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode.from_xml(yang.gdata.get_xml_children(n, "bmp-mode")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(yang.adata.MNode):
    bmp_modes: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes

    mut def __init__(self, bmp_modes: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if bmp_modes is not None:
            self.bmp_modes = bmp_modes
        else:
            self.bmp_modes = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()
        self_bmp_modes = self.bmp_modes
        if self_bmp_modes is not None:
            self_bmp_modes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_modes = self.bmp_modes
        if _bmp_modes is not None:
            children['bmp-modes'] = _bmp_modes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(bmp_modes=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes.from_gdata(n.get_opt_container("bmp-modes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(bmp_modes=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes.from_xml(yang.gdata.get_xml_opt_child(n, "bmp-modes")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(yang.adata.MNode):
    max_buffer_size: ?int
    route_monitoring: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring

    mut def __init__(self, max_buffer_size: ?int, route_monitoring: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.max_buffer_size = max_buffer_size
        if route_monitoring is not None:
            self.route_monitoring = route_monitoring
        else:
            self.route_monitoring = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()
        self_route_monitoring = self.route_monitoring
        if self_route_monitoring is not None:
            self_route_monitoring._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_buffer_size = self.max_buffer_size
        _route_monitoring = self.route_monitoring
        if _max_buffer_size is not None:
            children['max-buffer-size'] = yang.gdata.Leaf('uint32', _max_buffer_size)
        if _route_monitoring is not None:
            children['route-monitoring'] = _route_monitoring.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(max_buffer_size=n.get_opt_int("max-buffer-size"), route_monitoring=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring.from_gdata(n.get_opt_container("route-monitoring")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(max_buffer_size=yang.gdata.from_xml_opt_int(n, "max-buffer-size"), route_monitoring=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring.from_xml(yang.gdata.get_xml_opt_child(n, "route-monitoring")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server
    all: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]=[], all: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(elements=server)
        self.server._parent = self
        if all is not None:
            self.all = all
        else:
            self.all = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()
        self_all = self.all
        if self_all is not None:
            self_all._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        _all = self.all
        if _server is not None:
            children['server'] = _server.to_gdata()
        if _all is not None:
            children['all'] = _all.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server.from_gdata(n.get_opt_list("server")), all=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all.from_gdata(n.get_opt_container("all")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server.from_xml(yang.gdata.get_xml_children(n, "server")), all=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all.from_xml(yang.gdata.get_xml_opt_child(n, "all")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()



class Cisco_IOS_XR_um_router_bgp_cfg__bmp(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if servers is not None:
            self.servers = servers
        else:
            self.servers = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()
        self_servers = self.servers
        if self_servers is not None:
            self_servers._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp(servers=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers.from_gdata(n.get_opt_container("servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp(servers=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers.from_xml(yang.gdata.get_xml_opt_child(n, "servers")))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(yang.adata.MNode):
    interface_name: ?str

    mut def __init__(self, interface_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.interface_name = interface_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(interface_name=n.get_opt_str("interface-name"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(interface_name=yang.gdata.from_xml_opt_str(n, "interface-name"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface

    mut def __init__(self, interface: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if interface is not None:
            self.interface = interface
        else:
            self.interface = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()
        self_interface = self.interface
        if self_interface is not None:
            self_interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(interface=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface.from_gdata(n.get_opt_container("interface")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(interface=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface.from_xml(yang.gdata.get_xml_opt_child(n, "interface")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__refresh_time_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(yang.adata.MNode):
    refresh_time_value: ?int
    off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off

    mut def __init__(self, refresh_time_value: ?int, off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.refresh_time_value = refresh_time_value
        self.off = off
        self_off = self.off
        if self_off is not None:
            self_off._parent = self

    mut def create_off(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        self.off = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _refresh_time_value = self.refresh_time_value
        _off = self.off
        if _refresh_time_value is not None:
            children['refresh-time-value'] = yang.gdata.Leaf('uint32', _refresh_time_value)
        if _off is not None:
            children['off'] = _off.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(refresh_time_value=n.get_opt_int("refresh-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off.from_gdata(n.get_opt_container("off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(refresh_time_value=yang.gdata.from_xml_opt_int(n, "refresh-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off.from_xml(yang.gdata.get_xml_opt_child(n, "off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__response_time_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(yang.adata.MNode):
    response_time_value: ?int
    off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off

    mut def __init__(self, response_time_value: ?int, off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.response_time_value = response_time_value
        self.off = off
        self_off = self.off
        if self_off is not None:
            self_off._parent = self

    mut def create_off(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        self.off = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _response_time_value = self.response_time_value
        _off = self.off
        if _response_time_value is not None:
            children['response-time-value'] = yang.gdata.Leaf('uint32', _response_time_value)
        if _off is not None:
            children['off'] = _off.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(response_time_value=n.get_opt_int("response-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off.from_gdata(n.get_opt_container("off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(response_time_value=yang.gdata.from_xml_opt_int(n, "response-time-value"), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off.from_xml(yang.gdata.get_xml_opt_child(n, "off")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__purge_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(yang.adata.MNode):
    port: ?int

    mut def __init__(self, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(port=n.get_opt_int("port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(port=yang.gdata.from_xml_opt_int(n, "port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(yang.adata.MNode):
    port: ?int

    mut def __init__(self, port: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(port=n.get_opt_int("port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(port=yang.gdata.from_xml_opt_int(n, "port"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(yang.adata.MNode):
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp
    ssh: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh

    mut def __init__(self, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp=None, ssh: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if tcp is not None:
            self.tcp = tcp
        else:
            self.tcp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()
        self_tcp = self.tcp
        if self_tcp is not None:
            self_tcp._parent = self
        if ssh is not None:
            self.ssh = ssh
        else:
            self.ssh = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()
        self_ssh = self.ssh
        if self_ssh is not None:
            self_ssh._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tcp = self.tcp
        _ssh = self.ssh
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        if _ssh is not None:
            children['ssh'] = _ssh.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp.from_gdata(n.get_opt_container("tcp")), ssh=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh.from_gdata(n.get_opt_container("ssh")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp.from_xml(yang.gdata.get_xml_opt_child(n, "tcp")), ssh=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh.from_xml(yang.gdata.get_xml_opt_child(n, "ssh")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(yang.adata.MNode):
    server_id: str
    bind_source: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source
    preference: ?int
    refresh_time: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time
    response_time: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time
    purge_time: ?int
    username: ?str
    password: ?str
    transport: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown

    mut def __init__(self, server_id: str, bind_source: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source=None, preference: ?int, refresh_time: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time=None, response_time: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time=None, purge_time: ?int, username: ?str, password: ?str, transport: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport=None, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server_id = server_id
        if bind_source is not None:
            self.bind_source = bind_source
        else:
            self.bind_source = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()
        self_bind_source = self.bind_source
        if self_bind_source is not None:
            self_bind_source._parent = self
        self.preference = preference
        if refresh_time is not None:
            self.refresh_time = refresh_time
        else:
            self.refresh_time = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()
        self_refresh_time = self.refresh_time
        if self_refresh_time is not None:
            self_refresh_time._parent = self
        if response_time is not None:
            self.response_time = response_time
        else:
            self.response_time = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()
        self_response_time = self.response_time
        if self_response_time is not None:
            self_response_time._parent = self
        self.purge_time = purge_time
        self.username = username
        self.password = password
        if transport is not None:
            self.transport = transport
        else:
            self.transport = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()
        self_transport = self.transport
        if self_transport is not None:
            self_transport._parent = self
        self.shutdown = shutdown
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        self.shutdown = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server_id = self.server_id
        _bind_source = self.bind_source
        _preference = self.preference
        _refresh_time = self.refresh_time
        _response_time = self.response_time
        _purge_time = self.purge_time
        _username = self.username
        _password = self.password
        _transport = self.transport
        _shutdown = self.shutdown
        if _server_id is not None:
            children['server-id'] = yang.gdata.Leaf('string', _server_id)
        if _bind_source is not None:
            children['bind-source'] = _bind_source.to_gdata()
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('uint32', _preference)
        if _refresh_time is not None:
            children['refresh-time'] = _refresh_time.to_gdata()
        if _response_time is not None:
            children['response-time'] = _response_time.to_gdata()
        if _purge_time is not None:
            children['purge-time'] = yang.gdata.Leaf('uint32', _purge_time)
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.server_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id=n.get_str("server-id"), bind_source=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source.from_gdata(n.get_opt_container("bind-source")), preference=n.get_opt_int("preference"), refresh_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time.from_gdata(n.get_opt_container("refresh-time")), response_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time.from_gdata(n.get_opt_container("response-time")), purge_time=n.get_opt_int("purge-time"), username=n.get_opt_str("username"), password=n.get_opt_str("password"), transport=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport.from_gdata(n.get_opt_container("transport")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown.from_gdata(n.get_opt_container("shutdown")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id=yang.gdata.from_xml_str(n, "server-id"), bind_source=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source.from_xml(yang.gdata.get_xml_opt_child(n, "bind-source")), preference=yang.gdata.from_xml_opt_int(n, "preference"), refresh_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time.from_xml(yang.gdata.get_xml_opt_child(n, "refresh-time")), response_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time.from_xml(yang.gdata.get_xml_opt_child(n, "response-time")), purge_time=yang.gdata.from_xml_opt_int(n, "purge-time"), username=yang.gdata.from_xml_opt_str(n, "username"), password=yang.gdata.from_xml_opt_str(n, "password"), transport=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport.from_xml(yang.gdata.get_xml_opt_child(n, "transport")), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown.from_xml(yang.gdata.get_xml_opt_child(n, "shutdown")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'server'
        self.elements = elements

    mut def create(self, server_id):
        for e in self.elements:
            match = True
            if e.server_id != server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(elements=server)
        self.server._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        if _server is not None:
            children['server'] = _server.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server.from_gdata(n.get_opt_list("server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server.from_xml(yang.gdata.get_xml_children(n, "server")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__minimum_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__maximum_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__origin_as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(yang.adata.MNode):
    address: str
    minimum_prefix_length: int
    maximum_prefix_length: int
    origin_as_number: int

    mut def __init__(self, address: str, minimum_prefix_length: int, maximum_prefix_length: int, origin_as_number: int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address = address
        self.minimum_prefix_length = minimum_prefix_length
        self.maximum_prefix_length = maximum_prefix_length
        self.origin_as_number = origin_as_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _minimum_prefix_length = self.minimum_prefix_length
        _maximum_prefix_length = self.maximum_prefix_length
        _origin_as_number = self.origin_as_number
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        if _minimum_prefix_length is not None:
            children['minimum-prefix-length'] = yang.gdata.Leaf('union', _minimum_prefix_length)
        if _maximum_prefix_length is not None:
            children['maximum-prefix-length'] = yang.gdata.Leaf('union', _maximum_prefix_length)
        if _origin_as_number is not None:
            children['origin-as-number'] = yang.gdata.Leaf('uint32', _origin_as_number)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address), yang.gdata.yang_str(self.minimum_prefix_length), yang.gdata.yang_str(self.maximum_prefix_length), yang.gdata.yang_str(self.origin_as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address=n.get_str("address"), minimum_prefix_length=n.get_int("minimum-prefix-length"), maximum_prefix_length=n.get_int("maximum-prefix-length"), origin_as_number=n.get_int("origin-as-number"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address=yang.gdata.from_xml_str(n, "address"), minimum_prefix_length=yang.gdata.from_xml_int(n, "minimum-prefix-length"), maximum_prefix_length=yang.gdata.from_xml_int(n, "maximum-prefix-length"), origin_as_number=yang.gdata.from_xml_int(n, "origin-as-number"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'route'
        self.elements = elements

    mut def create(self, address, minimum_prefix_length, maximum_prefix_length, origin_as_number):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if e.minimum_prefix_length != minimum_prefix_length:
                match = False
                continue
            if e.maximum_prefix_length != maximum_prefix_length:
                match = False
                continue
            if e.origin_as_number != origin_as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address, minimum_prefix_length, maximum_prefix_length, origin_as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address', 'minimum-prefix-length', 'maximum-prefix-length', 'origin-as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(yang.adata.MNode):
    route: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route

    mut def __init__(self, route: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.route = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(elements=route)
        self.route._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route = self.route
        if _route is not None:
            children['route'] = _route.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(route=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route.from_gdata(n.get_opt_list("route")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(route=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route.from_xml(yang.gdata.get_xml_children(n, "route")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__datafile(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers
    routes: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes
    datafile: ?str

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers=None, routes: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes=None, datafile: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if servers is not None:
            self.servers = servers
        else:
            self.servers = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()
        self_servers = self.servers
        if self_servers is not None:
            self_servers._parent = self
        if routes is not None:
            self.routes = routes
        else:
            self.routes = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()
        self_routes = self.routes
        if self_routes is not None:
            self_routes._parent = self
        self.datafile = datafile

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        _routes = self.routes
        _datafile = self.datafile
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        if _routes is not None:
            children['routes'] = _routes.to_gdata()
        if _datafile is not None:
            children['datafile'] = yang.gdata.Leaf('string', _datafile)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers.from_gdata(n.get_opt_container("servers")), routes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes.from_gdata(n.get_opt_container("routes")), datafile=n.get_opt_str("datafile"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers.from_xml(yang.gdata.get_xml_opt_child(n, "servers")), routes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes.from_xml(yang.gdata.get_xml_opt_child(n, "routes")), datafile=yang.gdata.from_xml_opt_str(n, "datafile"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__neighbor_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__session_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__neighbor_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(yang.adata.MNode):
    session_group: ?str
    neighbor_group: ?str

    mut def __init__(self, session_group: ?str, neighbor_group: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.session_group = session_group
        self.neighbor_group = neighbor_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _session_group = self.session_group
        _neighbor_group = self.neighbor_group
        if _session_group is not None:
            children['session-group'] = yang.gdata.Leaf('string', _session_group)
        if _neighbor_group is not None:
            children['neighbor-group'] = yang.gdata.Leaf('string', _neighbor_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(session_group=n.get_opt_str("session-group"), neighbor_group=n.get_opt_str("neighbor-group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(session_group=yang.gdata.from_xml_opt_str(n, "session-group"), neighbor_group=yang.gdata.from_xml_opt_str(n, "neighbor-group"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(yang.adata.MNode):
    neighbor_address: str
    use: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use
    description: ?str

    mut def __init__(self, neighbor_address: str, use: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use=None, description: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_address = neighbor_address
        if use is not None:
            self.use = use
        else:
            self.use = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()
        self_use = self.use
        if self_use is not None:
            self_use._parent = self
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_address = self.neighbor_address
        _use = self.use
        _description = self.description
        if _neighbor_address is not None:
            children['neighbor-address'] = yang.gdata.Leaf('union', _neighbor_address)
        if _use is not None:
            children['use'] = _use.to_gdata()
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.neighbor_address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address=n.get_str("neighbor-address"), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use.from_gdata(n.get_opt_container("use")), description=n.get_opt_str("description"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address=yang.gdata.from_xml_str(n, "neighbor-address"), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use.from_xml(yang.gdata.get_xml_opt_child(n, "use")), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, neighbor_address):
        for e in self.elements:
            match = True
            if e.neighbor_address != neighbor_address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(yang.adata.MNode):
    neighbor: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor

    mut def __init__(self, neighbor: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(elements=neighbor)
        self.neighbor._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor.from_gdata(n.get_opt_list("neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor.from_xml(yang.gdata.get_xml_children(n, "neighbor")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__neighbor_group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__remote_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        return None



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(yang.adata.MNode):
    encrypted: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable

    mut def __init__(self, encrypted: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.encrypted = encrypted
        self.inheritance_disable = inheritance_disable
        self_inheritance_disable = self.inheritance_disable
        if self_inheritance_disable is not None:
            self_inheritance_disable._parent = self

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        _inheritance_disable = self.inheritance_disable
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(encrypted=n.get_opt_str("encrypted"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable.from_gdata(n.get_opt_container("inheritance-disable")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(encrypted=yang.gdata.from_xml_opt_str(n, "encrypted"), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable.from_xml(yang.gdata.get_xml_opt_child(n, "inheritance-disable")))
        return None



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(yang.adata.MNode):
    neighbor_group_name: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families
    remote_as: ?str
    password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password
    update_source: ?str

    mut def __init__(self, neighbor_group_name: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families=None, remote_as: ?str, password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password=None, update_source: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_group_name = neighbor_group_name
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        self.remote_as = remote_as
        self.password = password
        self_password = self.password
        if self_password is not None:
            self_password._parent = self
        self.update_source = update_source

    mut def create_password(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password()
        self.password = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_group_name = self.neighbor_group_name
        _address_families = self.address_families
        _remote_as = self.remote_as
        _password = self.password
        _update_source = self.update_source
        if _neighbor_group_name is not None:
            children['neighbor-group-name'] = yang.gdata.Leaf('string', _neighbor_group_name)
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _remote_as is not None:
            children['remote-as'] = yang.gdata.Leaf('string', _remote_as)
        if _password is not None:
            children['password'] = _password.to_gdata()
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.neighbor_group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name=n.get_str("neighbor-group-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families.from_gdata(n.get_opt_container("address-families")), remote_as=n.get_opt_str("remote-as"), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password.from_gdata(n.get_opt_container("password")), update_source=n.get_opt_str("update-source"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name=yang.gdata.from_xml_str(n, "neighbor-group-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), remote_as=yang.gdata.from_xml_opt_str(n, "remote-as"), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password.from_xml(yang.gdata.get_xml_opt_child(n, "password")), update_source=yang.gdata.from_xml_opt_str(n, "update-source"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'neighbor-group'
        self.elements = elements

    mut def create(self, neighbor_group_name):
        for e in self.elements:
            match = True
            if e.neighbor_group_name != neighbor_group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(yang.adata.MNode):
    neighbor_group: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group

    mut def __init__(self, neighbor_group: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.neighbor_group = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(elements=neighbor_group)
        self.neighbor_group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_group = self.neighbor_group
        if _neighbor_group is not None:
            children['neighbor-group'] = _neighbor_group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(neighbor_group=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group.from_gdata(n.get_opt_list("neighbor-group")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(neighbor_group=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group.from_xml(yang.gdata.get_xml_children(n, "neighbor-group")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(yang.adata.MNode):
    router_id: ?str

    mut def __init__(self, router_id: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.router_id = router_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('string', _router_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(router_id=n.get_opt_str("router-id"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(router_id=yang.gdata.from_xml_opt_str(n, "router-id"))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()



mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.af_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name=n.get_str("af-name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name=yang.gdata.from_xml_str(n, "af-name"))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family.from_gdata(n.get_opt_list("address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families

    mut def __init__(self, vrf_name: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.vrf_name = vrf_name
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        _address_families = self.address_families
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.vrf_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name=n.get_str("vrf-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families.from_gdata(n.get_opt_container("address-families")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name=yang.gdata.from_xml_str(n, "vrf-name"), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.vrf = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(elements=vrf)
        self.vrf._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(vrf=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf.from_gdata(n.get_opt_list("vrf")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(vrf=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(yang.adata.MNode):
    as_number: str
    rpki: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families
    neighbors: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors
    neighbor_groups: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups
    bgp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp
    vrfs: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs

    mut def __init__(self, as_number: str, rpki: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki=None, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families=None, neighbors: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors=None, neighbor_groups: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups=None, bgp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp=None, vrfs: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_number = as_number
        if rpki is not None:
            self.rpki = rpki
        else:
            self.rpki = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()
        self_rpki = self.rpki
        if self_rpki is not None:
            self_rpki._parent = self
        if address_families is not None:
            self.address_families = address_families
        else:
            self.address_families = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()
        self_address_families = self.address_families
        if self_address_families is not None:
            self_address_families._parent = self
        if neighbors is not None:
            self.neighbors = neighbors
        else:
            self.neighbors = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()
        self_neighbors = self.neighbors
        if self_neighbors is not None:
            self_neighbors._parent = self
        if neighbor_groups is not None:
            self.neighbor_groups = neighbor_groups
        else:
            self.neighbor_groups = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()
        self_neighbor_groups = self.neighbor_groups
        if self_neighbor_groups is not None:
            self_neighbor_groups._parent = self
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _rpki = self.rpki
        _address_families = self.address_families
        _neighbors = self.neighbors
        _neighbor_groups = self.neighbor_groups
        _bgp = self.bgp
        _vrfs = self.vrfs
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        if _rpki is not None:
            children['rpki'] = _rpki.to_gdata()
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        if _neighbors is not None:
            children['neighbors'] = _neighbors.to_gdata()
        if _neighbor_groups is not None:
            children['neighbor-groups'] = _neighbor_groups.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.as_number)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number=n.get_str("as-number"), rpki=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki.from_gdata(n.get_opt_container("rpki")), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families.from_gdata(n.get_opt_container("address-families")), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors.from_gdata(n.get_opt_container("neighbors")), neighbor_groups=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups.from_gdata(n.get_opt_container("neighbor-groups")), bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp.from_gdata(n.get_opt_container("bgp")), vrfs=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs.from_gdata(n.get_opt_container("vrfs")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number=yang.gdata.from_xml_str(n, "as-number"), rpki=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki.from_xml(yang.gdata.get_xml_opt_child(n, "rpki")), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families.from_xml(yang.gdata.get_xml_opt_child(n, "address-families")), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors.from_xml(yang.gdata.get_xml_opt_child(n, "neighbors")), neighbor_groups=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups.from_xml(yang.gdata.get_xml_opt_child(n, "neighbor-groups")), bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), vrfs=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs")))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self._name = 'as'
        self.elements = elements

    mut def create(self, as_number):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(yang.adata.MNode):
    as_: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as

    mut def __init__(self, as_: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        self.as_ = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(elements=as_)
        self.as_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_ = self.as_
        if _as_ is not None:
            children['as'] = _as_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(as_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as.from_gdata(n.get_opt_list("as")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(as_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as.from_xml(yang.gdata.get_xml_children(n, "as")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()



class Cisco_IOS_XR_um_router_bgp_cfg__router(yang.adata.MNode):
    bgp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp

    mut def __init__(self, bgp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg"
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router(bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp.from_gdata(n.get_opt_container("bgp")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router(bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")))
        return Cisco_IOS_XR_um_router_bgp_cfg__router()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(yang.adata.MNode):
    l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport
    point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point
    multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint

    mut def __init__(self, l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport=None, point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point=None, multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.l2transport = l2transport
        self_l2transport = self.l2transport
        if self_l2transport is not None:
            self_l2transport._parent = self
        self.point_to_point = point_to_point
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        self.multipoint = multipoint
        self_multipoint = self.multipoint
        if self_multipoint is not None:
            self_multipoint._parent = self

    mut def create_l2transport(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        self.l2transport = res
        return res

    mut def create_point_to_point(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        self.point_to_point = res
        return res

    mut def create_multipoint(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        self.multipoint = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l2transport = self.l2transport
        _point_to_point = self.point_to_point
        _multipoint = self.multipoint
        if _l2transport is not None:
            children['l2transport'] = _l2transport.to_gdata()
        if _point_to_point is not None:
            children['point-to-point'] = _point_to_point.to_gdata()
        if _multipoint is not None:
            children['multipoint'] = _multipoint.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_gdata(n.get_opt_container("l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_gdata(n.get_opt_container("point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_gdata(n.get_opt_container("multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_xml(yang.gdata.get_xml_opt_child(n, "l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_xml(yang.gdata.get_xml_opt_child(n, "point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_xml(yang.gdata.get_xml_opt_child(n, "multipoint")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__netmask(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    mut def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _netmask is not None:
            children['netmask'] = yang.gdata.Leaf('string', _netmask)
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))
        return None



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__netmask(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    mut def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _netmask is not None:
            children['netmask'] = yang.gdata.Leaf('string', _netmask)
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self._name = 'secondary'
        self.elements = elements

    mut def create(self, address, netmask):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address, netmask)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(yang.adata.MNode):
    secondary: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary

    mut def __init__(self, secondary: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.secondary = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(elements=secondary)
        self.secondary._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _secondary = self.secondary
        if _secondary is not None:
            children['secondary'] = _secondary.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_gdata(n.get_opt_list("secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_xml(yang.gdata.get_xml_children(n, "secondary")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__unnumbered(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address
    secondaries: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries
    unnumbered: ?str
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp

    mut def __init__(self, address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address=None, secondaries: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries=None, unnumbered: ?str, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg"
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self
        if secondaries is not None:
            self.secondaries = secondaries
        else:
            self.secondaries = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()
        self_secondaries = self.secondaries
        if self_secondaries is not None:
            self_secondaries._parent = self
        self.unnumbered = unnumbered
        self.dhcp = dhcp
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self

    mut def create_address(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address, netmask)
        self.address = res
        return res

    mut def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        self.dhcp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _secondaries = self.secondaries
        _unnumbered = self.unnumbered
        _dhcp = self.dhcp
        if _address is not None:
            children['address'] = _address.to_gdata()
        if _secondaries is not None:
            children['secondaries'] = _secondaries.to_gdata()
        if _unnumbered is not None:
            children['unnumbered'] = yang.gdata.Leaf('string', _unnumbered)
        if _dhcp is not None:
            children['dhcp'] = _dhcp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_gdata(n.get_opt_container("address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_gdata(n.get_opt_container("secondaries")), unnumbered=n.get_opt_str("unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_gdata(n.get_opt_container("dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_xml(yang.gdata.get_xml_opt_child(n, "address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_xml(yang.gdata.get_xml_opt_child(n, "secondaries")), unnumbered=yang.gdata.from_xml_opt_str(n, "unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses

    mut def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _addresses = self.addresses
        if _addresses is not None:
            children['addresses'] = _addresses.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_gdata(n.get_opt_container("addresses")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(yang.adata.MNode):
    IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF

    mut def __init__(self, IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.IETF = IETF
        self_IETF = self.IETF
        if self_IETF is not None:
            self_IETF._parent = self

    mut def create_IETF(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        self.IETF = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _IETF = self.IETF
        if _IETF is not None:
            children['IETF'] = _IETF.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_gdata(n.get_opt_container("IETF")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_xml(yang.gdata.get_xml_opt_child(n, "IETF")))
        return None



class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(yang.adata.MNode):
    ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp
    hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc
    mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr
    frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay

    mut def __init__(self, ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp=None, hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc=None, mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr=None, frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay=None):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.ppp = ppp
        self_ppp = self.ppp
        if self_ppp is not None:
            self_ppp._parent = self
        self.hdlc = hdlc
        self_hdlc = self.hdlc
        if self_hdlc is not None:
            self_hdlc._parent = self
        self.mfr = mfr
        self_mfr = self.mfr
        if self_mfr is not None:
            self_mfr._parent = self
        self.frame_relay = frame_relay
        self_frame_relay = self.frame_relay
        if self_frame_relay is not None:
            self_frame_relay._parent = self

    mut def create_ppp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        self.ppp = res
        return res

    mut def create_hdlc(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        self.hdlc = res
        return res

    mut def create_mfr(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        self.mfr = res
        return res

    mut def create_frame_relay(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()
        self.frame_relay = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ppp = self.ppp
        _hdlc = self.hdlc
        _mfr = self.mfr
        _frame_relay = self.frame_relay
        if _ppp is not None:
            children['ppp'] = _ppp.to_gdata()
        if _hdlc is not None:
            children['hdlc'] = _hdlc.to_gdata()
        if _mfr is not None:
            children['mfr'] = _mfr.to_gdata()
        if _frame_relay is not None:
            children['frame-relay'] = _frame_relay.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_gdata(n.get_opt_container("ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_gdata(n.get_opt_container("hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_gdata(n.get_opt_container("mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_gdata(n.get_opt_container("frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_xml(yang.gdata.get_xml_opt_child(n, "ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_xml(yang.gdata.get_xml_opt_child(n, "hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_xml(yang.gdata.get_xml_opt_child(n, "mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_xml(yang.gdata.get_xml_opt_child(n, "frame-relay")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()



mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    sub_interface_type: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6
    encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation
    shutdown: ?bool
    mtu: ?int
    description: ?str
    vrf: ?str

    mut def __init__(self, interface_name: str, sub_interface_type: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type=None, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6=None, encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation=None, shutdown: ?bool, mtu: ?int, description: ?str, vrf: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface_name = interface_name
        if sub_interface_type is not None:
            self.sub_interface_type = sub_interface_type
        else:
            self.sub_interface_type = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()
        self_sub_interface_type = self.sub_interface_type
        if self_sub_interface_type is not None:
            self_sub_interface_type._parent = self
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        if encapsulation is not None:
            self.encapsulation = encapsulation
        else:
            self.encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()
        self_encapsulation = self.encapsulation
        if self_encapsulation is not None:
            self_encapsulation._parent = self
        self.shutdown = shutdown
        self.mtu = mtu
        self.description = description
        self.vrf = vrf

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _sub_interface_type = self.sub_interface_type
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _encapsulation = self.encapsulation
        _shutdown = self.shutdown
        _mtu = self.mtu
        _description = self.description
        _vrf = self.vrf
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        if _sub_interface_type is not None:
            children['sub-interface-type'] = _sub_interface_type.to_gdata()
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        if _encapsulation is not None:
            children['encapsulation'] = _encapsulation.to_gdata()
        if _shutdown is not None:
            children['shutdown'] = yang.gdata.Leaf('empty', _shutdown)
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('uint32', _mtu)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_gdata(n.get_opt_container("sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_gdata(n.get_opt_container("ipv6")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_gdata(n.get_opt_container("encapsulation")), shutdown=n.get_opt_bool("shutdown"), mtu=n.get_opt_int("mtu"), description=n.get_opt_str("description"), vrf=n.get_opt_str("vrf"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_xml(yang.gdata.get_xml_opt_child(n, "sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_xml(yang.gdata.get_xml_opt_child(n, "encapsulation")), shutdown=yang.gdata.from_xml_opt_bool(n, "shutdown"), mtu=yang.gdata.from_xml_opt_int(n, "mtu"), description=yang.gdata.from_xml_opt_str(n, "description"), vrf=yang.gdata.from_xml_opt_str(n, "vrf", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_xml(node))
        return res



class Cisco_IOS_XR_um_interface_cfg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_interface_cfg__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]=[]):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg"
        self.interface = Cisco_IOS_XR_um_interface_cfg__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()



mut def from_json_Cisco_IOS_XR_um_hostname_cfg__hostname__system_network_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class Cisco_IOS_XR_um_hostname_cfg__hostname(yang.adata.MNode):
    system_network_name: ?str

    mut def __init__(self, system_network_name: ?str):
        self._ns = "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg"
        self.system_network_name = system_network_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _system_network_name = self.system_network_name
        if _system_network_name is not None:
            children['system-network-name'] = yang.gdata.Leaf('string', _system_network_name)
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=n.get_opt_str("system-network-name"))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=yang.gdata.from_xml_opt_str(n, "system-network-name"))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()



class root(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_vrf_cfg__address_family
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrfs
    selective_vrf_download: Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download
    srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg
    vrf_groups: Cisco_IOS_XR_um_vrf_cfg__vrf_groups
    um_router_isis_cfg_router: Cisco_IOS_XR_um_router_isis_cfg__router
    as_format: Cisco_IOS_XR_um_router_bgp_cfg__as_format
    bmp: Cisco_IOS_XR_um_router_bgp_cfg__bmp
    um_router_bgp_cfg_router: Cisco_IOS_XR_um_router_bgp_cfg__router
    interfaces: Cisco_IOS_XR_um_interface_cfg__interfaces
    hostname: Cisco_IOS_XR_um_hostname_cfg__hostname

    mut def __init__(self, address_family: ?Cisco_IOS_XR_um_vrf_cfg__address_family=None, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrfs=None, selective_vrf_download: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download=None, srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg=None, vrf_groups: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups=None, um_router_isis_cfg_router: ?Cisco_IOS_XR_um_router_isis_cfg__router=None, as_format: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format=None, bmp: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp=None, um_router_bgp_cfg_router: ?Cisco_IOS_XR_um_router_bgp_cfg__router=None, interfaces: ?Cisco_IOS_XR_um_interface_cfg__interfaces=None, hostname: ?Cisco_IOS_XR_um_hostname_cfg__hostname=None):
        self._ns = ""
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = Cisco_IOS_XR_um_vrf_cfg__address_family()
        self_address_family = self.address_family
        if self_address_family is not None:
            self_address_family._parent = self
        if vrfs is not None:
            self.vrfs = vrfs
        else:
            self.vrfs = Cisco_IOS_XR_um_vrf_cfg__vrfs()
        self_vrfs = self.vrfs
        if self_vrfs is not None:
            self_vrfs._parent = self
        if selective_vrf_download is not None:
            self.selective_vrf_download = selective_vrf_download
        else:
            self.selective_vrf_download = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()
        self_selective_vrf_download = self.selective_vrf_download
        if self_selective_vrf_download is not None:
            self_selective_vrf_download._parent = self
        self.srlg = srlg
        self_srlg = self.srlg
        if self_srlg is not None:
            self_srlg._parent = self
        if vrf_groups is not None:
            self.vrf_groups = vrf_groups
        else:
            self.vrf_groups = Cisco_IOS_XR_um_vrf_cfg__vrf_groups()
        self_vrf_groups = self.vrf_groups
        if self_vrf_groups is not None:
            self_vrf_groups._parent = self
        if um_router_isis_cfg_router is not None:
            self.um_router_isis_cfg_router = um_router_isis_cfg_router
        else:
            self.um_router_isis_cfg_router = Cisco_IOS_XR_um_router_isis_cfg__router()
        self_um_router_isis_cfg_router = self.um_router_isis_cfg_router
        if self_um_router_isis_cfg_router is not None:
            self_um_router_isis_cfg_router._parent = self
        if as_format is not None:
            self.as_format = as_format
        else:
            self.as_format = Cisco_IOS_XR_um_router_bgp_cfg__as_format()
        self_as_format = self.as_format
        if self_as_format is not None:
            self_as_format._parent = self
        if bmp is not None:
            self.bmp = bmp
        else:
            self.bmp = Cisco_IOS_XR_um_router_bgp_cfg__bmp()
        self_bmp = self.bmp
        if self_bmp is not None:
            self_bmp._parent = self
        if um_router_bgp_cfg_router is not None:
            self.um_router_bgp_cfg_router = um_router_bgp_cfg_router
        else:
            self.um_router_bgp_cfg_router = Cisco_IOS_XR_um_router_bgp_cfg__router()
        self_um_router_bgp_cfg_router = self.um_router_bgp_cfg_router
        if self_um_router_bgp_cfg_router is not None:
            self_um_router_bgp_cfg_router._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_interface_cfg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if hostname is not None:
            self.hostname = hostname
        else:
            self.hostname = Cisco_IOS_XR_um_hostname_cfg__hostname()
        self_hostname = self.hostname
        if self_hostname is not None:
            self_hostname._parent = self

    mut def create_srlg(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg()
        self.srlg = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        _vrfs = self.vrfs
        _selective_vrf_download = self.selective_vrf_download
        _srlg = self.srlg
        _vrf_groups = self.vrf_groups
        _um_router_isis_cfg_router = self.um_router_isis_cfg_router
        _as_format = self.as_format
        _bmp = self.bmp
        _um_router_bgp_cfg_router = self.um_router_bgp_cfg_router
        _interfaces = self.interfaces
        _hostname = self.hostname
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        if _selective_vrf_download is not None:
            children['selective-vrf-download'] = _selective_vrf_download.to_gdata()
        if _srlg is not None:
            children['srlg'] = _srlg.to_gdata()
        if _vrf_groups is not None:
            children['vrf-groups'] = _vrf_groups.to_gdata()
        if _um_router_isis_cfg_router is not None:
            children['um-router-isis-cfg:router'] = _um_router_isis_cfg_router.to_gdata()
        if _as_format is not None:
            children['as-format'] = _as_format.to_gdata()
        if _bmp is not None:
            children['bmp'] = _bmp.to_gdata()
        if _um_router_bgp_cfg_router is not None:
            children['um-router-bgp-cfg:router'] = _um_router_bgp_cfg_router.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _hostname is not None:
            children['hostname'] = _hostname.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_gdata(n.get_opt_container("address-family")), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_gdata(n.get_opt_container("vrfs")), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_gdata(n.get_opt_container("selective-vrf-download")), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_gdata(n.get_opt_container("srlg")), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_gdata(n.get_opt_container("vrf-groups")), um_router_isis_cfg_router=Cisco_IOS_XR_um_router_isis_cfg__router.from_gdata(n.get_opt_container("um-router-isis-cfg:router")), as_format=Cisco_IOS_XR_um_router_bgp_cfg__as_format.from_gdata(n.get_opt_container("as-format")), bmp=Cisco_IOS_XR_um_router_bgp_cfg__bmp.from_gdata(n.get_opt_container("bmp")), um_router_bgp_cfg_router=Cisco_IOS_XR_um_router_bgp_cfg__router.from_gdata(n.get_opt_container("um-router-bgp-cfg:router")), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_gdata(n.get_opt_container("interfaces")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_gdata(n.get_opt_container("hostname")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_xml(yang.gdata.get_xml_opt_child(n, "address-family", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_xml(yang.gdata.get_xml_opt_child(n, "vrfs", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_xml(yang.gdata.get_xml_opt_child(n, "selective-vrf-download", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_xml(yang.gdata.get_xml_opt_child(n, "srlg", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-groups", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg")), um_router_isis_cfg_router=Cisco_IOS_XR_um_router_isis_cfg__router.from_xml(yang.gdata.get_xml_opt_child(n, "router", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg")), as_format=Cisco_IOS_XR_um_router_bgp_cfg__as_format.from_xml(yang.gdata.get_xml_opt_child(n, "as-format", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), bmp=Cisco_IOS_XR_um_router_bgp_cfg__bmp.from_xml(yang.gdata.get_xml_opt_child(n, "bmp", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), um_router_bgp_cfg_router=Cisco_IOS_XR_um_router_bgp_cfg__router.from_xml(yang.gdata.get_xml_opt_child(n, "router", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg")), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_xml(yang.gdata.get_xml_opt_child(n, "hostname", "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg")))
        return root()


