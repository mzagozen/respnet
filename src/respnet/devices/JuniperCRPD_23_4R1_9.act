import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_junos_conf_root__configuration__rcsid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__system__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__system(yang.adata.MNode):
    host_name: ?str

    mut def __init__(self, host_name: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.host_name = host_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__system:
        if n != None:
            return junos_conf_root__configuration__system(host_name=n.get_opt_str("host-name"))
        return junos_conf_root__configuration__system()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__system:
        if n != None:
            return junos_conf_root__configuration__system(host_name=yang.gdata.from_xml_opt_str(n, "host-name"))
        return junos_conf_root__configuration__system()


mut def from_json_path_junos_conf_root__configuration__system(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:host-name' or point == 'host-name':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__system(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__system(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_host_name_full = jd.get('jc:host-name')
    child_host_name = child_host_name_full if child_host_name_full is not None else jd.get('host-name')
    if child_host_name is not None:
        children['host-name'] = from_json_junos_conf_root__configuration__system__host_name(child_host_name)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__system(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_host_name = n.children.get('host-name')
    if child_host_name is not None:
        if isinstance(child_host_name, yang.gdata.Leaf):
            children['host-name'] = child_host_name.val
    return children


mut def from_json_junos_conf_root__configuration__interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__native_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__alias(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name=yang.gdata.from_xml_str(n, "name"))

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address__name(child_name)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    return children

mut def to_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(e))
    return elements


class junos_conf_root__configuration__interfaces__interface__unit__family__inet(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__inet__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(elements=address)
        self.address._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet__address.from_gdata(n.get_opt_list("address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return None


mut def from_json_path_junos_conf_root__configuration__interfaces__interface__unit__family__inet(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:address' or point == 'address':
            child = {'address': from_json_path_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_address_full = jd.get('jc:address')
    child_address = child_address_full if child_address_full is not None else jd.get('address')
    if child_address is not None and isinstance(child_address, list):
        children['address'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(child_address)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_address = n.children.get('address')
    if child_address is not None:
        if isinstance(child_address, yang.gdata.List):
            children['address'] = to_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(child_address)
    return children


class junos_conf_root__configuration__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet

    mut def __init__(self, inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.inet = inet
        self_inet = self.inet
        if self_inet is not None:
            self_inet._parent = self

    mut def create_inet(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet = self.inet
        if _inet is not None:
            children['inet'] = _inet.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family(inet=junos_conf_root__configuration__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_container("inet")))
        return junos_conf_root__configuration__interfaces__interface__unit__family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family(inet=junos_conf_root__configuration__interfaces__interface__unit__family__inet.from_xml(yang.gdata.get_xml_opt_child(n, "inet")))
        return junos_conf_root__configuration__interfaces__interface__unit__family()


mut def from_json_path_junos_conf_root__configuration__interfaces__interface__unit__family(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:inet' or point == 'inet':
            child = {'inet': from_json_path_junos_conf_root__configuration__interfaces__interface__unit__family__inet(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__interfaces__interface__unit__family(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__family(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_inet_full = jd.get('jc:inet')
    child_inet = child_inet_full if child_inet_full is not None else jd.get('inet')
    if child_inet is not None and isinstance(child_inet, dict):
        children['inet'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet(child_inet)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__interfaces__interface__unit__family(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_inet = n.children.get('inet')
    if child_inet is not None:
        if isinstance(child_inet, yang.gdata.Container):
            children['inet'] = to_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet(child_inet)
    return children


mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    alias: ?str
    description: ?str
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    mut def __init__(self, name: str, alias: ?str, description: ?str, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.alias = alias
        self.description = description
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        if family is not None:
            self.family = family
        else:
            self.family = junos_conf_root__configuration__interfaces__interface__unit__family()
        self_family = self.family
        if self_family is not None:
            self_family._parent = self
        self.mtu = mtu
        self.mac = mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _alias = self.alias
        _description = self.description
        _vlan_id = self.vlan_id
        _encapsulation = self.encapsulation
        _family = self.family
        _mtu = self.mtu
        _mac = self.mac
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _alias is not None:
            children['alias'] = yang.gdata.Leaf('string', _alias)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('string', _vlan_id)
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        if _family is not None:
            children['family'] = _family.to_gdata()
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__interfaces__interface__unit_entry(name=n.get_str("name"), alias=n.get_opt_str("alias"), description=n.get_opt_str("description"), vlan_id=n.get_opt_str("vlan-id"), encapsulation=n.get_opt_str("encapsulation"), family=junos_conf_root__configuration__interfaces__interface__unit__family.from_gdata(n.get_opt_container("family")), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__interfaces__interface__unit_entry(name=yang.gdata.from_xml_str(n, "name"), alias=yang.gdata.from_xml_opt_str(n, "alias"), description=yang.gdata.from_xml_opt_str(n, "description"), vlan_id=yang.gdata.from_xml_opt_str(n, "vlan-id"), encapsulation=yang.gdata.from_xml_opt_str(n, "encapsulation"), family=junos_conf_root__configuration__interfaces__interface__unit__family.from_xml(yang.gdata.get_xml_opt_child(n, "family")), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"))

class junos_conf_root__configuration__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'unit'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__interfaces__interface__unit_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface__unit_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface__unit_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__interfaces__interface__unit_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__interfaces__interface__unit_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'alias':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'vlan-id':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'encapsulation':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'family':
            children['family'] = from_json_path_junos_conf_root__configuration__interfaces__interface__unit__family(jd, rest_path, op)
        if point == 'mtu':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'mac':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__interfaces__interface__unit(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__interfaces__interface__unit_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__interfaces__interface__unit_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__name(child_name)
    child_alias_full = jd.get('jc:alias')
    child_alias = child_alias_full if child_alias_full is not None else jd.get('alias')
    if child_alias is not None:
        children['alias'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__alias(child_alias)
    child_description_full = jd.get('jc:description')
    child_description = child_description_full if child_description_full is not None else jd.get('description')
    if child_description is not None:
        children['description'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__description(child_description)
    child_vlan_id_full = jd.get('jc:vlan-id')
    child_vlan_id = child_vlan_id_full if child_vlan_id_full is not None else jd.get('vlan-id')
    if child_vlan_id is not None:
        children['vlan-id'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__vlan_id(child_vlan_id)
    child_encapsulation_full = jd.get('jc:encapsulation')
    child_encapsulation = child_encapsulation_full if child_encapsulation_full is not None else jd.get('encapsulation')
    if child_encapsulation is not None:
        children['encapsulation'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__encapsulation(child_encapsulation)
    child_family_full = jd.get('jc:family')
    child_family = child_family_full if child_family_full is not None else jd.get('family')
    if child_family is not None and isinstance(child_family, dict):
        children['family'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__family(child_family)
    child_mtu_full = jd.get('jc:mtu')
    child_mtu = child_mtu_full if child_mtu_full is not None else jd.get('mtu')
    if child_mtu is not None:
        children['mtu'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__mtu(child_mtu)
    child_mac_full = jd.get('jc:mac')
    child_mac = child_mac_full if child_mac_full is not None else jd.get('mac')
    if child_mac is not None:
        children['mac'] = from_json_junos_conf_root__configuration__interfaces__interface__unit__mac(child_mac)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__interfaces__interface__unit_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__interfaces__interface__unit_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_alias = n.children.get('alias')
    if child_alias is not None:
        if isinstance(child_alias, yang.gdata.Leaf):
            children['alias'] = child_alias.val
    child_description = n.children.get('description')
    if child_description is not None:
        if isinstance(child_description, yang.gdata.Leaf):
            children['description'] = child_description.val
    child_vlan_id = n.children.get('vlan-id')
    if child_vlan_id is not None:
        if isinstance(child_vlan_id, yang.gdata.Leaf):
            children['vlan-id'] = child_vlan_id.val
    child_encapsulation = n.children.get('encapsulation')
    if child_encapsulation is not None:
        if isinstance(child_encapsulation, yang.gdata.Leaf):
            children['encapsulation'] = child_encapsulation.val
    child_family = n.children.get('family')
    if child_family is not None:
        if isinstance(child_family, yang.gdata.Container):
            children['family'] = to_json_junos_conf_root__configuration__interfaces__interface__unit__family(child_family)
    child_mtu = n.children.get('mtu')
    if child_mtu is not None:
        if isinstance(child_mtu, yang.gdata.Leaf):
            children['mtu'] = child_mtu.val
    child_mac = n.children.get('mac')
    if child_mac is not None:
        if isinstance(child_mac, yang.gdata.Leaf):
            children['mac'] = child_mac.val
    return children

mut def to_json_junos_conf_root__configuration__interfaces__interface__unit(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__interfaces__interface__unit_element(e))
    return elements


class junos_conf_root__configuration__interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__interfaces__interface__unit

    mut def __init__(self, name: str, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__interfaces__interface__unit_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__interfaces__interface__unit(elements=unit)
        self.unit._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _mtu = self.mtu
        _mac = self.mac
        _native_vlan_id = self.native_vlan_id
        _unit = self.unit
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        if _native_vlan_id is not None:
            children['native-vlan-id'] = yang.gdata.Leaf('union', _native_vlan_id)
        if _unit is not None:
            children['unit'] = _unit.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface_entry:
        return junos_conf_root__configuration__interfaces__interface_entry(name=n.get_str("name"), description=n.get_opt_str("description"), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"), native_vlan_id=n.get_opt_value("native-vlan-id"), unit=junos_conf_root__configuration__interfaces__interface__unit.from_gdata(n.get_opt_list("unit")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface_entry:
        return junos_conf_root__configuration__interfaces__interface_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"), native_vlan_id=yang.gdata.from_xml_opt_value(n, "native-vlan-id"), unit=junos_conf_root__configuration__interfaces__interface__unit.from_xml(yang.gdata.get_xml_children(n, "unit")))

class junos_conf_root__configuration__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__interfaces__interface_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__interfaces__interface_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'mtu':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'mac':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'native-vlan-id':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'unit':
            children['unit'] = from_json_path_junos_conf_root__configuration__interfaces__interface__unit(jd, rest_path, op)
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__interfaces__interface(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__interfaces__interface_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__interfaces__interface_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__interfaces__interface_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__interfaces__interface__name(child_name)
    child_description_full = jd.get('jc:description')
    child_description = child_description_full if child_description_full is not None else jd.get('description')
    if child_description is not None:
        children['description'] = from_json_junos_conf_root__configuration__interfaces__interface__description(child_description)
    child_mtu_full = jd.get('jc:mtu')
    child_mtu = child_mtu_full if child_mtu_full is not None else jd.get('mtu')
    if child_mtu is not None:
        children['mtu'] = from_json_junos_conf_root__configuration__interfaces__interface__mtu(child_mtu)
    child_mac_full = jd.get('jc:mac')
    child_mac = child_mac_full if child_mac_full is not None else jd.get('mac')
    if child_mac is not None:
        children['mac'] = from_json_junos_conf_root__configuration__interfaces__interface__mac(child_mac)
    child_native_vlan_id_full = jd.get('jc:native-vlan-id')
    child_native_vlan_id = child_native_vlan_id_full if child_native_vlan_id_full is not None else jd.get('native-vlan-id')
    if child_native_vlan_id is not None:
        children['native-vlan-id'] = from_json_junos_conf_root__configuration__interfaces__interface__native_vlan_id(child_native_vlan_id)
    child_unit_full = jd.get('jc:unit')
    child_unit = child_unit_full if child_unit_full is not None else jd.get('unit')
    if child_unit is not None and isinstance(child_unit, list):
        children['unit'] = from_json_junos_conf_root__configuration__interfaces__interface__unit(child_unit)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__interfaces__interface(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__interfaces__interface_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__interfaces__interface_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_description = n.children.get('description')
    if child_description is not None:
        if isinstance(child_description, yang.gdata.Leaf):
            children['description'] = child_description.val
    child_mtu = n.children.get('mtu')
    if child_mtu is not None:
        if isinstance(child_mtu, yang.gdata.Leaf):
            children['mtu'] = child_mtu.val
    child_mac = n.children.get('mac')
    if child_mac is not None:
        if isinstance(child_mac, yang.gdata.Leaf):
            children['mac'] = child_mac.val
    child_native_vlan_id = n.children.get('native-vlan-id')
    if child_native_vlan_id is not None:
        if isinstance(child_native_vlan_id, yang.gdata.Leaf):
            children['native-vlan-id'] = child_native_vlan_id.val
    child_unit = n.children.get('unit')
    if child_unit is not None:
        if isinstance(child_unit, yang.gdata.List):
            children['unit'] = to_json_junos_conf_root__configuration__interfaces__interface__unit(child_unit)
    return children

mut def to_json_junos_conf_root__configuration__interfaces__interface(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__interfaces__interface_element(e))
    return elements


class junos_conf_root__configuration__interfaces(yang.adata.MNode):
    interface: junos_conf_root__configuration__interfaces__interface

    mut def __init__(self, interface: list[junos_conf_root__configuration__interfaces__interface_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.interface = junos_conf_root__configuration__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces:
        if n != None:
            return junos_conf_root__configuration__interfaces(interface=junos_conf_root__configuration__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return junos_conf_root__configuration__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__interfaces:
        if n != None:
            return junos_conf_root__configuration__interfaces(interface=junos_conf_root__configuration__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return junos_conf_root__configuration__interfaces()


mut def from_json_path_junos_conf_root__configuration__interfaces(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:interface' or point == 'interface':
            child = {'interface': from_json_path_junos_conf_root__configuration__interfaces__interface(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__interfaces(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__interfaces(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_interface_full = jd.get('jc:interface')
    child_interface = child_interface_full if child_interface_full is not None else jd.get('interface')
    if child_interface is not None and isinstance(child_interface, list):
        children['interface'] = from_json_junos_conf_root__configuration__interfaces__interface(child_interface)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__interfaces(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_interface = n.children.get('interface')
    if child_interface is not None:
        if isinstance(child_interface, yang.gdata.List):
            children['interface'] = to_json_junos_conf_root__configuration__interfaces__interface(child_interface)
    return children


mut def from_json_junos_conf_root__configuration__routing_instances__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__instance_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__any(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__multicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    mut def __init__(self, name: str, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _any = self.any
        _unicast = self.unicast
        _multicast = self.multicast
        _primary = self.primary
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _any is not None:
            children['any'] = yang.gdata.Leaf('empty', _any)
        if _unicast is not None:
            children['unicast'] = yang.gdata.Leaf('empty', _unicast)
        if _multicast is not None:
            children['multicast'] = yang.gdata.Leaf('empty', _multicast)
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__routing_instances__instance__interface_entry(name=n.get_str("name"), any=n.get_opt_bool("any"), unicast=n.get_opt_bool("unicast"), multicast=n.get_opt_bool("multicast"), primary=n.get_opt_bool("primary"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__routing_instances__instance__interface_entry(name=yang.gdata.from_xml_str(n, "name"), any=yang.gdata.from_xml_opt_bool(n, "any"), unicast=yang.gdata.from_xml_opt_bool(n, "unicast"), multicast=yang.gdata.from_xml_opt_bool(n, "multicast"), primary=yang.gdata.from_xml_opt_bool(n, "primary"))

class junos_conf_root__configuration__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__routing_instances__instance__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__routing_instances__instance__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__routing_instances__instance__interface_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__routing_instances__instance__interface_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__routing_instances__instance__interface_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'any':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'unicast':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'multicast':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'primary':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__routing_instances__instance__interface(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__routing_instances__instance__interface_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__routing_instances__instance__interface_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__routing_instances__instance__interface__name(child_name)
    child_any_full = jd.get('jc:any')
    child_any = child_any_full if child_any_full is not None else jd.get('any')
    if child_any is not None:
        children['any'] = from_json_junos_conf_root__configuration__routing_instances__instance__interface__any(child_any)
    child_unicast_full = jd.get('jc:unicast')
    child_unicast = child_unicast_full if child_unicast_full is not None else jd.get('unicast')
    if child_unicast is not None:
        children['unicast'] = from_json_junos_conf_root__configuration__routing_instances__instance__interface__unicast(child_unicast)
    child_multicast_full = jd.get('jc:multicast')
    child_multicast = child_multicast_full if child_multicast_full is not None else jd.get('multicast')
    if child_multicast is not None:
        children['multicast'] = from_json_junos_conf_root__configuration__routing_instances__instance__interface__multicast(child_multicast)
    child_primary_full = jd.get('jc:primary')
    child_primary = child_primary_full if child_primary_full is not None else jd.get('primary')
    if child_primary is not None:
        children['primary'] = from_json_junos_conf_root__configuration__routing_instances__instance__interface__primary(child_primary)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__routing_instances__instance__interface_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__routing_instances__instance__interface_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_any = n.children.get('any')
    if child_any is not None:
        if isinstance(child_any, yang.gdata.Leaf):
            children['any'] = child_any.val
    child_unicast = n.children.get('unicast')
    if child_unicast is not None:
        if isinstance(child_unicast, yang.gdata.Leaf):
            children['unicast'] = child_unicast.val
    child_multicast = n.children.get('multicast')
    if child_multicast is not None:
        if isinstance(child_multicast, yang.gdata.Leaf):
            children['multicast'] = child_multicast.val
    child_primary = n.children.get('primary')
    if child_primary is not None:
        if isinstance(child_primary, yang.gdata.Leaf):
            children['primary'] = child_primary.val
    return children

mut def to_json_junos_conf_root__configuration__routing_instances__instance__interface(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__routing_instances__instance__interface_element(e))
    return elements


mut def from_json_junos_conf_root__configuration__routing_instances__instance__route_distinguisher__rd_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    mut def __init__(self, rd_type: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rd_type = rd_type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd_type = self.rd_type
        if _rd_type is not None:
            children['rd-type'] = yang.gdata.Leaf('string', _rd_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str("rd-type"))
        return junos_conf_root__configuration__routing_instances__instance__route_distinguisher()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__route_distinguisher(rd_type=yang.gdata.from_xml_opt_str(n, "rd-type"))
        return junos_conf_root__configuration__routing_instances__instance__route_distinguisher()


mut def from_json_path_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:rd-type' or point == 'rd-type':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_rd_type_full = jd.get('jc:rd-type')
    child_rd_type = child_rd_type_full if child_rd_type_full is not None else jd.get('rd-type')
    if child_rd_type is not None:
        children['rd-type'] = from_json_junos_conf_root__configuration__routing_instances__instance__route_distinguisher__rd_type(child_rd_type)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_rd_type = n.children.get('rd-type')
    if child_rd_type is not None:
        if isinstance(child_rd_type, yang.gdata.Leaf):
            children['rd-type'] = child_rd_type.val
    return children


mut def from_json_junos_conf_root__configuration__routing_instances__instance__export_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__import_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__export(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__auto(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__routing_instances__instance__vrf_target(yang.adata.MNode):
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    mut def __init__(self, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        _import_ = self.import_
        _export = self.export
        _auto = self.auto
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        if _export is not None:
            children['export'] = yang.gdata.Leaf('string', _export)
        if _auto is not None:
            children['auto'] = yang.gdata.Leaf('empty', _auto)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_target(community=n.get_opt_str("community"), import_=n.get_opt_str("import"), export=n.get_opt_str("export"), auto=n.get_opt_bool("auto"))
        return junos_conf_root__configuration__routing_instances__instance__vrf_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_target(community=yang.gdata.from_xml_opt_str(n, "community"), import_=yang.gdata.from_xml_opt_str(n, "import"), export=yang.gdata.from_xml_opt_str(n, "export"), auto=yang.gdata.from_xml_opt_bool(n, "auto"))
        return junos_conf_root__configuration__routing_instances__instance__vrf_target()


mut def from_json_path_junos_conf_root__configuration__routing_instances__instance__vrf_target(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:community' or point == 'community':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:import' or point == 'import':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:export' or point == 'export':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:auto' or point == 'auto':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_community_full = jd.get('jc:community')
    child_community = child_community_full if child_community_full is not None else jd.get('community')
    if child_community is not None:
        children['community'] = from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__community(child_community)
    child_import__full = jd.get('jc:import')
    child_import_ = child_import__full if child_import__full is not None else jd.get('import')
    if child_import_ is not None:
        children['import'] = from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__import(child_import_)
    child_export_full = jd.get('jc:export')
    child_export = child_export_full if child_export_full is not None else jd.get('export')
    if child_export is not None:
        children['export'] = from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__export(child_export)
    child_auto_full = jd.get('jc:auto')
    child_auto = child_auto_full if child_auto_full is not None else jd.get('auto')
    if child_auto is not None:
        children['auto'] = from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__auto(child_auto)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__routing_instances__instance__vrf_target(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_community = n.children.get('community')
    if child_community is not None:
        if isinstance(child_community, yang.gdata.Leaf):
            children['community'] = child_community.val
    child_import_ = n.children.get('import')
    if child_import_ is not None:
        if isinstance(child_import_, yang.gdata.Leaf):
            children['import'] = child_import_.val
    child_export = n.children.get('export')
    if child_export is not None:
        if isinstance(child_export, yang.gdata.Leaf):
            children['export'] = child_export.val
    child_auto = n.children.get('auto')
    if child_auto is not None:
        if isinstance(child_auto, yang.gdata.Leaf):
            children['auto'] = child_auto.val
    return children


mut def from_json_junos_conf_root__configuration__routing_instances__instance__no_vrf_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    instance_type: ?str
    interface: junos_conf_root__configuration__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__routing_instances__instance__route_distinguisher
    export_default_action: ?str
    import_default_action: ?str
    vrf_target: junos_conf_root__configuration__routing_instances__instance__vrf_target
    no_vrf_advertise: ?bool

    mut def __init__(self, name: str, instance_type: ?str, interface: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__routing_instances__instance__route_distinguisher=None, export_default_action: ?str, import_default_action: ?str, vrf_target: ?junos_conf_root__configuration__routing_instances__instance__vrf_target=None, no_vrf_advertise: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.instance_type = instance_type
        self.interface = junos_conf_root__configuration__routing_instances__instance__interface(elements=interface)
        self.interface._parent = self
        if route_distinguisher is not None:
            self.route_distinguisher = route_distinguisher
        else:
            self.route_distinguisher = junos_conf_root__configuration__routing_instances__instance__route_distinguisher()
        self_route_distinguisher = self.route_distinguisher
        if self_route_distinguisher is not None:
            self_route_distinguisher._parent = self
        self.export_default_action = export_default_action
        self.import_default_action = import_default_action
        if vrf_target is not None:
            self.vrf_target = vrf_target
        else:
            self.vrf_target = junos_conf_root__configuration__routing_instances__instance__vrf_target()
        self_vrf_target = self.vrf_target
        if self_vrf_target is not None:
            self_vrf_target._parent = self
        self.no_vrf_advertise = no_vrf_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _instance_type = self.instance_type
        _interface = self.interface
        _route_distinguisher = self.route_distinguisher
        _export_default_action = self.export_default_action
        _import_default_action = self.import_default_action
        _vrf_target = self.vrf_target
        _no_vrf_advertise = self.no_vrf_advertise
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _instance_type is not None:
            children['instance-type'] = yang.gdata.Leaf('enumeration', _instance_type)
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        if _export_default_action is not None:
            children['export-default-action'] = yang.gdata.Leaf('enumeration', _export_default_action)
        if _import_default_action is not None:
            children['import-default-action'] = yang.gdata.Leaf('enumeration', _import_default_action)
        if _vrf_target is not None:
            children['vrf-target'] = _vrf_target.to_gdata()
        if _no_vrf_advertise is not None:
            children['no-vrf-advertise'] = yang.gdata.Leaf('empty', _no_vrf_advertise)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance_entry:
        return junos_conf_root__configuration__routing_instances__instance_entry(name=n.get_str("name"), instance_type=n.get_opt_str("instance-type"), interface=junos_conf_root__configuration__routing_instances__instance__interface.from_gdata(n.get_opt_list("interface")), route_distinguisher=junos_conf_root__configuration__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_container("route-distinguisher")), export_default_action=n.get_opt_str("export-default-action"), import_default_action=n.get_opt_str("import-default-action"), vrf_target=junos_conf_root__configuration__routing_instances__instance__vrf_target.from_gdata(n.get_opt_container("vrf-target")), no_vrf_advertise=n.get_opt_bool("no-vrf-advertise"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__routing_instances__instance_entry:
        return junos_conf_root__configuration__routing_instances__instance_entry(name=yang.gdata.from_xml_str(n, "name"), instance_type=yang.gdata.from_xml_opt_str(n, "instance-type"), interface=junos_conf_root__configuration__routing_instances__instance__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), route_distinguisher=junos_conf_root__configuration__routing_instances__instance__route_distinguisher.from_xml(yang.gdata.get_xml_opt_child(n, "route-distinguisher")), export_default_action=yang.gdata.from_xml_opt_str(n, "export-default-action"), import_default_action=yang.gdata.from_xml_opt_str(n, "import-default-action"), vrf_target=junos_conf_root__configuration__routing_instances__instance__vrf_target.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-target")), no_vrf_advertise=yang.gdata.from_xml_opt_bool(n, "no-vrf-advertise"))

class junos_conf_root__configuration__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__routing_instances__instance_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__routing_instances__instance_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__routing_instances__instance_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__routing_instances__instance_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__routing_instances__instance_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'instance-type':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'interface':
            children['interface'] = from_json_path_junos_conf_root__configuration__routing_instances__instance__interface(jd, rest_path, op)
        if point == 'route-distinguisher':
            children['route-distinguisher'] = from_json_path_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(jd, rest_path, op)
        if point == 'export-default-action':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'import-default-action':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'vrf-target':
            children['vrf-target'] = from_json_path_junos_conf_root__configuration__routing_instances__instance__vrf_target(jd, rest_path, op)
        if point == 'no-vrf-advertise':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__routing_instances__instance(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__routing_instances__instance_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__routing_instances__instance_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__routing_instances__instance_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__routing_instances__instance__name(child_name)
    child_instance_type_full = jd.get('jc:instance-type')
    child_instance_type = child_instance_type_full if child_instance_type_full is not None else jd.get('instance-type')
    if child_instance_type is not None:
        children['instance-type'] = from_json_junos_conf_root__configuration__routing_instances__instance__instance_type(child_instance_type)
    child_interface_full = jd.get('jc:interface')
    child_interface = child_interface_full if child_interface_full is not None else jd.get('interface')
    if child_interface is not None and isinstance(child_interface, list):
        children['interface'] = from_json_junos_conf_root__configuration__routing_instances__instance__interface(child_interface)
    child_route_distinguisher_full = jd.get('jc:route-distinguisher')
    child_route_distinguisher = child_route_distinguisher_full if child_route_distinguisher_full is not None else jd.get('route-distinguisher')
    if child_route_distinguisher is not None and isinstance(child_route_distinguisher, dict):
        children['route-distinguisher'] = from_json_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(child_route_distinguisher)
    child_export_default_action_full = jd.get('jc:export-default-action')
    child_export_default_action = child_export_default_action_full if child_export_default_action_full is not None else jd.get('export-default-action')
    if child_export_default_action is not None:
        children['export-default-action'] = from_json_junos_conf_root__configuration__routing_instances__instance__export_default_action(child_export_default_action)
    child_import_default_action_full = jd.get('jc:import-default-action')
    child_import_default_action = child_import_default_action_full if child_import_default_action_full is not None else jd.get('import-default-action')
    if child_import_default_action is not None:
        children['import-default-action'] = from_json_junos_conf_root__configuration__routing_instances__instance__import_default_action(child_import_default_action)
    child_vrf_target_full = jd.get('jc:vrf-target')
    child_vrf_target = child_vrf_target_full if child_vrf_target_full is not None else jd.get('vrf-target')
    if child_vrf_target is not None and isinstance(child_vrf_target, dict):
        children['vrf-target'] = from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target(child_vrf_target)
    child_no_vrf_advertise_full = jd.get('jc:no-vrf-advertise')
    child_no_vrf_advertise = child_no_vrf_advertise_full if child_no_vrf_advertise_full is not None else jd.get('no-vrf-advertise')
    if child_no_vrf_advertise is not None:
        children['no-vrf-advertise'] = from_json_junos_conf_root__configuration__routing_instances__instance__no_vrf_advertise(child_no_vrf_advertise)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__routing_instances__instance(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__routing_instances__instance_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__routing_instances__instance_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_instance_type = n.children.get('instance-type')
    if child_instance_type is not None:
        if isinstance(child_instance_type, yang.gdata.Leaf):
            children['instance-type'] = child_instance_type.val
    child_interface = n.children.get('interface')
    if child_interface is not None:
        if isinstance(child_interface, yang.gdata.List):
            children['interface'] = to_json_junos_conf_root__configuration__routing_instances__instance__interface(child_interface)
    child_route_distinguisher = n.children.get('route-distinguisher')
    if child_route_distinguisher is not None:
        if isinstance(child_route_distinguisher, yang.gdata.Container):
            children['route-distinguisher'] = to_json_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(child_route_distinguisher)
    child_export_default_action = n.children.get('export-default-action')
    if child_export_default_action is not None:
        if isinstance(child_export_default_action, yang.gdata.Leaf):
            children['export-default-action'] = child_export_default_action.val
    child_import_default_action = n.children.get('import-default-action')
    if child_import_default_action is not None:
        if isinstance(child_import_default_action, yang.gdata.Leaf):
            children['import-default-action'] = child_import_default_action.val
    child_vrf_target = n.children.get('vrf-target')
    if child_vrf_target is not None:
        if isinstance(child_vrf_target, yang.gdata.Container):
            children['vrf-target'] = to_json_junos_conf_root__configuration__routing_instances__instance__vrf_target(child_vrf_target)
    child_no_vrf_advertise = n.children.get('no-vrf-advertise')
    if child_no_vrf_advertise is not None:
        if isinstance(child_no_vrf_advertise, yang.gdata.Leaf):
            children['no-vrf-advertise'] = child_no_vrf_advertise.val
    return children

mut def to_json_junos_conf_root__configuration__routing_instances__instance(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__routing_instances__instance_element(e))
    return elements


class junos_conf_root__configuration__routing_instances(yang.adata.MNode):
    instance: junos_conf_root__configuration__routing_instances__instance

    mut def __init__(self, instance: list[junos_conf_root__configuration__routing_instances__instance_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.instance = junos_conf_root__configuration__routing_instances__instance(elements=instance)
        self.instance._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances:
        if n != None:
            return junos_conf_root__configuration__routing_instances(instance=junos_conf_root__configuration__routing_instances__instance.from_gdata(n.get_opt_list("instance")))
        return junos_conf_root__configuration__routing_instances()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances:
        if n != None:
            return junos_conf_root__configuration__routing_instances(instance=junos_conf_root__configuration__routing_instances__instance.from_xml(yang.gdata.get_xml_children(n, "instance")))
        return junos_conf_root__configuration__routing_instances()


mut def from_json_path_junos_conf_root__configuration__routing_instances(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:instance' or point == 'instance':
            child = {'instance': from_json_path_junos_conf_root__configuration__routing_instances__instance(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__routing_instances(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__routing_instances(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_instance_full = jd.get('jc:instance')
    child_instance = child_instance_full if child_instance_full is not None else jd.get('instance')
    if child_instance is not None and isinstance(child_instance, list):
        children['instance'] = from_json_junos_conf_root__configuration__routing_instances__instance(child_instance)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__routing_instances(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_instance = n.children.get('instance')
    if child_instance is not None:
        if isinstance(child_instance, yang.gdata.List):
            children['instance'] = to_json_junos_conf_root__configuration__routing_instances__instance(child_instance)
    return children


mut def from_json_junos_conf_root__configuration__groups__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__when__time__start_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__when__time__to__end_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__when__time__to(yang.adata.MNode):
    end_time: ?str

    mut def __init__(self, end_time: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.end_time = end_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _end_time = self.end_time
        if _end_time is not None:
            children['end-time'] = yang.gdata.Leaf('string', _end_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when__time__to:
        if n != None:
            return junos_conf_root__configuration__groups__when__time__to(end_time=n.get_opt_str("end-time"))
        return junos_conf_root__configuration__groups__when__time__to()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when__time__to:
        if n != None:
            return junos_conf_root__configuration__groups__when__time__to(end_time=yang.gdata.from_xml_opt_str(n, "end-time"))
        return junos_conf_root__configuration__groups__when__time__to()


mut def from_json_path_junos_conf_root__configuration__groups__when__time__to(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:end-time' or point == 'end-time':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__when__time__to(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__when__time__to(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_end_time_full = jd.get('jc:end-time')
    child_end_time = child_end_time_full if child_end_time_full is not None else jd.get('end-time')
    if child_end_time is not None:
        children['end-time'] = from_json_junos_conf_root__configuration__groups__when__time__to__end_time(child_end_time)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__when__time__to(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_end_time = n.children.get('end-time')
    if child_end_time is not None:
        if isinstance(child_end_time, yang.gdata.Leaf):
            children['end-time'] = child_end_time.val
    return children


class junos_conf_root__configuration__groups__when__time(yang.adata.MNode):
    start_time: ?str
    to: junos_conf_root__configuration__groups__when__time__to

    mut def __init__(self, start_time: ?str, to: ?junos_conf_root__configuration__groups__when__time__to=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.start_time = start_time
        if to is not None:
            self.to = to
        else:
            self.to = junos_conf_root__configuration__groups__when__time__to()
        self_to = self.to
        if self_to is not None:
            self_to._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _start_time = self.start_time
        _to = self.to
        if _start_time is not None:
            children['start-time'] = yang.gdata.Leaf('string', _start_time)
        if _to is not None:
            children['to'] = _to.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when__time:
        if n != None:
            return junos_conf_root__configuration__groups__when__time(start_time=n.get_opt_str("start-time"), to=junos_conf_root__configuration__groups__when__time__to.from_gdata(n.get_opt_container("to")))
        return junos_conf_root__configuration__groups__when__time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when__time:
        if n != None:
            return junos_conf_root__configuration__groups__when__time(start_time=yang.gdata.from_xml_opt_str(n, "start-time"), to=junos_conf_root__configuration__groups__when__time__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")))
        return junos_conf_root__configuration__groups__when__time()


mut def from_json_path_junos_conf_root__configuration__groups__when__time(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:start-time' or point == 'start-time':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:to' or point == 'to':
            child = {'to': from_json_path_junos_conf_root__configuration__groups__when__time__to(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__when__time(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__when__time(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_start_time_full = jd.get('jc:start-time')
    child_start_time = child_start_time_full if child_start_time_full is not None else jd.get('start-time')
    if child_start_time is not None:
        children['start-time'] = from_json_junos_conf_root__configuration__groups__when__time__start_time(child_start_time)
    child_to_full = jd.get('jc:to')
    child_to = child_to_full if child_to_full is not None else jd.get('to')
    if child_to is not None and isinstance(child_to, dict):
        children['to'] = from_json_junos_conf_root__configuration__groups__when__time__to(child_to)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__when__time(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_start_time = n.children.get('start-time')
    if child_start_time is not None:
        if isinstance(child_start_time, yang.gdata.Leaf):
            children['start-time'] = child_start_time.val
    child_to = n.children.get('to')
    if child_to is not None:
        if isinstance(child_to, yang.gdata.Container):
            children['to'] = to_json_junos_conf_root__configuration__groups__when__time__to(child_to)
    return children


mut def from_json_junos_conf_root__configuration__groups__when__chassis(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__when__model(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__when__routing_engine(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__when__member(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__when__node(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class junos_conf_root__configuration__groups__when(yang.adata.MNode):
    time: junos_conf_root__configuration__groups__when__time
    chassis: ?str
    model: ?str
    routing_engine: ?str
    member: ?str
    node: ?str

    mut def __init__(self, time: ?junos_conf_root__configuration__groups__when__time=None, chassis: ?str, model: ?str, routing_engine: ?str, member: ?str, node: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if time is not None:
            self.time = time
        else:
            self.time = junos_conf_root__configuration__groups__when__time()
        self_time = self.time
        if self_time is not None:
            self_time._parent = self
        self.chassis = chassis
        self.model = model
        self.routing_engine = routing_engine
        self.member = member
        self.node = node

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _time = self.time
        _chassis = self.chassis
        _model = self.model
        _routing_engine = self.routing_engine
        _member = self.member
        _node = self.node
        if _time is not None:
            children['time'] = _time.to_gdata()
        if _chassis is not None:
            children['chassis'] = yang.gdata.Leaf('enumeration', _chassis)
        if _model is not None:
            children['model'] = yang.gdata.Leaf('string', _model)
        if _routing_engine is not None:
            children['routing-engine'] = yang.gdata.Leaf('enumeration', _routing_engine)
        if _member is not None:
            children['member'] = yang.gdata.Leaf('string', _member)
        if _node is not None:
            children['node'] = yang.gdata.Leaf('enumeration', _node)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when:
        if n != None:
            return junos_conf_root__configuration__groups__when(time=junos_conf_root__configuration__groups__when__time.from_gdata(n.get_opt_container("time")), chassis=n.get_opt_str("chassis"), model=n.get_opt_str("model"), routing_engine=n.get_opt_str("routing-engine"), member=n.get_opt_str("member"), node=n.get_opt_str("node"))
        return junos_conf_root__configuration__groups__when()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when:
        if n != None:
            return junos_conf_root__configuration__groups__when(time=junos_conf_root__configuration__groups__when__time.from_xml(yang.gdata.get_xml_opt_child(n, "time")), chassis=yang.gdata.from_xml_opt_str(n, "chassis"), model=yang.gdata.from_xml_opt_str(n, "model"), routing_engine=yang.gdata.from_xml_opt_str(n, "routing-engine"), member=yang.gdata.from_xml_opt_str(n, "member"), node=yang.gdata.from_xml_opt_str(n, "node"))
        return junos_conf_root__configuration__groups__when()


mut def from_json_path_junos_conf_root__configuration__groups__when(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:time' or point == 'time':
            child = {'time': from_json_path_junos_conf_root__configuration__groups__when__time(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'jc:chassis' or point == 'chassis':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:model' or point == 'model':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:routing-engine' or point == 'routing-engine':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:member' or point == 'member':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:node' or point == 'node':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__when(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__when(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_time_full = jd.get('jc:time')
    child_time = child_time_full if child_time_full is not None else jd.get('time')
    if child_time is not None and isinstance(child_time, dict):
        children['time'] = from_json_junos_conf_root__configuration__groups__when__time(child_time)
    child_chassis_full = jd.get('jc:chassis')
    child_chassis = child_chassis_full if child_chassis_full is not None else jd.get('chassis')
    if child_chassis is not None:
        children['chassis'] = from_json_junos_conf_root__configuration__groups__when__chassis(child_chassis)
    child_model_full = jd.get('jc:model')
    child_model = child_model_full if child_model_full is not None else jd.get('model')
    if child_model is not None:
        children['model'] = from_json_junos_conf_root__configuration__groups__when__model(child_model)
    child_routing_engine_full = jd.get('jc:routing-engine')
    child_routing_engine = child_routing_engine_full if child_routing_engine_full is not None else jd.get('routing-engine')
    if child_routing_engine is not None:
        children['routing-engine'] = from_json_junos_conf_root__configuration__groups__when__routing_engine(child_routing_engine)
    child_member_full = jd.get('jc:member')
    child_member = child_member_full if child_member_full is not None else jd.get('member')
    if child_member is not None:
        children['member'] = from_json_junos_conf_root__configuration__groups__when__member(child_member)
    child_node_full = jd.get('jc:node')
    child_node = child_node_full if child_node_full is not None else jd.get('node')
    if child_node is not None:
        children['node'] = from_json_junos_conf_root__configuration__groups__when__node(child_node)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__when(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_time = n.children.get('time')
    if child_time is not None:
        if isinstance(child_time, yang.gdata.Container):
            children['time'] = to_json_junos_conf_root__configuration__groups__when__time(child_time)
    child_chassis = n.children.get('chassis')
    if child_chassis is not None:
        if isinstance(child_chassis, yang.gdata.Leaf):
            children['chassis'] = child_chassis.val
    child_model = n.children.get('model')
    if child_model is not None:
        if isinstance(child_model, yang.gdata.Leaf):
            children['model'] = child_model.val
    child_routing_engine = n.children.get('routing-engine')
    if child_routing_engine is not None:
        if isinstance(child_routing_engine, yang.gdata.Leaf):
            children['routing-engine'] = child_routing_engine.val
    child_member = n.children.get('member')
    if child_member is not None:
        if isinstance(child_member, yang.gdata.Leaf):
            children['member'] = child_member.val
    child_node = n.children.get('node')
    if child_node is not None:
        if isinstance(child_node, yang.gdata.Leaf):
            children['node'] = child_node.val
    return children


mut def from_json_junos_conf_root__configuration__groups__rcsid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__system__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__system(yang.adata.MNode):
    host_name: ?str

    mut def __init__(self, host_name: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.host_name = host_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__system:
        if n != None:
            return junos_conf_root__configuration__groups__system(host_name=n.get_opt_str("host-name"))
        return junos_conf_root__configuration__groups__system()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__system:
        if n != None:
            return junos_conf_root__configuration__groups__system(host_name=yang.gdata.from_xml_opt_str(n, "host-name"))
        return junos_conf_root__configuration__groups__system()


mut def from_json_path_junos_conf_root__configuration__groups__system(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:host-name' or point == 'host-name':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__system(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__system(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_host_name_full = jd.get('jc:host-name')
    child_host_name = child_host_name_full if child_host_name_full is not None else jd.get('host-name')
    if child_host_name is not None:
        children['host-name'] = from_json_junos_conf_root__configuration__groups__system__host_name(child_host_name)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__system(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_host_name = n.children.get('host-name')
    if child_host_name is not None:
        if isinstance(child_host_name, yang.gdata.Leaf):
            children['host-name'] = child_host_name.val
    return children


mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__native_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__alias(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name=yang.gdata.from_xml_str(n, "name"))

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address__name(child_name)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    return children

mut def to_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(e))
    return elements


class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(yang.adata.MNode):
    address: junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address

    mut def __init__(self, address: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.address = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(elements=address)
        self.address._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address.from_gdata(n.get_opt_list("address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return None


mut def from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:address' or point == 'address':
            child = {'address': from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_address_full = jd.get('jc:address')
    child_address = child_address_full if child_address_full is not None else jd.get('address')
    if child_address is not None and isinstance(child_address, list):
        children['address'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(child_address)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_address = n.children.get('address')
    if child_address is not None:
        if isinstance(child_address, yang.gdata.List):
            children['address'] = to_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(child_address)
    return children


class junos_conf_root__configuration__groups__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet

    mut def __init__(self, inet: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.inet = inet
        self_inet = self.inet
        if self_inet is not None:
            self_inet._parent = self

    mut def create_inet(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet = self.inet
        if _inet is not None:
            children['inet'] = _inet.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family(inet=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_container("inet")))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family(inet=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet.from_xml(yang.gdata.get_xml_opt_child(n, "inet")))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family()


mut def from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit__family(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:inet' or point == 'inet':
            child = {'inet': from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_inet_full = jd.get('jc:inet')
    child_inet = child_inet_full if child_inet_full is not None else jd.get('inet')
    if child_inet is not None and isinstance(child_inet, dict):
        children['inet'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(child_inet)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_inet = n.children.get('inet')
    if child_inet is not None:
        if isinstance(child_inet, yang.gdata.Container):
            children['inet'] = to_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(child_inet)
    return children


mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    alias: ?str
    description: ?str
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__groups__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    mut def __init__(self, name: str, alias: ?str, description: ?str, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.alias = alias
        self.description = description
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        if family is not None:
            self.family = family
        else:
            self.family = junos_conf_root__configuration__groups__interfaces__interface__unit__family()
        self_family = self.family
        if self_family is not None:
            self_family._parent = self
        self.mtu = mtu
        self.mac = mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _alias = self.alias
        _description = self.description
        _vlan_id = self.vlan_id
        _encapsulation = self.encapsulation
        _family = self.family
        _mtu = self.mtu
        _mac = self.mac
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _alias is not None:
            children['alias'] = yang.gdata.Leaf('string', _alias)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('string', _vlan_id)
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        if _family is not None:
            children['family'] = _family.to_gdata()
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name=n.get_str("name"), alias=n.get_opt_str("alias"), description=n.get_opt_str("description"), vlan_id=n.get_opt_str("vlan-id"), encapsulation=n.get_opt_str("encapsulation"), family=junos_conf_root__configuration__groups__interfaces__interface__unit__family.from_gdata(n.get_opt_container("family")), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name=yang.gdata.from_xml_str(n, "name"), alias=yang.gdata.from_xml_opt_str(n, "alias"), description=yang.gdata.from_xml_opt_str(n, "description"), vlan_id=yang.gdata.from_xml_opt_str(n, "vlan-id"), encapsulation=yang.gdata.from_xml_opt_str(n, "encapsulation"), family=junos_conf_root__configuration__groups__interfaces__interface__unit__family.from_xml(yang.gdata.get_xml_opt_child(n, "family")), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"))

class junos_conf_root__configuration__groups__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'unit'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__interfaces__interface__unit_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'alias':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'vlan-id':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'encapsulation':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'family':
            children['family'] = from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit__family(jd, rest_path, op)
        if point == 'mtu':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'mac':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__name(child_name)
    child_alias_full = jd.get('jc:alias')
    child_alias = child_alias_full if child_alias_full is not None else jd.get('alias')
    if child_alias is not None:
        children['alias'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__alias(child_alias)
    child_description_full = jd.get('jc:description')
    child_description = child_description_full if child_description_full is not None else jd.get('description')
    if child_description is not None:
        children['description'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__description(child_description)
    child_vlan_id_full = jd.get('jc:vlan-id')
    child_vlan_id = child_vlan_id_full if child_vlan_id_full is not None else jd.get('vlan-id')
    if child_vlan_id is not None:
        children['vlan-id'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__vlan_id(child_vlan_id)
    child_encapsulation_full = jd.get('jc:encapsulation')
    child_encapsulation = child_encapsulation_full if child_encapsulation_full is not None else jd.get('encapsulation')
    if child_encapsulation is not None:
        children['encapsulation'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__encapsulation(child_encapsulation)
    child_family_full = jd.get('jc:family')
    child_family = child_family_full if child_family_full is not None else jd.get('family')
    if child_family is not None and isinstance(child_family, dict):
        children['family'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family(child_family)
    child_mtu_full = jd.get('jc:mtu')
    child_mtu = child_mtu_full if child_mtu_full is not None else jd.get('mtu')
    if child_mtu is not None:
        children['mtu'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__mtu(child_mtu)
    child_mac_full = jd.get('jc:mac')
    child_mac = child_mac_full if child_mac_full is not None else jd.get('mac')
    if child_mac is not None:
        children['mac'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__mac(child_mac)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__groups__interfaces__interface__unit_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__groups__interfaces__interface__unit_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_alias = n.children.get('alias')
    if child_alias is not None:
        if isinstance(child_alias, yang.gdata.Leaf):
            children['alias'] = child_alias.val
    child_description = n.children.get('description')
    if child_description is not None:
        if isinstance(child_description, yang.gdata.Leaf):
            children['description'] = child_description.val
    child_vlan_id = n.children.get('vlan-id')
    if child_vlan_id is not None:
        if isinstance(child_vlan_id, yang.gdata.Leaf):
            children['vlan-id'] = child_vlan_id.val
    child_encapsulation = n.children.get('encapsulation')
    if child_encapsulation is not None:
        if isinstance(child_encapsulation, yang.gdata.Leaf):
            children['encapsulation'] = child_encapsulation.val
    child_family = n.children.get('family')
    if child_family is not None:
        if isinstance(child_family, yang.gdata.Container):
            children['family'] = to_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family(child_family)
    child_mtu = n.children.get('mtu')
    if child_mtu is not None:
        if isinstance(child_mtu, yang.gdata.Leaf):
            children['mtu'] = child_mtu.val
    child_mac = n.children.get('mac')
    if child_mac is not None:
        if isinstance(child_mac, yang.gdata.Leaf):
            children['mac'] = child_mac.val
    return children

mut def to_json_junos_conf_root__configuration__groups__interfaces__interface__unit(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__groups__interfaces__interface__unit_element(e))
    return elements


class junos_conf_root__configuration__groups__interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__groups__interfaces__interface__unit

    mut def __init__(self, name: str, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__groups__interfaces__interface__unit(elements=unit)
        self.unit._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _mtu = self.mtu
        _mac = self.mac
        _native_vlan_id = self.native_vlan_id
        _unit = self.unit
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        if _native_vlan_id is not None:
            children['native-vlan-id'] = yang.gdata.Leaf('union', _native_vlan_id)
        if _unit is not None:
            children['unit'] = _unit.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface_entry:
        return junos_conf_root__configuration__groups__interfaces__interface_entry(name=n.get_str("name"), description=n.get_opt_str("description"), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"), native_vlan_id=n.get_opt_value("native-vlan-id"), unit=junos_conf_root__configuration__groups__interfaces__interface__unit.from_gdata(n.get_opt_list("unit")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface_entry:
        return junos_conf_root__configuration__groups__interfaces__interface_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"), native_vlan_id=yang.gdata.from_xml_opt_value(n, "native-vlan-id"), unit=junos_conf_root__configuration__groups__interfaces__interface__unit.from_xml(yang.gdata.get_xml_children(n, "unit")))

class junos_conf_root__configuration__groups__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__groups__interfaces__interface_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__groups__interfaces__interface_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'mtu':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'mac':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'native-vlan-id':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'unit':
            children['unit'] = from_json_path_junos_conf_root__configuration__groups__interfaces__interface__unit(jd, rest_path, op)
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__groups__interfaces__interface(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__groups__interfaces__interface_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__groups__interfaces__interface_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__name(child_name)
    child_description_full = jd.get('jc:description')
    child_description = child_description_full if child_description_full is not None else jd.get('description')
    if child_description is not None:
        children['description'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__description(child_description)
    child_mtu_full = jd.get('jc:mtu')
    child_mtu = child_mtu_full if child_mtu_full is not None else jd.get('mtu')
    if child_mtu is not None:
        children['mtu'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__mtu(child_mtu)
    child_mac_full = jd.get('jc:mac')
    child_mac = child_mac_full if child_mac_full is not None else jd.get('mac')
    if child_mac is not None:
        children['mac'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__mac(child_mac)
    child_native_vlan_id_full = jd.get('jc:native-vlan-id')
    child_native_vlan_id = child_native_vlan_id_full if child_native_vlan_id_full is not None else jd.get('native-vlan-id')
    if child_native_vlan_id is not None:
        children['native-vlan-id'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__native_vlan_id(child_native_vlan_id)
    child_unit_full = jd.get('jc:unit')
    child_unit = child_unit_full if child_unit_full is not None else jd.get('unit')
    if child_unit is not None and isinstance(child_unit, list):
        children['unit'] = from_json_junos_conf_root__configuration__groups__interfaces__interface__unit(child_unit)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__groups__interfaces__interface_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__groups__interfaces__interface_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_description = n.children.get('description')
    if child_description is not None:
        if isinstance(child_description, yang.gdata.Leaf):
            children['description'] = child_description.val
    child_mtu = n.children.get('mtu')
    if child_mtu is not None:
        if isinstance(child_mtu, yang.gdata.Leaf):
            children['mtu'] = child_mtu.val
    child_mac = n.children.get('mac')
    if child_mac is not None:
        if isinstance(child_mac, yang.gdata.Leaf):
            children['mac'] = child_mac.val
    child_native_vlan_id = n.children.get('native-vlan-id')
    if child_native_vlan_id is not None:
        if isinstance(child_native_vlan_id, yang.gdata.Leaf):
            children['native-vlan-id'] = child_native_vlan_id.val
    child_unit = n.children.get('unit')
    if child_unit is not None:
        if isinstance(child_unit, yang.gdata.List):
            children['unit'] = to_json_junos_conf_root__configuration__groups__interfaces__interface__unit(child_unit)
    return children

mut def to_json_junos_conf_root__configuration__groups__interfaces__interface(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__groups__interfaces__interface_element(e))
    return elements


class junos_conf_root__configuration__groups__interfaces(yang.adata.MNode):
    interface: junos_conf_root__configuration__groups__interfaces__interface

    mut def __init__(self, interface: list[junos_conf_root__configuration__groups__interfaces__interface_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.interface = junos_conf_root__configuration__groups__interfaces__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces(interface=junos_conf_root__configuration__groups__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return junos_conf_root__configuration__groups__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__interfaces:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces(interface=junos_conf_root__configuration__groups__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return junos_conf_root__configuration__groups__interfaces()


mut def from_json_path_junos_conf_root__configuration__groups__interfaces(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:interface' or point == 'interface':
            child = {'interface': from_json_path_junos_conf_root__configuration__groups__interfaces__interface(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__interfaces(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__interfaces(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_interface_full = jd.get('jc:interface')
    child_interface = child_interface_full if child_interface_full is not None else jd.get('interface')
    if child_interface is not None and isinstance(child_interface, list):
        children['interface'] = from_json_junos_conf_root__configuration__groups__interfaces__interface(child_interface)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__interfaces(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_interface = n.children.get('interface')
    if child_interface is not None:
        if isinstance(child_interface, yang.gdata.List):
            children['interface'] = to_json_junos_conf_root__configuration__groups__interfaces__interface(child_interface)
    return children


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__instance_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__any(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__multicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    mut def __init__(self, name: str, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _any = self.any
        _unicast = self.unicast
        _multicast = self.multicast
        _primary = self.primary
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _any is not None:
            children['any'] = yang.gdata.Leaf('empty', _any)
        if _unicast is not None:
            children['unicast'] = yang.gdata.Leaf('empty', _unicast)
        if _multicast is not None:
            children['multicast'] = yang.gdata.Leaf('empty', _multicast)
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name=n.get_str("name"), any=n.get_opt_bool("any"), unicast=n.get_opt_bool("unicast"), multicast=n.get_opt_bool("multicast"), primary=n.get_opt_bool("primary"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name=yang.gdata.from_xml_str(n, "name"), any=yang.gdata.from_xml_opt_bool(n, "any"), unicast=yang.gdata.from_xml_opt_bool(n, "unicast"), multicast=yang.gdata.from_xml_opt_bool(n, "multicast"), primary=yang.gdata.from_xml_opt_bool(n, "primary"))

class junos_conf_root__configuration__groups__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__routing_instances__instance__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance__interface_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'any':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'unicast':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'multicast':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'primary':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__groups__routing_instances__instance__interface(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__name(child_name)
    child_any_full = jd.get('jc:any')
    child_any = child_any_full if child_any_full is not None else jd.get('any')
    if child_any is not None:
        children['any'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__any(child_any)
    child_unicast_full = jd.get('jc:unicast')
    child_unicast = child_unicast_full if child_unicast_full is not None else jd.get('unicast')
    if child_unicast is not None:
        children['unicast'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__unicast(child_unicast)
    child_multicast_full = jd.get('jc:multicast')
    child_multicast = child_multicast_full if child_multicast_full is not None else jd.get('multicast')
    if child_multicast is not None:
        children['multicast'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__multicast(child_multicast)
    child_primary_full = jd.get('jc:primary')
    child_primary = child_primary_full if child_primary_full is not None else jd.get('primary')
    if child_primary is not None:
        children['primary'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__primary(child_primary)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_any = n.children.get('any')
    if child_any is not None:
        if isinstance(child_any, yang.gdata.Leaf):
            children['any'] = child_any.val
    child_unicast = n.children.get('unicast')
    if child_unicast is not None:
        if isinstance(child_unicast, yang.gdata.Leaf):
            children['unicast'] = child_unicast.val
    child_multicast = n.children.get('multicast')
    if child_multicast is not None:
        if isinstance(child_multicast, yang.gdata.Leaf):
            children['multicast'] = child_multicast.val
    child_primary = n.children.get('primary')
    if child_primary is not None:
        if isinstance(child_primary, yang.gdata.Leaf):
            children['primary'] = child_primary.val
    return children

mut def to_json_junos_conf_root__configuration__groups__routing_instances__instance__interface(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(e))
    return elements


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher__rd_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    mut def __init__(self, rd_type: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rd_type = rd_type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd_type = self.rd_type
        if _rd_type is not None:
            children['rd-type'] = yang.gdata.Leaf('string', _rd_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str("rd-type"))
        return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(rd_type=yang.gdata.from_xml_opt_str(n, "rd-type"))
        return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()


mut def from_json_path_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:rd-type' or point == 'rd-type':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_rd_type_full = jd.get('jc:rd-type')
    child_rd_type = child_rd_type_full if child_rd_type_full is not None else jd.get('rd-type')
    if child_rd_type is not None:
        children['rd-type'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher__rd_type(child_rd_type)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_rd_type = n.children.get('rd-type')
    if child_rd_type is not None:
        if isinstance(child_rd_type, yang.gdata.Leaf):
            children['rd-type'] = child_rd_type.val
    return children


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__export_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__import_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__export(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__auto(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(yang.adata.MNode):
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    mut def __init__(self, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        _import_ = self.import_
        _export = self.export
        _auto = self.auto
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        if _export is not None:
            children['export'] = yang.gdata.Leaf('string', _export)
        if _auto is not None:
            children['auto'] = yang.gdata.Leaf('empty', _auto)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(community=n.get_opt_str("community"), import_=n.get_opt_str("import"), export=n.get_opt_str("export"), auto=n.get_opt_bool("auto"))
        return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(community=yang.gdata.from_xml_opt_str(n, "community"), import_=yang.gdata.from_xml_opt_str(n, "import"), export=yang.gdata.from_xml_opt_str(n, "export"), auto=yang.gdata.from_xml_opt_bool(n, "auto"))
        return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()


mut def from_json_path_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:community' or point == 'community':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:import' or point == 'import':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:export' or point == 'export':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:auto' or point == 'auto':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_community_full = jd.get('jc:community')
    child_community = child_community_full if child_community_full is not None else jd.get('community')
    if child_community is not None:
        children['community'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__community(child_community)
    child_import__full = jd.get('jc:import')
    child_import_ = child_import__full if child_import__full is not None else jd.get('import')
    if child_import_ is not None:
        children['import'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__import(child_import_)
    child_export_full = jd.get('jc:export')
    child_export = child_export_full if child_export_full is not None else jd.get('export')
    if child_export is not None:
        children['export'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__export(child_export)
    child_auto_full = jd.get('jc:auto')
    child_auto = child_auto_full if child_auto_full is not None else jd.get('auto')
    if child_auto is not None:
        children['auto'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__auto(child_auto)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_community = n.children.get('community')
    if child_community is not None:
        if isinstance(child_community, yang.gdata.Leaf):
            children['community'] = child_community.val
    child_import_ = n.children.get('import')
    if child_import_ is not None:
        if isinstance(child_import_, yang.gdata.Leaf):
            children['import'] = child_import_.val
    child_export = n.children.get('export')
    if child_export is not None:
        if isinstance(child_export, yang.gdata.Leaf):
            children['export'] = child_export.val
    child_auto = n.children.get('auto')
    if child_auto is not None:
        if isinstance(child_auto, yang.gdata.Leaf):
            children['auto'] = child_auto.val
    return children


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__no_vrf_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    instance_type: ?str
    interface: junos_conf_root__configuration__groups__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher
    export_default_action: ?str
    import_default_action: ?str
    vrf_target: junos_conf_root__configuration__groups__routing_instances__instance__vrf_target
    no_vrf_advertise: ?bool

    mut def __init__(self, name: str, instance_type: ?str, interface: list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher=None, export_default_action: ?str, import_default_action: ?str, vrf_target: ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_target=None, no_vrf_advertise: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.instance_type = instance_type
        self.interface = junos_conf_root__configuration__groups__routing_instances__instance__interface(elements=interface)
        self.interface._parent = self
        if route_distinguisher is not None:
            self.route_distinguisher = route_distinguisher
        else:
            self.route_distinguisher = junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()
        self_route_distinguisher = self.route_distinguisher
        if self_route_distinguisher is not None:
            self_route_distinguisher._parent = self
        self.export_default_action = export_default_action
        self.import_default_action = import_default_action
        if vrf_target is not None:
            self.vrf_target = vrf_target
        else:
            self.vrf_target = junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()
        self_vrf_target = self.vrf_target
        if self_vrf_target is not None:
            self_vrf_target._parent = self
        self.no_vrf_advertise = no_vrf_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _instance_type = self.instance_type
        _interface = self.interface
        _route_distinguisher = self.route_distinguisher
        _export_default_action = self.export_default_action
        _import_default_action = self.import_default_action
        _vrf_target = self.vrf_target
        _no_vrf_advertise = self.no_vrf_advertise
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _instance_type is not None:
            children['instance-type'] = yang.gdata.Leaf('enumeration', _instance_type)
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        if _export_default_action is not None:
            children['export-default-action'] = yang.gdata.Leaf('enumeration', _export_default_action)
        if _import_default_action is not None:
            children['import-default-action'] = yang.gdata.Leaf('enumeration', _import_default_action)
        if _vrf_target is not None:
            children['vrf-target'] = _vrf_target.to_gdata()
        if _no_vrf_advertise is not None:
            children['no-vrf-advertise'] = yang.gdata.Leaf('empty', _no_vrf_advertise)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance_entry(name=n.get_str("name"), instance_type=n.get_opt_str("instance-type"), interface=junos_conf_root__configuration__groups__routing_instances__instance__interface.from_gdata(n.get_opt_list("interface")), route_distinguisher=junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_container("route-distinguisher")), export_default_action=n.get_opt_str("export-default-action"), import_default_action=n.get_opt_str("import-default-action"), vrf_target=junos_conf_root__configuration__groups__routing_instances__instance__vrf_target.from_gdata(n.get_opt_container("vrf-target")), no_vrf_advertise=n.get_opt_bool("no-vrf-advertise"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance_entry(name=yang.gdata.from_xml_str(n, "name"), instance_type=yang.gdata.from_xml_opt_str(n, "instance-type"), interface=junos_conf_root__configuration__groups__routing_instances__instance__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), route_distinguisher=junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher.from_xml(yang.gdata.get_xml_opt_child(n, "route-distinguisher")), export_default_action=yang.gdata.from_xml_opt_str(n, "export-default-action"), import_default_action=yang.gdata.from_xml_opt_str(n, "import-default-action"), vrf_target=junos_conf_root__configuration__groups__routing_instances__instance__vrf_target.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-target")), no_vrf_advertise=yang.gdata.from_xml_opt_bool(n, "no-vrf-advertise"))

class junos_conf_root__configuration__groups__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__routing_instances__instance_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__routing_instances__instance_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__groups__routing_instances__instance_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__groups__routing_instances__instance_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'instance-type':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'interface':
            children['interface'] = from_json_path_junos_conf_root__configuration__groups__routing_instances__instance__interface(jd, rest_path, op)
        if point == 'route-distinguisher':
            children['route-distinguisher'] = from_json_path_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(jd, rest_path, op)
        if point == 'export-default-action':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'import-default-action':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'vrf-target':
            children['vrf-target'] = from_json_path_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(jd, rest_path, op)
        if point == 'no-vrf-advertise':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__groups__routing_instances__instance(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__groups__routing_instances__instance_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__groups__routing_instances__instance_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__name(child_name)
    child_instance_type_full = jd.get('jc:instance-type')
    child_instance_type = child_instance_type_full if child_instance_type_full is not None else jd.get('instance-type')
    if child_instance_type is not None:
        children['instance-type'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__instance_type(child_instance_type)
    child_interface_full = jd.get('jc:interface')
    child_interface = child_interface_full if child_interface_full is not None else jd.get('interface')
    if child_interface is not None and isinstance(child_interface, list):
        children['interface'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface(child_interface)
    child_route_distinguisher_full = jd.get('jc:route-distinguisher')
    child_route_distinguisher = child_route_distinguisher_full if child_route_distinguisher_full is not None else jd.get('route-distinguisher')
    if child_route_distinguisher is not None and isinstance(child_route_distinguisher, dict):
        children['route-distinguisher'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(child_route_distinguisher)
    child_export_default_action_full = jd.get('jc:export-default-action')
    child_export_default_action = child_export_default_action_full if child_export_default_action_full is not None else jd.get('export-default-action')
    if child_export_default_action is not None:
        children['export-default-action'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__export_default_action(child_export_default_action)
    child_import_default_action_full = jd.get('jc:import-default-action')
    child_import_default_action = child_import_default_action_full if child_import_default_action_full is not None else jd.get('import-default-action')
    if child_import_default_action is not None:
        children['import-default-action'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__import_default_action(child_import_default_action)
    child_vrf_target_full = jd.get('jc:vrf-target')
    child_vrf_target = child_vrf_target_full if child_vrf_target_full is not None else jd.get('vrf-target')
    if child_vrf_target is not None and isinstance(child_vrf_target, dict):
        children['vrf-target'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(child_vrf_target)
    child_no_vrf_advertise_full = jd.get('jc:no-vrf-advertise')
    child_no_vrf_advertise = child_no_vrf_advertise_full if child_no_vrf_advertise_full is not None else jd.get('no-vrf-advertise')
    if child_no_vrf_advertise is not None:
        children['no-vrf-advertise'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance__no_vrf_advertise(child_no_vrf_advertise)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__groups__routing_instances__instance_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__groups__routing_instances__instance_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_instance_type = n.children.get('instance-type')
    if child_instance_type is not None:
        if isinstance(child_instance_type, yang.gdata.Leaf):
            children['instance-type'] = child_instance_type.val
    child_interface = n.children.get('interface')
    if child_interface is not None:
        if isinstance(child_interface, yang.gdata.List):
            children['interface'] = to_json_junos_conf_root__configuration__groups__routing_instances__instance__interface(child_interface)
    child_route_distinguisher = n.children.get('route-distinguisher')
    if child_route_distinguisher is not None:
        if isinstance(child_route_distinguisher, yang.gdata.Container):
            children['route-distinguisher'] = to_json_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(child_route_distinguisher)
    child_export_default_action = n.children.get('export-default-action')
    if child_export_default_action is not None:
        if isinstance(child_export_default_action, yang.gdata.Leaf):
            children['export-default-action'] = child_export_default_action.val
    child_import_default_action = n.children.get('import-default-action')
    if child_import_default_action is not None:
        if isinstance(child_import_default_action, yang.gdata.Leaf):
            children['import-default-action'] = child_import_default_action.val
    child_vrf_target = n.children.get('vrf-target')
    if child_vrf_target is not None:
        if isinstance(child_vrf_target, yang.gdata.Container):
            children['vrf-target'] = to_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(child_vrf_target)
    child_no_vrf_advertise = n.children.get('no-vrf-advertise')
    if child_no_vrf_advertise is not None:
        if isinstance(child_no_vrf_advertise, yang.gdata.Leaf):
            children['no-vrf-advertise'] = child_no_vrf_advertise.val
    return children

mut def to_json_junos_conf_root__configuration__groups__routing_instances__instance(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__groups__routing_instances__instance_element(e))
    return elements


class junos_conf_root__configuration__groups__routing_instances(yang.adata.MNode):
    instance: junos_conf_root__configuration__groups__routing_instances__instance

    mut def __init__(self, instance: list[junos_conf_root__configuration__groups__routing_instances__instance_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.instance = junos_conf_root__configuration__groups__routing_instances__instance(elements=instance)
        self.instance._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances(instance=junos_conf_root__configuration__groups__routing_instances__instance.from_gdata(n.get_opt_list("instance")))
        return junos_conf_root__configuration__groups__routing_instances()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances(instance=junos_conf_root__configuration__groups__routing_instances__instance.from_xml(yang.gdata.get_xml_children(n, "instance")))
        return junos_conf_root__configuration__groups__routing_instances()


mut def from_json_path_junos_conf_root__configuration__groups__routing_instances(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:instance' or point == 'instance':
            child = {'instance': from_json_path_junos_conf_root__configuration__groups__routing_instances__instance(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration__groups__routing_instances(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration__groups__routing_instances(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_instance_full = jd.get('jc:instance')
    child_instance = child_instance_full if child_instance_full is not None else jd.get('instance')
    if child_instance is not None and isinstance(child_instance, list):
        children['instance'] = from_json_junos_conf_root__configuration__groups__routing_instances__instance(child_instance)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration__groups__routing_instances(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_instance = n.children.get('instance')
    if child_instance is not None:
        if isinstance(child_instance, yang.gdata.List):
            children['instance'] = to_json_junos_conf_root__configuration__groups__routing_instances__instance(child_instance)
    return children


class junos_conf_root__configuration__groups_entry(yang.adata.MNode):
    name: str
    when: junos_conf_root__configuration__groups__when
    rcsid: ?str
    version: ?str
    system: junos_conf_root__configuration__groups__system
    interfaces: junos_conf_root__configuration__groups__interfaces
    routing_instances: junos_conf_root__configuration__groups__routing_instances

    mut def __init__(self, name: str, when: ?junos_conf_root__configuration__groups__when=None, rcsid: ?str, version: ?str, system: ?junos_conf_root__configuration__groups__system=None, interfaces: ?junos_conf_root__configuration__groups__interfaces=None, routing_instances: ?junos_conf_root__configuration__groups__routing_instances=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if when is not None:
            self.when = when
        else:
            self.when = junos_conf_root__configuration__groups__when()
        self_when = self.when
        if self_when is not None:
            self_when._parent = self
        self.rcsid = rcsid
        self.version = version
        if system is not None:
            self.system = system
        else:
            self.system = junos_conf_root__configuration__groups__system()
        self_system = self.system
        if self_system is not None:
            self_system._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = junos_conf_root__configuration__groups__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if routing_instances is not None:
            self.routing_instances = routing_instances
        else:
            self.routing_instances = junos_conf_root__configuration__groups__routing_instances()
        self_routing_instances = self.routing_instances
        if self_routing_instances is not None:
            self_routing_instances._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _when = self.when
        _rcsid = self.rcsid
        _version = self.version
        _system = self.system
        _interfaces = self.interfaces
        _routing_instances = self.routing_instances
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _when is not None:
            children['when'] = _when.to_gdata()
        if _rcsid is not None:
            children['rcsid'] = yang.gdata.Leaf('string', _rcsid)
        if _version is not None:
            children['version'] = yang.gdata.Leaf('string', _version)
        if _system is not None:
            children['system'] = _system.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _routing_instances is not None:
            children['routing-instances'] = _routing_instances.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups_entry:
        return junos_conf_root__configuration__groups_entry(name=n.get_str("name"), when=junos_conf_root__configuration__groups__when.from_gdata(n.get_opt_container("when")), rcsid=n.get_opt_str("rcsid"), version=n.get_opt_str("version"), system=junos_conf_root__configuration__groups__system.from_gdata(n.get_opt_container("system")), interfaces=junos_conf_root__configuration__groups__interfaces.from_gdata(n.get_opt_container("interfaces")), routing_instances=junos_conf_root__configuration__groups__routing_instances.from_gdata(n.get_opt_container("routing-instances")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups_entry:
        return junos_conf_root__configuration__groups_entry(name=yang.gdata.from_xml_str(n, "name"), when=junos_conf_root__configuration__groups__when.from_xml(yang.gdata.get_xml_opt_child(n, "when")), rcsid=yang.gdata.from_xml_opt_str(n, "rcsid"), version=yang.gdata.from_xml_opt_str(n, "version"), system=junos_conf_root__configuration__groups__system.from_xml(yang.gdata.get_xml_opt_child(n, "system")), interfaces=junos_conf_root__configuration__groups__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), routing_instances=junos_conf_root__configuration__groups__routing_instances.from_xml(yang.gdata.get_xml_opt_child(n, "routing-instances")))

class junos_conf_root__configuration__groups(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'groups'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups_entry.from_xml(node))
        return res


mut def from_json_path_junos_conf_root__configuration__groups_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_junos_conf_root__configuration__groups_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'when':
            children['when'] = from_json_path_junos_conf_root__configuration__groups__when(jd, rest_path, op)
        if point == 'rcsid':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'version':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'system':
            children['system'] = from_json_path_junos_conf_root__configuration__groups__system(jd, rest_path, op)
        if point == 'interfaces':
            children['interfaces'] = from_json_path_junos_conf_root__configuration__groups__interfaces(jd, rest_path, op)
        if point == 'routing-instances':
            children['routing-instances'] = from_json_path_junos_conf_root__configuration__groups__routing_instances(jd, rest_path, op)
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_junos_conf_root__configuration__groups(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_junos_conf_root__configuration__groups_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_junos_conf_root__configuration__groups_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_junos_conf_root__configuration__groups_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_name_full = jd.get('jc:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_junos_conf_root__configuration__groups__name(child_name)
    child_when_full = jd.get('jc:when')
    child_when = child_when_full if child_when_full is not None else jd.get('when')
    if child_when is not None and isinstance(child_when, dict):
        children['when'] = from_json_junos_conf_root__configuration__groups__when(child_when)
    child_rcsid_full = jd.get('jc:rcsid')
    child_rcsid = child_rcsid_full if child_rcsid_full is not None else jd.get('rcsid')
    if child_rcsid is not None:
        children['rcsid'] = from_json_junos_conf_root__configuration__groups__rcsid(child_rcsid)
    child_version_full = jd.get('jc:version')
    child_version = child_version_full if child_version_full is not None else jd.get('version')
    if child_version is not None:
        children['version'] = from_json_junos_conf_root__configuration__groups__version(child_version)
    child_system_full = jd.get('jc:system')
    child_system = child_system_full if child_system_full is not None else jd.get('system')
    if child_system is not None and isinstance(child_system, dict):
        children['system'] = from_json_junos_conf_root__configuration__groups__system(child_system)
    child_interfaces_full = jd.get('jc:interfaces')
    child_interfaces = child_interfaces_full if child_interfaces_full is not None else jd.get('interfaces')
    if child_interfaces is not None and isinstance(child_interfaces, dict):
        children['interfaces'] = from_json_junos_conf_root__configuration__groups__interfaces(child_interfaces)
    child_routing_instances_full = jd.get('jc:routing-instances')
    child_routing_instances = child_routing_instances_full if child_routing_instances_full is not None else jd.get('routing-instances')
    if child_routing_instances is not None and isinstance(child_routing_instances, dict):
        children['routing-instances'] = from_json_junos_conf_root__configuration__groups__routing_instances(child_routing_instances)
    return yang.gdata.ListElement([str(child_name if child_name is not None else "")], children)

mut def from_json_junos_conf_root__configuration__groups(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_junos_conf_root__configuration__groups_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_junos_conf_root__configuration__groups_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_when = n.children.get('when')
    if child_when is not None:
        if isinstance(child_when, yang.gdata.Container):
            children['when'] = to_json_junos_conf_root__configuration__groups__when(child_when)
    child_rcsid = n.children.get('rcsid')
    if child_rcsid is not None:
        if isinstance(child_rcsid, yang.gdata.Leaf):
            children['rcsid'] = child_rcsid.val
    child_version = n.children.get('version')
    if child_version is not None:
        if isinstance(child_version, yang.gdata.Leaf):
            children['version'] = child_version.val
    child_system = n.children.get('system')
    if child_system is not None:
        if isinstance(child_system, yang.gdata.Container):
            children['system'] = to_json_junos_conf_root__configuration__groups__system(child_system)
    child_interfaces = n.children.get('interfaces')
    if child_interfaces is not None:
        if isinstance(child_interfaces, yang.gdata.Container):
            children['interfaces'] = to_json_junos_conf_root__configuration__groups__interfaces(child_interfaces)
    child_routing_instances = n.children.get('routing-instances')
    if child_routing_instances is not None:
        if isinstance(child_routing_instances, yang.gdata.Container):
            children['routing-instances'] = to_json_junos_conf_root__configuration__groups__routing_instances(child_routing_instances)
    return children

mut def to_json_junos_conf_root__configuration__groups(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_junos_conf_root__configuration__groups_element(e))
    return elements


class junos_conf_root__configuration(yang.adata.MNode):
    rcsid: ?str
    version: ?str
    system: junos_conf_root__configuration__system
    interfaces: junos_conf_root__configuration__interfaces
    routing_instances: junos_conf_root__configuration__routing_instances
    groups: junos_conf_root__configuration__groups

    mut def __init__(self, rcsid: ?str, version: ?str, system: ?junos_conf_root__configuration__system=None, interfaces: ?junos_conf_root__configuration__interfaces=None, routing_instances: ?junos_conf_root__configuration__routing_instances=None, groups: list[junos_conf_root__configuration__groups_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rcsid = rcsid
        self.version = version
        if system is not None:
            self.system = system
        else:
            self.system = junos_conf_root__configuration__system()
        self_system = self.system
        if self_system is not None:
            self_system._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = junos_conf_root__configuration__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if routing_instances is not None:
            self.routing_instances = routing_instances
        else:
            self.routing_instances = junos_conf_root__configuration__routing_instances()
        self_routing_instances = self.routing_instances
        if self_routing_instances is not None:
            self_routing_instances._parent = self
        self.groups = junos_conf_root__configuration__groups(elements=groups)
        self.groups._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rcsid = self.rcsid
        _version = self.version
        _system = self.system
        _interfaces = self.interfaces
        _routing_instances = self.routing_instances
        _groups = self.groups
        if _rcsid is not None:
            children['rcsid'] = yang.gdata.Leaf('string', _rcsid)
        if _version is not None:
            children['version'] = yang.gdata.Leaf('string', _version)
        if _system is not None:
            children['system'] = _system.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _routing_instances is not None:
            children['routing-instances'] = _routing_instances.to_gdata()
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/root')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration:
        if n != None:
            return junos_conf_root__configuration(rcsid=n.get_opt_str("rcsid"), version=n.get_opt_str("version"), system=junos_conf_root__configuration__system.from_gdata(n.get_opt_container("system")), interfaces=junos_conf_root__configuration__interfaces.from_gdata(n.get_opt_container("interfaces")), routing_instances=junos_conf_root__configuration__routing_instances.from_gdata(n.get_opt_container("routing-instances")), groups=junos_conf_root__configuration__groups.from_gdata(n.get_opt_list("groups")))
        return junos_conf_root__configuration()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration:
        if n != None:
            return junos_conf_root__configuration(rcsid=yang.gdata.from_xml_opt_str(n, "rcsid"), version=yang.gdata.from_xml_opt_str(n, "version"), system=junos_conf_root__configuration__system.from_xml(yang.gdata.get_xml_opt_child(n, "system")), interfaces=junos_conf_root__configuration__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), routing_instances=junos_conf_root__configuration__routing_instances.from_xml(yang.gdata.get_xml_opt_child(n, "routing-instances")), groups=junos_conf_root__configuration__groups.from_xml(yang.gdata.get_xml_children(n, "groups")))
        return junos_conf_root__configuration()


mut def from_json_path_junos_conf_root__configuration(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:rcsid' or point == 'rcsid':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:version' or point == 'version':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'jc:system' or point == 'system':
            child = {'system': from_json_path_junos_conf_root__configuration__system(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'jc:interfaces' or point == 'interfaces':
            child = {'interfaces': from_json_path_junos_conf_root__configuration__interfaces(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'jc:routing-instances' or point == 'routing-instances':
            child = {'routing-instances': from_json_path_junos_conf_root__configuration__routing_instances(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'jc:groups' or point == 'groups':
            child = {'groups': from_json_path_junos_conf_root__configuration__groups(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_junos_conf_root__configuration(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_junos_conf_root__configuration(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_rcsid_full = jd.get('jc:rcsid')
    child_rcsid = child_rcsid_full if child_rcsid_full is not None else jd.get('rcsid')
    if child_rcsid is not None:
        children['rcsid'] = from_json_junos_conf_root__configuration__rcsid(child_rcsid)
    child_version_full = jd.get('jc:version')
    child_version = child_version_full if child_version_full is not None else jd.get('version')
    if child_version is not None:
        children['version'] = from_json_junos_conf_root__configuration__version(child_version)
    child_system_full = jd.get('jc:system')
    child_system = child_system_full if child_system_full is not None else jd.get('system')
    if child_system is not None and isinstance(child_system, dict):
        children['system'] = from_json_junos_conf_root__configuration__system(child_system)
    child_interfaces_full = jd.get('jc:interfaces')
    child_interfaces = child_interfaces_full if child_interfaces_full is not None else jd.get('interfaces')
    if child_interfaces is not None and isinstance(child_interfaces, dict):
        children['interfaces'] = from_json_junos_conf_root__configuration__interfaces(child_interfaces)
    child_routing_instances_full = jd.get('jc:routing-instances')
    child_routing_instances = child_routing_instances_full if child_routing_instances_full is not None else jd.get('routing-instances')
    if child_routing_instances is not None and isinstance(child_routing_instances, dict):
        children['routing-instances'] = from_json_junos_conf_root__configuration__routing_instances(child_routing_instances)
    child_groups_full = jd.get('jc:groups')
    child_groups = child_groups_full if child_groups_full is not None else jd.get('groups')
    if child_groups is not None and isinstance(child_groups, list):
        children['groups'] = from_json_junos_conf_root__configuration__groups(child_groups)
    return yang.gdata.Container(children)

mut def to_json_junos_conf_root__configuration(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_rcsid = n.children.get('rcsid')
    if child_rcsid is not None:
        if isinstance(child_rcsid, yang.gdata.Leaf):
            children['rcsid'] = child_rcsid.val
    child_version = n.children.get('version')
    if child_version is not None:
        if isinstance(child_version, yang.gdata.Leaf):
            children['version'] = child_version.val
    child_system = n.children.get('system')
    if child_system is not None:
        if isinstance(child_system, yang.gdata.Container):
            children['system'] = to_json_junos_conf_root__configuration__system(child_system)
    child_interfaces = n.children.get('interfaces')
    if child_interfaces is not None:
        if isinstance(child_interfaces, yang.gdata.Container):
            children['interfaces'] = to_json_junos_conf_root__configuration__interfaces(child_interfaces)
    child_routing_instances = n.children.get('routing-instances')
    if child_routing_instances is not None:
        if isinstance(child_routing_instances, yang.gdata.Container):
            children['routing-instances'] = to_json_junos_conf_root__configuration__routing_instances(child_routing_instances)
    child_groups = n.children.get('groups')
    if child_groups is not None:
        if isinstance(child_groups, yang.gdata.List):
            children['groups'] = to_json_junos_conf_root__configuration__groups(child_groups)
    return children


class root(yang.adata.MNode):
    configuration: junos_conf_root__configuration

    mut def __init__(self, configuration: ?junos_conf_root__configuration=None):
        self._ns = ""
        if configuration is not None:
            self.configuration = configuration
        else:
            self.configuration = junos_conf_root__configuration()
        self_configuration = self.configuration
        if self_configuration is not None:
            self_configuration._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _configuration = self.configuration
        if _configuration is not None:
            children['configuration'] = _configuration.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(configuration=junos_conf_root__configuration.from_gdata(n.get_opt_container("configuration")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(configuration=junos_conf_root__configuration.from_xml(yang.gdata.get_xml_opt_child(n, "configuration", "http://yang.juniper.net/junos/conf/root")))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'jc:configuration':
            child = {'configuration': from_json_path_junos_conf_root__configuration(jd, rest_path, op) }
            return yang.gdata.Root(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Root:
    children = {}
    child_configuration = jd.get('jc:configuration')
    if child_configuration is not None and isinstance(child_configuration, dict):
        children['configuration'] = from_json_junos_conf_root__configuration(child_configuration)
    return yang.gdata.Root(children)

mut def to_json(n: yang.gdata.Root) -> dict[str, ?value]:
    children = {}
    child_configuration = n.children.get('configuration')
    if child_configuration is not None:
        if isinstance(child_configuration, yang.gdata.Container):
            children['jc:configuration'] = to_json_junos_conf_root__configuration(child_configuration)
    return children

