import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class junos_conf_root__configuration__system(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    host_name: ?str

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, host_name: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.host_name = host_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('system', ns=self._ns)
        _host_name = self.host_name
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _host_name is not None:
            res.children['host-name'] = yang.gdata.Leaf('host-name', 'string', _host_name, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__system:
        if n != None:
            return junos_conf_root__configuration__system(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), host_name=n.get_opt_str("host-name"))
        return junos_conf_root__configuration__system()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__system:
        if n != None:
            return junos_conf_root__configuration__system(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), host_name=yang.gdata.from_xml_opt_str(n, "host-name"))
        return junos_conf_root__configuration__system()


class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"))

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('address', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry.from_xml(node))
        return res


class junos_conf_root__configuration__interfaces__interface__unit__family__inet(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    address: junos_conf_root__configuration__interfaces__interface__unit__family__inet__address

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(elements=address)
        self.address._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('inet', ns=self._ns)
        _address = self.address
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _address is not None:
            res.children['address'] = _address.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), address=junos_conf_root__configuration__interfaces__interface__unit__family__inet__address.from_gdata(n.get_list("address")))
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), address=junos_conf_root__configuration__interfaces__interface__unit__family__inet__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet()


class junos_conf_root__configuration__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet

    def __init__(self, inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if inet is not None:
            self.inet = inet
        else:
            self.inet = junos_conf_root__configuration__interfaces__interface__unit__family__inet()
        self_inet = self.inet
        if self_inet is not None:
            self_inet._parent = self

    def create_inet(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('family', ns=self._ns)
        _inet = self.inet
        if _inet is not None:
            res.children['inet'] = _inet.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family(inet=junos_conf_root__configuration__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_container("inet")))
        return junos_conf_root__configuration__interfaces__interface__unit__family()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family(inet=junos_conf_root__configuration__interfaces__interface__unit__family__inet.from_xml(yang.gdata.get_xml_opt_child(n, "inet")))
        return junos_conf_root__configuration__interfaces__interface__unit__family()


class junos_conf_root__configuration__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    alias: ?str
    description: ?str
    security_group: list[str]
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, alias: ?str, description: ?str, security_group: ?list[str]=None, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.alias = alias
        self.description = description
        if security_group is not None:
            self.security_group = security_group
        else:
            self.security_group = []
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        if family is not None:
            self.family = family
        else:
            self.family = junos_conf_root__configuration__interfaces__interface__unit__family()
        self_family = self.family
        if self_family is not None:
            self_family._parent = self
        self.mtu = mtu
        self.mac = mac

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _alias = self.alias
        _description = self.description
        _vlan_id = self.vlan_id
        _encapsulation = self.encapsulation
        _family = self.family
        _mtu = self.mtu
        _mac = self.mac
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _alias is not None:
            res.children['alias'] = yang.gdata.Leaf('alias', 'string', _alias, ns='http://yang.juniper.net/junos/conf/root')
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://yang.juniper.net/junos/conf/root')
        res.children['security-group'] = yang.gdata.LeafList('security-group', self.security_group, ns='http://yang.juniper.net/junos/conf/root')
        if _vlan_id is not None:
            res.children['vlan-id'] = yang.gdata.Leaf('vlan-id', 'string', _vlan_id, ns='http://yang.juniper.net/junos/conf/root')
        if _encapsulation is not None:
            res.children['encapsulation'] = yang.gdata.Leaf('encapsulation', 'enumeration', _encapsulation, ns='http://yang.juniper.net/junos/conf/root')
        if _family is not None:
            res.children['family'] = _family.to_gdata()
        if _mtu is not None:
            res.children['mtu'] = yang.gdata.Leaf('mtu', 'union', _mtu, ns='http://yang.juniper.net/junos/conf/root')
        if _mac is not None:
            res.children['mac'] = yang.gdata.Leaf('mac', 'string', _mac, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__interfaces__interface__unit_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), alias=n.get_opt_str("alias"), description=n.get_opt_str("description"), security_group=n.get_opt_strs("security-group"), vlan_id=n.get_opt_str("vlan-id"), encapsulation=n.get_opt_str("encapsulation"), family=junos_conf_root__configuration__interfaces__interface__unit__family.from_gdata(n.get_opt_container("family")), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__interfaces__interface__unit_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), alias=yang.gdata.from_xml_opt_str(n, "alias"), description=yang.gdata.from_xml_opt_str(n, "description"), security_group=yang.gdata.from_xml_opt_strs(n, "security-group"), vlan_id=yang.gdata.from_xml_opt_str(n, "vlan-id"), encapsulation=yang.gdata.from_xml_opt_str(n, "encapsulation"), family=junos_conf_root__configuration__interfaces__interface__unit__family.from_xml(yang.gdata.get_xml_opt_child(n, "family")), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"))

class junos_conf_root__configuration__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'unit'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('unit', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__interfaces__interface__unit_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface__unit_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface__unit_entry.from_xml(node))
        return res


class junos_conf_root__configuration__interfaces__interface_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__interfaces__interface__unit

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__interfaces__interface__unit_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__interfaces__interface__unit(elements=unit)
        self.unit._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _description = self.description
        _mtu = self.mtu
        _mac = self.mac
        _native_vlan_id = self.native_vlan_id
        _unit = self.unit
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://yang.juniper.net/junos/conf/root')
        if _mtu is not None:
            res.children['mtu'] = yang.gdata.Leaf('mtu', 'union', _mtu, ns='http://yang.juniper.net/junos/conf/root')
        if _mac is not None:
            res.children['mac'] = yang.gdata.Leaf('mac', 'string', _mac, ns='http://yang.juniper.net/junos/conf/root')
        if _native_vlan_id is not None:
            res.children['native-vlan-id'] = yang.gdata.Leaf('native-vlan-id', 'union', _native_vlan_id, ns='http://yang.juniper.net/junos/conf/root')
        if _unit is not None:
            res.children['unit'] = _unit.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface_entry:
        return junos_conf_root__configuration__interfaces__interface_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), description=n.get_opt_str("description"), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"), native_vlan_id=n.get_opt_value("native-vlan-id"), unit=junos_conf_root__configuration__interfaces__interface__unit.from_gdata(n.get_list("unit")))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface_entry:
        return junos_conf_root__configuration__interfaces__interface_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), description=yang.gdata.from_xml_opt_str(n, "description"), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"), native_vlan_id=yang.gdata.from_xml_opt_value(n, "native-vlan-id"), unit=junos_conf_root__configuration__interfaces__interface__unit.from_xml(yang.gdata.get_xml_children(n, "unit")))

class junos_conf_root__configuration__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface_entry.from_xml(node))
        return res


class junos_conf_root__configuration__interfaces(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    interface: junos_conf_root__configuration__interfaces__interface

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, interface: list[junos_conf_root__configuration__interfaces__interface_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.interface = junos_conf_root__configuration__interfaces__interface(elements=interface)
        self.interface._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('interfaces', ns=self._ns)
        _interface = self.interface
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _interface is not None:
            res.children['interface'] = _interface.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces:
        if n != None:
            return junos_conf_root__configuration__interfaces(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), interface=junos_conf_root__configuration__interfaces__interface.from_gdata(n.get_list("interface")))
        return junos_conf_root__configuration__interfaces()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__interfaces:
        if n != None:
            return junos_conf_root__configuration__interfaces(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), interface=junos_conf_root__configuration__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return junos_conf_root__configuration__interfaces()


class junos_conf_root__configuration__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _any = self.any
        _unicast = self.unicast
        _multicast = self.multicast
        _primary = self.primary
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _any is not None:
            res.children['any'] = yang.gdata.Leaf('any', 'empty', _any, ns='http://yang.juniper.net/junos/conf/root')
        if _unicast is not None:
            res.children['unicast'] = yang.gdata.Leaf('unicast', 'empty', _unicast, ns='http://yang.juniper.net/junos/conf/root')
        if _multicast is not None:
            res.children['multicast'] = yang.gdata.Leaf('multicast', 'empty', _multicast, ns='http://yang.juniper.net/junos/conf/root')
        if _primary is not None:
            res.children['primary'] = yang.gdata.Leaf('primary', 'empty', _primary, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__routing_instances__instance__interface_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), any=n.get_opt_bool("any"), unicast=n.get_opt_bool("unicast"), multicast=n.get_opt_bool("multicast"), primary=n.get_opt_bool("primary"))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__routing_instances__instance__interface_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), any=yang.gdata.from_xml_opt_bool(n, "any"), unicast=yang.gdata.from_xml_opt_bool(n, "unicast"), multicast=yang.gdata.from_xml_opt_bool(n, "multicast"), primary=yang.gdata.from_xml_opt_bool(n, "primary"))

class junos_conf_root__configuration__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__interface_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__routing_instances__instance__interface_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__routing_instances__instance__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__routing_instances__instance__interface_entry.from_xml(node))
        return res


class junos_conf_root__configuration__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    def __init__(self, rd_type: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rd_type = rd_type

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('route-distinguisher', ns=self._ns)
        _rd_type = self.rd_type
        if _rd_type is not None:
            res.children['rd-type'] = yang.gdata.Leaf('rd-type', 'string', _rd_type, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str("rd-type"))
        return junos_conf_root__configuration__routing_instances__instance__route_distinguisher()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__route_distinguisher(rd_type=yang.gdata.from_xml_opt_str(n, "rd-type"))
        return junos_conf_root__configuration__routing_instances__instance__route_distinguisher()


class junos_conf_root__configuration__routing_instances__instance__vrf_target(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('vrf-target', ns=self._ns)
        _community = self.community
        _import_ = self.import_
        _export = self.export
        _auto = self.auto
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _community is not None:
            res.children['community'] = yang.gdata.Leaf('community', 'string', _community, ns='http://yang.juniper.net/junos/conf/root')
        if _import_ is not None:
            res.children['import'] = yang.gdata.Leaf('import', 'string', _import_, ns='http://yang.juniper.net/junos/conf/root')
        if _export is not None:
            res.children['export'] = yang.gdata.Leaf('export', 'string', _export, ns='http://yang.juniper.net/junos/conf/root')
        if _auto is not None:
            res.children['auto'] = yang.gdata.Leaf('auto', 'empty', _auto, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_target(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), community=n.get_opt_str("community"), import_=n.get_opt_str("import"), export=n.get_opt_str("export"), auto=n.get_opt_bool("auto"))
        return junos_conf_root__configuration__routing_instances__instance__vrf_target()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_target(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), community=yang.gdata.from_xml_opt_str(n, "community"), import_=yang.gdata.from_xml_opt_str(n, "import"), export=yang.gdata.from_xml_opt_str(n, "export"), auto=yang.gdata.from_xml_opt_bool(n, "auto"))
        return junos_conf_root__configuration__routing_instances__instance__vrf_target()


class junos_conf_root__configuration__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    instance_type: ?str
    interface: junos_conf_root__configuration__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__routing_instances__instance__route_distinguisher
    vrf_import: list[str]
    vrf_export: list[str]
    export_default_action: ?str
    import_default_action: ?str
    vrf_target: junos_conf_root__configuration__routing_instances__instance__vrf_target
    no_vrf_advertise: ?bool

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, instance_type: ?str, interface: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__routing_instances__instance__route_distinguisher=None, vrf_import: ?list[str]=None, vrf_export: ?list[str]=None, export_default_action: ?str, import_default_action: ?str, vrf_target: ?junos_conf_root__configuration__routing_instances__instance__vrf_target=None, no_vrf_advertise: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.instance_type = instance_type
        self.interface = junos_conf_root__configuration__routing_instances__instance__interface(elements=interface)
        self.interface._parent = self
        if route_distinguisher is not None:
            self.route_distinguisher = route_distinguisher
        else:
            self.route_distinguisher = junos_conf_root__configuration__routing_instances__instance__route_distinguisher()
        self_route_distinguisher = self.route_distinguisher
        if self_route_distinguisher is not None:
            self_route_distinguisher._parent = self
        if vrf_import is not None:
            self.vrf_import = vrf_import
        else:
            self.vrf_import = []
        if vrf_export is not None:
            self.vrf_export = vrf_export
        else:
            self.vrf_export = []
        self.export_default_action = export_default_action
        self.import_default_action = import_default_action
        if vrf_target is not None:
            self.vrf_target = vrf_target
        else:
            self.vrf_target = junos_conf_root__configuration__routing_instances__instance__vrf_target()
        self_vrf_target = self.vrf_target
        if self_vrf_target is not None:
            self_vrf_target._parent = self
        self.no_vrf_advertise = no_vrf_advertise

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _instance_type = self.instance_type
        _interface = self.interface
        _route_distinguisher = self.route_distinguisher
        _export_default_action = self.export_default_action
        _import_default_action = self.import_default_action
        _vrf_target = self.vrf_target
        _no_vrf_advertise = self.no_vrf_advertise
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _instance_type is not None:
            res.children['instance-type'] = yang.gdata.Leaf('instance-type', 'enumeration', _instance_type, ns='http://yang.juniper.net/junos/conf/root')
        if _interface is not None:
            res.children['interface'] = _interface.to_gdata()
        if _route_distinguisher is not None:
            res.children['route-distinguisher'] = _route_distinguisher.to_gdata()
        res.children['vrf-import'] = yang.gdata.LeafList('vrf-import', self.vrf_import, ns='http://yang.juniper.net/junos/conf/root')
        res.children['vrf-export'] = yang.gdata.LeafList('vrf-export', self.vrf_export, ns='http://yang.juniper.net/junos/conf/root')
        if _export_default_action is not None:
            res.children['export-default-action'] = yang.gdata.Leaf('export-default-action', 'enumeration', _export_default_action, ns='http://yang.juniper.net/junos/conf/root')
        if _import_default_action is not None:
            res.children['import-default-action'] = yang.gdata.Leaf('import-default-action', 'enumeration', _import_default_action, ns='http://yang.juniper.net/junos/conf/root')
        if _vrf_target is not None:
            res.children['vrf-target'] = _vrf_target.to_gdata()
        if _no_vrf_advertise is not None:
            res.children['no-vrf-advertise'] = yang.gdata.Leaf('no-vrf-advertise', 'empty', _no_vrf_advertise, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance_entry:
        return junos_conf_root__configuration__routing_instances__instance_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), instance_type=n.get_opt_str("instance-type"), interface=junos_conf_root__configuration__routing_instances__instance__interface.from_gdata(n.get_list("interface")), route_distinguisher=junos_conf_root__configuration__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_container("route-distinguisher")), vrf_import=n.get_opt_strs("vrf-import"), vrf_export=n.get_opt_strs("vrf-export"), export_default_action=n.get_opt_str("export-default-action"), import_default_action=n.get_opt_str("import-default-action"), vrf_target=junos_conf_root__configuration__routing_instances__instance__vrf_target.from_gdata(n.get_opt_container("vrf-target")), no_vrf_advertise=n.get_opt_bool("no-vrf-advertise"))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__routing_instances__instance_entry:
        return junos_conf_root__configuration__routing_instances__instance_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), instance_type=yang.gdata.from_xml_opt_str(n, "instance-type"), interface=junos_conf_root__configuration__routing_instances__instance__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), route_distinguisher=junos_conf_root__configuration__routing_instances__instance__route_distinguisher.from_xml(yang.gdata.get_xml_opt_child(n, "route-distinguisher")), vrf_import=yang.gdata.from_xml_opt_strs(n, "vrf-import"), vrf_export=yang.gdata.from_xml_opt_strs(n, "vrf-export"), export_default_action=yang.gdata.from_xml_opt_str(n, "export-default-action"), import_default_action=yang.gdata.from_xml_opt_str(n, "import-default-action"), vrf_target=junos_conf_root__configuration__routing_instances__instance__vrf_target.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-target")), no_vrf_advertise=yang.gdata.from_xml_opt_bool(n, "no-vrf-advertise"))

class junos_conf_root__configuration__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'instance'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('instance', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__routing_instances__instance_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__routing_instances__instance_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__routing_instances__instance_entry.from_xml(node))
        return res


class junos_conf_root__configuration__routing_instances(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    instance: junos_conf_root__configuration__routing_instances__instance

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, instance: list[junos_conf_root__configuration__routing_instances__instance_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.instance = junos_conf_root__configuration__routing_instances__instance(elements=instance)
        self.instance._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('routing-instances', ns=self._ns)
        _instance = self.instance
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _instance is not None:
            res.children['instance'] = _instance.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances:
        if n != None:
            return junos_conf_root__configuration__routing_instances(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), instance=junos_conf_root__configuration__routing_instances__instance.from_gdata(n.get_list("instance")))
        return junos_conf_root__configuration__routing_instances()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances:
        if n != None:
            return junos_conf_root__configuration__routing_instances(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), instance=junos_conf_root__configuration__routing_instances__instance.from_xml(yang.gdata.get_xml_children(n, "instance")))
        return junos_conf_root__configuration__routing_instances()


class junos_conf_root__configuration__groups__when__time__to(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    end_time: ?str

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, end_time: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.end_time = end_time

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('to', ns=self._ns)
        _end_time = self.end_time
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _end_time is not None:
            res.children['end-time'] = yang.gdata.Leaf('end-time', 'string', _end_time, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when__time__to:
        if n != None:
            return junos_conf_root__configuration__groups__when__time__to(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), end_time=n.get_opt_str("end-time"))
        return junos_conf_root__configuration__groups__when__time__to()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when__time__to:
        if n != None:
            return junos_conf_root__configuration__groups__when__time__to(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), end_time=yang.gdata.from_xml_opt_str(n, "end-time"))
        return junos_conf_root__configuration__groups__when__time__to()


class junos_conf_root__configuration__groups__when__time(yang.adata.MNode):
    start_time: ?str
    to: junos_conf_root__configuration__groups__when__time__to

    def __init__(self, start_time: ?str, to: ?junos_conf_root__configuration__groups__when__time__to=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.start_time = start_time
        if to is not None:
            self.to = to
        else:
            self.to = junos_conf_root__configuration__groups__when__time__to()
        self_to = self.to
        if self_to is not None:
            self_to._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('time', ns=self._ns)
        _start_time = self.start_time
        _to = self.to
        if _start_time is not None:
            res.children['start-time'] = yang.gdata.Leaf('start-time', 'string', _start_time, ns='http://yang.juniper.net/junos/conf/root')
        if _to is not None:
            res.children['to'] = _to.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when__time:
        if n != None:
            return junos_conf_root__configuration__groups__when__time(start_time=n.get_opt_str("start-time"), to=junos_conf_root__configuration__groups__when__time__to.from_gdata(n.get_opt_container("to")))
        return junos_conf_root__configuration__groups__when__time()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when__time:
        if n != None:
            return junos_conf_root__configuration__groups__when__time(start_time=yang.gdata.from_xml_opt_str(n, "start-time"), to=junos_conf_root__configuration__groups__when__time__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")))
        return junos_conf_root__configuration__groups__when__time()


class junos_conf_root__configuration__groups__when(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    time: junos_conf_root__configuration__groups__when__time
    peers: list[str]
    chassis: ?str
    model: ?str
    routing_engine: ?str
    member: ?str
    node: ?str

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, time: ?junos_conf_root__configuration__groups__when__time=None, peers: ?list[str]=None, chassis: ?str, model: ?str, routing_engine: ?str, member: ?str, node: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        if time is not None:
            self.time = time
        else:
            self.time = junos_conf_root__configuration__groups__when__time()
        self_time = self.time
        if self_time is not None:
            self_time._parent = self
        if peers is not None:
            self.peers = peers
        else:
            self.peers = []
        self.chassis = chassis
        self.model = model
        self.routing_engine = routing_engine
        self.member = member
        self.node = node

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('when', ns=self._ns)
        _time = self.time
        _chassis = self.chassis
        _model = self.model
        _routing_engine = self.routing_engine
        _member = self.member
        _node = self.node
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _time is not None:
            res.children['time'] = _time.to_gdata()
        res.children['peers'] = yang.gdata.LeafList('peers', self.peers, ns='http://yang.juniper.net/junos/conf/root')
        if _chassis is not None:
            res.children['chassis'] = yang.gdata.Leaf('chassis', 'enumeration', _chassis, ns='http://yang.juniper.net/junos/conf/root')
        if _model is not None:
            res.children['model'] = yang.gdata.Leaf('model', 'string', _model, ns='http://yang.juniper.net/junos/conf/root')
        if _routing_engine is not None:
            res.children['routing-engine'] = yang.gdata.Leaf('routing-engine', 'enumeration', _routing_engine, ns='http://yang.juniper.net/junos/conf/root')
        if _member is not None:
            res.children['member'] = yang.gdata.Leaf('member', 'string', _member, ns='http://yang.juniper.net/junos/conf/root')
        if _node is not None:
            res.children['node'] = yang.gdata.Leaf('node', 'enumeration', _node, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when:
        if n != None:
            return junos_conf_root__configuration__groups__when(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), time=junos_conf_root__configuration__groups__when__time.from_gdata(n.get_opt_container("time")), peers=n.get_opt_strs("peers"), chassis=n.get_opt_str("chassis"), model=n.get_opt_str("model"), routing_engine=n.get_opt_str("routing-engine"), member=n.get_opt_str("member"), node=n.get_opt_str("node"))
        return junos_conf_root__configuration__groups__when()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when:
        if n != None:
            return junos_conf_root__configuration__groups__when(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), time=junos_conf_root__configuration__groups__when__time.from_xml(yang.gdata.get_xml_opt_child(n, "time")), peers=yang.gdata.from_xml_opt_strs(n, "peers"), chassis=yang.gdata.from_xml_opt_str(n, "chassis"), model=yang.gdata.from_xml_opt_str(n, "model"), routing_engine=yang.gdata.from_xml_opt_str(n, "routing-engine"), member=yang.gdata.from_xml_opt_str(n, "member"), node=yang.gdata.from_xml_opt_str(n, "node"))
        return junos_conf_root__configuration__groups__when()


class junos_conf_root__configuration__groups__system(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    host_name: ?str

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, host_name: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.host_name = host_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('system', ns=self._ns)
        _host_name = self.host_name
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _host_name is not None:
            res.children['host-name'] = yang.gdata.Leaf('host-name', 'string', _host_name, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__system:
        if n != None:
            return junos_conf_root__configuration__groups__system(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), host_name=n.get_opt_str("host-name"))
        return junos_conf_root__configuration__groups__system()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__system:
        if n != None:
            return junos_conf_root__configuration__groups__system(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), host_name=yang.gdata.from_xml_opt_str(n, "host-name"))
        return junos_conf_root__configuration__groups__system()


class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"))

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('address', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    address: junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, address: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.address = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(elements=address)
        self.address._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('inet', ns=self._ns)
        _address = self.address
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _address is not None:
            res.children['address'] = _address.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address.from_gdata(n.get_list("address")))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet()


class junos_conf_root__configuration__groups__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet

    def __init__(self, inet: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if inet is not None:
            self.inet = inet
        else:
            self.inet = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet()
        self_inet = self.inet
        if self_inet is not None:
            self_inet._parent = self

    def create_inet(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('family', ns=self._ns)
        _inet = self.inet
        if _inet is not None:
            res.children['inet'] = _inet.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family(inet=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_container("inet")))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family(inet=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet.from_xml(yang.gdata.get_xml_opt_child(n, "inet")))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family()


class junos_conf_root__configuration__groups__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    alias: ?str
    description: ?str
    security_group: list[str]
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__groups__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, alias: ?str, description: ?str, security_group: ?list[str]=None, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.alias = alias
        self.description = description
        if security_group is not None:
            self.security_group = security_group
        else:
            self.security_group = []
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        if family is not None:
            self.family = family
        else:
            self.family = junos_conf_root__configuration__groups__interfaces__interface__unit__family()
        self_family = self.family
        if self_family is not None:
            self_family._parent = self
        self.mtu = mtu
        self.mac = mac

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _alias = self.alias
        _description = self.description
        _vlan_id = self.vlan_id
        _encapsulation = self.encapsulation
        _family = self.family
        _mtu = self.mtu
        _mac = self.mac
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _alias is not None:
            res.children['alias'] = yang.gdata.Leaf('alias', 'string', _alias, ns='http://yang.juniper.net/junos/conf/root')
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://yang.juniper.net/junos/conf/root')
        res.children['security-group'] = yang.gdata.LeafList('security-group', self.security_group, ns='http://yang.juniper.net/junos/conf/root')
        if _vlan_id is not None:
            res.children['vlan-id'] = yang.gdata.Leaf('vlan-id', 'string', _vlan_id, ns='http://yang.juniper.net/junos/conf/root')
        if _encapsulation is not None:
            res.children['encapsulation'] = yang.gdata.Leaf('encapsulation', 'enumeration', _encapsulation, ns='http://yang.juniper.net/junos/conf/root')
        if _family is not None:
            res.children['family'] = _family.to_gdata()
        if _mtu is not None:
            res.children['mtu'] = yang.gdata.Leaf('mtu', 'union', _mtu, ns='http://yang.juniper.net/junos/conf/root')
        if _mac is not None:
            res.children['mac'] = yang.gdata.Leaf('mac', 'string', _mac, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), alias=n.get_opt_str("alias"), description=n.get_opt_str("description"), security_group=n.get_opt_strs("security-group"), vlan_id=n.get_opt_str("vlan-id"), encapsulation=n.get_opt_str("encapsulation"), family=junos_conf_root__configuration__groups__interfaces__interface__unit__family.from_gdata(n.get_opt_container("family")), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), alias=yang.gdata.from_xml_opt_str(n, "alias"), description=yang.gdata.from_xml_opt_str(n, "description"), security_group=yang.gdata.from_xml_opt_strs(n, "security-group"), vlan_id=yang.gdata.from_xml_opt_str(n, "vlan-id"), encapsulation=yang.gdata.from_xml_opt_str(n, "encapsulation"), family=junos_conf_root__configuration__groups__interfaces__interface__unit__family.from_xml(yang.gdata.get_xml_opt_child(n, "family")), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"))

class junos_conf_root__configuration__groups__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'unit'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('unit', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__interfaces__interface_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__groups__interfaces__interface__unit

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__groups__interfaces__interface__unit(elements=unit)
        self.unit._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _description = self.description
        _mtu = self.mtu
        _mac = self.mac
        _native_vlan_id = self.native_vlan_id
        _unit = self.unit
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', 'string', _description, ns='http://yang.juniper.net/junos/conf/root')
        if _mtu is not None:
            res.children['mtu'] = yang.gdata.Leaf('mtu', 'union', _mtu, ns='http://yang.juniper.net/junos/conf/root')
        if _mac is not None:
            res.children['mac'] = yang.gdata.Leaf('mac', 'string', _mac, ns='http://yang.juniper.net/junos/conf/root')
        if _native_vlan_id is not None:
            res.children['native-vlan-id'] = yang.gdata.Leaf('native-vlan-id', 'union', _native_vlan_id, ns='http://yang.juniper.net/junos/conf/root')
        if _unit is not None:
            res.children['unit'] = _unit.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface_entry:
        return junos_conf_root__configuration__groups__interfaces__interface_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), description=n.get_opt_str("description"), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"), native_vlan_id=n.get_opt_value("native-vlan-id"), unit=junos_conf_root__configuration__groups__interfaces__interface__unit.from_gdata(n.get_list("unit")))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface_entry:
        return junos_conf_root__configuration__groups__interfaces__interface_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), description=yang.gdata.from_xml_opt_str(n, "description"), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"), native_vlan_id=yang.gdata.from_xml_opt_value(n, "native-vlan-id"), unit=junos_conf_root__configuration__groups__interfaces__interface__unit.from_xml(yang.gdata.get_xml_children(n, "unit")))

class junos_conf_root__configuration__groups__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__groups__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__interfaces(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    interface: junos_conf_root__configuration__groups__interfaces__interface

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, interface: list[junos_conf_root__configuration__groups__interfaces__interface_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.interface = junos_conf_root__configuration__groups__interfaces__interface(elements=interface)
        self.interface._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('interfaces', ns=self._ns)
        _interface = self.interface
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _interface is not None:
            res.children['interface'] = _interface.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), interface=junos_conf_root__configuration__groups__interfaces__interface.from_gdata(n.get_list("interface")))
        return junos_conf_root__configuration__groups__interfaces()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__interfaces:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), interface=junos_conf_root__configuration__groups__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return junos_conf_root__configuration__groups__interfaces()


class junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _any = self.any
        _unicast = self.unicast
        _multicast = self.multicast
        _primary = self.primary
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _any is not None:
            res.children['any'] = yang.gdata.Leaf('any', 'empty', _any, ns='http://yang.juniper.net/junos/conf/root')
        if _unicast is not None:
            res.children['unicast'] = yang.gdata.Leaf('unicast', 'empty', _unicast, ns='http://yang.juniper.net/junos/conf/root')
        if _multicast is not None:
            res.children['multicast'] = yang.gdata.Leaf('multicast', 'empty', _multicast, ns='http://yang.juniper.net/junos/conf/root')
        if _primary is not None:
            res.children['primary'] = yang.gdata.Leaf('primary', 'empty', _primary, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), any=n.get_opt_bool("any"), unicast=n.get_opt_bool("unicast"), multicast=n.get_opt_bool("multicast"), primary=n.get_opt_bool("primary"))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), any=yang.gdata.from_xml_opt_bool(n, "any"), unicast=yang.gdata.from_xml_opt_bool(n, "unicast"), multicast=yang.gdata.from_xml_opt_bool(n, "multicast"), primary=yang.gdata.from_xml_opt_bool(n, "primary"))

class junos_conf_root__configuration__groups__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance__interface_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance__interface_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    def __init__(self, rd_type: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rd_type = rd_type

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('route-distinguisher', ns=self._ns)
        _rd_type = self.rd_type
        if _rd_type is not None:
            res.children['rd-type'] = yang.gdata.Leaf('rd-type', 'string', _rd_type, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str("rd-type"))
        return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(rd_type=yang.gdata.from_xml_opt_str(n, "rd-type"))
        return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()


class junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('vrf-target', ns=self._ns)
        _community = self.community
        _import_ = self.import_
        _export = self.export
        _auto = self.auto
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _community is not None:
            res.children['community'] = yang.gdata.Leaf('community', 'string', _community, ns='http://yang.juniper.net/junos/conf/root')
        if _import_ is not None:
            res.children['import'] = yang.gdata.Leaf('import', 'string', _import_, ns='http://yang.juniper.net/junos/conf/root')
        if _export is not None:
            res.children['export'] = yang.gdata.Leaf('export', 'string', _export, ns='http://yang.juniper.net/junos/conf/root')
        if _auto is not None:
            res.children['auto'] = yang.gdata.Leaf('auto', 'empty', _auto, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), community=n.get_opt_str("community"), import_=n.get_opt_str("import"), export=n.get_opt_str("export"), auto=n.get_opt_bool("auto"))
        return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), community=yang.gdata.from_xml_opt_str(n, "community"), import_=yang.gdata.from_xml_opt_str(n, "import"), export=yang.gdata.from_xml_opt_str(n, "export"), auto=yang.gdata.from_xml_opt_bool(n, "auto"))
        return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()


class junos_conf_root__configuration__groups__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    instance_type: ?str
    interface: junos_conf_root__configuration__groups__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher
    vrf_import: list[str]
    vrf_export: list[str]
    export_default_action: ?str
    import_default_action: ?str
    vrf_target: junos_conf_root__configuration__groups__routing_instances__instance__vrf_target
    no_vrf_advertise: ?bool

    def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, instance_type: ?str, interface: list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher=None, vrf_import: ?list[str]=None, vrf_export: ?list[str]=None, export_default_action: ?str, import_default_action: ?str, vrf_target: ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_target=None, no_vrf_advertise: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.instance_type = instance_type
        self.interface = junos_conf_root__configuration__groups__routing_instances__instance__interface(elements=interface)
        self.interface._parent = self
        if route_distinguisher is not None:
            self.route_distinguisher = route_distinguisher
        else:
            self.route_distinguisher = junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()
        self_route_distinguisher = self.route_distinguisher
        if self_route_distinguisher is not None:
            self_route_distinguisher._parent = self
        if vrf_import is not None:
            self.vrf_import = vrf_import
        else:
            self.vrf_import = []
        if vrf_export is not None:
            self.vrf_export = vrf_export
        else:
            self.vrf_export = []
        self.export_default_action = export_default_action
        self.import_default_action = import_default_action
        if vrf_target is not None:
            self.vrf_target = vrf_target
        else:
            self.vrf_target = junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()
        self_vrf_target = self.vrf_target
        if self_vrf_target is not None:
            self_vrf_target._parent = self
        self.no_vrf_advertise = no_vrf_advertise

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _instance_type = self.instance_type
        _interface = self.interface
        _route_distinguisher = self.route_distinguisher
        _export_default_action = self.export_default_action
        _import_default_action = self.import_default_action
        _vrf_target = self.vrf_target
        _no_vrf_advertise = self.no_vrf_advertise
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _instance_type is not None:
            res.children['instance-type'] = yang.gdata.Leaf('instance-type', 'enumeration', _instance_type, ns='http://yang.juniper.net/junos/conf/root')
        if _interface is not None:
            res.children['interface'] = _interface.to_gdata()
        if _route_distinguisher is not None:
            res.children['route-distinguisher'] = _route_distinguisher.to_gdata()
        res.children['vrf-import'] = yang.gdata.LeafList('vrf-import', self.vrf_import, ns='http://yang.juniper.net/junos/conf/root')
        res.children['vrf-export'] = yang.gdata.LeafList('vrf-export', self.vrf_export, ns='http://yang.juniper.net/junos/conf/root')
        if _export_default_action is not None:
            res.children['export-default-action'] = yang.gdata.Leaf('export-default-action', 'enumeration', _export_default_action, ns='http://yang.juniper.net/junos/conf/root')
        if _import_default_action is not None:
            res.children['import-default-action'] = yang.gdata.Leaf('import-default-action', 'enumeration', _import_default_action, ns='http://yang.juniper.net/junos/conf/root')
        if _vrf_target is not None:
            res.children['vrf-target'] = _vrf_target.to_gdata()
        if _no_vrf_advertise is not None:
            res.children['no-vrf-advertise'] = yang.gdata.Leaf('no-vrf-advertise', 'empty', _no_vrf_advertise, ns='http://yang.juniper.net/junos/conf/root')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), instance_type=n.get_opt_str("instance-type"), interface=junos_conf_root__configuration__groups__routing_instances__instance__interface.from_gdata(n.get_list("interface")), route_distinguisher=junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_container("route-distinguisher")), vrf_import=n.get_opt_strs("vrf-import"), vrf_export=n.get_opt_strs("vrf-export"), export_default_action=n.get_opt_str("export-default-action"), import_default_action=n.get_opt_str("import-default-action"), vrf_target=junos_conf_root__configuration__groups__routing_instances__instance__vrf_target.from_gdata(n.get_opt_container("vrf-target")), no_vrf_advertise=n.get_opt_bool("no-vrf-advertise"))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), instance_type=yang.gdata.from_xml_opt_str(n, "instance-type"), interface=junos_conf_root__configuration__groups__routing_instances__instance__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), route_distinguisher=junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher.from_xml(yang.gdata.get_xml_opt_child(n, "route-distinguisher")), vrf_import=yang.gdata.from_xml_opt_strs(n, "vrf-import"), vrf_export=yang.gdata.from_xml_opt_strs(n, "vrf-export"), export_default_action=yang.gdata.from_xml_opt_str(n, "export-default-action"), import_default_action=yang.gdata.from_xml_opt_str(n, "import-default-action"), vrf_target=junos_conf_root__configuration__groups__routing_instances__instance__vrf_target.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-target")), no_vrf_advertise=yang.gdata.from_xml_opt_bool(n, "no-vrf-advertise"))

class junos_conf_root__configuration__groups__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'instance'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('instance', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__routing_instances__instance_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__routing_instances(yang.adata.MNode):
    apply_groups: list[str]
    apply_groups_except: list[str]
    instance: junos_conf_root__configuration__groups__routing_instances__instance

    def __init__(self, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, instance: list[junos_conf_root__configuration__groups__routing_instances__instance_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.instance = junos_conf_root__configuration__groups__routing_instances__instance(elements=instance)
        self.instance._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('routing-instances', ns=self._ns)
        _instance = self.instance
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups-except'] = yang.gdata.LeafList('apply-groups-except', self.apply_groups_except, ns='http://yang.juniper.net/junos/conf/root')
        if _instance is not None:
            res.children['instance'] = _instance.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances(apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), instance=junos_conf_root__configuration__groups__routing_instances__instance.from_gdata(n.get_list("instance")))
        return junos_conf_root__configuration__groups__routing_instances()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances(apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), instance=junos_conf_root__configuration__groups__routing_instances__instance.from_xml(yang.gdata.get_xml_children(n, "instance")))
        return junos_conf_root__configuration__groups__routing_instances()


class junos_conf_root__configuration__groups_entry(yang.adata.MNode):
    name: str
    when: junos_conf_root__configuration__groups__when
    rcsid: ?str
    version: ?str
    apply_groups: list[str]
    system: junos_conf_root__configuration__groups__system
    interfaces: junos_conf_root__configuration__groups__interfaces
    routing_instances: junos_conf_root__configuration__groups__routing_instances

    def __init__(self, name: str, when: ?junos_conf_root__configuration__groups__when=None, rcsid: ?str, version: ?str, apply_groups: ?list[str]=None, system: ?junos_conf_root__configuration__groups__system=None, interfaces: ?junos_conf_root__configuration__groups__interfaces=None, routing_instances: ?junos_conf_root__configuration__groups__routing_instances=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if when is not None:
            self.when = when
        else:
            self.when = junos_conf_root__configuration__groups__when()
        self_when = self.when
        if self_when is not None:
            self_when._parent = self
        self.rcsid = rcsid
        self.version = version
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if system is not None:
            self.system = system
        else:
            self.system = junos_conf_root__configuration__groups__system()
        self_system = self.system
        if self_system is not None:
            self_system._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = junos_conf_root__configuration__groups__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if routing_instances is not None:
            self.routing_instances = routing_instances
        else:
            self.routing_instances = junos_conf_root__configuration__groups__routing_instances()
        self_routing_instances = self.routing_instances
        if self_routing_instances is not None:
            self_routing_instances._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _when = self.when
        _rcsid = self.rcsid
        _version = self.version
        _system = self.system
        _interfaces = self.interfaces
        _routing_instances = self.routing_instances
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://yang.juniper.net/junos/conf/root')
        if _when is not None:
            res.children['when'] = _when.to_gdata()
        if _rcsid is not None:
            res.children['rcsid'] = yang.gdata.Leaf('rcsid', 'string', _rcsid, ns='http://yang.juniper.net/junos/conf/root')
        if _version is not None:
            res.children['version'] = yang.gdata.Leaf('version', 'string', _version, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        if _system is not None:
            res.children['system'] = _system.to_gdata()
        if _interfaces is not None:
            res.children['interfaces'] = _interfaces.to_gdata()
        if _routing_instances is not None:
            res.children['routing-instances'] = _routing_instances.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups_entry:
        return junos_conf_root__configuration__groups_entry(name=n.get_str("name"), when=junos_conf_root__configuration__groups__when.from_gdata(n.get_opt_container("when")), rcsid=n.get_opt_str("rcsid"), version=n.get_opt_str("version"), apply_groups=n.get_opt_strs("apply-groups"), system=junos_conf_root__configuration__groups__system.from_gdata(n.get_opt_container("system")), interfaces=junos_conf_root__configuration__groups__interfaces.from_gdata(n.get_opt_container("interfaces")), routing_instances=junos_conf_root__configuration__groups__routing_instances.from_gdata(n.get_opt_container("routing-instances")))

    @staticmethod
    def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups_entry:
        return junos_conf_root__configuration__groups_entry(name=yang.gdata.from_xml_str(n, "name"), when=junos_conf_root__configuration__groups__when.from_xml(yang.gdata.get_xml_opt_child(n, "when")), rcsid=yang.gdata.from_xml_opt_str(n, "rcsid"), version=yang.gdata.from_xml_opt_str(n, "version"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), system=junos_conf_root__configuration__groups__system.from_xml(yang.gdata.get_xml_opt_child(n, "system")), interfaces=junos_conf_root__configuration__groups__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), routing_instances=junos_conf_root__configuration__groups__routing_instances.from_xml(yang.gdata.get_xml_opt_child(n, "routing-instances")))

class junos_conf_root__configuration__groups(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups_entry]
    def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'groups'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = junos_conf_root__configuration__groups_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('groups', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[junos_conf_root__configuration__groups_entry]:
        res = []
        for e in n.elements:
            res.append(junos_conf_root__configuration__groups_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups_entry.from_xml(node))
        return res


class junos_conf_root__configuration(yang.adata.MNode):
    rcsid: ?str
    version: ?str
    apply_groups: list[str]
    system: junos_conf_root__configuration__system
    interfaces: junos_conf_root__configuration__interfaces
    routing_instances: junos_conf_root__configuration__routing_instances
    groups: junos_conf_root__configuration__groups

    def __init__(self, rcsid: ?str, version: ?str, apply_groups: ?list[str]=None, system: ?junos_conf_root__configuration__system=None, interfaces: ?junos_conf_root__configuration__interfaces=None, routing_instances: ?junos_conf_root__configuration__routing_instances=None, groups: list[junos_conf_root__configuration__groups_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rcsid = rcsid
        self.version = version
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if system is not None:
            self.system = system
        else:
            self.system = junos_conf_root__configuration__system()
        self_system = self.system
        if self_system is not None:
            self_system._parent = self
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = junos_conf_root__configuration__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if routing_instances is not None:
            self.routing_instances = routing_instances
        else:
            self.routing_instances = junos_conf_root__configuration__routing_instances()
        self_routing_instances = self.routing_instances
        if self_routing_instances is not None:
            self_routing_instances._parent = self
        self.groups = junos_conf_root__configuration__groups(elements=groups)
        self.groups._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('configuration', ns=self._ns)
        _rcsid = self.rcsid
        _version = self.version
        _system = self.system
        _interfaces = self.interfaces
        _routing_instances = self.routing_instances
        _groups = self.groups
        if _rcsid is not None:
            res.children['rcsid'] = yang.gdata.Leaf('rcsid', 'string', _rcsid, ns='http://yang.juniper.net/junos/conf/root')
        if _version is not None:
            res.children['version'] = yang.gdata.Leaf('version', 'string', _version, ns='http://yang.juniper.net/junos/conf/root')
        res.children['apply-groups'] = yang.gdata.LeafList('apply-groups', self.apply_groups, ns='http://yang.juniper.net/junos/conf/root')
        if _system is not None:
            res.children['system'] = _system.to_gdata()
        if _interfaces is not None:
            res.children['interfaces'] = _interfaces.to_gdata()
        if _routing_instances is not None:
            res.children['routing-instances'] = _routing_instances.to_gdata()
        if _groups is not None:
            res.children['groups'] = _groups.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration:
        if n != None:
            return junos_conf_root__configuration(rcsid=n.get_opt_str("rcsid"), version=n.get_opt_str("version"), apply_groups=n.get_opt_strs("apply-groups"), system=junos_conf_root__configuration__system.from_gdata(n.get_opt_container("system")), interfaces=junos_conf_root__configuration__interfaces.from_gdata(n.get_opt_container("interfaces")), routing_instances=junos_conf_root__configuration__routing_instances.from_gdata(n.get_opt_container("routing-instances")), groups=junos_conf_root__configuration__groups.from_gdata(n.get_list("groups")))
        return junos_conf_root__configuration()

    @staticmethod
    def from_xml(n: ?xml.Node) -> junos_conf_root__configuration:
        if n != None:
            return junos_conf_root__configuration(rcsid=yang.gdata.from_xml_opt_str(n, "rcsid"), version=yang.gdata.from_xml_opt_str(n, "version"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), system=junos_conf_root__configuration__system.from_xml(yang.gdata.get_xml_opt_child(n, "system")), interfaces=junos_conf_root__configuration__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), routing_instances=junos_conf_root__configuration__routing_instances.from_xml(yang.gdata.get_xml_opt_child(n, "routing-instances")), groups=junos_conf_root__configuration__groups.from_xml(yang.gdata.get_xml_children(n, "groups")))
        return junos_conf_root__configuration()


class root(yang.adata.MNode):
    configuration: junos_conf_root__configuration

    def __init__(self, configuration: ?junos_conf_root__configuration=None):
        self._ns = ""
        if configuration is not None:
            self.configuration = configuration
        else:
            self.configuration = junos_conf_root__configuration()
        self_configuration = self.configuration
        if self_configuration is not None:
            self_configuration._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Root()
        _configuration = self.configuration
        if _configuration is not None:
            res.children['configuration'] = _configuration.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(configuration=junos_conf_root__configuration.from_gdata(n.get_opt_container("configuration")))
        return root()

    @staticmethod
    def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(configuration=junos_conf_root__configuration.from_xml(yang.gdata.get_xml_opt_child(n, "configuration")))
        return root()

