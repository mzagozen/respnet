# WARNING WARNING WARNING WARNING WARNING
# DO NOT MODIFY THIS FILE!! This file is generated!
# WARNING WARNING WARNING WARNING WARNING

import orchestron.ttt as ttt
import yang.adata
import yang.gdata

from respnet.layers.y_2 import orchestron_rfs__rfs__base_config_entry
from respnet.layers.y_2 import orchestron_rfs__rfs__backbone_interface_entry
from respnet.layers.y_2 import orchestron_rfs__rfs__vrf_entry
from respnet.layers.y_2 import orchestron_rfs__rfs__customer_interface_entry
from respnet.layers.y_3_loose import root as output_root

def o_root():
    return output_root()


class BaseConfig(ttt.TTTRFSTransform):
    transform: mut(orchestron_rfs__rfs__base_config_entry, ttt.DeviceInfo) -> yang.adata.MNode

    mut def transform_wrapper(self, i: yang.gdata.Node, device_info: ttt.DeviceInfo) -> yang.gdata.Node:
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = orchestron_rfs__rfs__base_config_entry.from_gdata(i)
        return self.transform(modeled_input, device_info).to_gdata()

class BBInterface(ttt.TTTRFSTransform):
    transform: mut(orchestron_rfs__rfs__backbone_interface_entry, ttt.DeviceInfo) -> yang.adata.MNode

    mut def transform_wrapper(self, i: yang.gdata.Node, device_info: ttt.DeviceInfo) -> yang.gdata.Node:
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = orchestron_rfs__rfs__backbone_interface_entry.from_gdata(i)
        return self.transform(modeled_input, device_info).to_gdata()

class Vrf(ttt.TTTRFSTransform):
    transform: mut(orchestron_rfs__rfs__vrf_entry, ttt.DeviceInfo) -> yang.adata.MNode

    mut def transform_wrapper(self, i: yang.gdata.Node, device_info: ttt.DeviceInfo) -> yang.gdata.Node:
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = orchestron_rfs__rfs__vrf_entry.from_gdata(i)
        return self.transform(modeled_input, device_info).to_gdata()

class CustomerInterface(ttt.TTTRFSTransform):
    transform: mut(orchestron_rfs__rfs__customer_interface_entry, ttt.DeviceInfo) -> yang.adata.MNode

    mut def transform_wrapper(self, i: yang.gdata.Node, device_info: ttt.DeviceInfo) -> yang.gdata.Node:
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = orchestron_rfs__rfs__customer_interface_entry.from_gdata(i)
        return self.transform(modeled_input, device_info).to_gdata()
