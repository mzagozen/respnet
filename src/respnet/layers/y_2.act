import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class orchestron_rfs__device__address__initial_credentials_entry(yang.adata.MNode):
    username: str
    password: str
    key: str

    mut def __init__(self, username: str, password: str, key: str):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self.username = username
        self.password = password
        self.key = key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        _password = self.password
        _key = self.key
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        return yang.gdata.ListElement([str(self.username), str(self.password), str(self.key)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__address__initial_credentials_entry:
        return orchestron_rfs__device__address__initial_credentials_entry(username=n.get_str("username"), password=n.get_str("password"), key=n.get_str("key"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__device__address__initial_credentials_entry:
        return orchestron_rfs__device__address__initial_credentials_entry(username=yang.gdata.from_xml_str(n, "username"), password=yang.gdata.from_xml_str(n, "password"), key=yang.gdata.from_xml_str(n, "key"))

class orchestron_rfs__device__address__initial_credentials(yang.adata.MNode):
    elements: list[orchestron_rfs__device__address__initial_credentials_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self._name = 'initial-credentials'
        self.elements = elements

    mut def create(self, username, password, key):
        for e in self.elements:
            match = True
            if e.username != username:
                match = False
                break
            if e.password != password:
                match = False
                break
            if e.key != key:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__device__address__initial_credentials_entry(username, password, key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['username', 'password', 'key'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__device__address__initial_credentials_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__device__address__initial_credentials_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__device__address__initial_credentials_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__device__address__initial_credentials_entry.from_xml(node))
        return res


class orchestron_rfs__device__address_entry(yang.adata.MNode):
    name: str
    address: str
    port: ?str
    initial_credentials: orchestron_rfs__device__address__initial_credentials

    mut def __init__(self, name: str, address: str, port: ?str, initial_credentials: list[orchestron_rfs__device__address__initial_credentials_entry]=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self.name = name
        self.address = address
        self.port = port
        self.initial_credentials = orchestron_rfs__device__address__initial_credentials(elements=initial_credentials)
        self.initial_credentials._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _address = self.address
        _port = self.port
        _initial_credentials = self.initial_credentials
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        if _port is not None:
            children['port'] = yang.gdata.Leaf('string', _port)
        if _initial_credentials is not None:
            children['initial-credentials'] = _initial_credentials.to_gdata()
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__address_entry:
        return orchestron_rfs__device__address_entry(name=n.get_str("name"), address=n.get_str("address"), port=n.get_opt_str("port"), initial_credentials=orchestron_rfs__device__address__initial_credentials.from_gdata(n.get_list("initial-credentials")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__device__address_entry:
        return orchestron_rfs__device__address_entry(name=yang.gdata.from_xml_str(n, "name"), address=yang.gdata.from_xml_str(n, "address"), port=yang.gdata.from_xml_opt_str(n, "port"), initial_credentials=orchestron_rfs__device__address__initial_credentials.from_xml(yang.gdata.get_xml_children(n, "initial-credentials")))

class orchestron_rfs__device__address(yang.adata.MNode):
    elements: list[orchestron_rfs__device__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name, address):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__device__address_entry(name, address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__device__address_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__device__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__device__address_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__device__address_entry.from_xml(node))
        return res


class orchestron_rfs__device__credentials__key_entry(yang.adata.MNode):
    key: str
    private_key: ?str

    mut def __init__(self, key: str, private_key: ?str):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self.key = key
        self.private_key = private_key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _key = self.key
        _private_key = self.private_key
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        if _private_key is not None:
            children['private-key'] = yang.gdata.Leaf('string', _private_key)
        return yang.gdata.ListElement([str(self.key)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__credentials__key_entry:
        return orchestron_rfs__device__credentials__key_entry(key=n.get_str("key"), private_key=n.get_opt_str("private-key"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__device__credentials__key_entry:
        return orchestron_rfs__device__credentials__key_entry(key=yang.gdata.from_xml_str(n, "key"), private_key=yang.gdata.from_xml_opt_str(n, "private-key"))

class orchestron_rfs__device__credentials__key(yang.adata.MNode):
    elements: list[orchestron_rfs__device__credentials__key_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self._name = 'key'
        self.elements = elements

    mut def create(self, key):
        for e in self.elements:
            match = True
            if e.key != key:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__device__credentials__key_entry(key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['key'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__device__credentials__key_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__device__credentials__key_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__device__credentials__key_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__device__credentials__key_entry.from_xml(node))
        return res


class orchestron_rfs__device__credentials(yang.adata.MNode):
    username: str
    password: ?str
    key: orchestron_rfs__device__credentials__key

    mut def __init__(self, username: str, password: ?str, key: list[orchestron_rfs__device__credentials__key_entry]=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self.username = username
        self.password = password
        self.key = orchestron_rfs__device__credentials__key(elements=key)
        self.key._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        _password = self.password
        _key = self.key
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__device__credentials:
        if n != None:
            return orchestron_rfs__device__credentials(username=n.get_str("username"), password=n.get_opt_str("password"), key=orchestron_rfs__device__credentials__key.from_gdata(n.get_list("key")))
        raise ValueError("Missing required subtree orchestron_rfs__device__credentials")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> orchestron_rfs__device__credentials:
        if n != None:
            return orchestron_rfs__device__credentials(username=yang.gdata.from_xml_str(n, "username"), password=yang.gdata.from_xml_opt_str(n, "password"), key=orchestron_rfs__device__credentials__key.from_xml(yang.gdata.get_xml_children(n, "key")))
        raise ValueError("Missing required subtree orchestron_rfs__device__credentials")


class orchestron_rfs__device__initial_credentials_entry(yang.adata.MNode):
    username: str
    password: str
    key: str

    mut def __init__(self, username: str, password: str, key: str):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self.username = username
        self.password = password
        self.key = key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        _password = self.password
        _key = self.key
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        return yang.gdata.ListElement([str(self.username), str(self.password), str(self.key)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__initial_credentials_entry:
        return orchestron_rfs__device__initial_credentials_entry(username=n.get_str("username"), password=n.get_str("password"), key=n.get_str("key"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__device__initial_credentials_entry:
        return orchestron_rfs__device__initial_credentials_entry(username=yang.gdata.from_xml_str(n, "username"), password=yang.gdata.from_xml_str(n, "password"), key=yang.gdata.from_xml_str(n, "key"))

class orchestron_rfs__device__initial_credentials(yang.adata.MNode):
    elements: list[orchestron_rfs__device__initial_credentials_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self._name = 'initial-credentials'
        self.elements = elements

    mut def create(self, username, password, key):
        for e in self.elements:
            match = True
            if e.username != username:
                match = False
                break
            if e.password != password:
                match = False
                break
            if e.key != key:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__device__initial_credentials_entry(username, password, key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['username', 'password', 'key'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__device__initial_credentials_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__device__initial_credentials_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__device__initial_credentials_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__device__initial_credentials_entry.from_xml(node))
        return res


class orchestron_rfs__device__mock__module_entry(yang.adata.MNode):
    name: str
    namespace: str
    revision: ?str
    feature: list[str]

    mut def __init__(self, name: str, namespace: str, revision: ?str, feature: ?list[str]=None):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self.name = name
        self.namespace = namespace
        self.revision = revision
        if feature is not None:
            self.feature = feature
        else:
            self.feature = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _namespace = self.namespace
        _revision = self.revision
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _namespace is not None:
            children['namespace'] = yang.gdata.Leaf('string', _namespace)
        if _revision is not None:
            children['revision'] = yang.gdata.Leaf('string', _revision)
        children['feature'] = yang.gdata.LeafList(self.feature)
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__mock__module_entry:
        return orchestron_rfs__device__mock__module_entry(name=n.get_str("name"), namespace=n.get_str("namespace"), revision=n.get_opt_str("revision"), feature=n.get_opt_strs("feature"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__device__mock__module_entry:
        return orchestron_rfs__device__mock__module_entry(name=yang.gdata.from_xml_str(n, "name"), namespace=yang.gdata.from_xml_str(n, "namespace"), revision=yang.gdata.from_xml_opt_str(n, "revision"), feature=yang.gdata.from_xml_opt_strs(n, "feature"))

class orchestron_rfs__device__mock__module(yang.adata.MNode):
    elements: list[orchestron_rfs__device__mock__module_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self._name = 'module'
        self.elements = elements

    mut def create(self, name, namespace):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__device__mock__module_entry(name, namespace)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__device__mock__module_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__device__mock__module_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__device__mock__module_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__device__mock__module_entry.from_xml(node))
        return res


class orchestron_rfs__device__mock(yang.adata.MNode):
    preset: list[str]
    module: orchestron_rfs__device__mock__module

    mut def __init__(self, preset: ?list[str]=None, module: list[orchestron_rfs__device__mock__module_entry]=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        if preset is not None:
            self.preset = preset
        else:
            self.preset = []
        self.module = orchestron_rfs__device__mock__module(elements=module)
        self.module._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _module = self.module
        children['preset'] = yang.gdata.LeafList(self.preset)
        if _module is not None:
            children['module'] = _module.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__device__mock:
        if n != None:
            return orchestron_rfs__device__mock(preset=n.get_opt_strs("preset"), module=orchestron_rfs__device__mock__module.from_gdata(n.get_list("module")))
        return orchestron_rfs__device__mock()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> orchestron_rfs__device__mock:
        if n != None:
            return orchestron_rfs__device__mock(preset=yang.gdata.from_xml_opt_strs(n, "preset"), module=orchestron_rfs__device__mock__module.from_xml(yang.gdata.get_xml_children(n, "module")))
        return orchestron_rfs__device__mock()


class orchestron_rfs__device_entry(yang.adata.MNode):
    name: str
    description: ?str
    address: orchestron_rfs__device__address
    credentials: orchestron_rfs__device__credentials
    initial_credentials: orchestron_rfs__device__initial_credentials
    mock: orchestron_rfs__device__mock

    mut def __init__(self, name: str, credentials: orchestron_rfs__device__credentials, description: ?str, address: list[orchestron_rfs__device__address_entry]=[], initial_credentials: list[orchestron_rfs__device__initial_credentials_entry]=[], mock: ?orchestron_rfs__device__mock=None):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self.name = name
        self.description = description
        self.address = orchestron_rfs__device__address(elements=address)
        self.address._parent = self
        self.credentials = credentials
        self.credentials._parent = self
        self.initial_credentials = orchestron_rfs__device__initial_credentials(elements=initial_credentials)
        self.initial_credentials._parent = self
        if mock is not None:
            self.mock = mock
        else:
            self.mock = orchestron_rfs__device__mock()
        self_mock = self.mock
        if self_mock is not None:
            self_mock._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _address = self.address
        _credentials = self.credentials
        _initial_credentials = self.initial_credentials
        _mock = self.mock
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _address is not None:
            children['address'] = _address.to_gdata()
        if _credentials is not None:
            children['credentials'] = _credentials.to_gdata()
        if _initial_credentials is not None:
            children['initial-credentials'] = _initial_credentials.to_gdata()
        if _mock is not None:
            children['mock'] = _mock.to_gdata()
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device_entry:
        return orchestron_rfs__device_entry(name=n.get_str("name"), description=n.get_opt_str("description"), address=orchestron_rfs__device__address.from_gdata(n.get_list("address")), credentials=orchestron_rfs__device__credentials.from_gdata(n.get_container("credentials")), initial_credentials=orchestron_rfs__device__initial_credentials.from_gdata(n.get_list("initial-credentials")), mock=orchestron_rfs__device__mock.from_gdata(n.get_opt_container("mock")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__device_entry:
        return orchestron_rfs__device_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), address=orchestron_rfs__device__address.from_xml(yang.gdata.get_xml_children(n, "address")), credentials=orchestron_rfs__device__credentials.from_xml(yang.gdata.get_xml_child(n, "credentials")), initial_credentials=orchestron_rfs__device__initial_credentials.from_xml(yang.gdata.get_xml_children(n, "initial-credentials")), mock=orchestron_rfs__device__mock.from_xml(yang.gdata.get_xml_opt_child(n, "mock")))

class orchestron_rfs__device(yang.adata.MNode):
    elements: list[orchestron_rfs__device_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self._name = 'device'
        self.elements = elements

    mut def create(self, name, credentials):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__device_entry(name, credentials)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://orchestron.org/yang/orchestron-rfs.yang')

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__device_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__device_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__device_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__device_entry.from_xml(node))
        return res


class orchestron_rfs__rfs__base_config_entry(yang.adata.MNode):
    name: str
    ipv4_address: str
    ipv6_address: str

    mut def __init__(self, name: str, ipv4_address: str, ipv6_address: str):
        self._ns = "http://example.com/respnet-rfs"
        self.name = name
        self.ipv4_address = ipv4_address
        self.ipv6_address = ipv6_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _ipv4_address = self.ipv4_address
        _ipv6_address = self.ipv6_address
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        if _ipv6_address is not None:
            children['ipv6-address'] = yang.gdata.Leaf('string', _ipv6_address)
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__base_config_entry:
        return orchestron_rfs__rfs__base_config_entry(name=n.get_str("name"), ipv4_address=n.get_str("ipv4-address"), ipv6_address=n.get_str("ipv6-address"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__rfs__base_config_entry:
        return orchestron_rfs__rfs__base_config_entry(name=yang.gdata.from_xml_str(n, "name"), ipv4_address=yang.gdata.from_xml_str(n, "ipv4-address"), ipv6_address=yang.gdata.from_xml_str(n, "ipv6-address"))

class orchestron_rfs__rfs__base_config(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__base_config_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/respnet-rfs"
        self._name = 'base-config'
        self.elements = elements

    mut def create(self, name, ipv4_address, ipv6_address):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__rfs__base_config_entry(name, ipv4_address, ipv6_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/respnet-rfs')

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__rfs__base_config_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__rfs__base_config_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__rfs__base_config_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__rfs__base_config_entry.from_xml(node))
        return res


class orchestron_rfs__rfs__backbone_interface__remote(yang.adata.MNode):
    device: str
    interface: str

    mut def __init__(self, device: str, interface: str):
        self._ns = "http://example.com/respnet-rfs"
        self.device = device
        self.interface = interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device = self.device
        _interface = self.interface
        if _device is not None:
            children['device'] = yang.gdata.Leaf('string', _device)
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__rfs__backbone_interface__remote:
        if n != None:
            return orchestron_rfs__rfs__backbone_interface__remote(device=n.get_str("device"), interface=n.get_str("interface"))
        raise ValueError("Missing required subtree orchestron_rfs__rfs__backbone_interface__remote")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> orchestron_rfs__rfs__backbone_interface__remote:
        if n != None:
            return orchestron_rfs__rfs__backbone_interface__remote(device=yang.gdata.from_xml_str(n, "device"), interface=yang.gdata.from_xml_str(n, "interface"))
        raise ValueError("Missing required subtree orchestron_rfs__rfs__backbone_interface__remote")


class orchestron_rfs__rfs__backbone_interface_entry(yang.adata.MNode):
    name: str
    ipv4_address: ?str
    ipv4_prefix_length: int
    ipv6_address: ?str
    ipv6_prefix_length: ?int
    remote: orchestron_rfs__rfs__backbone_interface__remote

    mut def __init__(self, name: str, remote: orchestron_rfs__rfs__backbone_interface__remote, ipv4_address: ?str, ipv4_prefix_length: ?int=None, ipv6_address: ?str, ipv6_prefix_length: ?int):
        self._ns = "http://example.com/respnet-rfs"
        self.name = name
        self.ipv4_address = ipv4_address
        if ipv4_prefix_length != None:
            self.ipv4_prefix_length = ipv4_prefix_length
        else:
            self.ipv4_prefix_length = 30
        self.ipv6_address = ipv6_address
        self.ipv6_prefix_length = ipv6_prefix_length
        self.remote = remote
        self.remote._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _ipv4_address = self.ipv4_address
        _ipv4_prefix_length = self.ipv4_prefix_length
        _ipv6_address = self.ipv6_address
        _ipv6_prefix_length = self.ipv6_prefix_length
        _remote = self.remote
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        if _ipv4_prefix_length is not None:
            children['ipv4-prefix-length'] = yang.gdata.Leaf('uint8', _ipv4_prefix_length)
        if _ipv6_address is not None:
            children['ipv6-address'] = yang.gdata.Leaf('string', _ipv6_address)
        if _ipv6_prefix_length is not None:
            children['ipv6-prefix-length'] = yang.gdata.Leaf('uint8', _ipv6_prefix_length)
        if _remote is not None:
            children['remote'] = _remote.to_gdata()
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__backbone_interface_entry:
        return orchestron_rfs__rfs__backbone_interface_entry(name=n.get_str("name"), ipv4_address=n.get_opt_str("ipv4-address"), ipv4_prefix_length=n.get_opt_int("ipv4-prefix-length"), ipv6_address=n.get_opt_str("ipv6-address"), ipv6_prefix_length=n.get_opt_int("ipv6-prefix-length"), remote=orchestron_rfs__rfs__backbone_interface__remote.from_gdata(n.get_container("remote")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__rfs__backbone_interface_entry:
        return orchestron_rfs__rfs__backbone_interface_entry(name=yang.gdata.from_xml_str(n, "name"), ipv4_address=yang.gdata.from_xml_opt_str(n, "ipv4-address"), ipv4_prefix_length=yang.gdata.from_xml_opt_int(n, "ipv4-prefix-length"), ipv6_address=yang.gdata.from_xml_opt_str(n, "ipv6-address"), ipv6_prefix_length=yang.gdata.from_xml_opt_int(n, "ipv6-prefix-length"), remote=orchestron_rfs__rfs__backbone_interface__remote.from_xml(yang.gdata.get_xml_child(n, "remote")))

class orchestron_rfs__rfs__backbone_interface(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__backbone_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/respnet-rfs"
        self._name = 'backbone-interface'
        self.elements = elements

    mut def create(self, name, remote):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__rfs__backbone_interface_entry(name, remote)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/respnet-rfs')

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__rfs__backbone_interface_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__rfs__backbone_interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__rfs__backbone_interface_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__rfs__backbone_interface_entry.from_xml(node))
        return res


class orchestron_rfs__rfs__vrf_entry(yang.adata.MNode):
    name: str
    description: ?str

    mut def __init__(self, name: str, description: ?str):
        self._ns = "http://example.com/respnet-rfs"
        self.name = name
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__vrf_entry:
        return orchestron_rfs__rfs__vrf_entry(name=n.get_str("name"), description=n.get_opt_str("description"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__rfs__vrf_entry:
        return orchestron_rfs__rfs__vrf_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"))

class orchestron_rfs__rfs__vrf(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/respnet-rfs"
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__rfs__vrf_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/respnet-rfs')

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__rfs__vrf_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__rfs__vrf_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__rfs__vrf_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__rfs__vrf_entry.from_xml(node))
        return res


class orchestron_rfs__rfs__vrf_interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    vrf: str
    ipv4_address: ?str
    ipv4_prefix_length: int

    mut def __init__(self, name: str, vrf: str, description: ?str, ipv4_address: ?str, ipv4_prefix_length: ?int=None):
        self._ns = "http://example.com/respnet-rfs"
        self.name = name
        self.description = description
        self.vrf = vrf
        self.ipv4_address = ipv4_address
        if ipv4_prefix_length != None:
            self.ipv4_prefix_length = ipv4_prefix_length
        else:
            self.ipv4_prefix_length = 30

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _vrf = self.vrf
        _ipv4_address = self.ipv4_address
        _ipv4_prefix_length = self.ipv4_prefix_length
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf)
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        if _ipv4_prefix_length is not None:
            children['ipv4-prefix-length'] = yang.gdata.Leaf('uint8', _ipv4_prefix_length)
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__vrf_interface_entry:
        return orchestron_rfs__rfs__vrf_interface_entry(name=n.get_str("name"), description=n.get_opt_str("description"), vrf=n.get_str("vrf"), ipv4_address=n.get_opt_str("ipv4-address"), ipv4_prefix_length=n.get_opt_int("ipv4-prefix-length"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__rfs__vrf_interface_entry:
        return orchestron_rfs__rfs__vrf_interface_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), vrf=yang.gdata.from_xml_str(n, "vrf"), ipv4_address=yang.gdata.from_xml_opt_str(n, "ipv4-address"), ipv4_prefix_length=yang.gdata.from_xml_opt_int(n, "ipv4-prefix-length"))

class orchestron_rfs__rfs__vrf_interface(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__vrf_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/respnet-rfs"
        self._name = 'vrf-interface'
        self.elements = elements

    mut def create(self, name, vrf):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__rfs__vrf_interface_entry(name, vrf)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/respnet-rfs')

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__rfs__vrf_interface_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__rfs__vrf_interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__rfs__vrf_interface_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__rfs__vrf_interface_entry.from_xml(node))
        return res


class orchestron_rfs__rfs_entry(yang.adata.MNode):
    name: str
    base_config: orchestron_rfs__rfs__base_config
    backbone_interface: orchestron_rfs__rfs__backbone_interface
    vrf: orchestron_rfs__rfs__vrf
    vrf_interface: orchestron_rfs__rfs__vrf_interface

    mut def __init__(self, name: str, base_config: list[orchestron_rfs__rfs__base_config_entry]=[], backbone_interface: list[orchestron_rfs__rfs__backbone_interface_entry]=[], vrf: list[orchestron_rfs__rfs__vrf_entry]=[], vrf_interface: list[orchestron_rfs__rfs__vrf_interface_entry]=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self.name = name
        self.base_config = orchestron_rfs__rfs__base_config(elements=base_config)
        self.base_config._parent = self
        self.backbone_interface = orchestron_rfs__rfs__backbone_interface(elements=backbone_interface)
        self.backbone_interface._parent = self
        self.vrf = orchestron_rfs__rfs__vrf(elements=vrf)
        self.vrf._parent = self
        self.vrf_interface = orchestron_rfs__rfs__vrf_interface(elements=vrf_interface)
        self.vrf_interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _base_config = self.base_config
        _backbone_interface = self.backbone_interface
        _vrf = self.vrf
        _vrf_interface = self.vrf_interface
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _base_config is not None:
            children['base-config'] = _base_config.to_gdata()
        if _backbone_interface is not None:
            children['backbone-interface'] = _backbone_interface.to_gdata()
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        if _vrf_interface is not None:
            children['vrf-interface'] = _vrf_interface.to_gdata()
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs_entry:
        return orchestron_rfs__rfs_entry(name=n.get_str("name"), base_config=orchestron_rfs__rfs__base_config.from_gdata(n.get_list("base-config")), backbone_interface=orchestron_rfs__rfs__backbone_interface.from_gdata(n.get_list("backbone-interface")), vrf=orchestron_rfs__rfs__vrf.from_gdata(n.get_list("vrf")), vrf_interface=orchestron_rfs__rfs__vrf_interface.from_gdata(n.get_list("vrf-interface")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_rfs__rfs_entry:
        return orchestron_rfs__rfs_entry(name=yang.gdata.from_xml_str(n, "name"), base_config=orchestron_rfs__rfs__base_config.from_xml(yang.gdata.get_xml_children(n, "base-config", "http://example.com/respnet-rfs")), backbone_interface=orchestron_rfs__rfs__backbone_interface.from_xml(yang.gdata.get_xml_children(n, "backbone-interface", "http://example.com/respnet-rfs")), vrf=orchestron_rfs__rfs__vrf.from_xml(yang.gdata.get_xml_children(n, "vrf", "http://example.com/respnet-rfs")), vrf_interface=orchestron_rfs__rfs__vrf_interface.from_xml(yang.gdata.get_xml_children(n, "vrf-interface", "http://example.com/respnet-rfs")))

class orchestron_rfs__rfs(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://orchestron.org/yang/orchestron-rfs.yang"
        self._name = 'rfs'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = orchestron_rfs__rfs_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://orchestron.org/yang/orchestron-rfs.yang')

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[orchestron_rfs__rfs_entry]:
        res = []
        for e in n.elements:
            res.append(orchestron_rfs__rfs_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_rfs__rfs_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_rfs__rfs_entry.from_xml(node))
        return res


class root(yang.adata.MNode):
    device: orchestron_rfs__device
    rfs: orchestron_rfs__rfs

    mut def __init__(self, device: list[orchestron_rfs__device_entry]=[], rfs: list[orchestron_rfs__rfs_entry]=[]):
        self._ns = ""
        self.device = orchestron_rfs__device(elements=device)
        self.device._parent = self
        self.rfs = orchestron_rfs__rfs(elements=rfs)
        self.rfs._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device = self.device
        _rfs = self.rfs
        if _device is not None:
            children['device'] = _device.to_gdata()
        if _rfs is not None:
            children['rfs'] = _rfs.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(device=orchestron_rfs__device.from_gdata(n.get_list("device")), rfs=orchestron_rfs__rfs.from_gdata(n.get_list("rfs")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(device=orchestron_rfs__device.from_xml(yang.gdata.get_xml_children(n, "device", "http://orchestron.org/yang/orchestron-rfs.yang")), rfs=orchestron_rfs__rfs.from_xml(yang.gdata.get_xml_children(n, "rfs", "http://orchestron.org/yang/orchestron-rfs.yang")))
        return root()

