import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry(yang.adata.MNode):
    id: str

    mut def __init__(self, id: str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry(id=n.get_str("id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry(id=yang.gdata.from_xml_str(n, "id"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'cloud-identifier'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry(yang.adata.MNode):
    id: str

    mut def __init__(self, id: str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry(id=n.get_str("id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry(id=yang.gdata.from_xml_str(n, "id"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'encryption-profile-identifier'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry(yang.adata.MNode):
    id: str

    mut def __init__(self, id: str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry(id=n.get_str("id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry(id=yang.gdata.from_xml_str(n, "id"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'qos-profile-identifier'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry(yang.adata.MNode):
    id: str

    mut def __init__(self, id: str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry(id=n.get_str("id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry(id=yang.gdata.from_xml_str(n, "id"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'bfd-profile-identifier'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers(yang.adata.MNode):
    cloud_identifier: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier
    encryption_profile_identifier: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier
    qos_profile_identifier: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier
    bfd_profile_identifier: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier

    mut def __init__(self, cloud_identifier: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry]=[], encryption_profile_identifier: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry]=[], qos_profile_identifier: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry]=[], bfd_profile_identifier: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.cloud_identifier = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier(elements=cloud_identifier)
        self.cloud_identifier._parent = self
        self.encryption_profile_identifier = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier(elements=encryption_profile_identifier)
        self.encryption_profile_identifier._parent = self
        self.qos_profile_identifier = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier(elements=qos_profile_identifier)
        self.qos_profile_identifier._parent = self
        self.bfd_profile_identifier = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier(elements=bfd_profile_identifier)
        self.bfd_profile_identifier._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cloud_identifier = self.cloud_identifier
        _encryption_profile_identifier = self.encryption_profile_identifier
        _qos_profile_identifier = self.qos_profile_identifier
        _bfd_profile_identifier = self.bfd_profile_identifier
        if _cloud_identifier is not None:
            children['cloud-identifier'] = _cloud_identifier.to_gdata()
        if _encryption_profile_identifier is not None:
            children['encryption-profile-identifier'] = _encryption_profile_identifier.to_gdata()
        if _qos_profile_identifier is not None:
            children['qos-profile-identifier'] = _qos_profile_identifier.to_gdata()
        if _bfd_profile_identifier is not None:
            children['bfd-profile-identifier'] = _bfd_profile_identifier.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers(cloud_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier.from_gdata(n.get_list("cloud-identifier")), encryption_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier.from_gdata(n.get_list("encryption-profile-identifier")), qos_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier.from_gdata(n.get_list("qos-profile-identifier")), bfd_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier.from_gdata(n.get_list("bfd-profile-identifier")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers(cloud_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier.from_xml(yang.gdata.get_xml_children(n, "cloud-identifier")), encryption_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier.from_xml(yang.gdata.get_xml_children(n, "encryption-profile-identifier")), qos_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier.from_xml(yang.gdata.get_xml_children(n, "qos-profile-identifier")), bfd_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier.from_xml(yang.gdata.get_xml_children(n, "bfd-profile-identifier")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers()


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles(yang.adata.MNode):
    valid_provider_identifiers: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers

    mut def __init__(self, valid_provider_identifiers: ?ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if valid_provider_identifiers is not None:
            self.valid_provider_identifiers = valid_provider_identifiers
        else:
            self.valid_provider_identifiers = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers()
        self_valid_provider_identifiers = self.valid_provider_identifiers
        if self_valid_provider_identifiers is not None:
            self_valid_provider_identifiers._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _valid_provider_identifiers = self.valid_provider_identifiers
        if _valid_provider_identifiers is not None:
            children['valid-provider-identifiers'] = _valid_provider_identifiers.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles(valid_provider_identifiers=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers.from_gdata(n.get_opt_container("valid-provider-identifiers")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles(valid_provider_identifiers=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers.from_xml(yang.gdata.get_xml_opt_child(n, "valid-provider-identifiers")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44(yang.adata.MNode):
    enabled: bool
    nat44_customer_address: ?str

    mut def __init__(self, enabled: ?bool=None, nat44_customer_address: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if enabled != None:
            self.enabled = enabled
        else:
            self.enabled = False
        self.nat44_customer_address = nat44_customer_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enabled = self.enabled
        _nat44_customer_address = self.nat44_customer_address
        if _enabled is not None:
            children['enabled'] = yang.gdata.Leaf('boolean', _enabled)
        if _nat44_customer_address is not None:
            children['nat44-customer-address'] = yang.gdata.Leaf('string', _nat44_customer_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44(enabled=n.get_opt_bool("enabled"), nat44_customer_address=n.get_opt_str("nat44-customer-address"))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44(enabled=yang.gdata.from_xml_opt_bool(n, "enabled"), nat44_customer_address=yang.gdata.from_xml_opt_str(n, "nat44-customer-address"))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation(yang.adata.MNode):
    nat44: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44

    mut def __init__(self, nat44: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if nat44 is not None:
            self.nat44 = nat44
        else:
            self.nat44 = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44()
        self_nat44 = self.nat44
        if self_nat44 is not None:
            self_nat44._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _nat44 = self.nat44
        if _nat44 is not None:
            children['nat44'] = _nat44.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation(nat44=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44.from_gdata(n.get_opt_container("nat44")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation(nat44=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44.from_xml(yang.gdata.get_xml_opt_child(n, "nat44")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry(yang.adata.MNode):
    cloud_identifier: str
    permit_any: ?bool
    permit_site: list[str]
    deny_site: list[str]
    address_translation: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation

    mut def __init__(self, cloud_identifier: str, permit_any: ?bool, permit_site: ?list[str]=None, deny_site: ?list[str]=None, address_translation: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.cloud_identifier = cloud_identifier
        self.permit_any = permit_any
        if permit_site is not None:
            self.permit_site = permit_site
        else:
            self.permit_site = []
        if deny_site is not None:
            self.deny_site = deny_site
        else:
            self.deny_site = []
        if address_translation is not None:
            self.address_translation = address_translation
        else:
            self.address_translation = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation()
        self_address_translation = self.address_translation
        if self_address_translation is not None:
            self_address_translation._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cloud_identifier = self.cloud_identifier
        _permit_any = self.permit_any
        _address_translation = self.address_translation
        if _cloud_identifier is not None:
            children['cloud-identifier'] = yang.gdata.Leaf('leafref', _cloud_identifier)
        if _permit_any is not None:
            children['permit-any'] = yang.gdata.Leaf('empty', _permit_any)
        children['permit-site'] = yang.gdata.LeafList(self.permit_site)
        children['deny-site'] = yang.gdata.LeafList(self.deny_site)
        if _address_translation is not None:
            children['address-translation'] = _address_translation.to_gdata()
        return yang.gdata.ListElement([str(self.cloud_identifier)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry(cloud_identifier=n.get_str("cloud-identifier"), permit_any=n.get_opt_bool("permit-any"), permit_site=n.get_opt_strs("permit-site"), deny_site=n.get_opt_strs("deny-site"), address_translation=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation.from_gdata(n.get_opt_container("address-translation")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry(cloud_identifier=yang.gdata.from_xml_str(n, "cloud-identifier"), permit_any=yang.gdata.from_xml_opt_bool(n, "permit-any"), permit_site=yang.gdata.from_xml_opt_strs(n, "permit-site"), deny_site=yang.gdata.from_xml_opt_strs(n, "deny-site"), address_translation=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation.from_xml(yang.gdata.get_xml_opt_child(n, "address-translation")))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'cloud-access'
        self.elements = elements

    mut def create(self, cloud_identifier):
        for e in self.elements:
            match = True
            if e.cloud_identifier != cloud_identifier:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry(cloud_identifier)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['cloud-identifier'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses(yang.adata.MNode):
    cloud_access: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access

    mut def __init__(self, cloud_access: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.cloud_access = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access(elements=cloud_access)
        self.cloud_access._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cloud_access = self.cloud_access
        if _cloud_access is not None:
            children['cloud-access'] = _cloud_access.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses(cloud_access=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access.from_gdata(n.get_list("cloud-access")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses(cloud_access=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access.from_xml(yang.gdata.get_xml_children(n, "cloud-access")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors(yang.adata.MNode):
    tree_flavor: list[str]

    mut def __init__(self, tree_flavor: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if tree_flavor is not None:
            self.tree_flavor = tree_flavor
        else:
            self.tree_flavor = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['tree-flavor'] = yang.gdata.LeafList(self.tree_flavor)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors(tree_flavor=n.get_opt_strs("tree-flavor"))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors(tree_flavor=yang.gdata.from_xml_opt_strs(n, "tree-flavor"))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed(yang.adata.MNode):
    enabled: bool
    rp_redundancy: bool
    optimal_traffic_delivery: bool

    mut def __init__(self, enabled: ?bool=None, rp_redundancy: ?bool=None, optimal_traffic_delivery: ?bool=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if enabled != None:
            self.enabled = enabled
        else:
            self.enabled = False
        if rp_redundancy != None:
            self.rp_redundancy = rp_redundancy
        else:
            self.rp_redundancy = False
        if optimal_traffic_delivery != None:
            self.optimal_traffic_delivery = optimal_traffic_delivery
        else:
            self.optimal_traffic_delivery = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enabled = self.enabled
        _rp_redundancy = self.rp_redundancy
        _optimal_traffic_delivery = self.optimal_traffic_delivery
        if _enabled is not None:
            children['enabled'] = yang.gdata.Leaf('boolean', _enabled)
        if _rp_redundancy is not None:
            children['rp-redundancy'] = yang.gdata.Leaf('boolean', _rp_redundancy)
        if _optimal_traffic_delivery is not None:
            children['optimal-traffic-delivery'] = yang.gdata.Leaf('boolean', _optimal_traffic_delivery)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed(enabled=n.get_opt_bool("enabled"), rp_redundancy=n.get_opt_bool("rp-redundancy"), optimal_traffic_delivery=n.get_opt_bool("optimal-traffic-delivery"))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed(enabled=yang.gdata.from_xml_opt_bool(n, "enabled"), rp_redundancy=yang.gdata.from_xml_opt_bool(n, "rp-redundancy"), optimal_traffic_delivery=yang.gdata.from_xml_opt_bool(n, "optimal-traffic-delivery"))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry(yang.adata.MNode):
    id: int
    group_address: ?str
    group_start: ?str
    group_end: ?str

    mut def __init__(self, id: int, group_address: ?str, group_start: ?str, group_end: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id
        self.group_address = group_address
        self.group_start = group_start
        self.group_end = group_end

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        _group_address = self.group_address
        _group_start = self.group_start
        _group_end = self.group_end
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint16', _id)
        if _group_address is not None:
            children['group-address'] = yang.gdata.Leaf('union', _group_address)
        if _group_start is not None:
            children['group-start'] = yang.gdata.Leaf('union', _group_start)
        if _group_end is not None:
            children['group-end'] = yang.gdata.Leaf('union', _group_end)
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry(id=n.get_int("id"), group_address=n.get_opt_str("group-address"), group_start=n.get_opt_str("group-start"), group_end=n.get_opt_str("group-end"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry(id=yang.gdata.from_xml_int(n, "id"), group_address=yang.gdata.from_xml_opt_str(n, "group-address"), group_start=yang.gdata.from_xml_opt_str(n, "group-start"), group_end=yang.gdata.from_xml_opt_str(n, "group-end"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'group'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups(yang.adata.MNode):
    group: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group

    mut def __init__(self, group: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups(group=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group.from_gdata(n.get_list("group")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups(group=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry(yang.adata.MNode):
    id: int
    provider_managed: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed
    rp_address: str
    groups: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups

    mut def __init__(self, id: int, rp_address: str, provider_managed: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed=None, groups: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id
        if provider_managed is not None:
            self.provider_managed = provider_managed
        else:
            self.provider_managed = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed()
        self_provider_managed = self.provider_managed
        if self_provider_managed is not None:
            self_provider_managed._parent = self
        self.rp_address = rp_address
        if groups is not None:
            self.groups = groups
        else:
            self.groups = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups()
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        _provider_managed = self.provider_managed
        _rp_address = self.rp_address
        _groups = self.groups
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint16', _id)
        if _provider_managed is not None:
            children['provider-managed'] = _provider_managed.to_gdata()
        if _rp_address is not None:
            children['rp-address'] = yang.gdata.Leaf('union', _rp_address)
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry(id=n.get_int("id"), provider_managed=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed.from_gdata(n.get_opt_container("provider-managed")), rp_address=n.get_str("rp-address"), groups=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups.from_gdata(n.get_opt_container("groups")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry(id=yang.gdata.from_xml_int(n, "id"), provider_managed=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed.from_xml(yang.gdata.get_xml_opt_child(n, "provider-managed")), rp_address=yang.gdata.from_xml_str(n, "rp-address"), groups=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'rp-group-mapping'
        self.elements = elements

    mut def create(self, id, rp_address):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry(id, rp_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings(yang.adata.MNode):
    rp_group_mapping: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping

    mut def __init__(self, rp_group_mapping: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.rp_group_mapping = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping(elements=rp_group_mapping)
        self.rp_group_mapping._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rp_group_mapping = self.rp_group_mapping
        if _rp_group_mapping is not None:
            children['rp-group-mapping'] = _rp_group_mapping.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings(rp_group_mapping=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping.from_gdata(n.get_list("rp-group-mapping")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings(rp_group_mapping=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping.from_xml(yang.gdata.get_xml_children(n, "rp-group-mapping")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates(yang.adata.MNode):
    bsr_candidate_address: list[str]

    mut def __init__(self, bsr_candidate_address: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if bsr_candidate_address is not None:
            self.bsr_candidate_address = bsr_candidate_address
        else:
            self.bsr_candidate_address = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['bsr-candidate-address'] = yang.gdata.LeafList(self.bsr_candidate_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates(bsr_candidate_address=n.get_opt_strs("bsr-candidate-address"))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates(bsr_candidate_address=yang.gdata.from_xml_opt_strs(n, "bsr-candidate-address"))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery(yang.adata.MNode):
    rp_discovery_type: str
    bsr_candidates: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates

    mut def __init__(self, rp_discovery_type: ?str=None, bsr_candidates: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if rp_discovery_type != None:
            self.rp_discovery_type = rp_discovery_type
        else:
            self.rp_discovery_type = "static-rp"
        if bsr_candidates is not None:
            self.bsr_candidates = bsr_candidates
        else:
            self.bsr_candidates = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates()
        self_bsr_candidates = self.bsr_candidates
        if self_bsr_candidates is not None:
            self_bsr_candidates._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rp_discovery_type = self.rp_discovery_type
        _bsr_candidates = self.bsr_candidates
        if _rp_discovery_type is not None:
            children['rp-discovery-type'] = yang.gdata.Leaf('identityref', _rp_discovery_type)
        if _bsr_candidates is not None:
            children['bsr-candidates'] = _bsr_candidates.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery(rp_discovery_type=n.get_opt_str("rp-discovery-type"), bsr_candidates=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates.from_gdata(n.get_opt_container("bsr-candidates")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery(rp_discovery_type=yang.gdata.from_xml_opt_str(n, "rp-discovery-type"), bsr_candidates=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates.from_xml(yang.gdata.get_xml_opt_child(n, "bsr-candidates")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp(yang.adata.MNode):
    rp_group_mappings: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings
    rp_discovery: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery

    mut def __init__(self, rp_group_mappings: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings=None, rp_discovery: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if rp_group_mappings is not None:
            self.rp_group_mappings = rp_group_mappings
        else:
            self.rp_group_mappings = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings()
        self_rp_group_mappings = self.rp_group_mappings
        if self_rp_group_mappings is not None:
            self_rp_group_mappings._parent = self
        if rp_discovery is not None:
            self.rp_discovery = rp_discovery
        else:
            self.rp_discovery = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery()
        self_rp_discovery = self.rp_discovery
        if self_rp_discovery is not None:
            self_rp_discovery._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rp_group_mappings = self.rp_group_mappings
        _rp_discovery = self.rp_discovery
        if _rp_group_mappings is not None:
            children['rp-group-mappings'] = _rp_group_mappings.to_gdata()
        if _rp_discovery is not None:
            children['rp-discovery'] = _rp_discovery.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp(rp_group_mappings=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings.from_gdata(n.get_opt_container("rp-group-mappings")), rp_discovery=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery.from_gdata(n.get_opt_container("rp-discovery")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp(rp_group_mappings=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings.from_xml(yang.gdata.get_xml_opt_child(n, "rp-group-mappings")), rp_discovery=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery.from_xml(yang.gdata.get_xml_opt_child(n, "rp-discovery")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast(yang.adata.MNode):
    enabled: bool
    customer_tree_flavors: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors
    rp: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp

    mut def __init__(self, enabled: ?bool=None, customer_tree_flavors: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors=None, rp: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if enabled != None:
            self.enabled = enabled
        else:
            self.enabled = False
        if customer_tree_flavors is not None:
            self.customer_tree_flavors = customer_tree_flavors
        else:
            self.customer_tree_flavors = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors()
        self_customer_tree_flavors = self.customer_tree_flavors
        if self_customer_tree_flavors is not None:
            self_customer_tree_flavors._parent = self
        if rp is not None:
            self.rp = rp
        else:
            self.rp = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp()
        self_rp = self.rp
        if self_rp is not None:
            self_rp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enabled = self.enabled
        _customer_tree_flavors = self.customer_tree_flavors
        _rp = self.rp
        if _enabled is not None:
            children['enabled'] = yang.gdata.Leaf('boolean', _enabled)
        if _customer_tree_flavors is not None:
            children['customer-tree-flavors'] = _customer_tree_flavors.to_gdata()
        if _rp is not None:
            children['rp'] = _rp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast(enabled=n.get_opt_bool("enabled"), customer_tree_flavors=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors.from_gdata(n.get_opt_container("customer-tree-flavors")), rp=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp.from_gdata(n.get_opt_container("rp")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast(enabled=yang.gdata.from_xml_opt_bool(n, "enabled"), customer_tree_flavors=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors.from_xml(yang.gdata.get_xml_opt_child(n, "customer-tree-flavors")), rp=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp.from_xml(yang.gdata.get_xml_opt_child(n, "rp")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry(yang.adata.MNode):
    vpn_id: str
    local_sites_role: str

    mut def __init__(self, vpn_id: str, local_sites_role: ?str=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.vpn_id = vpn_id
        if local_sites_role != None:
            self.local_sites_role = local_sites_role
        else:
            self.local_sites_role = "any-to-any-role"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_id = self.vpn_id
        _local_sites_role = self.local_sites_role
        if _vpn_id is not None:
            children['vpn-id'] = yang.gdata.Leaf('string', _vpn_id)
        if _local_sites_role is not None:
            children['local-sites-role'] = yang.gdata.Leaf('identityref', _local_sites_role)
        return yang.gdata.ListElement([str(self.vpn_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry(vpn_id=n.get_str("vpn-id"), local_sites_role=n.get_opt_str("local-sites-role"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry(vpn_id=yang.gdata.from_xml_str(n, "vpn-id"), local_sites_role=yang.gdata.from_xml_opt_str(n, "local-sites-role"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'extranet-vpn'
        self.elements = elements

    mut def create(self, vpn_id):
        for e in self.elements:
            match = True
            if e.vpn_id != vpn_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry(vpn_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vpn-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns(yang.adata.MNode):
    extranet_vpn: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn

    mut def __init__(self, extranet_vpn: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.extranet_vpn = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn(elements=extranet_vpn)
        self.extranet_vpn._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _extranet_vpn = self.extranet_vpn
        if _extranet_vpn is not None:
            children['extranet-vpn'] = _extranet_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns(extranet_vpn=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn.from_gdata(n.get_list("extranet-vpn")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns(extranet_vpn=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn.from_xml(yang.gdata.get_xml_children(n, "extranet-vpn")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns()


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry(yang.adata.MNode):
    vpn_id: str
    customer_name: ?str
    vpn_service_topology: str
    cloud_accesses: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses
    multicast: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast
    carrierscarrier: bool
    extranet_vpns: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns

    mut def __init__(self, vpn_id: str, customer_name: ?str, vpn_service_topology: ?str=None, cloud_accesses: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses=None, multicast: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast=None, carrierscarrier: ?bool=None, extranet_vpns: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.vpn_id = vpn_id
        self.customer_name = customer_name
        if vpn_service_topology != None:
            self.vpn_service_topology = vpn_service_topology
        else:
            self.vpn_service_topology = "any-to-any"
        if cloud_accesses is not None:
            self.cloud_accesses = cloud_accesses
        else:
            self.cloud_accesses = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses()
        self_cloud_accesses = self.cloud_accesses
        if self_cloud_accesses is not None:
            self_cloud_accesses._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self
        if carrierscarrier != None:
            self.carrierscarrier = carrierscarrier
        else:
            self.carrierscarrier = False
        if extranet_vpns is not None:
            self.extranet_vpns = extranet_vpns
        else:
            self.extranet_vpns = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns()
        self_extranet_vpns = self.extranet_vpns
        if self_extranet_vpns is not None:
            self_extranet_vpns._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_id = self.vpn_id
        _customer_name = self.customer_name
        _vpn_service_topology = self.vpn_service_topology
        _cloud_accesses = self.cloud_accesses
        _multicast = self.multicast
        _carrierscarrier = self.carrierscarrier
        _extranet_vpns = self.extranet_vpns
        if _vpn_id is not None:
            children['vpn-id'] = yang.gdata.Leaf('string', _vpn_id)
        if _customer_name is not None:
            children['customer-name'] = yang.gdata.Leaf('string', _customer_name)
        if _vpn_service_topology is not None:
            children['vpn-service-topology'] = yang.gdata.Leaf('identityref', _vpn_service_topology)
        if _cloud_accesses is not None:
            children['cloud-accesses'] = _cloud_accesses.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        if _carrierscarrier is not None:
            children['carrierscarrier'] = yang.gdata.Leaf('boolean', _carrierscarrier)
        if _extranet_vpns is not None:
            children['extranet-vpns'] = _extranet_vpns.to_gdata()
        return yang.gdata.ListElement([str(self.vpn_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry(vpn_id=n.get_str("vpn-id"), customer_name=n.get_opt_str("customer-name"), vpn_service_topology=n.get_opt_str("vpn-service-topology"), cloud_accesses=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses.from_gdata(n.get_opt_container("cloud-accesses")), multicast=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast.from_gdata(n.get_opt_container("multicast")), carrierscarrier=n.get_opt_bool("carrierscarrier"), extranet_vpns=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns.from_gdata(n.get_opt_container("extranet-vpns")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry(vpn_id=yang.gdata.from_xml_str(n, "vpn-id"), customer_name=yang.gdata.from_xml_opt_str(n, "customer-name"), vpn_service_topology=yang.gdata.from_xml_opt_str(n, "vpn-service-topology"), cloud_accesses=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses.from_xml(yang.gdata.get_xml_opt_child(n, "cloud-accesses")), multicast=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")), carrierscarrier=yang.gdata.from_xml_opt_bool(n, "carrierscarrier"), extranet_vpns=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns.from_xml(yang.gdata.get_xml_opt_child(n, "extranet-vpns")))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'vpn-service'
        self.elements = elements

    mut def create(self, vpn_id):
        for e in self.elements:
            match = True
            if e.vpn_id != vpn_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry(vpn_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vpn-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services(yang.adata.MNode):
    vpn_service: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service

    mut def __init__(self, vpn_service: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.vpn_service = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service(elements=vpn_service)
        self.vpn_service._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_service = self.vpn_service
        if _vpn_service is not None:
            children['vpn-service'] = _vpn_service.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services(vpn_service=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service.from_gdata(n.get_list("vpn-service")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__vpn_services(vpn_service=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service.from_xml(yang.gdata.get_xml_children(n, "vpn-service")))
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry(yang.adata.MNode):
    location_id: str
    address: ?str
    postal_code: ?str
    state: ?str
    city: ?str
    country_code: ?str

    mut def __init__(self, location_id: str, address: ?str, postal_code: ?str, state: ?str, city: ?str, country_code: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.location_id = location_id
        self.address = address
        self.postal_code = postal_code
        self.state = state
        self.city = city
        self.country_code = country_code

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _location_id = self.location_id
        _address = self.address
        _postal_code = self.postal_code
        _state = self.state
        _city = self.city
        _country_code = self.country_code
        if _location_id is not None:
            children['location-id'] = yang.gdata.Leaf('string', _location_id)
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _postal_code is not None:
            children['postal-code'] = yang.gdata.Leaf('string', _postal_code)
        if _state is not None:
            children['state'] = yang.gdata.Leaf('string', _state)
        if _city is not None:
            children['city'] = yang.gdata.Leaf('string', _city)
        if _country_code is not None:
            children['country-code'] = yang.gdata.Leaf('string', _country_code)
        return yang.gdata.ListElement([str(self.location_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry(location_id=n.get_str("location-id"), address=n.get_opt_str("address"), postal_code=n.get_opt_str("postal-code"), state=n.get_opt_str("state"), city=n.get_opt_str("city"), country_code=n.get_opt_str("country-code"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry(location_id=yang.gdata.from_xml_str(n, "location-id"), address=yang.gdata.from_xml_opt_str(n, "address"), postal_code=yang.gdata.from_xml_opt_str(n, "postal-code"), state=yang.gdata.from_xml_opt_str(n, "state"), city=yang.gdata.from_xml_opt_str(n, "city"), country_code=yang.gdata.from_xml_opt_str(n, "country-code"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'location'
        self.elements = elements

    mut def create(self, location_id):
        for e in self.elements:
            match = True
            if e.location_id != location_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry(location_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['location-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__locations(yang.adata.MNode):
    location: ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location

    mut def __init__(self, location: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.location = ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location(elements=location)
        self.location._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _location = self.location
        if _location is not None:
            children['location'] = _location.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__locations:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations(location=ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location.from_gdata(n.get_list("location")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__locations:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations(location=ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location.from_xml(yang.gdata.get_xml_children(n, "location")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management(yang.adata.MNode):
    address_family: ?str
    address: str

    mut def __init__(self, address: str, address_family: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.address_family = address_family
        self.address = address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        _address = self.address
        if _address_family is not None:
            children['address-family'] = yang.gdata.Leaf('enumeration', _address_family)
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management(address_family=n.get_opt_str("address-family"), address=n.get_str("address"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management(address_family=yang.gdata.from_xml_opt_str(n, "address-family"), address=yang.gdata.from_xml_str(n, "address"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry(yang.adata.MNode):
    device_id: str
    location: str
    management: ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management

    mut def __init__(self, device_id: str, location: str, management: ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.device_id = device_id
        self.location = location
        self.management = management
        self.management._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device_id = self.device_id
        _location = self.location
        _management = self.management
        if _device_id is not None:
            children['device-id'] = yang.gdata.Leaf('string', _device_id)
        if _location is not None:
            children['location'] = yang.gdata.Leaf('leafref', _location)
        if _management is not None:
            children['management'] = _management.to_gdata()
        return yang.gdata.ListElement([str(self.device_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry(device_id=n.get_str("device-id"), location=n.get_str("location"), management=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management.from_gdata(n.get_container("management")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry(device_id=yang.gdata.from_xml_str(n, "device-id"), location=yang.gdata.from_xml_str(n, "location"), management=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management.from_xml(yang.gdata.get_xml_child(n, "management")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'device'
        self.elements = elements

    mut def create(self, device_id, location, management):
        for e in self.elements:
            match = True
            if e.device_id != device_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry(device_id, location, management)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['device-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__devices(yang.adata.MNode):
    device: ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device

    mut def __init__(self, device: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.device = ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device(elements=device)
        self.device._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device = self.device
        if _device is not None:
            children['device'] = _device.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices(device=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device.from_gdata(n.get_list("device")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices(device=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device.from_xml(yang.gdata.get_xml_children(n, "device")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry(yang.adata.MNode):
    group_id: str

    mut def __init__(self, group_id: str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group_id = group_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_id = self.group_id
        if _group_id is not None:
            children['group-id'] = yang.gdata.Leaf('string', _group_id)
        return yang.gdata.ListElement([str(self.group_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry(group_id=n.get_str("group-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry(group_id=yang.gdata.from_xml_str(n, "group-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_id):
        for e in self.elements:
            match = True
            if e.group_id != group_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry(group_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups(yang.adata.MNode):
    group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group

    mut def __init__(self, group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group.from_gdata(n.get_list("group")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity(yang.adata.MNode):
    groups: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups

    mut def __init__(self, groups: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if groups is not None:
            self.groups = groups
        else:
            self.groups = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups()
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _groups = self.groups
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity(groups=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups.from_gdata(n.get_opt_container("groups")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity(groups=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__management(yang.adata.MNode):
    type: str

    mut def __init__(self, type: str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.type = type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__management:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__management(type=n.get_str("type"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__management")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__management:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__management(type=yang.gdata.from_xml_str(n, "type"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__management")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry(yang.adata.MNode):
    type: str
    lan_tag: list[str]
    ipv4_lan_prefix: list[str]
    ipv6_lan_prefix: list[str]

    mut def __init__(self, type: str, lan_tag: ?list[str]=None, ipv4_lan_prefix: ?list[str]=None, ipv6_lan_prefix: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.type = type
        if lan_tag is not None:
            self.lan_tag = lan_tag
        else:
            self.lan_tag = []
        if ipv4_lan_prefix is not None:
            self.ipv4_lan_prefix = ipv4_lan_prefix
        else:
            self.ipv4_lan_prefix = []
        if ipv6_lan_prefix is not None:
            self.ipv6_lan_prefix = ipv6_lan_prefix
        else:
            self.ipv6_lan_prefix = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        children['lan-tag'] = yang.gdata.LeafList(self.lan_tag)
        children['ipv4-lan-prefix'] = yang.gdata.LeafList(self.ipv4_lan_prefix)
        children['ipv6-lan-prefix'] = yang.gdata.LeafList(self.ipv6_lan_prefix)
        return yang.gdata.ListElement([str(self.type)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry(type=n.get_str("type"), lan_tag=n.get_opt_strs("lan-tag"), ipv4_lan_prefix=n.get_opt_strs("ipv4-lan-prefix"), ipv6_lan_prefix=n.get_opt_strs("ipv6-lan-prefix"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry(type=yang.gdata.from_xml_str(n, "type"), lan_tag=yang.gdata.from_xml_opt_strs(n, "lan-tag"), ipv4_lan_prefix=yang.gdata.from_xml_opt_strs(n, "ipv4-lan-prefix"), ipv6_lan_prefix=yang.gdata.from_xml_opt_strs(n, "ipv6-lan-prefix"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'filter'
        self.elements = elements

    mut def create(self, type):
        for e in self.elements:
            match = True
            if e.type != type:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry(type)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['type'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters(yang.adata.MNode):
    filter: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter

    mut def __init__(self, filter: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.filter = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter(elements=filter)
        self.filter._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _filter = self.filter
        if _filter is not None:
            children['filter'] = _filter.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters(filter=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter.from_gdata(n.get_list("filter")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters(filter=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter.from_xml(yang.gdata.get_xml_children(n, "filter")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry(yang.adata.MNode):
    vpn_id: str
    site_role: str

    mut def __init__(self, vpn_id: str, site_role: ?str=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.vpn_id = vpn_id
        if site_role != None:
            self.site_role = site_role
        else:
            self.site_role = "any-to-any-role"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_id = self.vpn_id
        _site_role = self.site_role
        if _vpn_id is not None:
            children['vpn-id'] = yang.gdata.Leaf('leafref', _vpn_id)
        if _site_role is not None:
            children['site-role'] = yang.gdata.Leaf('identityref', _site_role)
        return yang.gdata.ListElement([str(self.vpn_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry(vpn_id=n.get_str("vpn-id"), site_role=n.get_opt_str("site-role"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry(vpn_id=yang.gdata.from_xml_str(n, "vpn-id"), site_role=yang.gdata.from_xml_opt_str(n, "site-role"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'vpn'
        self.elements = elements

    mut def create(self, vpn_id):
        for e in self.elements:
            match = True
            if e.vpn_id != vpn_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry(vpn_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vpn-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry(yang.adata.MNode):
    id: str
    filters: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters
    vpn: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn

    mut def __init__(self, id: str, filters: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters=None, vpn: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id
        if filters is not None:
            self.filters = filters
        else:
            self.filters = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters()
        self_filters = self.filters
        if self_filters is not None:
            self_filters._parent = self
        self.vpn = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn(elements=vpn)
        self.vpn._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        _filters = self.filters
        _vpn = self.vpn
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        if _filters is not None:
            children['filters'] = _filters.to_gdata()
        if _vpn is not None:
            children['vpn'] = _vpn.to_gdata()
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry(id=n.get_str("id"), filters=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters.from_gdata(n.get_opt_container("filters")), vpn=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn.from_gdata(n.get_list("vpn")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry(id=yang.gdata.from_xml_str(n, "id"), filters=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters.from_xml(yang.gdata.get_xml_opt_child(n, "filters")), vpn=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn.from_xml(yang.gdata.get_xml_children(n, "vpn")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'entries'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry(yang.adata.MNode):
    vpn_policy_id: str
    entries: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries

    mut def __init__(self, vpn_policy_id: str, entries: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.vpn_policy_id = vpn_policy_id
        self.entries = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries(elements=entries)
        self.entries._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_policy_id = self.vpn_policy_id
        _entries = self.entries
        if _vpn_policy_id is not None:
            children['vpn-policy-id'] = yang.gdata.Leaf('string', _vpn_policy_id)
        if _entries is not None:
            children['entries'] = _entries.to_gdata()
        return yang.gdata.ListElement([str(self.vpn_policy_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry(vpn_policy_id=n.get_str("vpn-policy-id"), entries=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries.from_gdata(n.get_list("entries")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry(vpn_policy_id=yang.gdata.from_xml_str(n, "vpn-policy-id"), entries=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries.from_xml(yang.gdata.get_xml_children(n, "entries")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'vpn-policy'
        self.elements = elements

    mut def create(self, vpn_policy_id):
        for e in self.elements:
            match = True
            if e.vpn_policy_id != vpn_policy_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry(vpn_policy_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['vpn-policy-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies(yang.adata.MNode):
    vpn_policy: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy

    mut def __init__(self, vpn_policy: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.vpn_policy = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy(elements=vpn_policy)
        self.vpn_policy._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_policy = self.vpn_policy
        if _vpn_policy is not None:
            children['vpn-policy'] = _vpn_policy.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies(vpn_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy.from_gdata(n.get_list("vpn-policy")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies(vpn_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy.from_xml(yang.gdata.get_xml_children(n, "vpn-policy")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry(yang.adata.MNode):
    af: str
    maximum_routes: ?int

    mut def __init__(self, af: str, maximum_routes: ?int):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.af = af
        self.maximum_routes = maximum_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af = self.af
        _maximum_routes = self.maximum_routes
        if _af is not None:
            children['af'] = yang.gdata.Leaf('enumeration', _af)
        if _maximum_routes is not None:
            children['maximum-routes'] = yang.gdata.Leaf('uint32', _maximum_routes)
        return yang.gdata.ListElement([str(self.af)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry(af=n.get_str("af"), maximum_routes=n.get_opt_int("maximum-routes"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry(af=yang.gdata.from_xml_str(n, "af"), maximum_routes=yang.gdata.from_xml_opt_int(n, "maximum-routes"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af):
        for e in self.elements:
            match = True
            if e.af != af:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry(af)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['af'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes(yang.adata.MNode):
    address_family: ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family

    mut def __init__(self, address_family: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.address_family = ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family(elements=address_family)
        self.address_family._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes(address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family.from_gdata(n.get_list("address-family")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes(address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family.from_xml(yang.gdata.get_xml_children(n, "address-family")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication()
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication()
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile(yang.adata.MNode):
    profile_name: ?str
    algorithm: ?str
    preshared_key: ?str

    mut def __init__(self, profile_name: ?str, algorithm: ?str, preshared_key: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.profile_name = profile_name
        self.algorithm = algorithm
        self.preshared_key = preshared_key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _profile_name = self.profile_name
        _algorithm = self.algorithm
        _preshared_key = self.preshared_key
        if _profile_name is not None:
            children['profile-name'] = yang.gdata.Leaf('leafref', _profile_name)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('string', _algorithm)
        if _preshared_key is not None:
            children['preshared-key'] = yang.gdata.Leaf('string', _preshared_key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile(profile_name=n.get_opt_str("profile-name"), algorithm=n.get_opt_str("algorithm"), preshared_key=n.get_opt_str("preshared-key"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile(profile_name=yang.gdata.from_xml_opt_str(n, "profile-name"), algorithm=yang.gdata.from_xml_opt_str(n, "algorithm"), preshared_key=yang.gdata.from_xml_opt_str(n, "preshared-key"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption(yang.adata.MNode):
    enabled: bool
    layer: ?str
    encryption_profile: ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile

    mut def __init__(self, enabled: ?bool=None, layer: ?str, encryption_profile: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if enabled != None:
            self.enabled = enabled
        else:
            self.enabled = False
        self.layer = layer
        if encryption_profile is not None:
            self.encryption_profile = encryption_profile
        else:
            self.encryption_profile = ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile()
        self_encryption_profile = self.encryption_profile
        if self_encryption_profile is not None:
            self_encryption_profile._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enabled = self.enabled
        _layer = self.layer
        _encryption_profile = self.encryption_profile
        if _enabled is not None:
            children['enabled'] = yang.gdata.Leaf('boolean', _enabled)
        if _layer is not None:
            children['layer'] = yang.gdata.Leaf('enumeration', _layer)
        if _encryption_profile is not None:
            children['encryption-profile'] = _encryption_profile.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption(enabled=n.get_opt_bool("enabled"), layer=n.get_opt_str("layer"), encryption_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile.from_gdata(n.get_opt_container("encryption-profile")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption(enabled=yang.gdata.from_xml_opt_bool(n, "enabled"), layer=yang.gdata.from_xml_opt_str(n, "layer"), encryption_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile.from_xml(yang.gdata.get_xml_opt_child(n, "encryption-profile")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__security(yang.adata.MNode):
    authentication: ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication
    encryption: ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption

    mut def __init__(self, authentication: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication=None, encryption: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication()
        self_authentication = self.authentication
        if self_authentication is not None:
            self_authentication._parent = self
        if encryption is not None:
            self.encryption = encryption
        else:
            self.encryption = ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption()
        self_encryption = self.encryption
        if self_encryption is not None:
            self_encryption._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _authentication = self.authentication
        _encryption = self.encryption
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        if _encryption is not None:
            children['encryption'] = _encryption.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__security(authentication=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication.from_gdata(n.get_opt_container("authentication")), encryption=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption.from_gdata(n.get_opt_container("encryption")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__security(authentication=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication.from_xml(yang.gdata.get_xml_opt_child(n, "authentication")), encryption=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption.from_xml(yang.gdata.get_xml_opt_child(n, "encryption")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(yang.adata.MNode):
    lower_port: ?int
    upper_port: ?int

    mut def __init__(self, lower_port: ?int, upper_port: ?int):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.lower_port = lower_port
        self.upper_port = upper_port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lower_port = self.lower_port
        _upper_port = self.upper_port
        if _lower_port is not None:
            children['lower-port'] = yang.gdata.Leaf('uint16', _lower_port)
        if _upper_port is not None:
            children['upper-port'] = yang.gdata.Leaf('uint16', _upper_port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(lower_port=n.get_opt_int("lower-port"), upper_port=n.get_opt_int("upper-port"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(lower_port=yang.gdata.from_xml_opt_int(n, "lower-port"), upper_port=yang.gdata.from_xml_opt_int(n, "upper-port"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(yang.adata.MNode):
    lower_port: ?int
    upper_port: ?int

    mut def __init__(self, lower_port: ?int, upper_port: ?int):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.lower_port = lower_port
        self.upper_port = upper_port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lower_port = self.lower_port
        _upper_port = self.upper_port
        if _lower_port is not None:
            children['lower-port'] = yang.gdata.Leaf('uint16', _lower_port)
        if _upper_port is not None:
            children['upper-port'] = yang.gdata.Leaf('uint16', _upper_port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(lower_port=n.get_opt_int("lower-port"), upper_port=n.get_opt_int("upper-port"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(lower_port=yang.gdata.from_xml_opt_int(n, "lower-port"), upper_port=yang.gdata.from_xml_opt_int(n, "upper-port"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow(yang.adata.MNode):
    dscp: ?int
    dot1p: ?int
    ipv4_src_prefix: ?str
    ipv6_src_prefix: ?str
    ipv4_dst_prefix: ?str
    ipv6_dst_prefix: ?str
    l4_src_port: ?int
    target_sites: list[str]
    l4_src_port_range: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range
    l4_dst_port: ?int
    l4_dst_port_range: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range
    protocol_field: ?value

    mut def __init__(self, dscp: ?int, dot1p: ?int, ipv4_src_prefix: ?str, ipv6_src_prefix: ?str, ipv4_dst_prefix: ?str, ipv6_dst_prefix: ?str, l4_src_port: ?int, target_sites: ?list[str]=None, l4_src_port_range: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range=None, l4_dst_port: ?int, l4_dst_port_range: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range=None, protocol_field: ?value):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.dscp = dscp
        self.dot1p = dot1p
        self.ipv4_src_prefix = ipv4_src_prefix
        self.ipv6_src_prefix = ipv6_src_prefix
        self.ipv4_dst_prefix = ipv4_dst_prefix
        self.ipv6_dst_prefix = ipv6_dst_prefix
        self.l4_src_port = l4_src_port
        if target_sites is not None:
            self.target_sites = target_sites
        else:
            self.target_sites = []
        if l4_src_port_range is not None:
            self.l4_src_port_range = l4_src_port_range
        else:
            self.l4_src_port_range = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range()
        self_l4_src_port_range = self.l4_src_port_range
        if self_l4_src_port_range is not None:
            self_l4_src_port_range._parent = self
        self.l4_dst_port = l4_dst_port
        if l4_dst_port_range is not None:
            self.l4_dst_port_range = l4_dst_port_range
        else:
            self.l4_dst_port_range = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range()
        self_l4_dst_port_range = self.l4_dst_port_range
        if self_l4_dst_port_range is not None:
            self_l4_dst_port_range._parent = self
        self.protocol_field = protocol_field

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dscp = self.dscp
        _dot1p = self.dot1p
        _ipv4_src_prefix = self.ipv4_src_prefix
        _ipv6_src_prefix = self.ipv6_src_prefix
        _ipv4_dst_prefix = self.ipv4_dst_prefix
        _ipv6_dst_prefix = self.ipv6_dst_prefix
        _l4_src_port = self.l4_src_port
        _l4_src_port_range = self.l4_src_port_range
        _l4_dst_port = self.l4_dst_port
        _l4_dst_port_range = self.l4_dst_port_range
        _protocol_field = self.protocol_field
        if _dscp is not None:
            children['dscp'] = yang.gdata.Leaf('uint8', _dscp)
        if _dot1p is not None:
            children['dot1p'] = yang.gdata.Leaf('uint8', _dot1p)
        if _ipv4_src_prefix is not None:
            children['ipv4-src-prefix'] = yang.gdata.Leaf('string', _ipv4_src_prefix)
        if _ipv6_src_prefix is not None:
            children['ipv6-src-prefix'] = yang.gdata.Leaf('string', _ipv6_src_prefix)
        if _ipv4_dst_prefix is not None:
            children['ipv4-dst-prefix'] = yang.gdata.Leaf('string', _ipv4_dst_prefix)
        if _ipv6_dst_prefix is not None:
            children['ipv6-dst-prefix'] = yang.gdata.Leaf('string', _ipv6_dst_prefix)
        if _l4_src_port is not None:
            children['l4-src-port'] = yang.gdata.Leaf('uint16', _l4_src_port)
        children['target-sites'] = yang.gdata.LeafList(self.target_sites)
        if _l4_src_port_range is not None:
            children['l4-src-port-range'] = _l4_src_port_range.to_gdata()
        if _l4_dst_port is not None:
            children['l4-dst-port'] = yang.gdata.Leaf('uint16', _l4_dst_port)
        if _l4_dst_port_range is not None:
            children['l4-dst-port-range'] = _l4_dst_port_range.to_gdata()
        if _protocol_field is not None:
            children['protocol-field'] = yang.gdata.Leaf('union', _protocol_field)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow(dscp=n.get_opt_int("dscp"), dot1p=n.get_opt_int("dot1p"), ipv4_src_prefix=n.get_opt_str("ipv4-src-prefix"), ipv6_src_prefix=n.get_opt_str("ipv6-src-prefix"), ipv4_dst_prefix=n.get_opt_str("ipv4-dst-prefix"), ipv6_dst_prefix=n.get_opt_str("ipv6-dst-prefix"), l4_src_port=n.get_opt_int("l4-src-port"), target_sites=n.get_opt_strs("target-sites"), l4_src_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range.from_gdata(n.get_opt_container("l4-src-port-range")), l4_dst_port=n.get_opt_int("l4-dst-port"), l4_dst_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range.from_gdata(n.get_opt_container("l4-dst-port-range")), protocol_field=n.get_opt_value("protocol-field"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow(dscp=yang.gdata.from_xml_opt_int(n, "dscp"), dot1p=yang.gdata.from_xml_opt_int(n, "dot1p"), ipv4_src_prefix=yang.gdata.from_xml_opt_str(n, "ipv4-src-prefix"), ipv6_src_prefix=yang.gdata.from_xml_opt_str(n, "ipv6-src-prefix"), ipv4_dst_prefix=yang.gdata.from_xml_opt_str(n, "ipv4-dst-prefix"), ipv6_dst_prefix=yang.gdata.from_xml_opt_str(n, "ipv6-dst-prefix"), l4_src_port=yang.gdata.from_xml_opt_int(n, "l4-src-port"), target_sites=yang.gdata.from_xml_opt_strs(n, "target-sites"), l4_src_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range.from_xml(yang.gdata.get_xml_opt_child(n, "l4-src-port-range")), l4_dst_port=yang.gdata.from_xml_opt_int(n, "l4-dst-port"), l4_dst_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range.from_xml(yang.gdata.get_xml_opt_child(n, "l4-dst-port-range")), protocol_field=yang.gdata.from_xml_opt_value(n, "protocol-field"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry(yang.adata.MNode):
    id: str
    match_flow: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow
    match_application: ?str
    target_class_id: ?str

    mut def __init__(self, id: str, match_flow: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow=None, match_application: ?str, target_class_id: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id
        if match_flow is not None:
            self.match_flow = match_flow
        else:
            self.match_flow = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow()
        self_match_flow = self.match_flow
        if self_match_flow is not None:
            self_match_flow._parent = self
        self.match_application = match_application
        self.target_class_id = target_class_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        _match_flow = self.match_flow
        _match_application = self.match_application
        _target_class_id = self.target_class_id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        if _match_flow is not None:
            children['match-flow'] = _match_flow.to_gdata()
        if _match_application is not None:
            children['match-application'] = yang.gdata.Leaf('identityref', _match_application)
        if _target_class_id is not None:
            children['target-class-id'] = yang.gdata.Leaf('string', _target_class_id)
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry(id=n.get_str("id"), match_flow=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow.from_gdata(n.get_opt_container("match-flow")), match_application=n.get_opt_str("match-application"), target_class_id=n.get_opt_str("target-class-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry(id=yang.gdata.from_xml_str(n, "id"), match_flow=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow.from_xml(yang.gdata.get_xml_opt_child(n, "match-flow")), match_application=yang.gdata.from_xml_opt_str(n, "match-application"), target_class_id=yang.gdata.from_xml_opt_str(n, "target-class-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'rule'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy(yang.adata.MNode):
    rule: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule

    mut def __init__(self, rule: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.rule = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule(elements=rule)
        self.rule._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rule = self.rule
        if _rule is not None:
            children['rule'] = _rule.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy(rule=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule.from_gdata(n.get_list("rule")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy(rule=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule.from_xml(yang.gdata.get_xml_children(n, "rule")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency(yang.adata.MNode):
    use_lowest_latency: ?bool
    latency_boundary: int

    mut def __init__(self, use_lowest_latency: ?bool, latency_boundary: ?int=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.use_lowest_latency = use_lowest_latency
        if latency_boundary != None:
            self.latency_boundary = latency_boundary
        else:
            self.latency_boundary = 400

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _use_lowest_latency = self.use_lowest_latency
        _latency_boundary = self.latency_boundary
        if _use_lowest_latency is not None:
            children['use-lowest-latency'] = yang.gdata.Leaf('empty', _use_lowest_latency)
        if _latency_boundary is not None:
            children['latency-boundary'] = yang.gdata.Leaf('uint16', _latency_boundary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency(use_lowest_latency=n.get_opt_bool("use-lowest-latency"), latency_boundary=n.get_opt_int("latency-boundary"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency(use_lowest_latency=yang.gdata.from_xml_opt_bool(n, "use-lowest-latency"), latency_boundary=yang.gdata.from_xml_opt_int(n, "latency-boundary"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter(yang.adata.MNode):
    use_lowest_jitter: ?bool
    latency_boundary: int

    mut def __init__(self, use_lowest_jitter: ?bool, latency_boundary: ?int=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.use_lowest_jitter = use_lowest_jitter
        if latency_boundary != None:
            self.latency_boundary = latency_boundary
        else:
            self.latency_boundary = 40000

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _use_lowest_jitter = self.use_lowest_jitter
        _latency_boundary = self.latency_boundary
        if _use_lowest_jitter is not None:
            children['use-lowest-jitter'] = yang.gdata.Leaf('empty', _use_lowest_jitter)
        if _latency_boundary is not None:
            children['latency-boundary'] = yang.gdata.Leaf('uint32', _latency_boundary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter(use_lowest_jitter=n.get_opt_bool("use-lowest-jitter"), latency_boundary=n.get_opt_int("latency-boundary"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter(use_lowest_jitter=yang.gdata.from_xml_opt_bool(n, "use-lowest-jitter"), latency_boundary=yang.gdata.from_xml_opt_int(n, "latency-boundary"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth(yang.adata.MNode):
    guaranteed_bw_percent: float
    end_to_end: ?bool

    mut def __init__(self, guaranteed_bw_percent: float, end_to_end: ?bool):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.guaranteed_bw_percent = guaranteed_bw_percent
        self.end_to_end = end_to_end

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _guaranteed_bw_percent = self.guaranteed_bw_percent
        _end_to_end = self.end_to_end
        if _guaranteed_bw_percent is not None:
            children['guaranteed-bw-percent'] = yang.gdata.Leaf('decimal64', _guaranteed_bw_percent)
        if _end_to_end is not None:
            children['end-to-end'] = yang.gdata.Leaf('empty', _end_to_end)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth(guaranteed_bw_percent=n.get_float("guaranteed-bw-percent"), end_to_end=n.get_opt_bool("end-to-end"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth(guaranteed_bw_percent=yang.gdata.from_xml_float(n, "guaranteed-bw-percent"), end_to_end=yang.gdata.from_xml_opt_bool(n, "end-to-end"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry(yang.adata.MNode):
    class_id: str
    direction: str
    rate_limit: ?float
    latency: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency
    jitter: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter
    bandwidth: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth

    mut def __init__(self, class_id: str, bandwidth: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth, direction: ?str=None, rate_limit: ?float, latency: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency=None, jitter: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.class_id = class_id
        if direction != None:
            self.direction = direction
        else:
            self.direction = "both"
        self.rate_limit = rate_limit
        if latency is not None:
            self.latency = latency
        else:
            self.latency = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency()
        self_latency = self.latency
        if self_latency is not None:
            self_latency._parent = self
        if jitter is not None:
            self.jitter = jitter
        else:
            self.jitter = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter()
        self_jitter = self.jitter
        if self_jitter is not None:
            self_jitter._parent = self
        self.bandwidth = bandwidth
        self.bandwidth._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _class_id = self.class_id
        _direction = self.direction
        _rate_limit = self.rate_limit
        _latency = self.latency
        _jitter = self.jitter
        _bandwidth = self.bandwidth
        if _class_id is not None:
            children['class-id'] = yang.gdata.Leaf('string', _class_id)
        if _direction is not None:
            children['direction'] = yang.gdata.Leaf('identityref', _direction)
        if _rate_limit is not None:
            children['rate-limit'] = yang.gdata.Leaf('decimal64', _rate_limit)
        if _latency is not None:
            children['latency'] = _latency.to_gdata()
        if _jitter is not None:
            children['jitter'] = _jitter.to_gdata()
        if _bandwidth is not None:
            children['bandwidth'] = _bandwidth.to_gdata()
        return yang.gdata.ListElement([str(self.class_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry(class_id=n.get_str("class-id"), direction=n.get_opt_str("direction"), rate_limit=n.get_opt_float("rate-limit"), latency=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency.from_gdata(n.get_opt_container("latency")), jitter=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter.from_gdata(n.get_opt_container("jitter")), bandwidth=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth.from_gdata(n.get_container("bandwidth")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry(class_id=yang.gdata.from_xml_str(n, "class-id"), direction=yang.gdata.from_xml_opt_str(n, "direction"), rate_limit=yang.gdata.from_xml_opt_float(n, "rate-limit"), latency=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency.from_xml(yang.gdata.get_xml_opt_child(n, "latency")), jitter=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter.from_xml(yang.gdata.get_xml_opt_child(n, "jitter")), bandwidth=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth.from_xml(yang.gdata.get_xml_child(n, "bandwidth")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'class'
        self.elements = elements

    mut def create(self, class_id, bandwidth):
        for e in self.elements:
            match = True
            if e.class_id != class_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry(class_id, bandwidth)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['class-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes(yang.adata.MNode):
    class_: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class

    mut def __init__(self, class_: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.class_ = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class(elements=class_)
        self.class_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _class_ = self.class_
        if _class_ is not None:
            children['class'] = _class_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes(class_=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class.from_gdata(n.get_list("class")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes(class_=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class.from_xml(yang.gdata.get_xml_children(n, "class")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile(yang.adata.MNode):
    profile: ?str
    classes: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes

    mut def __init__(self, profile: ?str, classes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.profile = profile
        if classes is not None:
            self.classes = classes
        else:
            self.classes = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes()
        self_classes = self.classes
        if self_classes is not None:
            self_classes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _profile = self.profile
        _classes = self.classes
        if _profile is not None:
            children['profile'] = yang.gdata.Leaf('leafref', _profile)
        if _classes is not None:
            children['classes'] = _classes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile(profile=n.get_opt_str("profile"), classes=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes.from_gdata(n.get_opt_container("classes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile(profile=yang.gdata.from_xml_opt_str(n, "profile"), classes=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes.from_xml(yang.gdata.get_xml_opt_child(n, "classes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos(yang.adata.MNode):
    qos_classification_policy: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy
    qos_profile: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile

    mut def __init__(self, qos_classification_policy: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy=None, qos_profile: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if qos_classification_policy is not None:
            self.qos_classification_policy = qos_classification_policy
        else:
            self.qos_classification_policy = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy()
        self_qos_classification_policy = self.qos_classification_policy
        if self_qos_classification_policy is not None:
            self_qos_classification_policy._parent = self
        if qos_profile is not None:
            self.qos_profile = qos_profile
        else:
            self.qos_profile = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile()
        self_qos_profile = self.qos_profile
        if self_qos_profile is not None:
            self_qos_profile._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _qos_classification_policy = self.qos_classification_policy
        _qos_profile = self.qos_profile
        if _qos_classification_policy is not None:
            children['qos-classification-policy'] = _qos_classification_policy.to_gdata()
        if _qos_profile is not None:
            children['qos-profile'] = _qos_profile.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos(qos_classification_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy.from_gdata(n.get_opt_container("qos-classification-policy")), qos_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile.from_gdata(n.get_opt_container("qos-profile")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos(qos_classification_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy.from_xml(yang.gdata.get_xml_opt_child(n, "qos-classification-policy")), qos_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile.from_xml(yang.gdata.get_xml_opt_child(n, "qos-profile")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier(yang.adata.MNode):
    signalling_type: str

    mut def __init__(self, signalling_type: ?str=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if signalling_type != None:
            self.signalling_type = signalling_type
        else:
            self.signalling_type = "bgp"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _signalling_type = self.signalling_type
        if _signalling_type is not None:
            children['signalling-type'] = yang.gdata.Leaf('enumeration', _signalling_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier(signalling_type=n.get_opt_str("signalling-type"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier(signalling_type=yang.gdata.from_xml_opt_str(n, "signalling-type"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family(yang.adata.MNode):
    ipv4: bool
    ipv6: bool

    mut def __init__(self, ipv4: ?bool=None, ipv6: ?bool=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if ipv4 != None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = False
        if ipv6 != None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = yang.gdata.Leaf('boolean', _ipv4)
        if _ipv6 is not None:
            children['ipv6'] = yang.gdata.Leaf('boolean', _ipv6)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family(ipv4=n.get_opt_bool("ipv4"), ipv6=n.get_opt_bool("ipv6"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family(ipv4=yang.gdata.from_xml_opt_bool(n, "ipv4"), ipv6=yang.gdata.from_xml_opt_bool(n, "ipv6"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast(yang.adata.MNode):
    multicast_site_type: str
    multicast_address_family: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family
    protocol_type: str

    mut def __init__(self, multicast_site_type: ?str=None, multicast_address_family: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family=None, protocol_type: ?str=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if multicast_site_type != None:
            self.multicast_site_type = multicast_site_type
        else:
            self.multicast_site_type = "source-receiver"
        if multicast_address_family is not None:
            self.multicast_address_family = multicast_address_family
        else:
            self.multicast_address_family = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family()
        self_multicast_address_family = self.multicast_address_family
        if self_multicast_address_family is not None:
            self_multicast_address_family._parent = self
        if protocol_type != None:
            self.protocol_type = protocol_type
        else:
            self.protocol_type = "both"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _multicast_site_type = self.multicast_site_type
        _multicast_address_family = self.multicast_address_family
        _protocol_type = self.protocol_type
        if _multicast_site_type is not None:
            children['multicast-site-type'] = yang.gdata.Leaf('enumeration', _multicast_site_type)
        if _multicast_address_family is not None:
            children['multicast-address-family'] = _multicast_address_family.to_gdata()
        if _protocol_type is not None:
            children['protocol-type'] = yang.gdata.Leaf('enumeration', _protocol_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast(multicast_site_type=n.get_opt_str("multicast-site-type"), multicast_address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family.from_gdata(n.get_opt_container("multicast-address-family")), protocol_type=n.get_opt_str("protocol-type"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast(multicast_site_type=yang.gdata.from_xml_opt_str(n, "multicast-site-type"), multicast_address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family.from_xml(yang.gdata.get_xml_opt_child(n, "multicast-address-family")), protocol_type=yang.gdata.from_xml_opt_str(n, "protocol-type"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service(yang.adata.MNode):
    qos: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos
    carrierscarrier: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier
    multicast: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast

    mut def __init__(self, qos: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos=None, carrierscarrier: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier=None, multicast: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if qos is not None:
            self.qos = qos
        else:
            self.qos = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos()
        self_qos = self.qos
        if self_qos is not None:
            self_qos._parent = self
        if carrierscarrier is not None:
            self.carrierscarrier = carrierscarrier
        else:
            self.carrierscarrier = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier()
        self_carrierscarrier = self.carrierscarrier
        if self_carrierscarrier is not None:
            self_carrierscarrier._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _qos = self.qos
        _carrierscarrier = self.carrierscarrier
        _multicast = self.multicast
        if _qos is not None:
            children['qos'] = _qos.to_gdata()
        if _carrierscarrier is not None:
            children['carrierscarrier'] = _carrierscarrier.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service(qos=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos.from_gdata(n.get_opt_container("qos")), carrierscarrier=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier.from_gdata(n.get_opt_container("carrierscarrier")), multicast=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast.from_gdata(n.get_opt_container("multicast")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__service(qos=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos.from_xml(yang.gdata.get_xml_opt_child(n, "qos")), carrierscarrier=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier.from_xml(yang.gdata.get_xml_opt_child(n, "carrierscarrier")), multicast=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection(yang.adata.MNode):
    enabled: bool

    mut def __init__(self, enabled: ?bool=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if enabled != None:
            self.enabled = enabled
        else:
            self.enabled = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enabled = self.enabled
        if _enabled is not None:
            children['enabled'] = yang.gdata.Leaf('boolean', _enabled)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection(enabled=n.get_opt_bool("enabled"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection(enabled=yang.gdata.from_xml_opt_bool(n, "enabled"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(yang.adata.MNode):
    target_site: str
    metric: int

    mut def __init__(self, target_site: str, metric: ?int=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.target_site = target_site
        if metric != None:
            self.metric = metric
        else:
            self.metric = 1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _target_site = self.target_site
        _metric = self.metric
        if _target_site is not None:
            children['target-site'] = yang.gdata.Leaf('string', _target_site)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint16', _metric)
        return yang.gdata.ListElement([str(self.target_site)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site=n.get_str("target-site"), metric=n.get_opt_int("metric"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site=yang.gdata.from_xml_str(n, "target-site"), metric=yang.gdata.from_xml_opt_int(n, "metric"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'sham-link'
        self.elements = elements

    mut def create(self, target_site):
        for e in self.elements:
            match = True
            if e.target_site != target_site:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['target-site'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links(yang.adata.MNode):
    sham_link: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link

    mut def __init__(self, sham_link: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.sham_link = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link(elements=sham_link)
        self.sham_link._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sham_link = self.sham_link
        if _sham_link is not None:
            children['sham-link'] = _sham_link.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links(sham_link=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link.from_gdata(n.get_list("sham-link")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links(sham_link=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link.from_xml(yang.gdata.get_xml_children(n, "sham-link")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf(yang.adata.MNode):
    address_family: list[str]
    area_address: str
    metric: int
    sham_links: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links

    mut def __init__(self, area_address: str, address_family: ?list[str]=None, metric: ?int=None, sham_links: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []
        self.area_address = area_address
        if metric != None:
            self.metric = metric
        else:
            self.metric = 1
        if sham_links is not None:
            self.sham_links = sham_links
        else:
            self.sham_links = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links()
        self_sham_links = self.sham_links
        if self_sham_links is not None:
            self_sham_links._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _area_address = self.area_address
        _metric = self.metric
        _sham_links = self.sham_links
        children['address-family'] = yang.gdata.LeafList(self.address_family)
        if _area_address is not None:
            children['area-address'] = yang.gdata.Leaf('string', _area_address)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint16', _metric)
        if _sham_links is not None:
            children['sham-links'] = _sham_links.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf(address_family=n.get_opt_strs("address-family"), area_address=n.get_str("area-address"), metric=n.get_opt_int("metric"), sham_links=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links.from_gdata(n.get_opt_container("sham-links")))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf(address_family=yang.gdata.from_xml_opt_strs(n, "address-family"), area_address=yang.gdata.from_xml_str(n, "area-address"), metric=yang.gdata.from_xml_opt_int(n, "metric"), sham_links=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links.from_xml(yang.gdata.get_xml_opt_child(n, "sham-links")))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp(yang.adata.MNode):
    autonomous_system: int
    address_family: list[str]

    mut def __init__(self, autonomous_system: int, address_family: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.autonomous_system = autonomous_system
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            children['autonomous-system'] = yang.gdata.Leaf('uint32', _autonomous_system)
        children['address-family'] = yang.gdata.LeafList(self.address_family)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp(autonomous_system=n.get_int("autonomous-system"), address_family=n.get_opt_strs("address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp(autonomous_system=yang.gdata.from_xml_int(n, "autonomous-system"), address_family=yang.gdata.from_xml_opt_strs(n, "address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(yang.adata.MNode):
    lan: str
    next_hop: str
    lan_tag: ?str

    mut def __init__(self, lan: str, next_hop: str, lan_tag: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.lan = lan
        self.next_hop = next_hop
        self.lan_tag = lan_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lan = self.lan
        _next_hop = self.next_hop
        _lan_tag = self.lan_tag
        if _lan is not None:
            children['lan'] = yang.gdata.Leaf('string', _lan)
        if _next_hop is not None:
            children['next-hop'] = yang.gdata.Leaf('string', _next_hop)
        if _lan_tag is not None:
            children['lan-tag'] = yang.gdata.Leaf('string', _lan_tag)
        return yang.gdata.ListElement([str(self.lan), str(self.next_hop)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan=n.get_str("lan"), next_hop=n.get_str("next-hop"), lan_tag=n.get_opt_str("lan-tag"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan=yang.gdata.from_xml_str(n, "lan"), next_hop=yang.gdata.from_xml_str(n, "next-hop"), lan_tag=yang.gdata.from_xml_opt_str(n, "lan-tag"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'ipv4-lan-prefixes'
        self.elements = elements

    mut def create(self, lan, next_hop):
        for e in self.elements:
            match = True
            if e.lan != lan:
                match = False
                break
            if e.next_hop != next_hop:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan, next_hop)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['lan', 'next-hop'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(yang.adata.MNode):
    lan: str
    next_hop: str
    lan_tag: ?str

    mut def __init__(self, lan: str, next_hop: str, lan_tag: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.lan = lan
        self.next_hop = next_hop
        self.lan_tag = lan_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lan = self.lan
        _next_hop = self.next_hop
        _lan_tag = self.lan_tag
        if _lan is not None:
            children['lan'] = yang.gdata.Leaf('string', _lan)
        if _next_hop is not None:
            children['next-hop'] = yang.gdata.Leaf('string', _next_hop)
        if _lan_tag is not None:
            children['lan-tag'] = yang.gdata.Leaf('string', _lan_tag)
        return yang.gdata.ListElement([str(self.lan), str(self.next_hop)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan=n.get_str("lan"), next_hop=n.get_str("next-hop"), lan_tag=n.get_opt_str("lan-tag"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan=yang.gdata.from_xml_str(n, "lan"), next_hop=yang.gdata.from_xml_str(n, "next-hop"), lan_tag=yang.gdata.from_xml_opt_str(n, "lan-tag"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'ipv6-lan-prefixes'
        self.elements = elements

    mut def create(self, lan, next_hop):
        for e in self.elements:
            match = True
            if e.lan != lan:
                match = False
                break
            if e.next_hop != next_hop:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan, next_hop)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['lan', 'next-hop'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(yang.adata.MNode):
    ipv4_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes
    ipv6_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes

    mut def __init__(self, ipv4_lan_prefixes: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]=[], ipv6_lan_prefixes: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.ipv4_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes(elements=ipv4_lan_prefixes)
        self.ipv4_lan_prefixes._parent = self
        self.ipv6_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes(elements=ipv6_lan_prefixes)
        self.ipv6_lan_prefixes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_lan_prefixes = self.ipv4_lan_prefixes
        _ipv6_lan_prefixes = self.ipv6_lan_prefixes
        if _ipv4_lan_prefixes is not None:
            children['ipv4-lan-prefixes'] = _ipv4_lan_prefixes.to_gdata()
        if _ipv6_lan_prefixes is not None:
            children['ipv6-lan-prefixes'] = _ipv6_lan_prefixes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(ipv4_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes.from_gdata(n.get_list("ipv4-lan-prefixes")), ipv6_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes.from_gdata(n.get_list("ipv6-lan-prefixes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(ipv4_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes.from_xml(yang.gdata.get_xml_children(n, "ipv4-lan-prefixes")), ipv6_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes.from_xml(yang.gdata.get_xml_children(n, "ipv6-lan-prefixes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static(yang.adata.MNode):
    cascaded_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes

    mut def __init__(self, cascaded_lan_prefixes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if cascaded_lan_prefixes is not None:
            self.cascaded_lan_prefixes = cascaded_lan_prefixes
        else:
            self.cascaded_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes()
        self_cascaded_lan_prefixes = self.cascaded_lan_prefixes
        if self_cascaded_lan_prefixes is not None:
            self_cascaded_lan_prefixes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cascaded_lan_prefixes = self.cascaded_lan_prefixes
        if _cascaded_lan_prefixes is not None:
            children['cascaded-lan-prefixes'] = _cascaded_lan_prefixes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static(cascaded_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes.from_gdata(n.get_opt_container("cascaded-lan-prefixes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static(cascaded_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes.from_xml(yang.gdata.get_xml_opt_child(n, "cascaded-lan-prefixes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip(yang.adata.MNode):
    address_family: list[str]

    mut def __init__(self, address_family: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['address-family'] = yang.gdata.LeafList(self.address_family)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip(address_family=n.get_opt_strs("address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip(address_family=yang.gdata.from_xml_opt_strs(n, "address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp(yang.adata.MNode):
    address_family: list[str]

    mut def __init__(self, address_family: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['address-family'] = yang.gdata.LeafList(self.address_family)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp(address_family=n.get_opt_strs("address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp(address_family=yang.gdata.from_xml_opt_strs(n, "address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry(yang.adata.MNode):
    type: str
    ospf: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf
    bgp: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp
    static: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static
    rip: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip
    vrrp: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp

    mut def __init__(self, type: str, ospf: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf, bgp: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp, rip: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip, vrrp: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp, static: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.type = type
        self.ospf = ospf
        self.ospf._parent = self
        self.bgp = bgp
        self.bgp._parent = self
        if static is not None:
            self.static = static
        else:
            self.static = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static()
        self_static = self.static
        if self_static is not None:
            self_static._parent = self
        self.rip = rip
        self.rip._parent = self
        self.vrrp = vrrp
        self.vrrp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        _ospf = self.ospf
        _bgp = self.bgp
        _static = self.static
        _rip = self.rip
        _vrrp = self.vrrp
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _ospf is not None:
            children['ospf'] = _ospf.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _static is not None:
            children['static'] = _static.to_gdata()
        if _rip is not None:
            children['rip'] = _rip.to_gdata()
        if _vrrp is not None:
            children['vrrp'] = _vrrp.to_gdata()
        return yang.gdata.ListElement([str(self.type)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry(type=n.get_str("type"), ospf=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf.from_gdata(n.get_container("ospf")), bgp=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp.from_gdata(n.get_container("bgp")), static=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static.from_gdata(n.get_opt_container("static")), rip=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip.from_gdata(n.get_container("rip")), vrrp=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp.from_gdata(n.get_container("vrrp")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry(type=yang.gdata.from_xml_str(n, "type"), ospf=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf.from_xml(yang.gdata.get_xml_child(n, "ospf")), bgp=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp.from_xml(yang.gdata.get_xml_child(n, "bgp")), static=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static.from_xml(yang.gdata.get_xml_opt_child(n, "static")), rip=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip.from_xml(yang.gdata.get_xml_child(n, "rip")), vrrp=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp.from_xml(yang.gdata.get_xml_child(n, "vrrp")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'routing-protocol'
        self.elements = elements

    mut def create(self, type, ospf, bgp, rip, vrrp):
        for e in self.elements:
            match = True
            if e.type != type:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry(type, ospf, bgp, rip, vrrp)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['type'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols(yang.adata.MNode):
    routing_protocol: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol

    mut def __init__(self, routing_protocol: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.routing_protocol = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol(elements=routing_protocol)
        self.routing_protocol._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _routing_protocol = self.routing_protocol
        if _routing_protocol is not None:
            children['routing-protocol'] = _routing_protocol.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols(routing_protocol=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol.from_gdata(n.get_list("routing-protocol")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols(routing_protocol=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol.from_xml(yang.gdata.get_xml_children(n, "routing-protocol")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry(yang.adata.MNode):
    group_id: str

    mut def __init__(self, group_id: str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group_id = group_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_id = self.group_id
        if _group_id is not None:
            children['group-id'] = yang.gdata.Leaf('string', _group_id)
        return yang.gdata.ListElement([str(self.group_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry(group_id=n.get_str("group-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry(group_id=yang.gdata.from_xml_str(n, "group-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_id):
        for e in self.elements:
            match = True
            if e.group_id != group_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry(group_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups(yang.adata.MNode):
    group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group

    mut def __init__(self, group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group(elements=group)
        self.group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group.from_gdata(n.get_list("group")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry(yang.adata.MNode):
    group_id: str

    mut def __init__(self, group_id: str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group_id = group_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_id = self.group_id
        if _group_id is not None:
            children['group-id'] = yang.gdata.Leaf('string', _group_id)
        return yang.gdata.ListElement([str(self.group_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry(group_id=n.get_str("group-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry(group_id=yang.gdata.from_xml_str(n, "group-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_id):
        for e in self.elements:
            match = True
            if e.group_id != group_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry(group_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target(yang.adata.MNode):
    group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group
    all_other_accesses: ?bool
    all_other_groups: ?bool

    mut def __init__(self, group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry]=[], all_other_accesses: ?bool, all_other_groups: ?bool):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group(elements=group)
        self.group._parent = self
        self.all_other_accesses = all_other_accesses
        self.all_other_groups = all_other_groups

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        _all_other_accesses = self.all_other_accesses
        _all_other_groups = self.all_other_groups
        if _group is not None:
            children['group'] = _group.to_gdata()
        if _all_other_accesses is not None:
            children['all-other-accesses'] = yang.gdata.Leaf('empty', _all_other_accesses)
        if _all_other_groups is not None:
            children['all-other-groups'] = yang.gdata.Leaf('empty', _all_other_groups)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group.from_gdata(n.get_list("group")), all_other_accesses=n.get_opt_bool("all-other-accesses"), all_other_groups=n.get_opt_bool("all-other-groups"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group.from_xml(yang.gdata.get_xml_children(n, "group")), all_other_accesses=yang.gdata.from_xml_opt_bool(n, "all-other-accesses"), all_other_groups=yang.gdata.from_xml_opt_bool(n, "all-other-groups"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry(yang.adata.MNode):
    constraint_type: str
    target: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target

    mut def __init__(self, constraint_type: str, target: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.constraint_type = constraint_type
        if target is not None:
            self.target = target
        else:
            self.target = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target()
        self_target = self.target
        if self_target is not None:
            self_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _constraint_type = self.constraint_type
        _target = self.target
        if _constraint_type is not None:
            children['constraint-type'] = yang.gdata.Leaf('identityref', _constraint_type)
        if _target is not None:
            children['target'] = _target.to_gdata()
        return yang.gdata.ListElement([str(self.constraint_type)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry(constraint_type=n.get_str("constraint-type"), target=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target.from_gdata(n.get_opt_container("target")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry(constraint_type=yang.gdata.from_xml_str(n, "constraint-type"), target=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target.from_xml(yang.gdata.get_xml_opt_child(n, "target")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'constraint'
        self.elements = elements

    mut def create(self, constraint_type):
        for e in self.elements:
            match = True
            if e.constraint_type != constraint_type:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry(constraint_type)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['constraint-type'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints(yang.adata.MNode):
    constraint: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint

    mut def __init__(self, constraint: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.constraint = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint(elements=constraint)
        self.constraint._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _constraint = self.constraint
        if _constraint is not None:
            children['constraint'] = _constraint.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints(constraint=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint.from_gdata(n.get_list("constraint")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints(constraint=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint.from_xml(yang.gdata.get_xml_children(n, "constraint")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity(yang.adata.MNode):
    groups: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups
    constraints: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints

    mut def __init__(self, groups: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups=None, constraints: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if groups is not None:
            self.groups = groups
        else:
            self.groups = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups()
        self_groups = self.groups
        if self_groups is not None:
            self_groups._parent = self
        if constraints is not None:
            self.constraints = constraints
        else:
            self.constraints = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints()
        self_constraints = self.constraints
        if self_constraints is not None:
            self_constraints._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _groups = self.groups
        _constraints = self.constraints
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        if _constraints is not None:
            children['constraints'] = _constraints.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity(groups=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups.from_gdata(n.get_opt_container("groups")), constraints=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints.from_gdata(n.get_opt_container("constraints")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity(groups=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups.from_xml(yang.gdata.get_xml_opt_child(n, "groups")), constraints=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints.from_xml(yang.gdata.get_xml_opt_child(n, "constraints")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type(yang.adata.MNode):
    requested_type: ?str
    strict: bool

    mut def __init__(self, requested_type: ?str, strict: ?bool=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.requested_type = requested_type
        if strict != None:
            self.strict = strict
        else:
            self.strict = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _requested_type = self.requested_type
        _strict = self.strict
        if _requested_type is not None:
            children['requested-type'] = yang.gdata.Leaf('string', _requested_type)
        if _strict is not None:
            children['strict'] = yang.gdata.Leaf('boolean', _strict)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type(requested_type=n.get_opt_str("requested-type"), strict=n.get_opt_bool("strict"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type(requested_type=yang.gdata.from_xml_opt_str(n, "requested-type"), strict=yang.gdata.from_xml_opt_bool(n, "strict"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer(yang.adata.MNode):
    requested_type: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type
    always_on: bool
    bearer_reference: ?str

    mut def __init__(self, requested_type: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type=None, always_on: ?bool=None, bearer_reference: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if requested_type is not None:
            self.requested_type = requested_type
        else:
            self.requested_type = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type()
        self_requested_type = self.requested_type
        if self_requested_type is not None:
            self_requested_type._parent = self
        if always_on != None:
            self.always_on = always_on
        else:
            self.always_on = True
        self.bearer_reference = bearer_reference

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _requested_type = self.requested_type
        _always_on = self.always_on
        _bearer_reference = self.bearer_reference
        if _requested_type is not None:
            children['requested-type'] = _requested_type.to_gdata()
        if _always_on is not None:
            children['always-on'] = yang.gdata.Leaf('boolean', _always_on)
        if _bearer_reference is not None:
            children['bearer-reference'] = yang.gdata.Leaf('string', _bearer_reference)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer(requested_type=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type.from_gdata(n.get_opt_container("requested-type")), always_on=n.get_opt_bool("always-on"), bearer_reference=n.get_opt_str("bearer-reference"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer(requested_type=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type.from_xml(yang.gdata.get_xml_opt_child(n, "requested-type")), always_on=yang.gdata.from_xml_opt_bool(n, "always-on"), bearer_reference=yang.gdata.from_xml_opt_str(n, "bearer-reference"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry(yang.adata.MNode):
    group_id: str
    start_address: ?str
    end_address: ?str

    mut def __init__(self, group_id: str, start_address: ?str, end_address: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group_id = group_id
        self.start_address = start_address
        self.end_address = end_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_id = self.group_id
        _start_address = self.start_address
        _end_address = self.end_address
        if _group_id is not None:
            children['group-id'] = yang.gdata.Leaf('string', _group_id)
        if _start_address is not None:
            children['start-address'] = yang.gdata.Leaf('string', _start_address)
        if _end_address is not None:
            children['end-address'] = yang.gdata.Leaf('string', _end_address)
        return yang.gdata.ListElement([str(self.group_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry(group_id=n.get_str("group-id"), start_address=n.get_opt_str("start-address"), end_address=n.get_opt_str("end-address"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry(group_id=yang.gdata.from_xml_str(n, "group-id"), start_address=yang.gdata.from_xml_opt_str(n, "start-address"), end_address=yang.gdata.from_xml_opt_str(n, "end-address"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'address-group'
        self.elements = elements

    mut def create(self, group_id):
        for e in self.elements:
            match = True
            if e.group_id != group_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry(group_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses(yang.adata.MNode):
    address_group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group

    mut def __init__(self, address_group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.address_group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group(elements=address_group)
        self.address_group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_group = self.address_group
        if _address_group is not None:
            children['address-group'] = _address_group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses(address_group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group.from_gdata(n.get_list("address-group")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses(address_group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group.from_xml(yang.gdata.get_xml_children(n, "address-group")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp(yang.adata.MNode):
    provider_address: ?str
    prefix_length: ?int
    number_of_dynamic_address: int
    customer_addresses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses

    mut def __init__(self, provider_address: ?str, prefix_length: ?int, number_of_dynamic_address: ?int=None, customer_addresses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.provider_address = provider_address
        self.prefix_length = prefix_length
        if number_of_dynamic_address != None:
            self.number_of_dynamic_address = number_of_dynamic_address
        else:
            self.number_of_dynamic_address = 1
        if customer_addresses is not None:
            self.customer_addresses = customer_addresses
        else:
            self.customer_addresses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses()
        self_customer_addresses = self.customer_addresses
        if self_customer_addresses is not None:
            self_customer_addresses._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _provider_address = self.provider_address
        _prefix_length = self.prefix_length
        _number_of_dynamic_address = self.number_of_dynamic_address
        _customer_addresses = self.customer_addresses
        if _provider_address is not None:
            children['provider-address'] = yang.gdata.Leaf('string', _provider_address)
        if _prefix_length is not None:
            children['prefix-length'] = yang.gdata.Leaf('uint8', _prefix_length)
        if _number_of_dynamic_address is not None:
            children['number-of-dynamic-address'] = yang.gdata.Leaf('uint16', _number_of_dynamic_address)
        if _customer_addresses is not None:
            children['customer-addresses'] = _customer_addresses.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp(provider_address=n.get_opt_str("provider-address"), prefix_length=n.get_opt_int("prefix-length"), number_of_dynamic_address=n.get_opt_int("number-of-dynamic-address"), customer_addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses.from_gdata(n.get_opt_container("customer-addresses")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp(provider_address=yang.gdata.from_xml_opt_str(n, "provider-address"), prefix_length=yang.gdata.from_xml_opt_int(n, "prefix-length"), number_of_dynamic_address=yang.gdata.from_xml_opt_int(n, "number-of-dynamic-address"), customer_addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses.from_xml(yang.gdata.get_xml_opt_child(n, "customer-addresses")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers(yang.adata.MNode):
    server_ip_address: list[str]

    mut def __init__(self, server_ip_address: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if server_ip_address is not None:
            self.server_ip_address = server_ip_address
        else:
            self.server_ip_address = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['server-ip-address'] = yang.gdata.LeafList(self.server_ip_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers(server_ip_address=n.get_opt_strs("server-ip-address"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers(server_ip_address=yang.gdata.from_xml_opt_strs(n, "server-ip-address"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay(yang.adata.MNode):
    provider_address: ?str
    prefix_length: ?int
    customer_dhcp_servers: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers

    mut def __init__(self, provider_address: ?str, prefix_length: ?int, customer_dhcp_servers: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.provider_address = provider_address
        self.prefix_length = prefix_length
        if customer_dhcp_servers is not None:
            self.customer_dhcp_servers = customer_dhcp_servers
        else:
            self.customer_dhcp_servers = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers()
        self_customer_dhcp_servers = self.customer_dhcp_servers
        if self_customer_dhcp_servers is not None:
            self_customer_dhcp_servers._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _provider_address = self.provider_address
        _prefix_length = self.prefix_length
        _customer_dhcp_servers = self.customer_dhcp_servers
        if _provider_address is not None:
            children['provider-address'] = yang.gdata.Leaf('string', _provider_address)
        if _prefix_length is not None:
            children['prefix-length'] = yang.gdata.Leaf('uint8', _prefix_length)
        if _customer_dhcp_servers is not None:
            children['customer-dhcp-servers'] = _customer_dhcp_servers.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay(provider_address=n.get_opt_str("provider-address"), prefix_length=n.get_opt_int("prefix-length"), customer_dhcp_servers=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers.from_gdata(n.get_opt_container("customer-dhcp-servers")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay(provider_address=yang.gdata.from_xml_opt_str(n, "provider-address"), prefix_length=yang.gdata.from_xml_opt_int(n, "prefix-length"), customer_dhcp_servers=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers.from_xml(yang.gdata.get_xml_opt_child(n, "customer-dhcp-servers")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses(yang.adata.MNode):
    provider_address: ?str
    customer_address: ?str
    prefix_length: ?int

    mut def __init__(self, provider_address: ?str, customer_address: ?str, prefix_length: ?int):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.provider_address = provider_address
        self.customer_address = customer_address
        self.prefix_length = prefix_length

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _provider_address = self.provider_address
        _customer_address = self.customer_address
        _prefix_length = self.prefix_length
        if _provider_address is not None:
            children['provider-address'] = yang.gdata.Leaf('string', _provider_address)
        if _customer_address is not None:
            children['customer-address'] = yang.gdata.Leaf('string', _customer_address)
        if _prefix_length is not None:
            children['prefix-length'] = yang.gdata.Leaf('uint8', _prefix_length)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses(provider_address=n.get_opt_str("provider-address"), customer_address=n.get_opt_str("customer-address"), prefix_length=n.get_opt_int("prefix-length"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses(provider_address=yang.gdata.from_xml_opt_str(n, "provider-address"), customer_address=yang.gdata.from_xml_opt_str(n, "customer-address"), prefix_length=yang.gdata.from_xml_opt_int(n, "prefix-length"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4(yang.adata.MNode):
    address_allocation_type: ?str
    provider_dhcp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp
    dhcp_relay: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay
    addresses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses

    mut def __init__(self, address_allocation_type: ?str, provider_dhcp: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp=None, dhcp_relay: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay=None, addresses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.address_allocation_type = address_allocation_type
        if provider_dhcp is not None:
            self.provider_dhcp = provider_dhcp
        else:
            self.provider_dhcp = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp()
        self_provider_dhcp = self.provider_dhcp
        if self_provider_dhcp is not None:
            self_provider_dhcp._parent = self
        if dhcp_relay is not None:
            self.dhcp_relay = dhcp_relay
        else:
            self.dhcp_relay = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay()
        self_dhcp_relay = self.dhcp_relay
        if self_dhcp_relay is not None:
            self_dhcp_relay._parent = self
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_allocation_type = self.address_allocation_type
        _provider_dhcp = self.provider_dhcp
        _dhcp_relay = self.dhcp_relay
        _addresses = self.addresses
        if _address_allocation_type is not None:
            children['address-allocation-type'] = yang.gdata.Leaf('identityref', _address_allocation_type)
        if _provider_dhcp is not None:
            children['provider-dhcp'] = _provider_dhcp.to_gdata()
        if _dhcp_relay is not None:
            children['dhcp-relay'] = _dhcp_relay.to_gdata()
        if _addresses is not None:
            children['addresses'] = _addresses.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4(address_allocation_type=n.get_opt_str("address-allocation-type"), provider_dhcp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp.from_gdata(n.get_opt_container("provider-dhcp")), dhcp_relay=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay.from_gdata(n.get_opt_container("dhcp-relay")), addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses.from_gdata(n.get_opt_container("addresses")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4(address_allocation_type=yang.gdata.from_xml_opt_str(n, "address-allocation-type"), provider_dhcp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "provider-dhcp")), dhcp_relay=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp-relay")), addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry(yang.adata.MNode):
    group_id: str
    start_address: ?str
    end_address: ?str

    mut def __init__(self, group_id: str, start_address: ?str, end_address: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.group_id = group_id
        self.start_address = start_address
        self.end_address = end_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_id = self.group_id
        _start_address = self.start_address
        _end_address = self.end_address
        if _group_id is not None:
            children['group-id'] = yang.gdata.Leaf('string', _group_id)
        if _start_address is not None:
            children['start-address'] = yang.gdata.Leaf('string', _start_address)
        if _end_address is not None:
            children['end-address'] = yang.gdata.Leaf('string', _end_address)
        return yang.gdata.ListElement([str(self.group_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry(group_id=n.get_str("group-id"), start_address=n.get_opt_str("start-address"), end_address=n.get_opt_str("end-address"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry(group_id=yang.gdata.from_xml_str(n, "group-id"), start_address=yang.gdata.from_xml_opt_str(n, "start-address"), end_address=yang.gdata.from_xml_opt_str(n, "end-address"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'address-group'
        self.elements = elements

    mut def create(self, group_id):
        for e in self.elements:
            match = True
            if e.group_id != group_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry(group_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses(yang.adata.MNode):
    address_group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group

    mut def __init__(self, address_group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.address_group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group(elements=address_group)
        self.address_group._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_group = self.address_group
        if _address_group is not None:
            children['address-group'] = _address_group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses(address_group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group.from_gdata(n.get_list("address-group")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses(address_group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group.from_xml(yang.gdata.get_xml_children(n, "address-group")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp(yang.adata.MNode):
    provider_address: ?str
    prefix_length: ?int
    number_of_dynamic_address: int
    customer_addresses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses

    mut def __init__(self, provider_address: ?str, prefix_length: ?int, number_of_dynamic_address: ?int=None, customer_addresses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.provider_address = provider_address
        self.prefix_length = prefix_length
        if number_of_dynamic_address != None:
            self.number_of_dynamic_address = number_of_dynamic_address
        else:
            self.number_of_dynamic_address = 1
        if customer_addresses is not None:
            self.customer_addresses = customer_addresses
        else:
            self.customer_addresses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses()
        self_customer_addresses = self.customer_addresses
        if self_customer_addresses is not None:
            self_customer_addresses._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _provider_address = self.provider_address
        _prefix_length = self.prefix_length
        _number_of_dynamic_address = self.number_of_dynamic_address
        _customer_addresses = self.customer_addresses
        if _provider_address is not None:
            children['provider-address'] = yang.gdata.Leaf('string', _provider_address)
        if _prefix_length is not None:
            children['prefix-length'] = yang.gdata.Leaf('uint8', _prefix_length)
        if _number_of_dynamic_address is not None:
            children['number-of-dynamic-address'] = yang.gdata.Leaf('uint16', _number_of_dynamic_address)
        if _customer_addresses is not None:
            children['customer-addresses'] = _customer_addresses.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp(provider_address=n.get_opt_str("provider-address"), prefix_length=n.get_opt_int("prefix-length"), number_of_dynamic_address=n.get_opt_int("number-of-dynamic-address"), customer_addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses.from_gdata(n.get_opt_container("customer-addresses")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp(provider_address=yang.gdata.from_xml_opt_str(n, "provider-address"), prefix_length=yang.gdata.from_xml_opt_int(n, "prefix-length"), number_of_dynamic_address=yang.gdata.from_xml_opt_int(n, "number-of-dynamic-address"), customer_addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses.from_xml(yang.gdata.get_xml_opt_child(n, "customer-addresses")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers(yang.adata.MNode):
    server_ip_address: list[str]

    mut def __init__(self, server_ip_address: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if server_ip_address is not None:
            self.server_ip_address = server_ip_address
        else:
            self.server_ip_address = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['server-ip-address'] = yang.gdata.LeafList(self.server_ip_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers(server_ip_address=n.get_opt_strs("server-ip-address"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers(server_ip_address=yang.gdata.from_xml_opt_strs(n, "server-ip-address"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay(yang.adata.MNode):
    provider_address: ?str
    prefix_length: ?int
    customer_dhcp_servers: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers

    mut def __init__(self, provider_address: ?str, prefix_length: ?int, customer_dhcp_servers: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.provider_address = provider_address
        self.prefix_length = prefix_length
        if customer_dhcp_servers is not None:
            self.customer_dhcp_servers = customer_dhcp_servers
        else:
            self.customer_dhcp_servers = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers()
        self_customer_dhcp_servers = self.customer_dhcp_servers
        if self_customer_dhcp_servers is not None:
            self_customer_dhcp_servers._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _provider_address = self.provider_address
        _prefix_length = self.prefix_length
        _customer_dhcp_servers = self.customer_dhcp_servers
        if _provider_address is not None:
            children['provider-address'] = yang.gdata.Leaf('string', _provider_address)
        if _prefix_length is not None:
            children['prefix-length'] = yang.gdata.Leaf('uint8', _prefix_length)
        if _customer_dhcp_servers is not None:
            children['customer-dhcp-servers'] = _customer_dhcp_servers.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay(provider_address=n.get_opt_str("provider-address"), prefix_length=n.get_opt_int("prefix-length"), customer_dhcp_servers=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers.from_gdata(n.get_opt_container("customer-dhcp-servers")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay(provider_address=yang.gdata.from_xml_opt_str(n, "provider-address"), prefix_length=yang.gdata.from_xml_opt_int(n, "prefix-length"), customer_dhcp_servers=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers.from_xml(yang.gdata.get_xml_opt_child(n, "customer-dhcp-servers")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses(yang.adata.MNode):
    provider_address: ?str
    customer_address: ?str
    prefix_length: ?int

    mut def __init__(self, provider_address: ?str, customer_address: ?str, prefix_length: ?int):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.provider_address = provider_address
        self.customer_address = customer_address
        self.prefix_length = prefix_length

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _provider_address = self.provider_address
        _customer_address = self.customer_address
        _prefix_length = self.prefix_length
        if _provider_address is not None:
            children['provider-address'] = yang.gdata.Leaf('string', _provider_address)
        if _customer_address is not None:
            children['customer-address'] = yang.gdata.Leaf('string', _customer_address)
        if _prefix_length is not None:
            children['prefix-length'] = yang.gdata.Leaf('uint8', _prefix_length)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses(provider_address=n.get_opt_str("provider-address"), customer_address=n.get_opt_str("customer-address"), prefix_length=n.get_opt_int("prefix-length"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses(provider_address=yang.gdata.from_xml_opt_str(n, "provider-address"), customer_address=yang.gdata.from_xml_opt_str(n, "customer-address"), prefix_length=yang.gdata.from_xml_opt_int(n, "prefix-length"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6(yang.adata.MNode):
    address_allocation_type: ?str
    provider_dhcp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp
    dhcp_relay: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay
    addresses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses

    mut def __init__(self, address_allocation_type: ?str, provider_dhcp: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp=None, dhcp_relay: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay=None, addresses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.address_allocation_type = address_allocation_type
        if provider_dhcp is not None:
            self.provider_dhcp = provider_dhcp
        else:
            self.provider_dhcp = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp()
        self_provider_dhcp = self.provider_dhcp
        if self_provider_dhcp is not None:
            self_provider_dhcp._parent = self
        if dhcp_relay is not None:
            self.dhcp_relay = dhcp_relay
        else:
            self.dhcp_relay = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay()
        self_dhcp_relay = self.dhcp_relay
        if self_dhcp_relay is not None:
            self_dhcp_relay._parent = self
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_allocation_type = self.address_allocation_type
        _provider_dhcp = self.provider_dhcp
        _dhcp_relay = self.dhcp_relay
        _addresses = self.addresses
        if _address_allocation_type is not None:
            children['address-allocation-type'] = yang.gdata.Leaf('identityref', _address_allocation_type)
        if _provider_dhcp is not None:
            children['provider-dhcp'] = _provider_dhcp.to_gdata()
        if _dhcp_relay is not None:
            children['dhcp-relay'] = _dhcp_relay.to_gdata()
        if _addresses is not None:
            children['addresses'] = _addresses.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6(address_allocation_type=n.get_opt_str("address-allocation-type"), provider_dhcp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp.from_gdata(n.get_opt_container("provider-dhcp")), dhcp_relay=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay.from_gdata(n.get_opt_container("dhcp-relay")), addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses.from_gdata(n.get_opt_container("addresses")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6(address_allocation_type=yang.gdata.from_xml_opt_str(n, "address-allocation-type"), provider_dhcp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp.from_xml(yang.gdata.get_xml_opt_child(n, "provider-dhcp")), dhcp_relay=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay.from_xml(yang.gdata.get_xml_opt_child(n, "dhcp-relay")), addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses.from_xml(yang.gdata.get_xml_opt_child(n, "addresses")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd(yang.adata.MNode):
    enabled: bool
    fixed_value: ?int
    profile_name: ?str

    mut def __init__(self, enabled: ?bool=None, fixed_value: ?int, profile_name: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if enabled != None:
            self.enabled = enabled
        else:
            self.enabled = False
        self.fixed_value = fixed_value
        self.profile_name = profile_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enabled = self.enabled
        _fixed_value = self.fixed_value
        _profile_name = self.profile_name
        if _enabled is not None:
            children['enabled'] = yang.gdata.Leaf('boolean', _enabled)
        if _fixed_value is not None:
            children['fixed-value'] = yang.gdata.Leaf('uint32', _fixed_value)
        if _profile_name is not None:
            children['profile-name'] = yang.gdata.Leaf('leafref', _profile_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd(enabled=n.get_opt_bool("enabled"), fixed_value=n.get_opt_int("fixed-value"), profile_name=n.get_opt_str("profile-name"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd(enabled=yang.gdata.from_xml_opt_bool(n, "enabled"), fixed_value=yang.gdata.from_xml_opt_int(n, "fixed-value"), profile_name=yang.gdata.from_xml_opt_str(n, "profile-name"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam(yang.adata.MNode):
    bfd: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd

    mut def __init__(self, bfd: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if bfd is not None:
            self.bfd = bfd
        else:
            self.bfd = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd()
        self_bfd = self.bfd
        if self_bfd is not None:
            self_bfd._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bfd = self.bfd
        if _bfd is not None:
            children['bfd'] = _bfd.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam(bfd=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd.from_gdata(n.get_opt_container("bfd")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam(bfd=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd.from_xml(yang.gdata.get_xml_opt_child(n, "bfd")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection(yang.adata.MNode):
    ipv4: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4
    ipv6: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6
    oam: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam

    mut def __init__(self, ipv4: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4=None, ipv6: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6=None, oam: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        if oam is not None:
            self.oam = oam
        else:
            self.oam = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam()
        self_oam = self.oam
        if self_oam is not None:
            self_oam._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _oam = self.oam
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        if _oam is not None:
            children['oam'] = _oam.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection(ipv4=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6.from_gdata(n.get_opt_container("ipv6")), oam=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam.from_gdata(n.get_opt_container("oam")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection(ipv4=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")), oam=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam.from_xml(yang.gdata.get_xml_opt_child(n, "oam")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication()
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication()
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile(yang.adata.MNode):
    profile_name: ?str
    algorithm: ?str
    preshared_key: ?str

    mut def __init__(self, profile_name: ?str, algorithm: ?str, preshared_key: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.profile_name = profile_name
        self.algorithm = algorithm
        self.preshared_key = preshared_key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _profile_name = self.profile_name
        _algorithm = self.algorithm
        _preshared_key = self.preshared_key
        if _profile_name is not None:
            children['profile-name'] = yang.gdata.Leaf('leafref', _profile_name)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('string', _algorithm)
        if _preshared_key is not None:
            children['preshared-key'] = yang.gdata.Leaf('string', _preshared_key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile(profile_name=n.get_opt_str("profile-name"), algorithm=n.get_opt_str("algorithm"), preshared_key=n.get_opt_str("preshared-key"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile(profile_name=yang.gdata.from_xml_opt_str(n, "profile-name"), algorithm=yang.gdata.from_xml_opt_str(n, "algorithm"), preshared_key=yang.gdata.from_xml_opt_str(n, "preshared-key"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption(yang.adata.MNode):
    enabled: bool
    layer: ?str
    encryption_profile: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile

    mut def __init__(self, enabled: ?bool=None, layer: ?str, encryption_profile: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if enabled != None:
            self.enabled = enabled
        else:
            self.enabled = False
        self.layer = layer
        if encryption_profile is not None:
            self.encryption_profile = encryption_profile
        else:
            self.encryption_profile = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile()
        self_encryption_profile = self.encryption_profile
        if self_encryption_profile is not None:
            self_encryption_profile._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enabled = self.enabled
        _layer = self.layer
        _encryption_profile = self.encryption_profile
        if _enabled is not None:
            children['enabled'] = yang.gdata.Leaf('boolean', _enabled)
        if _layer is not None:
            children['layer'] = yang.gdata.Leaf('enumeration', _layer)
        if _encryption_profile is not None:
            children['encryption-profile'] = _encryption_profile.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption(enabled=n.get_opt_bool("enabled"), layer=n.get_opt_str("layer"), encryption_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile.from_gdata(n.get_opt_container("encryption-profile")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption(enabled=yang.gdata.from_xml_opt_bool(n, "enabled"), layer=yang.gdata.from_xml_opt_str(n, "layer"), encryption_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile.from_xml(yang.gdata.get_xml_opt_child(n, "encryption-profile")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security(yang.adata.MNode):
    authentication: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication
    encryption: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption

    mut def __init__(self, authentication: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication=None, encryption: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication()
        self_authentication = self.authentication
        if self_authentication is not None:
            self_authentication._parent = self
        if encryption is not None:
            self.encryption = encryption
        else:
            self.encryption = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption()
        self_encryption = self.encryption
        if self_encryption is not None:
            self_encryption._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _authentication = self.authentication
        _encryption = self.encryption
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        if _encryption is not None:
            children['encryption'] = _encryption.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security(authentication=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication.from_gdata(n.get_opt_container("authentication")), encryption=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption.from_gdata(n.get_opt_container("encryption")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security(authentication=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication.from_xml(yang.gdata.get_xml_opt_child(n, "authentication")), encryption=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption.from_xml(yang.gdata.get_xml_opt_child(n, "encryption")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(yang.adata.MNode):
    lower_port: ?int
    upper_port: ?int

    mut def __init__(self, lower_port: ?int, upper_port: ?int):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.lower_port = lower_port
        self.upper_port = upper_port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lower_port = self.lower_port
        _upper_port = self.upper_port
        if _lower_port is not None:
            children['lower-port'] = yang.gdata.Leaf('uint16', _lower_port)
        if _upper_port is not None:
            children['upper-port'] = yang.gdata.Leaf('uint16', _upper_port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(lower_port=n.get_opt_int("lower-port"), upper_port=n.get_opt_int("upper-port"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(lower_port=yang.gdata.from_xml_opt_int(n, "lower-port"), upper_port=yang.gdata.from_xml_opt_int(n, "upper-port"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(yang.adata.MNode):
    lower_port: ?int
    upper_port: ?int

    mut def __init__(self, lower_port: ?int, upper_port: ?int):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.lower_port = lower_port
        self.upper_port = upper_port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lower_port = self.lower_port
        _upper_port = self.upper_port
        if _lower_port is not None:
            children['lower-port'] = yang.gdata.Leaf('uint16', _lower_port)
        if _upper_port is not None:
            children['upper-port'] = yang.gdata.Leaf('uint16', _upper_port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(lower_port=n.get_opt_int("lower-port"), upper_port=n.get_opt_int("upper-port"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(lower_port=yang.gdata.from_xml_opt_int(n, "lower-port"), upper_port=yang.gdata.from_xml_opt_int(n, "upper-port"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow(yang.adata.MNode):
    dscp: ?int
    dot1p: ?int
    ipv4_src_prefix: ?str
    ipv6_src_prefix: ?str
    ipv4_dst_prefix: ?str
    ipv6_dst_prefix: ?str
    l4_src_port: ?int
    target_sites: list[str]
    l4_src_port_range: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range
    l4_dst_port: ?int
    l4_dst_port_range: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range
    protocol_field: ?value

    mut def __init__(self, dscp: ?int, dot1p: ?int, ipv4_src_prefix: ?str, ipv6_src_prefix: ?str, ipv4_dst_prefix: ?str, ipv6_dst_prefix: ?str, l4_src_port: ?int, target_sites: ?list[str]=None, l4_src_port_range: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range=None, l4_dst_port: ?int, l4_dst_port_range: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range=None, protocol_field: ?value):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.dscp = dscp
        self.dot1p = dot1p
        self.ipv4_src_prefix = ipv4_src_prefix
        self.ipv6_src_prefix = ipv6_src_prefix
        self.ipv4_dst_prefix = ipv4_dst_prefix
        self.ipv6_dst_prefix = ipv6_dst_prefix
        self.l4_src_port = l4_src_port
        if target_sites is not None:
            self.target_sites = target_sites
        else:
            self.target_sites = []
        if l4_src_port_range is not None:
            self.l4_src_port_range = l4_src_port_range
        else:
            self.l4_src_port_range = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range()
        self_l4_src_port_range = self.l4_src_port_range
        if self_l4_src_port_range is not None:
            self_l4_src_port_range._parent = self
        self.l4_dst_port = l4_dst_port
        if l4_dst_port_range is not None:
            self.l4_dst_port_range = l4_dst_port_range
        else:
            self.l4_dst_port_range = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range()
        self_l4_dst_port_range = self.l4_dst_port_range
        if self_l4_dst_port_range is not None:
            self_l4_dst_port_range._parent = self
        self.protocol_field = protocol_field

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dscp = self.dscp
        _dot1p = self.dot1p
        _ipv4_src_prefix = self.ipv4_src_prefix
        _ipv6_src_prefix = self.ipv6_src_prefix
        _ipv4_dst_prefix = self.ipv4_dst_prefix
        _ipv6_dst_prefix = self.ipv6_dst_prefix
        _l4_src_port = self.l4_src_port
        _l4_src_port_range = self.l4_src_port_range
        _l4_dst_port = self.l4_dst_port
        _l4_dst_port_range = self.l4_dst_port_range
        _protocol_field = self.protocol_field
        if _dscp is not None:
            children['dscp'] = yang.gdata.Leaf('uint8', _dscp)
        if _dot1p is not None:
            children['dot1p'] = yang.gdata.Leaf('uint8', _dot1p)
        if _ipv4_src_prefix is not None:
            children['ipv4-src-prefix'] = yang.gdata.Leaf('string', _ipv4_src_prefix)
        if _ipv6_src_prefix is not None:
            children['ipv6-src-prefix'] = yang.gdata.Leaf('string', _ipv6_src_prefix)
        if _ipv4_dst_prefix is not None:
            children['ipv4-dst-prefix'] = yang.gdata.Leaf('string', _ipv4_dst_prefix)
        if _ipv6_dst_prefix is not None:
            children['ipv6-dst-prefix'] = yang.gdata.Leaf('string', _ipv6_dst_prefix)
        if _l4_src_port is not None:
            children['l4-src-port'] = yang.gdata.Leaf('uint16', _l4_src_port)
        children['target-sites'] = yang.gdata.LeafList(self.target_sites)
        if _l4_src_port_range is not None:
            children['l4-src-port-range'] = _l4_src_port_range.to_gdata()
        if _l4_dst_port is not None:
            children['l4-dst-port'] = yang.gdata.Leaf('uint16', _l4_dst_port)
        if _l4_dst_port_range is not None:
            children['l4-dst-port-range'] = _l4_dst_port_range.to_gdata()
        if _protocol_field is not None:
            children['protocol-field'] = yang.gdata.Leaf('union', _protocol_field)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow(dscp=n.get_opt_int("dscp"), dot1p=n.get_opt_int("dot1p"), ipv4_src_prefix=n.get_opt_str("ipv4-src-prefix"), ipv6_src_prefix=n.get_opt_str("ipv6-src-prefix"), ipv4_dst_prefix=n.get_opt_str("ipv4-dst-prefix"), ipv6_dst_prefix=n.get_opt_str("ipv6-dst-prefix"), l4_src_port=n.get_opt_int("l4-src-port"), target_sites=n.get_opt_strs("target-sites"), l4_src_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range.from_gdata(n.get_opt_container("l4-src-port-range")), l4_dst_port=n.get_opt_int("l4-dst-port"), l4_dst_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range.from_gdata(n.get_opt_container("l4-dst-port-range")), protocol_field=n.get_opt_value("protocol-field"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow(dscp=yang.gdata.from_xml_opt_int(n, "dscp"), dot1p=yang.gdata.from_xml_opt_int(n, "dot1p"), ipv4_src_prefix=yang.gdata.from_xml_opt_str(n, "ipv4-src-prefix"), ipv6_src_prefix=yang.gdata.from_xml_opt_str(n, "ipv6-src-prefix"), ipv4_dst_prefix=yang.gdata.from_xml_opt_str(n, "ipv4-dst-prefix"), ipv6_dst_prefix=yang.gdata.from_xml_opt_str(n, "ipv6-dst-prefix"), l4_src_port=yang.gdata.from_xml_opt_int(n, "l4-src-port"), target_sites=yang.gdata.from_xml_opt_strs(n, "target-sites"), l4_src_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range.from_xml(yang.gdata.get_xml_opt_child(n, "l4-src-port-range")), l4_dst_port=yang.gdata.from_xml_opt_int(n, "l4-dst-port"), l4_dst_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range.from_xml(yang.gdata.get_xml_opt_child(n, "l4-dst-port-range")), protocol_field=yang.gdata.from_xml_opt_value(n, "protocol-field"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry(yang.adata.MNode):
    id: str
    match_flow: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow
    match_application: ?str
    target_class_id: ?str

    mut def __init__(self, id: str, match_flow: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow=None, match_application: ?str, target_class_id: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.id = id
        if match_flow is not None:
            self.match_flow = match_flow
        else:
            self.match_flow = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow()
        self_match_flow = self.match_flow
        if self_match_flow is not None:
            self_match_flow._parent = self
        self.match_application = match_application
        self.target_class_id = target_class_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        _match_flow = self.match_flow
        _match_application = self.match_application
        _target_class_id = self.target_class_id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        if _match_flow is not None:
            children['match-flow'] = _match_flow.to_gdata()
        if _match_application is not None:
            children['match-application'] = yang.gdata.Leaf('identityref', _match_application)
        if _target_class_id is not None:
            children['target-class-id'] = yang.gdata.Leaf('string', _target_class_id)
        return yang.gdata.ListElement([str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry(id=n.get_str("id"), match_flow=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow.from_gdata(n.get_opt_container("match-flow")), match_application=n.get_opt_str("match-application"), target_class_id=n.get_opt_str("target-class-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry(id=yang.gdata.from_xml_str(n, "id"), match_flow=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow.from_xml(yang.gdata.get_xml_opt_child(n, "match-flow")), match_application=yang.gdata.from_xml_opt_str(n, "match-application"), target_class_id=yang.gdata.from_xml_opt_str(n, "target-class-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'rule'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy(yang.adata.MNode):
    rule: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule

    mut def __init__(self, rule: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.rule = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule(elements=rule)
        self.rule._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rule = self.rule
        if _rule is not None:
            children['rule'] = _rule.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy(rule=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule.from_gdata(n.get_list("rule")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy(rule=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule.from_xml(yang.gdata.get_xml_children(n, "rule")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency(yang.adata.MNode):
    use_lowest_latency: ?bool
    latency_boundary: int

    mut def __init__(self, use_lowest_latency: ?bool, latency_boundary: ?int=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.use_lowest_latency = use_lowest_latency
        if latency_boundary != None:
            self.latency_boundary = latency_boundary
        else:
            self.latency_boundary = 400

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _use_lowest_latency = self.use_lowest_latency
        _latency_boundary = self.latency_boundary
        if _use_lowest_latency is not None:
            children['use-lowest-latency'] = yang.gdata.Leaf('empty', _use_lowest_latency)
        if _latency_boundary is not None:
            children['latency-boundary'] = yang.gdata.Leaf('uint16', _latency_boundary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency(use_lowest_latency=n.get_opt_bool("use-lowest-latency"), latency_boundary=n.get_opt_int("latency-boundary"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency(use_lowest_latency=yang.gdata.from_xml_opt_bool(n, "use-lowest-latency"), latency_boundary=yang.gdata.from_xml_opt_int(n, "latency-boundary"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter(yang.adata.MNode):
    use_lowest_jitter: ?bool
    latency_boundary: int

    mut def __init__(self, use_lowest_jitter: ?bool, latency_boundary: ?int=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.use_lowest_jitter = use_lowest_jitter
        if latency_boundary != None:
            self.latency_boundary = latency_boundary
        else:
            self.latency_boundary = 40000

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _use_lowest_jitter = self.use_lowest_jitter
        _latency_boundary = self.latency_boundary
        if _use_lowest_jitter is not None:
            children['use-lowest-jitter'] = yang.gdata.Leaf('empty', _use_lowest_jitter)
        if _latency_boundary is not None:
            children['latency-boundary'] = yang.gdata.Leaf('uint32', _latency_boundary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter(use_lowest_jitter=n.get_opt_bool("use-lowest-jitter"), latency_boundary=n.get_opt_int("latency-boundary"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter(use_lowest_jitter=yang.gdata.from_xml_opt_bool(n, "use-lowest-jitter"), latency_boundary=yang.gdata.from_xml_opt_int(n, "latency-boundary"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth(yang.adata.MNode):
    guaranteed_bw_percent: float
    end_to_end: ?bool

    mut def __init__(self, guaranteed_bw_percent: float, end_to_end: ?bool):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.guaranteed_bw_percent = guaranteed_bw_percent
        self.end_to_end = end_to_end

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _guaranteed_bw_percent = self.guaranteed_bw_percent
        _end_to_end = self.end_to_end
        if _guaranteed_bw_percent is not None:
            children['guaranteed-bw-percent'] = yang.gdata.Leaf('decimal64', _guaranteed_bw_percent)
        if _end_to_end is not None:
            children['end-to-end'] = yang.gdata.Leaf('empty', _end_to_end)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth(guaranteed_bw_percent=n.get_float("guaranteed-bw-percent"), end_to_end=n.get_opt_bool("end-to-end"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth(guaranteed_bw_percent=yang.gdata.from_xml_float(n, "guaranteed-bw-percent"), end_to_end=yang.gdata.from_xml_opt_bool(n, "end-to-end"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry(yang.adata.MNode):
    class_id: str
    direction: str
    rate_limit: ?float
    latency: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency
    jitter: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter
    bandwidth: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth

    mut def __init__(self, class_id: str, bandwidth: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth, direction: ?str=None, rate_limit: ?float, latency: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency=None, jitter: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.class_id = class_id
        if direction != None:
            self.direction = direction
        else:
            self.direction = "both"
        self.rate_limit = rate_limit
        if latency is not None:
            self.latency = latency
        else:
            self.latency = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency()
        self_latency = self.latency
        if self_latency is not None:
            self_latency._parent = self
        if jitter is not None:
            self.jitter = jitter
        else:
            self.jitter = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter()
        self_jitter = self.jitter
        if self_jitter is not None:
            self_jitter._parent = self
        self.bandwidth = bandwidth
        self.bandwidth._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _class_id = self.class_id
        _direction = self.direction
        _rate_limit = self.rate_limit
        _latency = self.latency
        _jitter = self.jitter
        _bandwidth = self.bandwidth
        if _class_id is not None:
            children['class-id'] = yang.gdata.Leaf('string', _class_id)
        if _direction is not None:
            children['direction'] = yang.gdata.Leaf('identityref', _direction)
        if _rate_limit is not None:
            children['rate-limit'] = yang.gdata.Leaf('decimal64', _rate_limit)
        if _latency is not None:
            children['latency'] = _latency.to_gdata()
        if _jitter is not None:
            children['jitter'] = _jitter.to_gdata()
        if _bandwidth is not None:
            children['bandwidth'] = _bandwidth.to_gdata()
        return yang.gdata.ListElement([str(self.class_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry(class_id=n.get_str("class-id"), direction=n.get_opt_str("direction"), rate_limit=n.get_opt_float("rate-limit"), latency=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency.from_gdata(n.get_opt_container("latency")), jitter=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter.from_gdata(n.get_opt_container("jitter")), bandwidth=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth.from_gdata(n.get_container("bandwidth")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry(class_id=yang.gdata.from_xml_str(n, "class-id"), direction=yang.gdata.from_xml_opt_str(n, "direction"), rate_limit=yang.gdata.from_xml_opt_float(n, "rate-limit"), latency=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency.from_xml(yang.gdata.get_xml_opt_child(n, "latency")), jitter=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter.from_xml(yang.gdata.get_xml_opt_child(n, "jitter")), bandwidth=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth.from_xml(yang.gdata.get_xml_child(n, "bandwidth")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'class'
        self.elements = elements

    mut def create(self, class_id, bandwidth):
        for e in self.elements:
            match = True
            if e.class_id != class_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry(class_id, bandwidth)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['class-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes(yang.adata.MNode):
    class_: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class

    mut def __init__(self, class_: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.class_ = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class(elements=class_)
        self.class_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _class_ = self.class_
        if _class_ is not None:
            children['class'] = _class_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes(class_=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class.from_gdata(n.get_list("class")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes(class_=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class.from_xml(yang.gdata.get_xml_children(n, "class")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile(yang.adata.MNode):
    profile: ?str
    classes: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes

    mut def __init__(self, profile: ?str, classes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.profile = profile
        if classes is not None:
            self.classes = classes
        else:
            self.classes = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes()
        self_classes = self.classes
        if self_classes is not None:
            self_classes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _profile = self.profile
        _classes = self.classes
        if _profile is not None:
            children['profile'] = yang.gdata.Leaf('leafref', _profile)
        if _classes is not None:
            children['classes'] = _classes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile(profile=n.get_opt_str("profile"), classes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes.from_gdata(n.get_opt_container("classes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile(profile=yang.gdata.from_xml_opt_str(n, "profile"), classes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes.from_xml(yang.gdata.get_xml_opt_child(n, "classes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos(yang.adata.MNode):
    qos_classification_policy: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy
    qos_profile: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile

    mut def __init__(self, qos_classification_policy: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy=None, qos_profile: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if qos_classification_policy is not None:
            self.qos_classification_policy = qos_classification_policy
        else:
            self.qos_classification_policy = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy()
        self_qos_classification_policy = self.qos_classification_policy
        if self_qos_classification_policy is not None:
            self_qos_classification_policy._parent = self
        if qos_profile is not None:
            self.qos_profile = qos_profile
        else:
            self.qos_profile = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile()
        self_qos_profile = self.qos_profile
        if self_qos_profile is not None:
            self_qos_profile._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _qos_classification_policy = self.qos_classification_policy
        _qos_profile = self.qos_profile
        if _qos_classification_policy is not None:
            children['qos-classification-policy'] = _qos_classification_policy.to_gdata()
        if _qos_profile is not None:
            children['qos-profile'] = _qos_profile.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos(qos_classification_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy.from_gdata(n.get_opt_container("qos-classification-policy")), qos_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile.from_gdata(n.get_opt_container("qos-profile")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos(qos_classification_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy.from_xml(yang.gdata.get_xml_opt_child(n, "qos-classification-policy")), qos_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile.from_xml(yang.gdata.get_xml_opt_child(n, "qos-profile")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier(yang.adata.MNode):
    signalling_type: str

    mut def __init__(self, signalling_type: ?str=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if signalling_type != None:
            self.signalling_type = signalling_type
        else:
            self.signalling_type = "bgp"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _signalling_type = self.signalling_type
        if _signalling_type is not None:
            children['signalling-type'] = yang.gdata.Leaf('enumeration', _signalling_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier(signalling_type=n.get_opt_str("signalling-type"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier(signalling_type=yang.gdata.from_xml_opt_str(n, "signalling-type"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family(yang.adata.MNode):
    ipv4: bool
    ipv6: bool

    mut def __init__(self, ipv4: ?bool=None, ipv6: ?bool=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if ipv4 != None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = False
        if ipv6 != None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = yang.gdata.Leaf('boolean', _ipv4)
        if _ipv6 is not None:
            children['ipv6'] = yang.gdata.Leaf('boolean', _ipv6)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family(ipv4=n.get_opt_bool("ipv4"), ipv6=n.get_opt_bool("ipv6"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family(ipv4=yang.gdata.from_xml_opt_bool(n, "ipv4"), ipv6=yang.gdata.from_xml_opt_bool(n, "ipv6"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast(yang.adata.MNode):
    multicast_site_type: str
    multicast_address_family: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family
    protocol_type: str

    mut def __init__(self, multicast_site_type: ?str=None, multicast_address_family: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family=None, protocol_type: ?str=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if multicast_site_type != None:
            self.multicast_site_type = multicast_site_type
        else:
            self.multicast_site_type = "source-receiver"
        if multicast_address_family is not None:
            self.multicast_address_family = multicast_address_family
        else:
            self.multicast_address_family = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family()
        self_multicast_address_family = self.multicast_address_family
        if self_multicast_address_family is not None:
            self_multicast_address_family._parent = self
        if protocol_type != None:
            self.protocol_type = protocol_type
        else:
            self.protocol_type = "both"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _multicast_site_type = self.multicast_site_type
        _multicast_address_family = self.multicast_address_family
        _protocol_type = self.protocol_type
        if _multicast_site_type is not None:
            children['multicast-site-type'] = yang.gdata.Leaf('enumeration', _multicast_site_type)
        if _multicast_address_family is not None:
            children['multicast-address-family'] = _multicast_address_family.to_gdata()
        if _protocol_type is not None:
            children['protocol-type'] = yang.gdata.Leaf('enumeration', _protocol_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast(multicast_site_type=n.get_opt_str("multicast-site-type"), multicast_address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family.from_gdata(n.get_opt_container("multicast-address-family")), protocol_type=n.get_opt_str("protocol-type"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast(multicast_site_type=yang.gdata.from_xml_opt_str(n, "multicast-site-type"), multicast_address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family.from_xml(yang.gdata.get_xml_opt_child(n, "multicast-address-family")), protocol_type=yang.gdata.from_xml_opt_str(n, "protocol-type"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service(yang.adata.MNode):
    svc_input_bandwidth: int
    svc_output_bandwidth: int
    svc_mtu: int
    qos: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos
    carrierscarrier: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier
    multicast: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast

    mut def __init__(self, svc_input_bandwidth: int, svc_output_bandwidth: int, svc_mtu: int, qos: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos=None, carrierscarrier: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier=None, multicast: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.svc_input_bandwidth = svc_input_bandwidth
        self.svc_output_bandwidth = svc_output_bandwidth
        self.svc_mtu = svc_mtu
        if qos is not None:
            self.qos = qos
        else:
            self.qos = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos()
        self_qos = self.qos
        if self_qos is not None:
            self_qos._parent = self
        if carrierscarrier is not None:
            self.carrierscarrier = carrierscarrier
        else:
            self.carrierscarrier = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier()
        self_carrierscarrier = self.carrierscarrier
        if self_carrierscarrier is not None:
            self_carrierscarrier._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _svc_input_bandwidth = self.svc_input_bandwidth
        _svc_output_bandwidth = self.svc_output_bandwidth
        _svc_mtu = self.svc_mtu
        _qos = self.qos
        _carrierscarrier = self.carrierscarrier
        _multicast = self.multicast
        if _svc_input_bandwidth is not None:
            children['svc-input-bandwidth'] = yang.gdata.Leaf('uint64', _svc_input_bandwidth)
        if _svc_output_bandwidth is not None:
            children['svc-output-bandwidth'] = yang.gdata.Leaf('uint64', _svc_output_bandwidth)
        if _svc_mtu is not None:
            children['svc-mtu'] = yang.gdata.Leaf('uint16', _svc_mtu)
        if _qos is not None:
            children['qos'] = _qos.to_gdata()
        if _carrierscarrier is not None:
            children['carrierscarrier'] = _carrierscarrier.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service(svc_input_bandwidth=n.get_int("svc-input-bandwidth"), svc_output_bandwidth=n.get_int("svc-output-bandwidth"), svc_mtu=n.get_int("svc-mtu"), qos=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos.from_gdata(n.get_opt_container("qos")), carrierscarrier=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier.from_gdata(n.get_opt_container("carrierscarrier")), multicast=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast.from_gdata(n.get_opt_container("multicast")))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service(svc_input_bandwidth=yang.gdata.from_xml_int(n, "svc-input-bandwidth"), svc_output_bandwidth=yang.gdata.from_xml_int(n, "svc-output-bandwidth"), svc_mtu=yang.gdata.from_xml_int(n, "svc-mtu"), qos=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos.from_xml(yang.gdata.get_xml_opt_child(n, "qos")), carrierscarrier=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier.from_xml(yang.gdata.get_xml_opt_child(n, "carrierscarrier")), multicast=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(yang.adata.MNode):
    target_site: str
    metric: int

    mut def __init__(self, target_site: str, metric: ?int=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.target_site = target_site
        if metric != None:
            self.metric = metric
        else:
            self.metric = 1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _target_site = self.target_site
        _metric = self.metric
        if _target_site is not None:
            children['target-site'] = yang.gdata.Leaf('string', _target_site)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint16', _metric)
        return yang.gdata.ListElement([str(self.target_site)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site=n.get_str("target-site"), metric=n.get_opt_int("metric"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site=yang.gdata.from_xml_str(n, "target-site"), metric=yang.gdata.from_xml_opt_int(n, "metric"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'sham-link'
        self.elements = elements

    mut def create(self, target_site):
        for e in self.elements:
            match = True
            if e.target_site != target_site:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['target-site'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links(yang.adata.MNode):
    sham_link: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link

    mut def __init__(self, sham_link: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.sham_link = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link(elements=sham_link)
        self.sham_link._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sham_link = self.sham_link
        if _sham_link is not None:
            children['sham-link'] = _sham_link.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links(sham_link=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link.from_gdata(n.get_list("sham-link")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links(sham_link=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link.from_xml(yang.gdata.get_xml_children(n, "sham-link")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf(yang.adata.MNode):
    address_family: list[str]
    area_address: str
    metric: int
    sham_links: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links

    mut def __init__(self, area_address: str, address_family: ?list[str]=None, metric: ?int=None, sham_links: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []
        self.area_address = area_address
        if metric != None:
            self.metric = metric
        else:
            self.metric = 1
        if sham_links is not None:
            self.sham_links = sham_links
        else:
            self.sham_links = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links()
        self_sham_links = self.sham_links
        if self_sham_links is not None:
            self_sham_links._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _area_address = self.area_address
        _metric = self.metric
        _sham_links = self.sham_links
        children['address-family'] = yang.gdata.LeafList(self.address_family)
        if _area_address is not None:
            children['area-address'] = yang.gdata.Leaf('string', _area_address)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint16', _metric)
        if _sham_links is not None:
            children['sham-links'] = _sham_links.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf(address_family=n.get_opt_strs("address-family"), area_address=n.get_str("area-address"), metric=n.get_opt_int("metric"), sham_links=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links.from_gdata(n.get_opt_container("sham-links")))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf(address_family=yang.gdata.from_xml_opt_strs(n, "address-family"), area_address=yang.gdata.from_xml_str(n, "area-address"), metric=yang.gdata.from_xml_opt_int(n, "metric"), sham_links=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links.from_xml(yang.gdata.get_xml_opt_child(n, "sham-links")))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp(yang.adata.MNode):
    autonomous_system: int
    address_family: list[str]

    mut def __init__(self, autonomous_system: int, address_family: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.autonomous_system = autonomous_system
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            children['autonomous-system'] = yang.gdata.Leaf('uint32', _autonomous_system)
        children['address-family'] = yang.gdata.LeafList(self.address_family)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp(autonomous_system=n.get_int("autonomous-system"), address_family=n.get_opt_strs("address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp(autonomous_system=yang.gdata.from_xml_int(n, "autonomous-system"), address_family=yang.gdata.from_xml_opt_strs(n, "address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(yang.adata.MNode):
    lan: str
    next_hop: str
    lan_tag: ?str

    mut def __init__(self, lan: str, next_hop: str, lan_tag: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.lan = lan
        self.next_hop = next_hop
        self.lan_tag = lan_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lan = self.lan
        _next_hop = self.next_hop
        _lan_tag = self.lan_tag
        if _lan is not None:
            children['lan'] = yang.gdata.Leaf('string', _lan)
        if _next_hop is not None:
            children['next-hop'] = yang.gdata.Leaf('string', _next_hop)
        if _lan_tag is not None:
            children['lan-tag'] = yang.gdata.Leaf('string', _lan_tag)
        return yang.gdata.ListElement([str(self.lan), str(self.next_hop)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan=n.get_str("lan"), next_hop=n.get_str("next-hop"), lan_tag=n.get_opt_str("lan-tag"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan=yang.gdata.from_xml_str(n, "lan"), next_hop=yang.gdata.from_xml_str(n, "next-hop"), lan_tag=yang.gdata.from_xml_opt_str(n, "lan-tag"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'ipv4-lan-prefixes'
        self.elements = elements

    mut def create(self, lan, next_hop):
        for e in self.elements:
            match = True
            if e.lan != lan:
                match = False
                break
            if e.next_hop != next_hop:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan, next_hop)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['lan', 'next-hop'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(yang.adata.MNode):
    lan: str
    next_hop: str
    lan_tag: ?str

    mut def __init__(self, lan: str, next_hop: str, lan_tag: ?str):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.lan = lan
        self.next_hop = next_hop
        self.lan_tag = lan_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lan = self.lan
        _next_hop = self.next_hop
        _lan_tag = self.lan_tag
        if _lan is not None:
            children['lan'] = yang.gdata.Leaf('string', _lan)
        if _next_hop is not None:
            children['next-hop'] = yang.gdata.Leaf('string', _next_hop)
        if _lan_tag is not None:
            children['lan-tag'] = yang.gdata.Leaf('string', _lan_tag)
        return yang.gdata.ListElement([str(self.lan), str(self.next_hop)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan=n.get_str("lan"), next_hop=n.get_str("next-hop"), lan_tag=n.get_opt_str("lan-tag"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan=yang.gdata.from_xml_str(n, "lan"), next_hop=yang.gdata.from_xml_str(n, "next-hop"), lan_tag=yang.gdata.from_xml_opt_str(n, "lan-tag"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'ipv6-lan-prefixes'
        self.elements = elements

    mut def create(self, lan, next_hop):
        for e in self.elements:
            match = True
            if e.lan != lan:
                match = False
                break
            if e.next_hop != next_hop:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan, next_hop)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['lan', 'next-hop'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(yang.adata.MNode):
    ipv4_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes
    ipv6_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes

    mut def __init__(self, ipv4_lan_prefixes: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]=[], ipv6_lan_prefixes: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.ipv4_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes(elements=ipv4_lan_prefixes)
        self.ipv4_lan_prefixes._parent = self
        self.ipv6_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes(elements=ipv6_lan_prefixes)
        self.ipv6_lan_prefixes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_lan_prefixes = self.ipv4_lan_prefixes
        _ipv6_lan_prefixes = self.ipv6_lan_prefixes
        if _ipv4_lan_prefixes is not None:
            children['ipv4-lan-prefixes'] = _ipv4_lan_prefixes.to_gdata()
        if _ipv6_lan_prefixes is not None:
            children['ipv6-lan-prefixes'] = _ipv6_lan_prefixes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(ipv4_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes.from_gdata(n.get_list("ipv4-lan-prefixes")), ipv6_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes.from_gdata(n.get_list("ipv6-lan-prefixes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(ipv4_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes.from_xml(yang.gdata.get_xml_children(n, "ipv4-lan-prefixes")), ipv6_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes.from_xml(yang.gdata.get_xml_children(n, "ipv6-lan-prefixes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static(yang.adata.MNode):
    cascaded_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes

    mut def __init__(self, cascaded_lan_prefixes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if cascaded_lan_prefixes is not None:
            self.cascaded_lan_prefixes = cascaded_lan_prefixes
        else:
            self.cascaded_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes()
        self_cascaded_lan_prefixes = self.cascaded_lan_prefixes
        if self_cascaded_lan_prefixes is not None:
            self_cascaded_lan_prefixes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cascaded_lan_prefixes = self.cascaded_lan_prefixes
        if _cascaded_lan_prefixes is not None:
            children['cascaded-lan-prefixes'] = _cascaded_lan_prefixes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static(cascaded_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes.from_gdata(n.get_opt_container("cascaded-lan-prefixes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static(cascaded_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes.from_xml(yang.gdata.get_xml_opt_child(n, "cascaded-lan-prefixes")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip(yang.adata.MNode):
    address_family: list[str]

    mut def __init__(self, address_family: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['address-family'] = yang.gdata.LeafList(self.address_family)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip(address_family=n.get_opt_strs("address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip(address_family=yang.gdata.from_xml_opt_strs(n, "address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp(yang.adata.MNode):
    address_family: list[str]

    mut def __init__(self, address_family: ?list[str]=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['address-family'] = yang.gdata.LeafList(self.address_family)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp(address_family=n.get_opt_strs("address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp(address_family=yang.gdata.from_xml_opt_strs(n, "address-family"))
        raise ValueError("Missing required subtree ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp")


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry(yang.adata.MNode):
    type: str
    ospf: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf
    bgp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp
    static: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static
    rip: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip
    vrrp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp

    mut def __init__(self, type: str, ospf: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf, bgp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp, rip: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip, vrrp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp, static: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.type = type
        self.ospf = ospf
        self.ospf._parent = self
        self.bgp = bgp
        self.bgp._parent = self
        if static is not None:
            self.static = static
        else:
            self.static = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static()
        self_static = self.static
        if self_static is not None:
            self_static._parent = self
        self.rip = rip
        self.rip._parent = self
        self.vrrp = vrrp
        self.vrrp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        _ospf = self.ospf
        _bgp = self.bgp
        _static = self.static
        _rip = self.rip
        _vrrp = self.vrrp
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _ospf is not None:
            children['ospf'] = _ospf.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _static is not None:
            children['static'] = _static.to_gdata()
        if _rip is not None:
            children['rip'] = _rip.to_gdata()
        if _vrrp is not None:
            children['vrrp'] = _vrrp.to_gdata()
        return yang.gdata.ListElement([str(self.type)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry(type=n.get_str("type"), ospf=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf.from_gdata(n.get_container("ospf")), bgp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp.from_gdata(n.get_container("bgp")), static=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static.from_gdata(n.get_opt_container("static")), rip=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip.from_gdata(n.get_container("rip")), vrrp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp.from_gdata(n.get_container("vrrp")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry(type=yang.gdata.from_xml_str(n, "type"), ospf=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf.from_xml(yang.gdata.get_xml_child(n, "ospf")), bgp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp.from_xml(yang.gdata.get_xml_child(n, "bgp")), static=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static.from_xml(yang.gdata.get_xml_opt_child(n, "static")), rip=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip.from_xml(yang.gdata.get_xml_child(n, "rip")), vrrp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp.from_xml(yang.gdata.get_xml_child(n, "vrrp")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'routing-protocol'
        self.elements = elements

    mut def create(self, type, ospf, bgp, rip, vrrp):
        for e in self.elements:
            match = True
            if e.type != type:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry(type, ospf, bgp, rip, vrrp)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['type'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols(yang.adata.MNode):
    routing_protocol: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol

    mut def __init__(self, routing_protocol: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.routing_protocol = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol(elements=routing_protocol)
        self.routing_protocol._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _routing_protocol = self.routing_protocol
        if _routing_protocol is not None:
            children['routing-protocol'] = _routing_protocol.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols(routing_protocol=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol.from_gdata(n.get_list("routing-protocol")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols(routing_protocol=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol.from_xml(yang.gdata.get_xml_children(n, "routing-protocol")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability(yang.adata.MNode):
    access_priority: int

    mut def __init__(self, access_priority: ?int=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if access_priority != None:
            self.access_priority = access_priority
        else:
            self.access_priority = 100

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _access_priority = self.access_priority
        if _access_priority is not None:
            children['access-priority'] = yang.gdata.Leaf('uint32', _access_priority)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability(access_priority=n.get_opt_int("access-priority"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability(access_priority=yang.gdata.from_xml_opt_int(n, "access-priority"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment(yang.adata.MNode):
    vpn_policy_id: ?str
    vpn_id: ?str
    site_role: str

    mut def __init__(self, vpn_policy_id: ?str, vpn_id: ?str, site_role: ?str=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.vpn_policy_id = vpn_policy_id
        self.vpn_id = vpn_id
        if site_role != None:
            self.site_role = site_role
        else:
            self.site_role = "any-to-any-role"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_policy_id = self.vpn_policy_id
        _vpn_id = self.vpn_id
        _site_role = self.site_role
        if _vpn_policy_id is not None:
            children['vpn-policy-id'] = yang.gdata.Leaf('leafref', _vpn_policy_id)
        if _vpn_id is not None:
            children['vpn-id'] = yang.gdata.Leaf('leafref', _vpn_id)
        if _site_role is not None:
            children['site-role'] = yang.gdata.Leaf('identityref', _site_role)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment(vpn_policy_id=n.get_opt_str("vpn-policy-id"), vpn_id=n.get_opt_str("vpn-id"), site_role=n.get_opt_str("site-role"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment(vpn_policy_id=yang.gdata.from_xml_opt_str(n, "vpn-policy-id"), vpn_id=yang.gdata.from_xml_opt_str(n, "vpn-id"), site_role=yang.gdata.from_xml_opt_str(n, "site-role"))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry(yang.adata.MNode):
    site_network_access_id: str
    site_network_access_type: str
    location_reference: ?str
    device_reference: ?str
    access_diversity: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity
    bearer: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer
    ip_connection: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection
    security: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security
    service: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service
    routing_protocols: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols
    availability: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability
    vpn_attachment: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment

    mut def __init__(self, site_network_access_id: str, service: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service, site_network_access_type: ?str=None, location_reference: ?str, device_reference: ?str, access_diversity: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity=None, bearer: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer=None, ip_connection: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection=None, security: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security=None, routing_protocols: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols=None, availability: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability=None, vpn_attachment: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.site_network_access_id = site_network_access_id
        if site_network_access_type != None:
            self.site_network_access_type = site_network_access_type
        else:
            self.site_network_access_type = "point-to-point"
        self.location_reference = location_reference
        self.device_reference = device_reference
        if access_diversity is not None:
            self.access_diversity = access_diversity
        else:
            self.access_diversity = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity()
        self_access_diversity = self.access_diversity
        if self_access_diversity is not None:
            self_access_diversity._parent = self
        if bearer is not None:
            self.bearer = bearer
        else:
            self.bearer = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer()
        self_bearer = self.bearer
        if self_bearer is not None:
            self_bearer._parent = self
        if ip_connection is not None:
            self.ip_connection = ip_connection
        else:
            self.ip_connection = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection()
        self_ip_connection = self.ip_connection
        if self_ip_connection is not None:
            self_ip_connection._parent = self
        if security is not None:
            self.security = security
        else:
            self.security = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security()
        self_security = self.security
        if self_security is not None:
            self_security._parent = self
        self.service = service
        self.service._parent = self
        if routing_protocols is not None:
            self.routing_protocols = routing_protocols
        else:
            self.routing_protocols = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols()
        self_routing_protocols = self.routing_protocols
        if self_routing_protocols is not None:
            self_routing_protocols._parent = self
        if availability is not None:
            self.availability = availability
        else:
            self.availability = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability()
        self_availability = self.availability
        if self_availability is not None:
            self_availability._parent = self
        if vpn_attachment is not None:
            self.vpn_attachment = vpn_attachment
        else:
            self.vpn_attachment = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment()
        self_vpn_attachment = self.vpn_attachment
        if self_vpn_attachment is not None:
            self_vpn_attachment._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _site_network_access_id = self.site_network_access_id
        _site_network_access_type = self.site_network_access_type
        _location_reference = self.location_reference
        _device_reference = self.device_reference
        _access_diversity = self.access_diversity
        _bearer = self.bearer
        _ip_connection = self.ip_connection
        _security = self.security
        _service = self.service
        _routing_protocols = self.routing_protocols
        _availability = self.availability
        _vpn_attachment = self.vpn_attachment
        if _site_network_access_id is not None:
            children['site-network-access-id'] = yang.gdata.Leaf('string', _site_network_access_id)
        if _site_network_access_type is not None:
            children['site-network-access-type'] = yang.gdata.Leaf('identityref', _site_network_access_type)
        if _location_reference is not None:
            children['location-reference'] = yang.gdata.Leaf('leafref', _location_reference)
        if _device_reference is not None:
            children['device-reference'] = yang.gdata.Leaf('leafref', _device_reference)
        if _access_diversity is not None:
            children['access-diversity'] = _access_diversity.to_gdata()
        if _bearer is not None:
            children['bearer'] = _bearer.to_gdata()
        if _ip_connection is not None:
            children['ip-connection'] = _ip_connection.to_gdata()
        if _security is not None:
            children['security'] = _security.to_gdata()
        if _service is not None:
            children['service'] = _service.to_gdata()
        if _routing_protocols is not None:
            children['routing-protocols'] = _routing_protocols.to_gdata()
        if _availability is not None:
            children['availability'] = _availability.to_gdata()
        if _vpn_attachment is not None:
            children['vpn-attachment'] = _vpn_attachment.to_gdata()
        return yang.gdata.ListElement([str(self.site_network_access_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry(site_network_access_id=n.get_str("site-network-access-id"), site_network_access_type=n.get_opt_str("site-network-access-type"), location_reference=n.get_opt_str("location-reference"), device_reference=n.get_opt_str("device-reference"), access_diversity=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity.from_gdata(n.get_opt_container("access-diversity")), bearer=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer.from_gdata(n.get_opt_container("bearer")), ip_connection=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection.from_gdata(n.get_opt_container("ip-connection")), security=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security.from_gdata(n.get_opt_container("security")), service=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service.from_gdata(n.get_container("service")), routing_protocols=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols.from_gdata(n.get_opt_container("routing-protocols")), availability=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability.from_gdata(n.get_opt_container("availability")), vpn_attachment=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment.from_gdata(n.get_opt_container("vpn-attachment")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry(site_network_access_id=yang.gdata.from_xml_str(n, "site-network-access-id"), site_network_access_type=yang.gdata.from_xml_opt_str(n, "site-network-access-type"), location_reference=yang.gdata.from_xml_opt_str(n, "location-reference"), device_reference=yang.gdata.from_xml_opt_str(n, "device-reference"), access_diversity=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity.from_xml(yang.gdata.get_xml_opt_child(n, "access-diversity")), bearer=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer.from_xml(yang.gdata.get_xml_opt_child(n, "bearer")), ip_connection=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection.from_xml(yang.gdata.get_xml_opt_child(n, "ip-connection")), security=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security.from_xml(yang.gdata.get_xml_opt_child(n, "security")), service=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service.from_xml(yang.gdata.get_xml_child(n, "service")), routing_protocols=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols.from_xml(yang.gdata.get_xml_opt_child(n, "routing-protocols")), availability=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability.from_xml(yang.gdata.get_xml_opt_child(n, "availability")), vpn_attachment=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment.from_xml(yang.gdata.get_xml_opt_child(n, "vpn-attachment")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'site-network-access'
        self.elements = elements

    mut def create(self, site_network_access_id, service):
        for e in self.elements:
            match = True
            if e.site_network_access_id != site_network_access_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry(site_network_access_id, service)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['site-network-access-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses(yang.adata.MNode):
    site_network_access: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access

    mut def __init__(self, site_network_access: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.site_network_access = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access(elements=site_network_access)
        self.site_network_access._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _site_network_access = self.site_network_access
        if _site_network_access is not None:
            children['site-network-access'] = _site_network_access.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses(site_network_access=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access.from_gdata(n.get_list("site-network-access")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses(site_network_access=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access.from_xml(yang.gdata.get_xml_children(n, "site-network-access")))
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses()


class ietf_l3vpn_svc__l3vpn_svc__sites__site_entry(yang.adata.MNode):
    site_id: str
    requested_site_start: ?str
    requested_site_stop: ?str
    locations: ietf_l3vpn_svc__l3vpn_svc__sites__site__locations
    devices: ietf_l3vpn_svc__l3vpn_svc__sites__site__devices
    site_diversity: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity
    management: ietf_l3vpn_svc__l3vpn_svc__sites__site__management
    vpn_policies: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies
    site_vpn_flavor: str
    maximum_routes: ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes
    security: ietf_l3vpn_svc__l3vpn_svc__sites__site__security
    service: ietf_l3vpn_svc__l3vpn_svc__sites__site__service
    traffic_protection: ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection
    routing_protocols: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols
    actual_site_start: ?str
    actual_site_stop: ?str
    site_network_accesses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses

    mut def __init__(self, site_id: str, management: ietf_l3vpn_svc__l3vpn_svc__sites__site__management, requested_site_start: ?str, requested_site_stop: ?str, locations: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__locations=None, devices: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__devices=None, site_diversity: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity=None, vpn_policies: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies=None, site_vpn_flavor: ?str=None, maximum_routes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes=None, security: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__security=None, service: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service=None, traffic_protection: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection=None, routing_protocols: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols=None, actual_site_start: ?str, actual_site_stop: ?str, site_network_accesses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.site_id = site_id
        self.requested_site_start = requested_site_start
        self.requested_site_stop = requested_site_stop
        if locations is not None:
            self.locations = locations
        else:
            self.locations = ietf_l3vpn_svc__l3vpn_svc__sites__site__locations()
        self_locations = self.locations
        if self_locations is not None:
            self_locations._parent = self
        if devices is not None:
            self.devices = devices
        else:
            self.devices = ietf_l3vpn_svc__l3vpn_svc__sites__site__devices()
        self_devices = self.devices
        if self_devices is not None:
            self_devices._parent = self
        if site_diversity is not None:
            self.site_diversity = site_diversity
        else:
            self.site_diversity = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity()
        self_site_diversity = self.site_diversity
        if self_site_diversity is not None:
            self_site_diversity._parent = self
        self.management = management
        self.management._parent = self
        if vpn_policies is not None:
            self.vpn_policies = vpn_policies
        else:
            self.vpn_policies = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies()
        self_vpn_policies = self.vpn_policies
        if self_vpn_policies is not None:
            self_vpn_policies._parent = self
        if site_vpn_flavor != None:
            self.site_vpn_flavor = site_vpn_flavor
        else:
            self.site_vpn_flavor = "site-vpn-flavor-single"
        if maximum_routes is not None:
            self.maximum_routes = maximum_routes
        else:
            self.maximum_routes = ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes()
        self_maximum_routes = self.maximum_routes
        if self_maximum_routes is not None:
            self_maximum_routes._parent = self
        if security is not None:
            self.security = security
        else:
            self.security = ietf_l3vpn_svc__l3vpn_svc__sites__site__security()
        self_security = self.security
        if self_security is not None:
            self_security._parent = self
        if service is not None:
            self.service = service
        else:
            self.service = ietf_l3vpn_svc__l3vpn_svc__sites__site__service()
        self_service = self.service
        if self_service is not None:
            self_service._parent = self
        if traffic_protection is not None:
            self.traffic_protection = traffic_protection
        else:
            self.traffic_protection = ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection()
        self_traffic_protection = self.traffic_protection
        if self_traffic_protection is not None:
            self_traffic_protection._parent = self
        if routing_protocols is not None:
            self.routing_protocols = routing_protocols
        else:
            self.routing_protocols = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols()
        self_routing_protocols = self.routing_protocols
        if self_routing_protocols is not None:
            self_routing_protocols._parent = self
        self.actual_site_start = actual_site_start
        self.actual_site_stop = actual_site_stop
        if site_network_accesses is not None:
            self.site_network_accesses = site_network_accesses
        else:
            self.site_network_accesses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses()
        self_site_network_accesses = self.site_network_accesses
        if self_site_network_accesses is not None:
            self_site_network_accesses._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _site_id = self.site_id
        _requested_site_start = self.requested_site_start
        _requested_site_stop = self.requested_site_stop
        _locations = self.locations
        _devices = self.devices
        _site_diversity = self.site_diversity
        _management = self.management
        _vpn_policies = self.vpn_policies
        _site_vpn_flavor = self.site_vpn_flavor
        _maximum_routes = self.maximum_routes
        _security = self.security
        _service = self.service
        _traffic_protection = self.traffic_protection
        _routing_protocols = self.routing_protocols
        _actual_site_start = self.actual_site_start
        _actual_site_stop = self.actual_site_stop
        _site_network_accesses = self.site_network_accesses
        if _site_id is not None:
            children['site-id'] = yang.gdata.Leaf('string', _site_id)
        if _requested_site_start is not None:
            children['requested-site-start'] = yang.gdata.Leaf('string', _requested_site_start)
        if _requested_site_stop is not None:
            children['requested-site-stop'] = yang.gdata.Leaf('string', _requested_site_stop)
        if _locations is not None:
            children['locations'] = _locations.to_gdata()
        if _devices is not None:
            children['devices'] = _devices.to_gdata()
        if _site_diversity is not None:
            children['site-diversity'] = _site_diversity.to_gdata()
        if _management is not None:
            children['management'] = _management.to_gdata()
        if _vpn_policies is not None:
            children['vpn-policies'] = _vpn_policies.to_gdata()
        if _site_vpn_flavor is not None:
            children['site-vpn-flavor'] = yang.gdata.Leaf('identityref', _site_vpn_flavor)
        if _maximum_routes is not None:
            children['maximum-routes'] = _maximum_routes.to_gdata()
        if _security is not None:
            children['security'] = _security.to_gdata()
        if _service is not None:
            children['service'] = _service.to_gdata()
        if _traffic_protection is not None:
            children['traffic-protection'] = _traffic_protection.to_gdata()
        if _routing_protocols is not None:
            children['routing-protocols'] = _routing_protocols.to_gdata()
        if _actual_site_start is not None:
            children['actual-site-start'] = yang.gdata.Leaf('string', _actual_site_start)
        if _actual_site_stop is not None:
            children['actual-site-stop'] = yang.gdata.Leaf('string', _actual_site_stop)
        if _site_network_accesses is not None:
            children['site-network-accesses'] = _site_network_accesses.to_gdata()
        return yang.gdata.ListElement([str(self.site_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site_entry(site_id=n.get_str("site-id"), requested_site_start=n.get_opt_str("requested-site-start"), requested_site_stop=n.get_opt_str("requested-site-stop"), locations=ietf_l3vpn_svc__l3vpn_svc__sites__site__locations.from_gdata(n.get_opt_container("locations")), devices=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices.from_gdata(n.get_opt_container("devices")), site_diversity=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity.from_gdata(n.get_opt_container("site-diversity")), management=ietf_l3vpn_svc__l3vpn_svc__sites__site__management.from_gdata(n.get_container("management")), vpn_policies=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies.from_gdata(n.get_opt_container("vpn-policies")), site_vpn_flavor=n.get_opt_str("site-vpn-flavor"), maximum_routes=ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes.from_gdata(n.get_opt_container("maximum-routes")), security=ietf_l3vpn_svc__l3vpn_svc__sites__site__security.from_gdata(n.get_opt_container("security")), service=ietf_l3vpn_svc__l3vpn_svc__sites__site__service.from_gdata(n.get_opt_container("service")), traffic_protection=ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection.from_gdata(n.get_opt_container("traffic-protection")), routing_protocols=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols.from_gdata(n.get_opt_container("routing-protocols")), actual_site_start=n.get_opt_str("actual-site-start"), actual_site_stop=n.get_opt_str("actual-site-stop"), site_network_accesses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses.from_gdata(n.get_opt_container("site-network-accesses")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site_entry(site_id=yang.gdata.from_xml_str(n, "site-id"), requested_site_start=yang.gdata.from_xml_opt_str(n, "requested-site-start"), requested_site_stop=yang.gdata.from_xml_opt_str(n, "requested-site-stop"), locations=ietf_l3vpn_svc__l3vpn_svc__sites__site__locations.from_xml(yang.gdata.get_xml_opt_child(n, "locations")), devices=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices.from_xml(yang.gdata.get_xml_opt_child(n, "devices")), site_diversity=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity.from_xml(yang.gdata.get_xml_opt_child(n, "site-diversity")), management=ietf_l3vpn_svc__l3vpn_svc__sites__site__management.from_xml(yang.gdata.get_xml_child(n, "management")), vpn_policies=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies.from_xml(yang.gdata.get_xml_opt_child(n, "vpn-policies")), site_vpn_flavor=yang.gdata.from_xml_opt_str(n, "site-vpn-flavor"), maximum_routes=ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes.from_xml(yang.gdata.get_xml_opt_child(n, "maximum-routes")), security=ietf_l3vpn_svc__l3vpn_svc__sites__site__security.from_xml(yang.gdata.get_xml_opt_child(n, "security")), service=ietf_l3vpn_svc__l3vpn_svc__sites__site__service.from_xml(yang.gdata.get_xml_opt_child(n, "service")), traffic_protection=ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection.from_xml(yang.gdata.get_xml_opt_child(n, "traffic-protection")), routing_protocols=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols.from_xml(yang.gdata.get_xml_opt_child(n, "routing-protocols")), actual_site_start=yang.gdata.from_xml_opt_str(n, "actual-site-start"), actual_site_stop=yang.gdata.from_xml_opt_str(n, "actual-site-stop"), site_network_accesses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses.from_xml(yang.gdata.get_xml_opt_child(n, "site-network-accesses")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self._name = 'site'
        self.elements = elements

    mut def create(self, site_id, management):
        for e in self.elements:
            match = True
            if e.site_id != site_id:
                match = False
                break
            if match:
                return e

        res = ietf_l3vpn_svc__l3vpn_svc__sites__site_entry(site_id, management)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['site-id'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites(yang.adata.MNode):
    site: ietf_l3vpn_svc__l3vpn_svc__sites__site

    mut def __init__(self, site: list[ietf_l3vpn_svc__l3vpn_svc__sites__site_entry]=[]):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        self.site = ietf_l3vpn_svc__l3vpn_svc__sites__site(elements=site)
        self.site._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _site = self.site
        if _site is not None:
            children['site'] = _site.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites(site=ietf_l3vpn_svc__l3vpn_svc__sites__site.from_gdata(n.get_list("site")))
        return ietf_l3vpn_svc__l3vpn_svc__sites()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc__sites(site=ietf_l3vpn_svc__l3vpn_svc__sites__site.from_xml(yang.gdata.get_xml_children(n, "site")))
        return ietf_l3vpn_svc__l3vpn_svc__sites()


class ietf_l3vpn_svc__l3vpn_svc(yang.adata.MNode):
    vpn_profiles: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles
    vpn_services: ietf_l3vpn_svc__l3vpn_svc__vpn_services
    sites: ietf_l3vpn_svc__l3vpn_svc__sites

    mut def __init__(self, vpn_profiles: ?ietf_l3vpn_svc__l3vpn_svc__vpn_profiles=None, vpn_services: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services=None, sites: ?ietf_l3vpn_svc__l3vpn_svc__sites=None):
        self._ns = "urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc"
        if vpn_profiles is not None:
            self.vpn_profiles = vpn_profiles
        else:
            self.vpn_profiles = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles()
        self_vpn_profiles = self.vpn_profiles
        if self_vpn_profiles is not None:
            self_vpn_profiles._parent = self
        if vpn_services is not None:
            self.vpn_services = vpn_services
        else:
            self.vpn_services = ietf_l3vpn_svc__l3vpn_svc__vpn_services()
        self_vpn_services = self.vpn_services
        if self_vpn_services is not None:
            self_vpn_services._parent = self
        if sites is not None:
            self.sites = sites
        else:
            self.sites = ietf_l3vpn_svc__l3vpn_svc__sites()
        self_sites = self.sites
        if self_sites is not None:
            self_sites._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_profiles = self.vpn_profiles
        _vpn_services = self.vpn_services
        _sites = self.sites
        if _vpn_profiles is not None:
            children['vpn-profiles'] = _vpn_profiles.to_gdata()
        if _vpn_services is not None:
            children['vpn-services'] = _vpn_services.to_gdata()
        if _sites is not None:
            children['sites'] = _sites.to_gdata()
        return yang.gdata.Container(children, ns='urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ietf_l3vpn_svc__l3vpn_svc:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc(vpn_profiles=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles.from_gdata(n.get_opt_container("vpn-profiles")), vpn_services=ietf_l3vpn_svc__l3vpn_svc__vpn_services.from_gdata(n.get_opt_container("vpn-services")), sites=ietf_l3vpn_svc__l3vpn_svc__sites.from_gdata(n.get_opt_container("sites")))
        return ietf_l3vpn_svc__l3vpn_svc()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ietf_l3vpn_svc__l3vpn_svc:
        if n != None:
            return ietf_l3vpn_svc__l3vpn_svc(vpn_profiles=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles.from_xml(yang.gdata.get_xml_opt_child(n, "vpn-profiles")), vpn_services=ietf_l3vpn_svc__l3vpn_svc__vpn_services.from_xml(yang.gdata.get_xml_opt_child(n, "vpn-services")), sites=ietf_l3vpn_svc__l3vpn_svc__sites.from_xml(yang.gdata.get_xml_opt_child(n, "sites")))
        return ietf_l3vpn_svc__l3vpn_svc()


class netinfra__netinfra__routers_entry(yang.adata.MNode):
    name: str
    id: ?str
    role: ?str
    mock: ?str

    mut def __init__(self, name: str, id: ?str, role: ?str, mock: ?str):
        self._ns = "http://example.com/netinfra"
        self.name = name
        self.id = id
        self.role = role
        self.mock = mock

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _id = self.id
        _role = self.role
        _mock = self.mock
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        if _role is not None:
            children['role'] = yang.gdata.Leaf('string', _role)
        if _mock is not None:
            children['mock'] = yang.gdata.Leaf('enumeration', _mock)
        return yang.gdata.ListElement([str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> netinfra__netinfra__routers_entry:
        return netinfra__netinfra__routers_entry(name=n.get_str("name"), id=n.get_opt_str("id"), role=n.get_opt_str("role"), mock=n.get_opt_str("mock"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> netinfra__netinfra__routers_entry:
        return netinfra__netinfra__routers_entry(name=yang.gdata.from_xml_str(n, "name"), id=yang.gdata.from_xml_opt_str(n, "id"), role=yang.gdata.from_xml_opt_str(n, "role"), mock=yang.gdata.from_xml_opt_str(n, "mock"))

class netinfra__netinfra__routers(yang.adata.MNode):
    elements: list[netinfra__netinfra__routers_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/netinfra"
        self._name = 'routers'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = netinfra__netinfra__routers_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[netinfra__netinfra__routers_entry]:
        res = []
        for e in n.elements:
            res.append(netinfra__netinfra__routers_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[netinfra__netinfra__routers_entry]:
        res = []
        for node in nodes:
            res.append(netinfra__netinfra__routers_entry.from_xml(node))
        return res


class netinfra__netinfra__backbone_link_entry(yang.adata.MNode):
    left_router: str
    left_interface: str
    right_router: str
    right_interface: str

    mut def __init__(self, left_router: str, left_interface: str, right_router: str, right_interface: str):
        self._ns = "http://example.com/netinfra"
        self.left_router = left_router
        self.left_interface = left_interface
        self.right_router = right_router
        self.right_interface = right_interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _left_router = self.left_router
        _left_interface = self.left_interface
        _right_router = self.right_router
        _right_interface = self.right_interface
        if _left_router is not None:
            children['left-router'] = yang.gdata.Leaf('string', _left_router)
        if _left_interface is not None:
            children['left-interface'] = yang.gdata.Leaf('string', _left_interface)
        if _right_router is not None:
            children['right-router'] = yang.gdata.Leaf('string', _right_router)
        if _right_interface is not None:
            children['right-interface'] = yang.gdata.Leaf('string', _right_interface)
        return yang.gdata.ListElement([str(self.left_router), str(self.left_interface), str(self.right_router), str(self.right_interface)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> netinfra__netinfra__backbone_link_entry:
        return netinfra__netinfra__backbone_link_entry(left_router=n.get_str("left-router"), left_interface=n.get_str("left-interface"), right_router=n.get_str("right-router"), right_interface=n.get_str("right-interface"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> netinfra__netinfra__backbone_link_entry:
        return netinfra__netinfra__backbone_link_entry(left_router=yang.gdata.from_xml_str(n, "left-router"), left_interface=yang.gdata.from_xml_str(n, "left-interface"), right_router=yang.gdata.from_xml_str(n, "right-router"), right_interface=yang.gdata.from_xml_str(n, "right-interface"))

class netinfra__netinfra__backbone_link(yang.adata.MNode):
    elements: list[netinfra__netinfra__backbone_link_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/netinfra"
        self._name = 'backbone-link'
        self.elements = elements

    mut def create(self, left_router, left_interface, right_router, right_interface):
        for e in self.elements:
            match = True
            if e.left_router != left_router:
                match = False
                break
            if e.left_interface != left_interface:
                match = False
                break
            if e.right_router != right_router:
                match = False
                break
            if e.right_interface != right_interface:
                match = False
                break
            if match:
                return e

        res = netinfra__netinfra__backbone_link_entry(left_router, left_interface, right_router, right_interface)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['left-router', 'left-interface', 'right-router', 'right-interface'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[netinfra__netinfra__backbone_link_entry]:
        res = []
        for e in n.elements:
            res.append(netinfra__netinfra__backbone_link_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[netinfra__netinfra__backbone_link_entry]:
        res = []
        for node in nodes:
            res.append(netinfra__netinfra__backbone_link_entry.from_xml(node))
        return res


class netinfra__netinfra(yang.adata.MNode):
    routers: netinfra__netinfra__routers
    backbone_link: netinfra__netinfra__backbone_link

    mut def __init__(self, routers: list[netinfra__netinfra__routers_entry]=[], backbone_link: list[netinfra__netinfra__backbone_link_entry]=[]):
        self._ns = "http://example.com/netinfra"
        self.routers = netinfra__netinfra__routers(elements=routers)
        self.routers._parent = self
        self.backbone_link = netinfra__netinfra__backbone_link(elements=backbone_link)
        self.backbone_link._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _routers = self.routers
        _backbone_link = self.backbone_link
        if _routers is not None:
            children['routers'] = _routers.to_gdata()
        if _backbone_link is not None:
            children['backbone-link'] = _backbone_link.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/netinfra')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> netinfra__netinfra:
        if n != None:
            return netinfra__netinfra(routers=netinfra__netinfra__routers.from_gdata(n.get_list("routers")), backbone_link=netinfra__netinfra__backbone_link.from_gdata(n.get_list("backbone-link")))
        return netinfra__netinfra()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> netinfra__netinfra:
        if n != None:
            return netinfra__netinfra(routers=netinfra__netinfra__routers.from_xml(yang.gdata.get_xml_children(n, "routers")), backbone_link=netinfra__netinfra__backbone_link.from_xml(yang.gdata.get_xml_children(n, "backbone-link")))
        return netinfra__netinfra()


class root(yang.adata.MNode):
    l3vpn_svc: ietf_l3vpn_svc__l3vpn_svc
    netinfra: netinfra__netinfra

    mut def __init__(self, l3vpn_svc: ?ietf_l3vpn_svc__l3vpn_svc=None, netinfra: ?netinfra__netinfra=None):
        self._ns = ""
        if l3vpn_svc is not None:
            self.l3vpn_svc = l3vpn_svc
        else:
            self.l3vpn_svc = ietf_l3vpn_svc__l3vpn_svc()
        self_l3vpn_svc = self.l3vpn_svc
        if self_l3vpn_svc is not None:
            self_l3vpn_svc._parent = self
        if netinfra is not None:
            self.netinfra = netinfra
        else:
            self.netinfra = netinfra__netinfra()
        self_netinfra = self.netinfra
        if self_netinfra is not None:
            self_netinfra._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l3vpn_svc = self.l3vpn_svc
        _netinfra = self.netinfra
        if _l3vpn_svc is not None:
            children['l3vpn-svc'] = _l3vpn_svc.to_gdata()
        if _netinfra is not None:
            children['netinfra'] = _netinfra.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(l3vpn_svc=ietf_l3vpn_svc__l3vpn_svc.from_gdata(n.get_opt_container("l3vpn-svc")), netinfra=netinfra__netinfra.from_gdata(n.get_opt_container("netinfra")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(l3vpn_svc=ietf_l3vpn_svc__l3vpn_svc.from_xml(yang.gdata.get_xml_opt_child(n, "l3vpn-svc")), netinfra=netinfra__netinfra.from_xml(yang.gdata.get_xml_opt_child(n, "netinfra")))
        return root()

