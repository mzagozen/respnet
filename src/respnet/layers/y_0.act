import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class l3vpn__l3vpn(yang.adata.MNode):
    this: ?str
    that: ?str

    def __init__(self, this: ?str, that: ?str):
        self._ns = "http://example.com/l3vpn"
        self.this = this
        self.that = that

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('l3vpn', ns=self._ns)
        _this = self.this
        _that = self.that
        if _this is not None:
            res.children['this'] = yang.gdata.Leaf('this', _this, ns='http://example.com/l3vpn')
        if _that is not None:
            res.children['that'] = yang.gdata.Leaf('that', _that, ns='http://example.com/l3vpn')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> l3vpn__l3vpn:
        if n != None:
            return l3vpn__l3vpn(this=n.get_opt_str("this"), that=n.get_opt_str("that"))
        return l3vpn__l3vpn()

    @staticmethod
    def from_xml(n: ?xml.Node) -> l3vpn__l3vpn:
        if n != None:
            return l3vpn__l3vpn(this=yang.gdata.from_xml_opt_str(n, "this"), that=yang.gdata.from_xml_opt_str(n, "that"))
        return l3vpn__l3vpn()


class netinfra__netinfra__routers_entry(yang.adata.MNode):
    name: str
    id: ?str
    role: ?str

    def __init__(self, name: str, id: ?str, role: ?str):
        self._ns = "http://example.com/netinfra"
        self.name = name
        self.id = id
        self.role = role

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _id = self.id
        _role = self.role
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', _name, ns='http://example.com/netinfra')
        if _id is not None:
            res.children['id'] = yang.gdata.Leaf('id', _id, ns='http://example.com/netinfra')
        if _role is not None:
            res.children['role'] = yang.gdata.Leaf('role', _role, ns='http://example.com/netinfra')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> netinfra__netinfra__routers_entry:
        return netinfra__netinfra__routers_entry(name=n.get_str("name"), id=n.get_opt_str("id"), role=n.get_opt_str("role"))

    @staticmethod
    def from_xml(n: xml.Node) -> netinfra__netinfra__routers_entry:
        return netinfra__netinfra__routers_entry(name=yang.gdata.from_xml_str(n, "name"), id=yang.gdata.from_xml_opt_str(n, "id"), role=yang.gdata.from_xml_opt_str(n, "role"))

class netinfra__netinfra__routers(yang.adata.MNode):
    elements: list[netinfra__netinfra__routers_entry]
    def __init__(self, elements=[]):
        self._ns = "http://example.com/netinfra"
        self._name = 'routers'
        self.elements = elements

    def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = netinfra__netinfra__routers_entry(name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('routers', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[netinfra__netinfra__routers_entry]:
        res = []
        for e in n.elements:
            res.append(netinfra__netinfra__routers_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[netinfra__netinfra__routers_entry]:
        res = []
        for node in nodes:
            res.append(netinfra__netinfra__routers_entry.from_xml(node))
        return res


class netinfra__netinfra__backbone_link_entry(yang.adata.MNode):
    left_router: str
    left_interface: str
    right_router: str
    right_interface: str

    def __init__(self, left_router: str, left_interface: str, right_router: str, right_interface: str):
        self._ns = "http://example.com/netinfra"
        self.left_router = left_router
        self.left_interface = left_interface
        self.right_router = right_router
        self.right_interface = right_interface

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.left_router), str(self.left_interface), str(self.right_router), str(self.right_interface)], ns=self._ns)
        _left_router = self.left_router
        _left_interface = self.left_interface
        _right_router = self.right_router
        _right_interface = self.right_interface
        if _left_router is not None:
            res.children['left-router'] = yang.gdata.Leaf('left-router', _left_router, ns='http://example.com/netinfra')
        if _left_interface is not None:
            res.children['left-interface'] = yang.gdata.Leaf('left-interface', _left_interface, ns='http://example.com/netinfra')
        if _right_router is not None:
            res.children['right-router'] = yang.gdata.Leaf('right-router', _right_router, ns='http://example.com/netinfra')
        if _right_interface is not None:
            res.children['right-interface'] = yang.gdata.Leaf('right-interface', _right_interface, ns='http://example.com/netinfra')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> netinfra__netinfra__backbone_link_entry:
        return netinfra__netinfra__backbone_link_entry(left_router=n.get_str("left-router"), left_interface=n.get_str("left-interface"), right_router=n.get_str("right-router"), right_interface=n.get_str("right-interface"))

    @staticmethod
    def from_xml(n: xml.Node) -> netinfra__netinfra__backbone_link_entry:
        return netinfra__netinfra__backbone_link_entry(left_router=yang.gdata.from_xml_str(n, "left-router"), left_interface=yang.gdata.from_xml_str(n, "left-interface"), right_router=yang.gdata.from_xml_str(n, "right-router"), right_interface=yang.gdata.from_xml_str(n, "right-interface"))

class netinfra__netinfra__backbone_link(yang.adata.MNode):
    elements: list[netinfra__netinfra__backbone_link_entry]
    def __init__(self, elements=[]):
        self._ns = "http://example.com/netinfra"
        self._name = 'backbone-link'
        self.elements = elements

    def create(self, left_router, left_interface, right_router, right_interface):
        for e in self.elements:
            match = True
            if e.left_router != left_router:
                match = False
                break
            if e.left_interface != left_interface:
                match = False
                break
            if e.right_router != right_router:
                match = False
                break
            if e.right_interface != right_interface:
                match = False
                break
            if match:
                return e

        res = netinfra__netinfra__backbone_link_entry(left_router, left_interface, right_router, right_interface)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('backbone-link', ['left-router', 'left-interface', 'right-router', 'right-interface'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[netinfra__netinfra__backbone_link_entry]:
        res = []
        for e in n.elements:
            res.append(netinfra__netinfra__backbone_link_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[netinfra__netinfra__backbone_link_entry]:
        res = []
        for node in nodes:
            res.append(netinfra__netinfra__backbone_link_entry.from_xml(node))
        return res


class netinfra__netinfra(yang.adata.MNode):
    routers: netinfra__netinfra__routers
    backbone_link: netinfra__netinfra__backbone_link

    def __init__(self, routers: list[netinfra__netinfra__routers_entry]=[], backbone_link: list[netinfra__netinfra__backbone_link_entry]=[]):
        self._ns = "http://example.com/netinfra"
        self.routers = netinfra__netinfra__routers(elements=routers)
        self.routers._parent = self
        self.backbone_link = netinfra__netinfra__backbone_link(elements=backbone_link)
        self.backbone_link._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('netinfra', ns=self._ns)
        _routers = self.routers
        _backbone_link = self.backbone_link
        if _routers is not None:
            res.children['routers'] = _routers.to_gdata()
        if _backbone_link is not None:
            res.children['backbone-link'] = _backbone_link.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> netinfra__netinfra:
        if n != None:
            return netinfra__netinfra(routers=netinfra__netinfra__routers.from_gdata(n.get_list("routers")), backbone_link=netinfra__netinfra__backbone_link.from_gdata(n.get_list("backbone-link")))
        return netinfra__netinfra()

    @staticmethod
    def from_xml(n: ?xml.Node) -> netinfra__netinfra:
        if n != None:
            return netinfra__netinfra(routers=netinfra__netinfra__routers.from_xml(yang.gdata.get_xml_children(n, "routers")), backbone_link=netinfra__netinfra__backbone_link.from_xml(yang.gdata.get_xml_children(n, "backbone-link")))
        return netinfra__netinfra()


class root(yang.adata.MNode):
    l3vpn: l3vpn__l3vpn
    netinfra: netinfra__netinfra

    def __init__(self, l3vpn: ?l3vpn__l3vpn=None, netinfra: ?netinfra__netinfra=None):
        self._ns = ""
        if l3vpn is not None:
            self.l3vpn = l3vpn
        else:
            self.l3vpn = l3vpn__l3vpn()
        self_l3vpn = self.l3vpn
        if self_l3vpn is not None:
            self_l3vpn._parent = self
        if netinfra is not None:
            self.netinfra = netinfra
        else:
            self.netinfra = netinfra__netinfra()
        self_netinfra = self.netinfra
        if self_netinfra is not None:
            self_netinfra._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Root()
        _l3vpn = self.l3vpn
        _netinfra = self.netinfra
        if _l3vpn is not None:
            res.children['l3vpn'] = _l3vpn.to_gdata()
        if _netinfra is not None:
            res.children['netinfra'] = _netinfra.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(l3vpn=l3vpn__l3vpn.from_gdata(n.get_opt_container("l3vpn")), netinfra=netinfra__netinfra.from_gdata(n.get_opt_container("netinfra")))
        return root()

    @staticmethod
    def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(l3vpn=l3vpn__l3vpn.from_xml(yang.gdata.get_xml_opt_child(n, "l3vpn")), netinfra=netinfra__netinfra.from_xml(yang.gdata.get_xml_opt_child(n, "netinfra")))
        return root()

