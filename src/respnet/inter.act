import yang.adata
import orchestron.ttt

import respnet.layers.base_1 as base

class Router(base.Router):
    def transform(self, i):
        o = base.o_root()
        print("Intermediate router transform running", i.name, i.id)
        dev = o.device.create(i.name)
        oob_addr = dev.address.create("oob")
        oob_addr.address = i.name
        dev.credentials.username = "clab"
        dev.credentials.password = "clab@123"
        sid = i.id
        rfs = o.rfs.create(i.name)
        bc = rfs.base_config.create(i.name) # TODO: should be P-container
        bc.ipv4_address = "10.0.0.%s" % sid if sid is not None else ""
        bc.ipv6_address = "2001:db8:0:0::%s" % sid if sid is not None else ""
        return o


class BBLink(base.BBLink):
    def transform(self, i):
        print("Intermediate backbonelink transform running %s [%s] <-> %s [%s]" % (i.left_router, i.left_interface, i.right_router, i.right_interface))
        o = base.o_root()
        left_rfs = o.rfs.create(i.left_router)
        li = left_rfs.backbone_interface.create(i.left_interface)
        li.remote.device = i.right_router
        li.remote.interface = i.right_interface

        right_rfs = o.rfs.create(i.right_router)
        ri = right_rfs.backbone_interface.create(i.right_interface)
        ri.remote.device = i.left_router
        ri.remote.interface = i.left_interface

        return o


class L3Vpn(base.L3Vpn):
    def transform(self, i):
        print("Intermediate L3VPN transform running %s" % (i.name))
        o = base.o_root()

        for ep in i.endpoint.elements:
            rfs = o.rfs.create(ep.device)

            vrf = rfs.vrf.create(i.name)
            vrf.description = i.description

            ci = rfs.customer_interface.create(ep.interface)
            ci.description = "Customer VPN access %s [%s] in VPN %s" % (ep.site, ep.site_network_access, i.name)
            ci.ipv4_address = ep.ipv4_address
            ci.ipv4_prefix_length = ep.ipv4_prefix_length
            ci.vrf = i.name

        return o
