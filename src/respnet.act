import argparse
import file
import logging
import http
import net
import xml

import orchestron.device as odev
import orchestron.ttt as ttt
import yang.adata
import yang.gdata

import respnet.layers
from respnet.layers.y_0 import root as cfs_root

import testing

def optional_str[T](v: ?T, default: str = "None") -> str:
    return str(v) if v is not None else default

def merge_confpsrc(confpsrc: dict[str, yang.gdata.Node]):
    chunks = list(confpsrc.values())
    if len(chunks) > 0:
        merged = chunks[0]
        if len(chunks) > 1:
            for chunk in chunks[1:]:
                merged = yang.gdata.merge(merged, chunk)
        return merged
    return yang.gdata.Root()


actor main(env):
    rfcap = file.ReadFileCap(file.FileCap(env.cap))

    logh = logging.Handler("Otron")
    logh.add_sink(logging.StdoutSink())
    log = logging.Logger(logh)

    dev_mgr = odev.DeviceManager(env.cap)
    layers = respnet.layers.get_layers(dev_mgr, logh)
    layer_configs = {}

    def conf(xml_conf: xml.Node):
        # Bootstrap first layer config input
        input_config = cfs_root.from_xml(xml_conf)
        layer_configs[0] = input_config.to_gdata().to_xmlstr()
        config_in = {"source1": input_config.to_gdata()}

        config_out = {}
        for idx, layer in enumerate(layers):
            print("Computing layer %d" % idx)
            config_out = {}
            layer.configure(config_in, config_out)
            mc = merge_confpsrc(config_out)
#            print("=== Layer %d config === START ===" % idx)
#            print(mc.to_xmlstr())
#            print("=== Layer %d config === END =====" % idx)
            config_in = config_out
            layer_configs[idx + 1] = mc.to_xmlstr()

    tcpl_cap = net.TCPListenCap(net.TCPCap(net.NetCap(env.cap)))

    def _on_http_accept(server):
        server.cb_install(_on_http_server_request, _on_http_server_error)

    def _on_http_server_request(server, request, respond):
        if request.method == "GET":
            path_elements = request.path.split("/")
            if len(path_elements) > 3 and path_elements[1] == "device":
                try:
                    dev_name = path_elements[2]
                    dev = dev_mgr.get(dev_name)
                    if path_elements[3] == "capabilities":
                        respond(200, {}, str(dev.get_capabilities()))
                        return
                    if path_elements[3] == "modules":
                        txt = "{"
                        mods = dev.get_modules()
                        for mod in mods.values():
                            txt += '{"name": %s, "namespace": %s, "revision": %s, "feature": %s}, ' % (mod.name, mod.namespace, optional_str(mod.revision), optional_str(mod.feature))
                        txt += "}"
                        respond(200, {}, txt)
                        return
                    respond(404, {}, "Not found")
                    return
                except Exception as e:
                    respond(404, {}, "Not found")
                    return
            elif len(path_elements) == 3 and path_elements[1] == "layer":
                try:
                    layer_idx = int(path_elements[2])
                    try:
                        layer_config = layer_configs[layer_idx]
                        respond(200, {}, layer_config)
                        return
                    except KeyError:
                        respond(404, {}, "Not found")
                        return
                except ValueError:
                    respond(400, {}, "Bad request, layer index must be an integer")
                    return
            else:
                respond(404, {}, "Not found")
                return
        elif request.method == "POST":
            xml_in = xml.decode(request.body.decode())
            log.info("Received XML", {"xml": xml_in})
            conf(xml_in)
            respond(200, {}, "Oki doki!")
            return
        else:
            respond(405, {}, "Method not allowed")
            return

    def _on_http_server_error(server, error):
        print("Error: %s" % error)

    server = http.Listener(tcpl_cap, "0.0.0.0", 80, _on_http_accept)

    configs = []

    def _conf_file():
        # Grab te first config
        print("Applying config file..")
        try:
            nb_input = configs.pop(0)
            conf(nb_input)
            print("Config file applied, waiting 3 seconds before applying the next..")
            after 3: _conf_file()
        except IndexError:
            print("All config files applied")

    if len(env.argv) > 1:
        # Read and apply config files, but paced
        for i in range(1, len(env.argv)):
            if i > 0:
                filename = env.argv[i]
                f = file.ReadFile(rfcap, filename)
                nb_input = await async f.read()
                f.close()
                try:
                    configs.append(xml.decode(nb_input.decode()))
                except Exception as e:
                    print("Error reading config file %s: %s" % (filename, str(e)))
                    env.exit(1)

        # start to apply..
        after 0.5: _conf_file()

    print("Orchestron/respnet running..")

