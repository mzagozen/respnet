import argparse
import file
import logging
import http
import net
import xml

import orchestron.device as odev
import orchestron.ttt as ttt
import yang.adata
import yang.gdata

import respnet.layers
from respnet.layers.y_0 import root as cfs_root

import testing

def merge_confpsrc(confpsrc: dict[str, yang.gdata.Node]):
    chunks = list(confpsrc.values())
    if len(chunks) > 0:
        merged = chunks[0]
        if len(chunks) > 1:
            for chunk in chunks[1:]:
                merged = yang.gdata.merge(merged, chunk)
        return merged
    return yang.gdata.Root()


actor main(env):
    rfcap = file.ReadFileCap(file.FileCap(env.cap))
    if len(env.argv) <= 1:
        print("Usage: %s <filename>" % env.argv[0])
        await async env.exit(1)
    filename = env.argv[1]
    f = file.ReadFile(rfcap, filename)
    nb_input = await async f.read()
    f.close()

    logh = logging.Handler("Otron")
    logh.add_sink(logging.StdoutSink())
    log = logging.Logger(logh)

    dev_mgr = odev.DeviceManager(env.cap)
    layers = respnet.layers.get_layers(dev_mgr)

    def conf(xml_conf: xml.Node):
        # Bootstrap first layer config input
        input_config = cfs_root.from_xml(xml_conf)
        config_in = {"source1": input_config.to_gdata()}

        config_out = {}
        for idx, layer in enumerate(layers):
            print("Computing layer %d" % idx)
            config_out = {}
            layer.configure(config_in, config_out)
#            print("=== Layer %d config === START ===" % idx)
#            mc = merge_confpsrc(config_out)
#            print(mc.to_xmlstr())
#            print("=== Layer %d config === END =====" % idx)
            config_in = config_out

    tcpl_cap = net.TCPListenCap(net.TCPCap(net.NetCap(env.cap)))

    def _on_http_accept(server):
        server.cb_install(_on_http_server_request, _on_http_server_error)

    def _on_http_server_request(server, request, respond):
        xml_in = xml.decode(request.body.decode())
        log.info("Received XML", {"xml": xml_in})
        conf(xml_in)
        respond(200, {}, "Oki doki!")

    def _on_http_server_error(server, error):
        print("Error: %s" % error)

    server = http.Listener(tcpl_cap, "0.0.0.0", 80, _on_http_accept)

    #conf(xml.decode(nb_input.decode()))

    print("Orchestron/respnet running..")
