module Cisco-IOS-XR-um-router-isis-cfg {
  namespace "http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg";
  prefix "um-router-isis-cfg";
  import Cisco-IOS-XR-types {
    prefix "xr";
  }
  import ietf-inet-types {
    prefix "inet";
  }
  import tailf-common {
    prefix "tailf";
  }
  import cisco-semver {
    prefix "semver";
  }
  organization "Cisco Systems, Inc.";
  contact "Cisco Systems, Inc.
Customer Service

Postal: 170 West Tasman Drive
San Jose, CA 95134

Tel: +1 800 553-NETS

E-mail: cs-yang@cisco.com";
  description "This module contains a collection of YANG definitions
for Cisco IOS-XR router-isis package configuration.

This YANG module augments the
modules with configuration data.

Copyright (c) 2019-2023 by Cisco Systems, Inc.
All rights reserved.";
  revision 2023-08-22 {
    description "Add nsr-restart-time
2023-07-12
  Add flex-algo UCMP
2023-06-28
  Change the must clause from ../../srv6-locator-xxx to srv6-locator-xxx
2023-04-09
  Add maximum paths per route-policy for standard and flex algo
2023-04-03
  Add flex-algo MinimumBandwidth and MaximumDelay constraints
2023-03-13
  Add Uloop filtering suport
2023-02-10
  Modify must statement for SPF interval per-level
2022-11-18
  Add distribute link-state prefix filtering
2022-10-14
  Added new nodes for partition-detect
2022-10-04
  Added support for ISIS Prefix-SID UHP
2022-10-02
  Added hello-padding under router-isis
2022-10-01
  Add support for flex-algo reverse link affinities.
2022-07-25
  Added new node anycast-prefer-igp-cost to traffic-eng tunnel
2022-07-18
  Added new node php-disable to the existing connected-prefix-sid-map, strict-spf and flex-algo.
2022-07-11
  Added missing description statement to nodes
2022-05-12
  Added new node adv-unreachable with sub-node unreachable-component-tag and tag value to an existing ISIS address-family sub-mode summary-prefix command.Added new node prefix-unreachable under ISIS address-family sub-mode.
2022-05-05
  Added new node anomaly to the existing ISIS affinity flex-algo
2022-04-22
  Added support for maximum-paths under flex-algo,
Added container algorithm
2022-04-05
  Added support for te and delay
2022-03-03
  Added container metric & tag under segment-routing/srv6/locators,
Added container format,
Added container lsp-fast-flood
2022-01-19
  Added ietf support for spf-interval
2022-01-04
  Added support for unhidden CLI commands
2021-12-14
  Added authentication-check feature";
    semver:module-version "5.0.0";
  }
  revision 2021-09-23 {
    description "Merged container levels under disable|interval/periodic/address-family-topology,
 Merged container levels under disable|interval/periodic/address-family,
 Merged disable & interval-time into one leaf interval
2021-07-27
   Re-ordered maximum-wait, initial-wait and secondary-wait nodes under
 level container/spf-interval
2021-06-15
   Added when statement to container prefix-attributes";
    semver:module-version "4.0.0";
  }
  revision 2021-05-18 {
    description "Added features, 1. flex-algo srlg exclude
2. advertise application flex-algo link-attributes srlg
2021-04-22
    Added te-metric flex-algo feature
2021-03-02
    Re-ordered maximum-wait, initial-wait and secondary-wait nodes under
  level container
2021-02-11
    Re-ordered per-link, per-prefix nodes under interface fast-reroute container
2021-01-28
    Added cisco-support task yang nodes
2021-01-27
    Re-ordered nodes under lsp-gen-interval, min-lsp-arrivaltime container
2021-01-20
    Moved presence containers as leafs under snmp-server traps
2021-01-18
    Added presence statement and re-ordered few nodes under container max-metric
2021-01-11
    Add support to metric and preferred container under tunnel
2021-01-07
    Updated range value in leaf multiplier under fallback container
2021-01-06
    Added presence statement under link-state container
2020-12-09
    Removed cisco-support yang nodes
2020-12-01
    Added container anomaly under metric/fallback
2020-11-20
    Added metric type te
2020-11-19
    Fixed a must statement under absolute, added presence statement to text
2020-11-13
    Added container receive and attestation under list process.
2020-11-02
    Moved levels container under lsp-password out of it and renamed as
  lsp-password-levels.
2020-08-20
    Added level option under srv6/locator
2020-08-13
    Remove presence container and constraints on the match container
2020-08-10
    Updated the fallback topology
2020-07-21
    Slight changes to prefix-priority nodes
2020-07-17
    Added must statements and moved rib-update-delay up one node
2020-07-15
    Added down-flag-clear node under redistribute isis
2020-07-14
    Added mandatory node to bit-position under affinity-map";
    semver:module-version "3.0.0";
  }
  revision 2020-05-19 {
    description "Added nodes for new ISIS features
2020-05-07
  Added a container anycast and its child nodes
2020-04-14
  Updated the constraints in the nodes under stagger to be less strict
2020-03-09
  Updated lsp-password and summary-prefix trees with proper constaraint
  statements";
    semver:module-version "2.0.0";
  }
  revision 2019-06-10 {
    description "Establish semantic version baseline.";
    semver:module-version "1.0.0";
  }
  revision 2019-03-30 {
    description "Initial draft";
  }
  typedef Isis-af-name {
    type enumeration {
      enum ipv4 {
        value 0;
        description "IPv4";
      }
      enum ipv6 {
        value 1;
        description "IPv6";
      }
    }
    description "Address-family names";
  }
  typedef Isis-saf-name {
    type enumeration {
      enum unicast {
        value 0;
        description "unicast";
      }
      enum multicast {
        value 1;
        description "multicast";
      }
    }
    description "Sub address-family names";
  }
  typedef Isis-saf-multicast {
    type enumeration {
      enum multicast {
        value 1;
        description "multicast";
      }
    }
    description "Sub address-family names (only multicast)";
  }
  container router {
    description "Enable a routing process";
    container isis {
      description "ISO IS-IS";
      container processes {
        description "Process ID";
        list process {
          key process-id;
          description "Process ID";
          leaf process-id {
            type string {
              length "1..36" {
                description "Process ID";
              }
            }
            description "Process ID";
          }
          leaf is-type {
            type enumeration {
              enum level-1 {
                value 1;
                description "Act as a station router only";
              }
              enum level-2-only {
                value 2;
                description "Act as an area router only";
              }
              enum level-1-2 {
                value 3;
                description "Act as both a station router and an area router";
              }
            }
            description "Area type (level)";
          }
          container nets {
            description "A Network Entity Title (NET) for this process";
            list net {
              key net-id;
              description "A Network Entity Title (NET) for this process";
              leaf net-id {
                type string {
                  length "1..1024" {
                    description "NET (XX.XXXX. ... .XXXX.XX)";
                  }
                }
                description "A Network Entity Title (NET) for this process";
              }
            }
          }
          container address-families {
            description "Enter the IS-IS address-family configuration submode";
            list address-family {
              key "af-name saf-name";
              description "IS-IS address family";
              leaf af-name {
                type Isis-af-name;
                description "Address family name";
              }
              leaf saf-name {
                type Isis-saf-name;
                description "Sub address family name";
              }
              container segment-routing {
                description "Enable Segment Routing";
                container mpls {
                  description "Enable Segment Routing using MPLS encapsulation";
                  leaf sr-prefer {
                    when "../../../saf-name = 'unicast'";
                    type boolean;
                    description "Prefer segment routing labels over LDP labels";
                  }
                }
              }
              container metric-style {
                description "Use old-style (ISO 10589) or new-style packet formats";
                container narrow {
                  must "not(../wide or ../transition)";
                  presence "Indicates a narrow node is configured.";
                  description "Use old style of TLVs with narrow metric";
                }
                container wide {
                  must "not(../narrow or ../transition)";
                  presence "Indicates a wide node is configured.";
                  description "Use new style of TLVs to carry wider metric";
                }
                container transition {
                  must "not(../narrow or ../wide)";
                  presence "Indicates a transition node is configured.";
                  description "Send and accept both styles of TLVs during transition";
                }
                container levels {
                  description "Set metric-style for one level only";
                  list level {
                    key level-id;
                    description "Set metric-style for one level only";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Level";
                        }
                      }
                      description "Set metric-style for one level only";
                    }
                    container narrow {
                      must "not(../wide or ../transition)";
                      presence "Indicates a narrow node is configured.";
                      description "Use old style of TLVs with narrow metric";
                    }
                    container wide {
                      must "not(../narrow or ../transition)";
                      presence "Indicates a wide node is configured.";
                      description "Use new style of TLVs to carry wider metric";
                    }
                    container transition {
                      must "not(../narrow or ../wide)";
                      presence "Indicates a transition node is configured.";
                      description "Send and accept both styles of TLVs during transition";
                    }
                  }
                }
              }
            }
          }
          container interfaces {
            description "Enter the IS-IS interface configuration submode";
            list interface {
              key interface-name;
              description "Enter the IS-IS interface configuration submode";
              leaf interface-name {
                type "xr:Interface-name";
                description "Enter the IS-IS interface configuration submode";
              }
              leaf circuit-type {
                type enumeration {
                  enum level-1 {
                    value 1;
                    description "Form level-1 adjacencies only";
                  }
                  enum level-2-only {
                    value 2;
                    description "Form level-2 adjacencies only";
                  }
                  enum level-1-2 {
                    value 3;
                    description "Form level-1 and level-2 adjacencies";
                  }
                }
                description "Configure circuit type for interface";
              }
              container csnp-interval {
                description "Set CSNP interval";
                leaf csnp-interval-time {
                  type uint32 {
                    range "0..65535" {
                      description "CSNP interval value (seconds)";
                    }
                  }
                  description "Set CSNP interval";
                }
                container levels {
                  description "Set the CSNP interval only at the supplied level";
                  list level {
                    key level-id;
                    description "Set the CSNP interval only at the supplied level";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set the CSNP interval only at this level";
                        }
                      }
                      description "Set the CSNP interval only at the supplied level";
                    }
                    leaf csnp-interval-time {
                      type uint32 {
                        range "0..65535" {
                          description "CSNP interval value (seconds)";
                        }
                      }
                      mandatory true;
                      description "Set CSNP interval";
                    }
                  }
                }
              }
              container hello-padding {
                description "Add padding to IS-IS hello packets";
                container always {
                  must "not(../disable or ../sometimes)";
                  presence "Indicates a always node is configured.";
                  description "Always enable hello-padding";
                }
                container disable {
                  must "not(../sometimes)";
                  presence "Indicates a disable node is configured.";
                  description "Disable hello-padding";
                }
                container sometimes {
                  must "not(../disable)";
                  presence "Indicates a sometimes node is configured.";
                  description "Enable hello-padding during adjacency formation only";
                }
                container levels {
                  description "Set hello-interval for one level only";
                  list level {
                    key level-id;
                    description "Set hello-interval for one level only";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set hello-interval for IIHs at this level only";
                        }
                      }
                      description "Set hello-interval for one level only";
                    }
                    container disable {
                      must "not(../sometimes)";
                      presence "Indicates a disable node is configured.";
                      description "Disable hello-padding";
                    }
                    container sometimes {
                      must "not(../disable)";
                      presence "Indicates a sometimes node is configured.";
                      description "Enable hello-padding during adjacency formation only";
                    }
                  }
                }
              }
              container hello-interval {
                description "Set Hello interval in seconds";
                leaf hello-interval-time {
                  type uint32 {
                    range "1..65535" {
                      description "Hello interval value";
                    }
                  }
                  description "Set Hello interval in seconds";
                }
                container levels {
                  description "Set hello-interval for one level only";
                  list level {
                    key level-id;
                    description "Set hello-interval for one level only";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set hello-interval for IIHs at this level only";
                        }
                      }
                      description "Set hello-interval for one level only";
                    }
                    leaf hello-interval-time {
                      type uint32 {
                        range "1..65535" {
                          description "Hello interval value";
                        }
                      }
                      mandatory true;
                      description "Set Hello interval in seconds";
                    }
                  }
                }
              }
              container hello-multiplier {
                description "Set multiplier for Hello holding time";
                leaf hello-multiplier-value {
                  type uint32 {
                    range "3..1000" {
                      description "Hello multiplier value";
                    }
                  }
                  description "Set multiplier for Hello holding time";
                }
                container levels {
                  description "Set hello-multiplier for one level only";
                  list level {
                    key level-id;
                    description "Set hello-multiplier for one level only";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set hello-multiplier for IIHs at this level only";
                        }
                      }
                      description "Set hello-multiplier for one level only";
                    }
                    leaf hello-multiplier-value {
                      type uint32 {
                        range "3..1000" {
                          description "Hello multiplier value";
                        }
                      }
                      mandatory true;
                      description "Set multiplier for Hello holding time";
                    }
                  }
                }
              }
              container lsp-interval {
                description "Set LSP transmission interval";
                leaf lsp-interval-time {
                  type uint32 {
                    range "1..4294967295" {
                      description "LSP transmission interval (milliseconds)";
                    }
                  }
                  description "Set LSP transmission interval";
                }
                container levels {
                  description "set lsp-interval for this level";
                  list level {
                    key level-id;
                    description "set lsp-interval for this level";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set lsp-interval at this level only";
                        }
                      }
                      description "set lsp-interval for this level";
                    }
                    leaf lsp-interval-time {
                      type uint32 {
                        range "1..4294967295" {
                          description "LSP transmission interval (milliseconds)";
                        }
                      }
                      mandatory true;
                      description "Set LSP transmission interval";
                    }
                  }
                }
              }
              container hello-password {
                must "text or hmac-md5 or keychain";
                presence "Indicates a hello-password node is configured.";
                description "Configure the IIH password";
                container text {
                  must "not(../hmac-md5 or ../keychain)";
                  presence "Indicates a text node is configured.";
                  description "Use cleartext password authentication";
                  leaf encrypted {
                    type "xr:Proprietary-password";
                    mandatory true;
                    description "The encrypted LSP/SNP password";
                  }
                }
                container hmac-md5 {
                  must "not(../text or ../keychain)";
                  presence "Indicates a hmac-md5 node is configured.";
                  description "Use HMAC-MD5 authentication";
                  leaf encrypted {
                    type "xr:Proprietary-password";
                    mandatory true;
                    description "The encrypted LSP/SNP password";
                  }
                }
                container keychain {
                  must "not(../text or ../hmac-md5)";
                  presence "Indicates a keychain node is configured.";
                  description "Specifies a Key Chain name will follow";
                  leaf keychain-name {
                    type string {
                      length "1..1024" {
                        description "The Key Chain name";
                      }
                    }
                    mandatory true;
                    description "Specifies a Key Chain name will follow";
                  }
                }
                container send-only {
                  presence "Indicates a send-only node is configured.";
                  description "Do not require authentication of incoming IIHs";
                }
              }
              container hello-password-levels {
                description "Set hello-password for one level only";
                list level {
                  must "text or hmac-md5 or keychain";
                  key level-id;
                  description "Set hello-password for one level only";
                  leaf level-id {
                    type uint32 {
                      range "1..2" {
                        description "Set hello-password for IIHs at this level only";
                      }
                    }
                    description "Set hello-password for one level only";
                  }
                  container text {
                    must "not(../hmac-md5 or ../keychain)";
                    presence "Indicates a text node is configured.";
                    description "Use cleartext password authentication";
                    leaf encrypted {
                      type "xr:Proprietary-password";
                      mandatory true;
                      description "The encrypted LSP/SNP password";
                    }
                  }
                  container hmac-md5 {
                    must "not(../text or ../keychain)";
                    presence "Indicates a hmac-md5 node is configured.";
                    description "Use HMAC-MD5 authentication";
                    leaf encrypted {
                      type "xr:Proprietary-password";
                      mandatory true;
                      description "The encrypted LSP/SNP password";
                    }
                  }
                  container keychain {
                    must "not(../text or ../hmac-md5)";
                    presence "Indicates a keychain node is configured.";
                    description "Specifies a Key Chain name will follow";
                    leaf keychain-name {
                      type string {
                        length "1..1024" {
                          description "The Key Chain name";
                        }
                      }
                      mandatory true;
                      description "Specifies a Key Chain name will follow";
                    }
                  }
                  container send-only {
                    presence "Indicates a send-only node is configured.";
                    description "Do not require authentication of incoming IIHs";
                  }
                }
              }
              container hello-password-accept {
                description "Use password for incoming authentication only";
                leaf encrypted {
                  type "xr:Proprietary-password";
                  description "The encrypted hello password";
                }
                container levels {
                  description "Set hello-password for one level only";
                  list level {
                    key level-id;
                    description "Set hello-password for one level only";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set hello-password for IIHs at this level only";
                        }
                      }
                      description "Set hello-password for one level only";
                    }
                    leaf encrypted {
                      type "xr:Proprietary-password";
                      mandatory true;
                      description "The encrypted hello password";
                    }
                  }
                }
              }
              container lsp {
                description "LSP configuration";
                container fast-flood {
                  description "LSP fast flood configuration";
                  container threshold {
                    description "Set LSP transmission fast flood threshold";
                    leaf number-of-lsps {
                      type uint32 {
                        range "1..4294967295" {
                          description "Number of LSPs to send back to back";
                        }
                      }
                      description "Set LSP transmission fast flood threshold";
                    }
                    container levels {
                      description "Set lsp fast-flood threshold for this level";
                      list level {
                        key level-id;
                        description "Set lsp fast-flood threshold for this level";
                        leaf level-id {
                          type uint32 {
                            range "1..2" {
                              description "Set lsp fast-flood threshold at this level only";
                            }
                          }
                          description "Set lsp fast-flood threshold for this level";
                        }
                        leaf number-of-lsps {
                          type uint32 {
                            range "1..4294967295" {
                              description "Number of LSPs to send back to back";
                            }
                          }
                          mandatory true;
                          description "Set LSP transmission fast flood threshold";
                        }
                      }
                    }
                  }
                }
              }
              container priority {
                description "Set priority for Designated Router election";
                leaf priority-value {
                  type uint32 {
                    range "0..127" {
                      description "Priority value";
                    }
                  }
                  description "Set priority for Designated Router election";
                }
                container levels {
                  description "Set priority for one level only";
                  list level {
                    key level-id;
                    description "Set priority for one level only";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set priority for this level only";
                        }
                      }
                      description "Set priority for one level only";
                    }
                    leaf priority-value {
                      type uint32 {
                        range "0..127" {
                          description "Priority value";
                        }
                      }
                      mandatory true;
                      description "Set priority for Designated Router election";
                    }
                  }
                }
              }
              container point-to-point {
                presence "Indicates a point-to-point node is configured.";
                description "Treat active LAN interface as point-to-point";
              }
              container retransmit-interval {
                description "Interval between retransmissions of the same LSP";
                leaf retransmit-interval-time {
                  type uint32 {
                    range "0..65535" {
                      description "(seconds)";
                    }
                  }
                  description "Interval between retransmissions of the same LSP";
                }
                container levels {
                  description "Set retransmit-interval for one level only";
                  list level {
                    key level-id;
                    description "Set retransmit-interval for one level only";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set retransmit-interval for LSPs at this level only";
                        }
                      }
                      description "Set retransmit-interval for one level only";
                    }
                    leaf retransmit-interval-time {
                      type uint32 {
                        range "0..65535" {
                          description "(seconds)";
                        }
                      }
                      mandatory true;
                      description "Interval between retransmissions of the same LSP";
                    }
                  }
                }
              }
              container retransmit-throttle-interval {
                description "Minimum interval betwen retransissions of different LSPs";
                leaf retransmit-throttle-interval-time {
                  type uint32 {
                    range "0..65535" {
                      description "(milliseconds)";
                    }
                  }
                  description "Minimum interval betwen retransissions of different LSPs";
                }
                container levels {
                  description "Set retransmit-throttle-interval for one level only";
                  list level {
                    key level-id;
                    description "Set retransmit-throttle-interval for one level only";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set retransmit-throttle-interval at this level only";
                        }
                      }
                      description "Set retransmit-throttle-interval for one level only";
                    }
                    leaf retransmit-throttle-interval-time {
                      type uint32 {
                        range "0..65535" {
                          description "(milliseconds)";
                        }
                      }
                      mandatory true;
                      description "Minimum interval betwen retransissions of different LSPs";
                    }
                  }
                }
              }
              container link-down {
                description "Configure interface down event parameters";
                container fast-detect {
                  presence "Indicates a fast-detect node is configured.";
                  description "Enable high priority detection";
                }
              }
              container prefix-attributes {
                when "../interface-name[starts-with(text(),'Loopback')]" {
                  tailf:dependency "../interface-name";
                }
                description "Set Prefix Attributes";
                container n-flag-clear {
                  presence "Indicates a n-flag-clear node is configured.";
                  description "Clear N-flag";
                }
                container levels {
                  description "Clear N-flag for this level";
                  list level {
                    must "n-flag-clear";
                    key level-id;
                    description "Clear N-flag for this level";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Clear N-flag at this level only";
                        }
                      }
                      description "Clear N-flag for this level";
                    }
                    container n-flag-clear {
                      presence "Indicates a n-flag-clear node is configured.";
                      description "Clear N-flag";
                    }
                  }
                }
                container anycast {
                  presence "Indicates a anycast node is configured.";
                  description "Prefix has anycast semantics";
                }
                container anycast-levels {
                  description "Set anycast for this level";
                  list level {
                    key level-id;
                    description "Set anycast for this level";
                    leaf level-id {
                      type uint32 {
                        range "1..2" {
                          description "Set anycast at this level only";
                        }
                      }
                      description "Set anycast for this level";
                    }
                  }
                }
              }
              container affinity {
                description "Application specific interface affinities";
                container flex-algos {
                  description "Affinities for Flexible Algorithm application";
                  leaf-list affinity-names {
                    type string {
                      length "1..32" {
                        description "Affinity names";
                      }
                    }
                    max-elements 32;
                    description "Affinities for Flexible Algorithm application";
                  }
                  container anomalies {
                    description "Affinities to advertise when there is a link anomaly";
                    leaf-list anomaly {
                      type string {
                        length "1..32" {
                          description "Affinity names";
                        }
                      }
                      max-elements 32;
                      description "Affinities to advertise when there is a link anomaly";
                    }
                  }
                }
              }
              container override {
                description "Override a configuration setting";
                container metrics {
                  description "Override the configured link metrics";
                  container maximum {
                    must "not(../high or ../disabled)";
                    presence "Indicates a maximum node is configured.";
                    description "Set metric to unreachable value (wide metrics only)";
                  }
                  container high {
                    must "not(../maximum or ../disabled)";
                    presence "Indicates a high node is configured.";
                    description "Set metric to highest reachable value";
                  }
                  container disabled {
                    must "not(../maximum or ../high)";
                    presence "Indicates a disabled node is configured.";
                    description "Ignore reverse-metric requests from neighbors";
                  }
                }
              }
              container delay {
                description "Delay configuration setting";
                container normalize {
                  description "Delay normalization setting";
                  leaf interval {
                    type uint32 {
                      range "1..16777215" {
                        description "Value in microseconds";
                      }
                    }
                    description "Normalization interval";
                  }
                  leaf offset {
                    type uint32 {
                      range "0..16777215" {
                        description "Value in microseconds";
                      }
                    }
                    must "../interval";
                    description "Normalization offset";
                  }
                }
              }
              container bfd {
                description "Configure BFD parameters";
                container fast-detect {
                  description "Enable Fast detection";
                  container ipv4 {
                    presence "Indicates a ipv4 node is configured.";
                    description "Address Family";
                  }
                  container ipv6 {
                    presence "Indicates a ipv6 node is configured.";
                    description "Address Family";
                  }
                }
                leaf minimum-interval {
                  type uint32 {
                    range "3..30000" {
                      description "hello interval in milli-seconds";
                    }
                  }
                  description "Hello interval";
                }
                leaf multiplier {
                  type uint32 {
                    range "2..50" {
                      description "Detect multiplier";
                    }
                  }
                  description "Detect multiplier";
                }
              }
              container passive {
                must "not(../suppressed or ../shutdown)";
                presence "Indicates a passive node is configured.";
                description "Do not establish adjacencies over this interface";
              }
              container suppressed {
                must "not(../passive or ../shutdown)";
                presence "Indicates a suppressed node is configured.";
                description "Do not advertise connected prefixes of this interface";
              }
              container shutdown {
                must "not(../passive or ../suppressed)";
                presence "Indicates a shutdown node is configured.";
                description "Shutdown IS-IS on this interface";
              }
              container mesh-group {
                description "Set IS-IS mesh group";
                leaf mesh-group-number {
                  type uint32 {
                    range "1..4294967295" {
                      description "Mesh group number";
                    }
                  }
                  description "Mesh group number";
                }
                container blocked {
                  presence "Indicates a blocked node is configured.";
                  description "Block LSPs on this interface";
                }
              }
              container address-families {
                description "Enter the IS-IS interface address-family configuration submode";
                list address-family {
                  key "af-name saf-name";
                  description "Address family";
                  leaf af-name {
                    type Isis-af-name;
                    description "Address family name";
                  }
                  leaf saf-name {
                    type Isis-saf-name;
                    description "Sub address family name";
                  }
                  container metric {
                    description "Configure the metric for interface";
                    leaf default-metric {
                      type uint32 {
                        range "1..16777214" {
                          description "Default metric: <1-63> for narrow, <1-16777214> for wide";
                        }
                      }
                      must "not(../maximum)";
                      description "Default metric";
                    }
                    container maximum {
                      must "not(../default-metric)";
                      presence "Indicates a maximum node is configured.";
                      description "Maximum wide metric. All routers will exclude this link from their SPF";
                    }
                    container levels {
                      description "Set metric for one level only";
                      list level {
                        key level-id;
                        description "Set metric for one level only";
                        leaf level-id {
                          type uint32 {
                            range "1..2" {
                              description "Set metric at this level only";
                            }
                          }
                          description "Set metric for one level only";
                        }
                        leaf default-metric {
                          type uint32 {
                            range "1..16777214" {
                              description "Default metric: <1-63> for narrow, <1-16777214> for wide";
                            }
                          }
                          must "not(../maximum)";
                          description "Default metric";
                        }
                        container maximum {
                          must "not(../default-metric)";
                          presence "Indicates a maximum node is configured.";
                          description "Maximum wide metric. All routers will exclude this link from their SPF";
                        }
                      }
                    }
                    container fallback {
                      description "Configure the metric fallback for interface";
                      container bandwidth {
                        description "fallback based on bandwidth change";
                        leaf multiplier {
                          type uint32 {
                            range "2..100000" {
                              description "Set Multiplier of interface metric";
                            }
                          }
                          must "../threshold";
                          description "fallback based on bandwidth change";
                        }
                        leaf threshold {
                          type uint32 {
                            range "1..100" {
                              description "Set metric fallback at this threshold only";
                            }
                          }
                          must "../multiplier";
                          description "Threshold interms of percentage of bandwidth";
                        }
                      }
                      container anomaly {
                        description "Increase the link metric when a delay/loss anomaly occurs";
                        container te-metric {
                          description "Modify the TE metric";
                          container delay {
                            must "not(../loss or ../increment or ../multiplier
or ../maximum) and
(increment or multiplier or maximum)";
                            presence "Indicates a delay node is configured.";
                            description "Only increase the link metric when a delay anomaly occurs";
                            leaf increment {
                              type uint32 {
                                range "1..16777213" {
                                  description "Metric increment";
                                }
                              }
                              must "not(../multiplier or ../maximum)";
                              description "Increment the link metric by the following amount";
                            }
                            leaf multiplier {
                              type uint32 {
                                range "2..100000" {
                                  description "Metric multiplier";
                                }
                              }
                              must "not(../increment or ../maximum)";
                              description "Multiply the link metric by the following amount";
                            }
                            container maximum {
                              must "not(../increment or ../multiplier)";
                              presence "Indicates a maximum node is configured.";
                              description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                            }
                          }
                          container loss {
                            must "not(../delay or ../increment or ../multiplier
or ../maximum) and
(increment or multiplier or maximum)";
                            presence "Indicates a loss node is configured.";
                            description "Only increase the link metric when a loss anomaly occurs";
                            leaf increment {
                              type uint32 {
                                range "1..16777213" {
                                  description "Metric increment";
                                }
                              }
                              must "not(../multiplier or ../maximum)";
                              description "Increment the link metric by the following amount";
                            }
                            leaf multiplier {
                              type uint32 {
                                range "2..100000" {
                                  description "Metric multiplier";
                                }
                              }
                              must "not(../increment or ../maximum)";
                              description "Multiply the link metric by the following amount";
                            }
                            container maximum {
                              must "not(../increment or ../multiplier)";
                              presence "Indicates a maximum node is configured.";
                              description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                            }
                          }
                          leaf increment {
                            type uint32 {
                              range "1..16777213" {
                                description "Metric increment";
                              }
                            }
                            must "not(../delay or ../loss or ../multiplier or
../maximum)";
                            description "Increment the link metric by the following amount";
                          }
                          leaf multiplier {
                            type uint32 {
                              range "2..100000" {
                                description "Metric multiplier";
                              }
                            }
                            must "not(../delay or ../loss or ../increment or
../maximum)";
                            description "Multiply the link metric by the following amount";
                          }
                          container maximum {
                            must "not(../delay or ../loss or ../increment or
../multiplier)";
                            presence "Indicates a maximum node is configured.";
                            description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                          }
                        }
                        container te-metric-levels {
                          description "Increase metric for one level only";
                          list level {
                            must "delay or loss or increment or multiplier
or maximum";
                            key level-id;
                            description "Set metric for one level only";
                            leaf level-id {
                              type uint32 {
                                range "1..2" {
                                  description "Set metric at this level only";
                                }
                              }
                              description "Set metric for one level only";
                            }
                            container delay {
                              must "not(../loss or ../increment or ../multiplier
or ../maximum) and
(increment or multiplier or maximum)";
                              presence "Indicates a delay node is configured.";
                              description "Only increase the link metric when a delay anomaly occurs";
                              leaf increment {
                                type uint32 {
                                  range "1..16777213" {
                                    description "Metric increment";
                                  }
                                }
                                must "not(../multiplier or ../maximum)";
                                description "Increment the link metric by the following amount";
                              }
                              leaf multiplier {
                                type uint32 {
                                  range "2..100000" {
                                    description "Metric multiplier";
                                  }
                                }
                                must "not(../increment or ../maximum)";
                                description "Multiply the link metric by the following amount";
                              }
                              container maximum {
                                must "not(../increment or ../multiplier)";
                                presence "Indicates a maximum node is configured.";
                                description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                              }
                            }
                            container loss {
                              must "not(../delay or ../increment or
../multiplier or ../maximum) and
(increment or multiplier or maximum)";
                              presence "Indicates a loss node is configured.";
                              description "Only increase the link metric when a loss anomaly occurs";
                              leaf increment {
                                type uint32 {
                                  range "1..16777213" {
                                    description "Metric increment";
                                  }
                                }
                                must "not(../multiplier or ../maximum)";
                                description "Increment the link metric by the following amount";
                              }
                              leaf multiplier {
                                type uint32 {
                                  range "2..100000" {
                                    description "Metric multiplier";
                                  }
                                }
                                must "not(../increment or ../maximum)";
                                description "Multiply the link metric by the following amount";
                              }
                              container maximum {
                                must "not(../increment or ../multiplier)";
                                presence "Indicates a maximum node is configured.";
                                description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                              }
                            }
                            leaf increment {
                              type uint32 {
                                range "1..16777213" {
                                  description "Metric increment";
                                }
                              }
                              must "not(../delay or ../loss or ../multiplier
or ../maximum)";
                              description "Increment the link metric by the following amount";
                            }
                            leaf multiplier {
                              type uint32 {
                                range "2..100000" {
                                  description "Metric multiplier";
                                }
                              }
                              must "not(../delay or ../loss or ../increment
or ../maximum)";
                              description "Multiply the link metric by the following amount";
                            }
                            container maximum {
                              must "not(../delay or ../loss or ../increment
or ../multiplier)";
                              presence "Indicates a maximum node is configured.";
                              description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                            }
                          }
                        }
                        container delay {
                          must "not(../loss or ../increment or ../multiplier
or ../maximum) and
(increment or multiplier or maximum)";
                          presence "Indicates a delay node is configured.";
                          description "Only increase the link metric when a delay anomaly occurs";
                          leaf increment {
                            type uint32 {
                              range "1..16777213" {
                                description "Metric increment";
                              }
                            }
                            must "not(../multiplier or ../maximum)";
                            description "Increment the link metric by the following amount";
                          }
                          leaf multiplier {
                            type uint32 {
                              range "2..100000" {
                                description "Metric multiplier";
                              }
                            }
                            must "not(../increment or ../maximum)";
                            description "Multiply the link metric by the following amount";
                          }
                          container maximum {
                            must "not(../increment or ../multiplier)";
                            presence "Indicates a maximum node is configured.";
                            description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                          }
                        }
                        container loss {
                          must "not(../loss or ../increment or ../multiplier
or ../maximum) and
(increment or multiplier or maximum)";
                          presence "Indicates a loss node is configured.";
                          description "Only increase the link metric when a loss anomaly occurs";
                          leaf increment {
                            type uint32 {
                              range "1..16777213" {
                                description "Metric increment";
                              }
                            }
                            must "not(../multiplier or ../maximum)";
                            description "Increment the link metric by the following amount";
                          }
                          leaf multiplier {
                            type uint32 {
                              range "2..100000" {
                                description "Metric multiplier";
                              }
                            }
                            must "not(../increment or ../maximum)";
                            description "Multiply the link metric by the following amount";
                          }
                          container maximum {
                            must "not(../increment or ../multiplier)";
                            presence "Indicates a maximum node is configured.";
                            description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                          }
                        }
                        leaf increment {
                          type uint32 {
                            range "1..16777213" {
                              description "Metric increment";
                            }
                          }
                          must "not(../delay or ../loss or ../multiplier
or ../maximum)";
                          description "Increment the link metric by the following amount";
                        }
                        leaf multiplier {
                          type uint32 {
                            range "2..100000" {
                              description "Metric multiplier";
                            }
                          }
                          must "not(../delay or ../loss or ../increment
or ../maximum)";
                          description "Multiply the link metric by the following amount";
                        }
                        container maximum {
                          must "not(../delay or ../loss or ../increment
or ../multiplier)";
                          presence "Indicates a maximum node is configured.";
                          description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                        }
                        container levels {
                          description "Increase metric for one level only";
                          list level {
                            must "delay or loss or increment or multiplier
or maximum";
                            key level-id;
                            description "Set metric for one level only";
                            leaf level-id {
                              type uint32 {
                                range "1..2" {
                                  description "Set metric at this level only";
                                }
                              }
                              description "Set metric for one level only";
                            }
                            container delay {
                              must "not(../loss or ../increment or
../multiplier or ../maximum) and
(increment or multiplier or maximum)";
                              presence "Indicates a delay node is configured.";
                              description "Only increase the link metric when a delay anomaly occurs";
                              leaf increment {
                                type uint32 {
                                  range "1..16777213" {
                                    description "Metric increment";
                                  }
                                }
                                must "not(../multiplier or ../maximum)";
                                description "Increment the link metric by the following amount";
                              }
                              leaf multiplier {
                                type uint32 {
                                  range "2..100000" {
                                    description "Metric multiplier";
                                  }
                                }
                                must "not(../increment or ../maximum)";
                                description "Multiply the link metric by the following amount";
                              }
                              container maximum {
                                must "not(../increment or ../multiplier)";
                                presence "Indicates a maximum node is configured.";
                                description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                              }
                            }
                            container loss {
                              must "not(../delay or ../increment or
../multiplier or ../maximum) and
(increment or multiplier or maximum)";
                              presence "Indicates a loss node is configured.";
                              description "Only increase the link metric when a loss anomaly occurs";
                              leaf increment {
                                type uint32 {
                                  range "1..16777213" {
                                    description "Metric increment";
                                  }
                                }
                                must "not(../multiplier or ../maximum)";
                                description "Increment the link metric by the following amount";
                              }
                              leaf multiplier {
                                type uint32 {
                                  range "2..100000" {
                                    description "Metric multiplier";
                                  }
                                }
                                must "not(../increment or ../maximum)";
                                description "Multiply the link metric by the following amount";
                              }
                              container maximum {
                                must "not(../increment or ../multiplier)";
                                presence "Indicates a maximum node is configured.";
                                description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                              }
                            }
                            leaf increment {
                              type uint32 {
                                range "1..16777213" {
                                  description "Metric increment";
                                }
                              }
                              must "not(../delay or ../loss or ../multiplier
or ../maximum)";
                              description "Increment the link metric by the following amount";
                            }
                            leaf multiplier {
                              type uint32 {
                                range "2..100000" {
                                  description "Metric multiplier";
                                }
                              }
                              must "not(../delay or ../loss or ../increment
or ../maximum)";
                              description "Multiply the link metric by the following amount";
                            }
                            container maximum {
                              must "not(../delay or ../loss or ../increment
or ../multiplier)";
                              presence "Indicates a maximum node is configured.";
                              description "Set the maximum wide metric. All routers will exclude this link from their SPF";
                            }
                          }
                        }
                      }
                    }
                  }
                  container te-metric {
                    description "Configure an application specific TE metric for the interface";
                    leaf flex-algo {
                      type uint32 {
                        range "1..16777214" {
                          description "Flex-algo traffic-engineering metric";
                        }
                      }
                      description "Configure a Flex-algo TE metric for the interface";
                    }
                  }
                  container te-metric-levels {
                    description "Set metric for one level only";
                    list level {
                      key level-id;
                      description "Set metric for one level only";
                      leaf level-id {
                        type uint32 {
                          range "1..2" {
                            description "Set metric at this level only";
                          }
                        }
                        description "Set metric for one level only";
                      }
                      leaf flex-algo {
                        type uint32 {
                          range "1..16777214" {
                            description "Flex-algo traffic-engineering metric";
                          }
                        }
                        mandatory true;
                        description "Configure a Flex-algo TE metric for the interface";
                      }
                    }
                  }
                  container mpls {
                    when "../saf-name = 'unicast'";
                    description "Configure MPLS routing protocol parameters";
                    container ldp {
                      description "Configure LDP parameters";
                      container sync {
                        presence "Indicates a sync node is configured.";
                        description "Configure LDP ISIS synchronization";
                        leaf level {
                          type uint32 {
                            range "1..2" {
                              description "Set LDP synchronization at this level only";
                            }
                          }
                          description "Set LDP synchronization for one level only";
                        }
                      }
                    }
                  }
                  container tag {
                    description "Set interface tag";
                    leaf interface-tag {
                      type uint32 {
                        range "1..4294967295" {
                          description "Interface tag";
                        }
                      }
                      description "Set interface tag";
                    }
                    container levels {
                      description "Set the tag only at supplied level";
                      list level {
                        key level-id;
                        description "Set the tag only at supplied level";
                        leaf level-id {
                          type uint32 {
                            range "1..2" {
                              description "Set the tag only at this level";
                            }
                          }
                          description "Set the tag only at supplied level";
                        }
                        leaf interface-tag {
                          type uint32 {
                            range "1..4294967295" {
                              description "Interface tag";
                            }
                          }
                          mandatory true;
                          description "Set interface tag";
                        }
                      }
                    }
                  }
                  container prefix-sid {
                    when "../saf-name = 'unicast' and ../../../interface-name[starts-with(text(),'Loopback')]" {
                      tailf:dependency "../../../interface-name";
                    }
                    description "Specify the Prefix Segment ID";
                    container sid {
                      must "index or absolute";
                      presence "Indicates a sid node is configured.";
                      description "Specify the Prefix Segment ID";
                      container index {
                        must "not(../absolute)";
                        presence "Indicates a index node is configured.";
                        description "Specify the index of Prefix Segement ID";
                        leaf sid-index {
                          type uint32 {
                            range "0..1048575" {
                              description "The Prefix Segment ID index";
                            }
                          }
                          mandatory true;
                          description "Specify the index of Prefix Segement ID";
                        }
                      }
                      container absolute {
                        must "not(../index)";
                        presence "Indicates a absolute node is configured.";
                        description "Specify the absolute value of Prefix Segement ID";
                        leaf sid-value {
                          type uint32 {
                            range "16000..1048575" {
                              description "The Prefix Segment ID value";
                            }
                          }
                          mandatory true;
                          description "Specify the absolute value of Prefix Segement ID";
                        }
                      }
                      container php-disable {
                        presence "Indicates a php-disable node is configured.";
                        description "Disable Penultimate Hop Popping";
                      }
                      container explicit-null {
                        presence "Indicates a explicit-null node is configured.";
                        description "Upstream neighbor must replace prefix-sid with explicit null label";
                      }
                      container n-flag-clear {
                        presence "Indicates a n-flag-clear node is configured.";
                        description "Clear N-flag for the prefix-SID ";
                      }
                    }
                    container strict-spf {
                      must "index or absolute";
                      presence "Indicates a strict-spf node is configured.";
                      description "Strict-SPF Prefix SID Configuration";
                      container index {
                        must "not(../absolute)";
                        presence "Indicates a index node is configured.";
                        description "Specify the index of Prefix Segement ID";
                        leaf sid-index {
                          type uint32 {
                            range "0..1048575" {
                              description "The Prefix Segment ID index";
                            }
                          }
                          mandatory true;
                          description "Specify the index of Prefix Segement ID";
                        }
                      }
                      container absolute {
                        must "not(../index)";
                        presence "Indicates a absolute node is configured.";
                        description "Specify the absolute value of Prefix Segement ID";
                        leaf sid-value {
                          type uint32 {
                            range "16000..1048575" {
                              description "The Prefix Segment ID value";
                            }
                          }
                          mandatory true;
                          description "Specify the absolute value of Prefix Segement ID";
                        }
                      }
                      container php-disable {
                        presence "Indicates a php-disable node is configured.";
                        description "Disable Penultimate Hop Popping";
                      }
                      container explicit-null {
                        presence "Indicates a explicit-null node is configured.";
                        description "Upstream neighbor must replace prefix-sid with explicit null label";
                      }
                      container n-flag-clear {
                        presence "Indicates a n-flag-clear node is configured.";
                        description "Clear N-flag for the prefix-SID ";
                      }
                    }
                    container algorithms {
                      description "Algorithm Specific Prefix SID Configuration";
                      list algorithm {
                        key algorithm-number;
                        description "Algorithm Specific Prefix SID Configuration";
                        leaf algorithm-number {
                          type uint32 {
                            range "128..255" {
                              description "Algorithm number";
                            }
                          }
                          description "Algorithm Specific Prefix SID Configuration";
                        }
                        container index {
                          must "not(../absolute)";
                          presence "Indicates a index node is configured.";
                          description "Specify the index of Prefix Segement ID";
                          leaf sid-index {
                            type uint32 {
                              range "0..1048575" {
                                description "The Prefix Segment ID index";
                              }
                            }
                            mandatory true;
                            description "Specify the index of Prefix Segement ID";
                          }
                        }
                        container absolute {
                          must "not(../index)";
                          presence "Indicates a absolute node is configured.";
                          description "Specify the absolute value of Prefix Segement ID";
                          leaf sid-value {
                            type uint32 {
                              range "16000..1048575" {
                                description "The Prefix Segment ID value";
                              }
                            }
                            mandatory true;
                            description "Specify the absolute value of Prefix Segement ID";
                          }
                        }
                        container php-disable {
                          presence "Indicates a php-disable node is configured.";
                          description "Disable Penultimate Hop Popping";
                        }
                        container explicit-null {
                          presence "Indicates a explicit-null node is configured.";
                          description "Upstream neighbor must replace prefix-sid with explicit null label";
                        }
                        container n-flag-clear {
                          presence "Indicates a n-flag-clear node is configured.";
                          description "Clear N-flag for the prefix-SID ";
                        }
                      }
                    }
                  }
                  container adjacency-sid {
                    when "../saf-name = 'unicast'";
                    description "Specify the Adjacency Segment ID";
                    container indexes {
                      description "Specify the index of Adjacency Segement ID";
                      list index {
                        key sid-index;
                        description "Specify the index of Adjacency Segement ID";
                        leaf sid-index {
                          type uint32 {
                            range "0..1048575" {
                              description "The Adjacency Segment ID index";
                            }
                          }
                          description "Specify the index of Adjacency Segement ID";
                        }
                        container protected {
                          presence "Indicates a protected node is configured.";
                          description "Protect Adjacency SID";
                        }
                      }
                    }
                    container absolutes {
                      description "Specify the absolute value of Adjacency Segement ID";
                      list absolute {
                        key sid-value;
                        description "Specify the absolute value of Adjacency Segement ID";
                        leaf sid-value {
                          type uint32 {
                            range "0..1048575" {
                              description "The Adjacency Segment ID value";
                            }
                          }
                          description "Specify the absolute value of Adjacency Segement ID";
                        }
                        container protected {
                          presence "Indicates a protected node is configured.";
                          description "Protect Adjacency SID";
                        }
                      }
                    }
                  }
                  container fast-reroute {
                    when "../saf-name = 'unicast'";
                    description "Configure Fast ReRoute";
                    container computation {
                      description "Computation Fast ReRoute";
                      container per-link-computation {
                        must "not(../per-prefix-computation)";
                        presence "Indicates a per-link-computation node is configured.";
                        description "Prefix independent per-link computation";
                      }
                      container per-prefix-computation {
                        must "not(../per-link-computation)";
                        presence "Indicates a per-prefix-computation node is configured.";
                        description "Prefix dependent computation";
                      }
                      container levels {
                        description "Configure FRR for one level only";
                        list level {
                          must "per-link-computation or per-prefix-computation";
                          key level-id;
                          description "Configure FRR for one level only";
                          leaf level-id {
                            type uint32 {
                              range "1..2" {
                                description "Level";
                              }
                            }
                            description "Configure FRR for one level only";
                          }
                          container per-link-computation {
                            must "not(../per-prefix-computation)";
                            presence "Indicates a per-link node is configured.";
                            description "Prefix independent per-link computation";
                          }
                          container per-prefix-computation {
                            must "not(../per-link-computation)";
                            presence "Indicates a per-prefix node is configured.";
                            description "Prefix dependent computation";
                          }
                        }
                      }
                    }
                    container per-link {
                      description "Prefix independent per-link computation";
                      container exclude {
                        description "FRR exclusion information";
                        container interfaces {
                          description "Exclude an interface from computation";
                          list interface {
                            key interface-name;
                            description "Exclude an interface from computation";
                            leaf interface-name {
                              type "xr:Interface-name";
                              description "Exclude an interface from computation";
                            }
                            leaf level {
                              type uint32 {
                                range "1..2" {
                                  description "Level";
                                }
                              }
                              description "Exclude interface for one level only";
                            }
                          }
                        }
                      }
                      container lfa-candidate {
                        description "FRR LFA candidate information";
                        container interfaces {
                          description "Include an interface to LFA candidate in computation";
                          list interface {
                            key interface-name;
                            description "Include an interface to LFA candidate in computation";
                            leaf interface-name {
                              type "xr:Interface-name";
                              description "Include an interface to LFA candidate in computation";
                            }
                            leaf level {
                              type uint32 {
                                range "1..2" {
                                  description "Level";
                                }
                              }
                              description "Include interface for one level only";
                            }
                          }
                        }
                      }
                    }
                    container per-prefix {
                      description "Prefix dependent computation";
                      container remote-lfa {
                        description "Enable remote LFA computation";
                        container tunnel {
                          description "Enable remote LFA computation using tunnels";
                          container mpls-ldp {
                            presence "Indicates a mpls-ldp node is configured.";
                            description "Use MPLS LDP tunnel to reach the remote LFA node";
                          }
                          container levels {
                            description "Enable remote LFA for one level only";
                            list level {
                              must "mpls-ldp";
                              key level-id;
                              description "Enable remote LFA for one level only";
                              leaf level-id {
                                type uint32 {
                                  range "1..2" {
                                    description "Set remote LFA for this level";
                                  }
                                }
                                description "Enable remote LFA for one level only";
                              }
                              container mpls-ldp {
                                presence "Indicates a mpls-ldp node is configured.";
                                description "Use MPLS LDP tunnel to reach the remote LFA node";
                              }
                            }
                          }
                        }
                        container maximum-metric {
                          description "Limit remote LFA node selection within the metric";
                          leaf metric {
                            type uint32 {
                              range "1..16777215" {
                                description "Value of the metric";
                              }
                            }
                            description "Value of the metric";
                          }
                          container levels {
                            description "Enable remote LFA max metric for one level only";
                            list level {
                              key level-id;
                              description "Enable remote LFA max metric for one level only";
                              leaf level-id {
                                type uint32 {
                                  range "1..2" {
                                    description "Set remote LFA max metric value for this level";
                                  }
                                }
                                description "Enable remote LFA max metric for one level only";
                              }
                              leaf metric {
                                type uint32 {
                                  range "1..16777215" {
                                    description "Value of the metric";
                                  }
                                }
                                mandatory true;
                                description "Value of the metric";
                              }
                            }
                          }
                        }
                      }
                      container per-prefix {
                        description "Prefix dependent computation";
                        container ti-lfa {
                          presence "Indicates a ti-lfa node is configured.";
                          description "Enable TI LFA computation";
                        }
                        container levels {
                          description "Enable EPCFRR LFA for one level only";
                          list level {
                            must "ti-lfa";
                            key level-id;
                            description "Enable EPCFRR LFA for one level only";
                            leaf level-id {
                              type uint32 {
                                range "1..2" {
                                  description "Set EPCFRR LFA for this level";
                                }
                              }
                              description "Enable EPCFRR LFA for one level only";
                            }
                            container ti-lfa {
                              presence "Indicates a ti-lfa node is configured.";
                              description "Enable TI LFA computation";
                            }
                          }
                        }
                      }
                      container tiebreaker {
                        description "Configure tiebreaker for multiple backups";
                        container node-protecting {
                          description "Prefer node protecting backup path";
                          container index {
                            description "Set preference order among tiebreakers";
                            leaf preference-order {
                              type uint32 {
                                range "1..255" {
                                  description "Index";
                                }
                              }
                              description "Set preference order among tiebreakers";
                            }
                            container levels {
                              description "Configure tiebreaker for one level only";
                              list level {
                                key level-id;
                                description "Configure tiebreaker for one level only";
                                leaf level-id {
                                  type uint32 {
                                    range "1..2" {
                                      description "Level";
                                    }
                                  }
                                  description "Configure tiebreaker for one level only";
                                }
                                leaf preference-order {
                                  type uint32 {
                                    range "1..255" {
                                      description "Index";
                                    }
                                  }
                                  mandatory true;
                                  description "Set preference order among tiebreakers";
                                }
                              }
                            }
                          }
                        }
                        container srlg-disjoint {
                          description "Prefer SRLG disjoint backup path";
                          container index {
                            description "Set preference order among tiebreakers";
                            leaf preference-order {
                              type uint32 {
                                range "1..255" {
                                  description "Index";
                                }
                              }
                              description "Set preference order among tiebreakers";
                            }
                            container levels {
                              description "Configure tiebreaker for one level only";
                              list level {
                                key level-id;
                                description "Configure tiebreaker for one level only";
                                leaf level-id {
                                  type uint32 {
                                    range "1..2" {
                                      description "Level";
                                    }
                                  }
                                  description "Configure tiebreaker for one level only";
                                }
                                leaf preference-order {
                                  type uint32 {
                                    range "1..255" {
                                      description "Index";
                                    }
                                  }
                                  mandatory true;
                                  description "Set preference order among tiebreakers";
                                }
                              }
                            }
                          }
                        }
                        container default {
                          description "Prefer default (link protecting) backup path";
                          container default-backup-path {
                            presence "Indicates a default node is configured.";
                            description "Prefer default (link protecting) backup path";
                          }
                          container levels {
                            description "Configure tiebreaker for one level only";
                            list level {
                              must "default-backup-path";
                              key level-id;
                              description "Configure tiebreaker for one level only";
                              leaf level-id {
                                type uint32 {
                                  range "1..2" {
                                    description "Level";
                                  }
                                }
                                description "Configure tiebreaker for one level only";
                              }
                              container default-backup-path {
                                presence "Indicates a default node is configured.";
                                description "Prefer default (link protecting) backup path";
                              }
                            }
                          }
                        }
                      }
                      container exclude {
                        description "FRR exclusion information";
                        container interfaces {
                          description "Exclude an interface from computation";
                          list interface {
                            key interface-name;
                            description "Exclude an interface from computation";
                            leaf interface-name {
                              type "xr:Interface-name";
                              description "Exclude an interface from computation";
                            }
                            leaf level {
                              type uint32 {
                                range "1..2" {
                                  description "Level";
                                }
                              }
                              description "Exclude interface for one level only";
                            }
                          }
                        }
                      }
                      container lfa-candidate {
                        description "FRR LFA candidate information";
                        container interfaces {
                          description "Include an interface to LFA candidate in computation";
                          list interface {
                            key interface-name;
                            description "Include an interface to LFA candidate in computation";
                            leaf interface-name {
                              type "xr:Interface-name";
                              description "Include an interface to LFA candidate in computation";
                            }
                            leaf level {
                              type uint32 {
                                range "1..2" {
                                  description "Level";
                                }
                              }
                              description "Include interface for one level only";
                            }
                          }
                        }
                      }
                    }
                  }
                  container link-group {
                    presence "Indicates a link-group node is configured.";
                    description "Set interface link group";
                    leaf link-group-name {
                      type string {
                        length "1..40" {
                          description "Interface link group";
                        }
                      }
                      mandatory true;
                      description "Set interface link group";
                    }
                    leaf level {
                      type uint32 {
                        range "1..2" {
                          description "Set the tag only at this level";
                        }
                      }
                      description "Set the tag only at supplied level";
                    }
                  }
                  container weight {
                    description "Configure weight for the interface";
                    leaf weight-value {
                      type uint32 {
                        range "1..16777214" {
                          description "Configure weight for unequal load balancing";
                        }
                      }
                      description "Configure weight for the interface";
                    }
                    container levels {
                      description "Set weight for one level only";
                      list level {
                        key level-id;
                        description "Set weight for one level only";
                        leaf level-id {
                          type uint32 {
                            range "1..2" {
                              description "Set weight at this level only";
                            }
                          }
                          description "Set weight for one level only";
                        }
                        leaf weight-value {
                          type uint32 {
                            range "1..16777214" {
                              description "Configure weight for unequal load balancing";
                            }
                          }
                          mandatory true;
                          description "Configure weight for the interface";
                        }
                      }
                    }
                  }
                  container auto-metric {
                    description "Configure the auto-metric for interface";
                    container proactive-protect {
                      description "set auto-metric proactive-protect mode";
                      leaf absolute-metric {
                        type uint32 {
                          range "1..16777214" {
                            description "Absolute metric: <1-63> for narrow, <1-16777214> for wide";
                          }
                        }
                        description "Absolute metric: <1-63> for narrow, <1-16777214> for wide";
                      }
                      container levels {
                        description "Set metric for one level only";
                        list level {
                          key level-id;
                          description "Set metric for one level only";
                          leaf level-id {
                            type uint32 {
                              range "1..2" {
                                description "Set metric at this level only";
                              }
                            }
                            description "Set metric for one level only";
                          }
                          leaf absolute-metric {
                            type uint32 {
                              range "1..16777214" {
                                description "Absolute metric: <1-63> for narrow, <1-16777214> for wide";
                              }
                            }
                            mandatory true;
                            description "Absolute metric: <1-63> for narrow, <1-16777214> for wide";
                          }
                        }
                      }
                    }
                  }
                  container advertise {
                    when "../saf-name = 'unicast'";
                    description "Configure the AF specific advertisement";
                    container prefix {
                      description "Configure the prefix advertisement";
                      leaf route-policy {
                        type "xr:Route-policy-name";
                        description "Filter routes based on a route policy";
                      }
                      container levels {
                        description "Set advertisement for one level only";
                        list level {
                          key level-id;
                          description "Set advertisement for one level only";
                          leaf level-id {
                            type uint32 {
                              range "1..2" {
                                description "Set advertisement at this level only";
                              }
                            }
                            description "Set advertisement for one level only";
                          }
                          leaf route-policy {
                            type "xr:Route-policy-name";
                            description "Filter routes based on a route policy";
                          }
                        }
                      }
                    }
                  }
                  container disable {
                    presence "Indicates a disable node is configured.";
                    description "Disable IS-IS for this topology on this interface";
                  }
                }
                list address-family-topology {
                  key "af-name saf-name topology-name";
                  description "Address family with a non-default topology";
                  leaf af-name {
                    type Isis-af-name;
                    description "Address family name";
                  }
                  leaf saf-name {
                    type Isis-saf-name;
                    description "Sub address family name";
                  }
                  leaf topology-name {
                    type string {
                      length "1..32" {
                        description "Topology name";
                      }
                    }
                    description "Specify a non-default topology";
                  }
                  container metric {
                    description "Configure the metric for interface";
                    leaf default-metric {
                      type uint32 {
                        range "1..16777214" {
                          description "Default metric: <1-63> for narrow, <1-16777214> for wide";
                        }
                      }
                      must "not(../maximum)";
                      description "Default metric";
                    }
                    container maximum {
                      must "not(../default-metric)";
                      presence "Indicates a maximum node is configured.";
                      description "Maximum wide metric. All routers will exclude this link from their SPF";
                    }
                    container levels {
                      description "Set metric for one level only";
                      list level {
                        key level-id;
                        description "Set metric for one level only";
                        leaf level-id {
                          type uint32 {
                            range "1..2" {
                              description "Set metric at this level only";
                            }
                          }
                          description "Set metric for one level only";
                        }
                        leaf default-metric {
                          type uint32 {
                            range "1..16777214" {
                              description "Default metric: <1-63> for narrow, <1-16777214> for wide";
                            }
                          }
                          must "not(../maximum)";
                          description "Default metric";
                        }
                        container maximum {
                          must "not(../default-metric)";
                          presence "Indicates a maximum node is configured.";
                          description "Maximum wide metric. All routers will exclude this link from their SPF";
                        }
                      }
                    }
                    container fallback {
                      description "Configure the metric fallback for interface";
                      container bandwidth {
                        description "fallback based on bandwidth change";
                        leaf multiplier {
                          type uint32 {
                            range "2..100000" {
                              description "Set Multiplier of interface metric";
                            }
                          }
                          must "../threshold";
                          description "fallback based on bandwidth change";
                        }
                        leaf threshold {
                          type uint32 {
                            range "1..100" {
                              description "Set metric fallback at this threshold only";
                            }
                          }
                          must "../multiplier";
                          description "Threshold interms of percentage of bandwidth";
                        }
                      }
                    }
                  }
                  container te-metric {
                    description "Configure an application specific TE metric for the interface";
                    leaf flex-algo {
                      type uint32 {
                        range "1..16777214" {
                          description "Flex-algo traffic-engineering metric";
                        }
                      }
                      description "Configure a Flex-algo TE metric for the interface";
                    }
                  }
                  container te-metric-levels {
                    description "Set metric for one level only";
                    list level {
                      key level-id;
                      description "Set metric for one level only";
                      leaf level-id {
                        type uint32 {
                          range "1..2" {
                            description "Set metric at this level only";
                          }
                        }
                        description "Set metric for one level only";
                      }
                      leaf flex-algo {
                        type uint32 {
                          range "1..16777214" {
                            description "Flex-algo traffic-engineering metric";
                          }
                        }
                        mandatory true;
                        description "Configure a Flex-algo TE metric for the interface";
                      }
                    }
                  }
                  container tag {
                    description "Set interface tag";
                    leaf interface-tag {
                      type uint32 {
                        range "1..4294967295" {
                          description "Interface tag";
                        }
                      }
                      description "Set interface tag";
                    }
                    container levels {
                      description "Set the tag only at supplied level";
                      list level {
                        key level-id;
                        description "Set the tag only at supplied level";
                        leaf level-id {
                          type uint32 {
                            range "1..2" {
                              description "Set the tag only at this level";
                            }
                          }
                          description "Set the tag only at supplied level";
                        }
                        leaf interface-tag {
                          type uint32 {
                            range "1..4294967295" {
                              description "Interface tag";
                            }
                          }
                          mandatory true;
                          description "Set interface tag";
                        }
                      }
                    }
                  }
                  container link-group {
                    presence "Indicates a link-group node is configured.";
                    description "Set interface link group";
                    leaf link-group-name {
                      type string {
                        length "1..40" {
                          description "Interface link group";
                        }
                      }
                      mandatory true;
                      description "Set interface link group";
                    }
                    leaf level {
                      type uint32 {
                        range "1..2" {
                          description "Set the tag only at this level";
                        }
                      }
                      description "Set the tag only at supplied level";
                    }
                  }
                  container weight {
                    description "Configure weight for the interface";
                    leaf weight-value {
                      type uint32 {
                        range "1..16777214" {
                          description "Configure weight for unequal load balancing";
                        }
                      }
                      description "Configure weight for the interface";
                    }
                    container levels {
                      description "Set weight for one level only";
                      list level {
                        key level-id;
                        description "Set weight for one level only";
                        leaf level-id {
                          type uint32 {
                            range "1..2" {
                              description "Set weight at this level only";
                            }
                          }
                          description "Set weight for one level only";
                        }
                        leaf weight-value {
                          type uint32 {
                            range "1..16777214" {
                              description "Configure weight for unequal load balancing";
                            }
                          }
                          mandatory true;
                          description "Configure weight for the interface";
                        }
                      }
                    }
                  }
                  container auto-metric {
                    description "Configure the auto-metric for interface";
                    container proactive-protect {
                      description "set auto-metric proactive-protect mode";
                      leaf absolute-metric {
                        type uint32 {
                          range "1..16777214" {
                            description "Absolute metric: <1-63> for narrow, <1-16777214> for wide";
                          }
                        }
                        description "Absolute metric: <1-63> for narrow, <1-16777214> for wide";
                      }
                      container levels {
                        description "Set metric for one level only";
                        list level {
                          key level-id;
                          description "Set metric for one level only";
                          leaf level-id {
                            type uint32 {
                              range "1..2" {
                                description "Set metric at this level only";
                              }
                            }
                            description "Set metric for one level only";
                          }
                          leaf absolute-metric {
                            type uint32 {
                              range "1..16777214" {
                                description "Absolute metric: <1-63> for narrow, <1-16777214> for wide";
                              }
                            }
                            mandatory true;
                            description "Absolute metric: <1-63> for narrow, <1-16777214> for wide";
                          }
                        }
                      }
                    }
                  }
                  container disable {
                    presence "Indicates a disable node is configured.";
                    description "Disable IS-IS for this topology on this interface";
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

