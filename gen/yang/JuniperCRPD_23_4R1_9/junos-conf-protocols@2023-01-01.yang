module junos-conf-protocols {
  yang-version "1";
  namespace "http://yang.juniper.net/junos/conf/protocols";
  prefix "jc-protocols";
  import junos-common-types {
    prefix "jt";
    revision-date 2023-01-01;
  }
  import junos-conf-root {
    prefix "jc";
    revision-date 2023-01-01;
  }
  organization "Juniper Networks, Inc.";
  contact "yang-support@juniper.net";
  description "Junos protocols configuration module";
  revision 2023-01-01 {
    description "Junos: 23.4R1.10";
  }
  augment "/jc:configuration" {
    uses protocols-group;
  }
  augment "/jc:configuration/jc:groups" {
    uses protocols-group;
  }
  grouping protocols-group {
    container protocols {
      description "Routing protocol configuration";
      uses juniper-protocols;
    }
  }
  grouping juniper-protocols {
    uses apply-advanced;
    container router-advertisement {
      description "IPv6 router advertisement options";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for router advertisement";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
        }
      }
      list interface {
        description "Interfaces on which to configure router advertisement";
        key name;
        ordered-by user;
        leaf name {
          type string;
        }
        uses apply-advanced;
        leaf preference {
          type enumeration {
            enum medium {
              description "Medium / (Default)";
            }
            enum high {
              description "High";
            }
            enum low {
              description "Low";
            }
          }
          description "Set the Preference for Router Selection";
        }
        leaf max-advertisement-interval {
          type uint32 {
            range "4 .. 1800";
          }
          description "Maximum advertisement interval";
          units seconds;
        }
        leaf min-advertisement-interval {
          type uint32 {
            range "3 .. 1350";
          }
          description "Minimum advertisement interval";
          units seconds;
        }
        choice managed-configuration-choice {
          leaf managed-configuration {
            type empty;
            description "Set managed address configuration";
          }
          leaf no-managed-configuration {
            type empty;
            description "Don't set managed address configuration";
          }
        }
        choice other-stateful-configuration-choice {
          leaf other-stateful-configuration {
            type empty;
            description "Set other stateful configuration";
          }
          leaf no-other-stateful-configuration {
            type empty;
            description "Don't set other stateful configuration";
          }
        }
        choice link-mtu-choice {
          leaf link-mtu {
            type empty;
            description "Link MTU";
          }
          leaf no-link-mtu {
            type empty;
            description "Don't link MTU";
          }
        }
        leaf solicit-router-advertisement-unicast {
          type empty;
          description "Enable solicited router advertisement as unicast";
        }
        leaf reachable-time {
          type uint32 {
            range "0 .. 3600000";
          }
          description "Reachable time";
          units milliseconds;
        }
        leaf retransmit-timer {
          type uint32 {
            range "0 .. 4294967295";
          }
          description "Retransmit timer";
          units milliseconds;
        }
        leaf virtual-router-only {
          type empty;
          description "Send advertisements only for vrrp-inet6-group";
        }
        leaf current-hop-limit {
          type uint32 {
            range "0 .. 255";
          }
          description "Current hop limit";
        }
        leaf default-lifetime {
          type uint32 {
            range "0 .. 9000";
          }
          description "Router lifetime";
          units seconds;
        }
        list downstream {
          description "Configure the list of downstream interfaces for RA proxy";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Configure the downstream interface for RA proxy";
          }
          uses apply-advanced;
        }
        leaf upstream-mode {
          type empty;
          description "Configure the interface as upstream interface for RA proxy";
        }
        leaf downstream-mode {
          type empty;
          description "Configure the interface as downstream interface for RA proxy";
        }
        leaf parameter-preference {
          type enumeration {
            enum proxied {
              description "Send proxied parameters on downstream interface";
            }
            enum configured {
              description "Send configured parameters on downstream interface";
            }
          }
          description "Preference to select configured or proxied parameters for downstream interface";
        }
        leaf passive-mode {
          type empty;
          description "RA receive only mode";
        }
        list dns-server-address {
          description "Recursive DNS address configuration";
          key name;
          max-elements 3;
          ordered-by user;
          leaf name {
            type string;
            description "DNS address to be advertised";
          }
          uses apply-advanced;
          leaf lifetime {
            type uint32 {
              range "0 .. 4294967295";
            }
            default "1800";
            description "DNS address lifetime";
            units seconds;
          }
        }
        list prefix {
          description "Prefix configuration";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv6prefix";
            description "Prefix to be advertised";
          }
          uses apply-advanced;
          leaf valid-lifetime {
            type uint32 {
              range "0 .. 4294967295";
            }
            description "Valid lifetime (fixed)";
            units seconds;
          }
          choice on-link-choice {
            leaf on-link {
              type empty;
              description "Set on-link flag";
            }
            leaf no-on-link {
              type empty;
              description "Don't set on-link flag";
            }
          }
          leaf preferred-lifetime {
            type uint32 {
              range "0 .. 4294967295";
            }
            description "Preferred lifetime (fixed)";
            units seconds;
          }
          choice autonomous-choice {
            leaf autonomous {
              type empty;
              description "Set autonomous flag";
            }
            leaf no-autonomous {
              type empty;
              description "Don't set autonomous flag";
            }
          }
        }
        list dns-search-list {
          description "DNS search list configuration";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "DNS search list name";
          }
          uses apply-advanced;
          leaf lifetime {
            type uint32 {
              range "0 .. 4294967295";
            }
            default "5400";
            description "DNS search list lifetime";
            units seconds;
          }
        }
        list rio-prefix {
          description "Route information option configuration";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv6prefix";
            description "Prefix to be advertised";
          }
          uses apply-advanced;
          leaf rio-lifetime {
            type uint32 {
              range "0 .. 4294967295";
            }
            description "Route information lifetime";
            units seconds;
          }
          leaf rio-preference {
            type enumeration {
              enum medium {
                description "Medium / Default";
              }
              enum high {
                description "High";
              }
              enum low {
                description "Low";
              }
            }
            description "Set the preference for route information";
          }
        }
        list nat-prefix {
          description "NAT prefix";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv6prefix";
            description "NAT prefix to be advertised";
          }
          uses apply-advanced;
          leaf lifetime {
            type uint16 {
              range "0 .. 65528";
            }
            description "NAT prefix lifetime";
            units seconds;
          }
        }
      }
      container ra-secure {
        description "Protect box against rogue incoming RA messages";
        uses apply-advanced;
        leaf accept-current-hop-limit-min {
          type uint32 {
            range "1 .. 255";
          }
          description "Current hop limit acceptable min for incoming RA";
          units uint;
        }
        leaf accept-current-hop-limit-max {
          type uint32 {
            range "1 .. 255";
          }
          description "Current hop acceptable min for incoming RA";
          units uint;
        }
        leaf accept-reachable-time-min {
          type uint32 {
            range "1000 .. 3600000";
          }
          description "Reachable Time acceptable min for incoming RA";
          units milliseconds;
        }
        leaf accept-reachable-time-max {
          type uint32 {
            range "1000 .. 3600000";
          }
          description "Reachable Time acceptable max for incoming RA";
          units milliseconds;
        }
        leaf accept-retransmit-time-min {
          type uint32 {
            range "1000 .. 3600000";
          }
          description "Retransmit Time acceptable min for incoming RA";
          units milliseconds;
        }
        leaf accept-retransmit-time-max {
          type uint32 {
            range "1000 .. 3600000";
          }
          description "Retransmit Time acceptable min for incoming RA";
          units milliseconds;
        }
      }
    }
    container neighbor-discovery {
      description "IPv6 neighbor discovery";
      presence "enable neighbor-discovery";
      uses apply-advanced;
      leaf onlink-subnet-only {
        type empty;
        description "Onlink subnet only knob";
      }
      leaf no-dad-on-state-change {
        type empty;
        description "Disable DAD on interface state change";
      }
      container ndp-proxy {
        description "Configure NDP PROXY behaviour";
        uses apply-advanced;
        leaf no-proxy-on-resolve {
          type empty;
          description "Disable proxy on unresolved address";
        }
        leaf proxy-force-resolve {
          type empty;
          description "Enable Neighbor Solicitation for already learned address";
        }
      }
      container dad-proxy {
        description "Configure DAD PROXY behaviour";
        uses apply-advanced;
        leaf no-proxy-on-resolve {
          type empty;
          description "Disable proxy on unresolved address";
        }
      }
      container secure {
        description "SEND process configuration";
        uses apply-advanced;
        container security-level {
          description "Security level";
          presence "enable security-level";
          uses apply-advanced;
          choice security-level-name {
            case case_1 {
              leaf default {
                type empty;
                description "Default level";
              }
            }
            case case_2 {
              leaf secure-messages-only {
                type empty;
                description "Allow only secure messages";
              }
            }
          }
        }
        container cryptographic-address {
          description "Cryptographic address configuration";
          presence "enable cryptographic-address";
          uses apply-advanced;
          leaf key-length {
            type uint32 {
              range "1024 .. 2048";
            }
            description "RSA key length in bits";
          }
          leaf key-pair {
            type string;
            description "Pathname of RSA key file";
          }
        }
        container timestamp {
          description "Timestamp option configuration";
          presence "enable timestamp";
          uses apply-advanced;
          leaf new-peer-window {
            type uint32;
            description "New peer window (delta)";
            units seconds;
          }
          leaf known-peer-window {
            type uint32;
            description "Known peer window (fuzz)";
            units seconds;
          }
          leaf clock-drift {
            type "jt:unsigned-float";
            description "Clock drift";
          }
        }
        container traceoptions {
          description "Trace options for SEND";
          uses apply-advanced;
          leaf no-remote-trace {
            type empty;
            description "Disable remote tracing";
          }
          container file {
            description "Trace file information";
            leaf filename {
              type string {
                length "1 .. 1024";
              }
              description "Name of file in which to write trace information";
            }
            leaf size {
              type string;
              description "Maximum trace file size";
            }
            leaf files {
              type uint32 {
                range "2 .. 1000";
              }
              default "3";
              description "Maximum number of trace files";
            }
            choice world-readable-choice {
              leaf world-readable {
                type empty;
                description "Allow any user to read the log file";
              }
              leaf no-world-readable {
                type empty;
                description "Don't allow any user to read the log file";
              }
            }
            leaf match {
              type "jt:regular-expression";
              description "Regular expression for lines to be logged";
            }
          }
          list flag {
            description "Tracing parameters";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum cryptographic-address {
                  description "Trace Cryptographically Generated Address events";
                }
                enum configuration {
                  description "Trace configuration events";
                }
                enum protocol {
                  description "Trace protocol processing events";
                }
                enum rsa {
                  description "Trace RSA events";
                }
                enum all {
                  description "Trace everything";
                }
              }
            }
          }
        }
      }
    }
    container iccp {
      description "ICCP options";
      uses apply-advanced;
      leaf local-ip-addr {
        type "jt:ipv4addr";
        description "Local IP address to use by default for all peers";
      }
      leaf session-establishment-hold-time {
        type uint32 {
          range "45 .. 600";
        }
        default "300";
        description "Time within which connection must succeed with peers";
        units seconds;
      }
      leaf authentication-key {
        type string {
          length "1 .. 126";
        }
        description "MD5 authentication key for all peers";
      }
      list peer {
        description "Redundancy Group Configuration";
        key name;
        uses peer-group;
      }
      container traceoptions {
        description "Trace options for ICCP";
        uses apply-advanced;
        leaf no-remote-trace {
          type empty;
          description "Disable remote tracing";
        }
        container file {
          description "Trace file information";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "3";
            description "Maximum number of trace files";
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
          leaf match {
            type "jt:regular-expression";
            description "Regular expression for lines to be logged";
          }
        }
        list flag {
          description "Trace flag information";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum error {
                description "Trace all errors";
              }
              enum event {
                description "Trace all events";
              }
              enum packet {
                description "Trace all packets";
              }
              enum pipe {
                description "Trace pipe messages";
              }
              enum pipe-detail {
                description "Trace pipe messages in detail";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
        }
      }
    }
    container ilmi {
      description "Interim Local Management Interface Protocol configuration";
      uses apply-advanced;
      container traceoptions {
        description "ILMI trace options";
        uses apply-advanced;
        leaf no-remote-trace {
          type empty;
          description "Disable remote tracing";
        }
        container file {
          description "Trace file information";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "3";
            description "Maximum number of trace files";
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
          leaf match {
            type "jt:regular-expression";
            description "Regular expression for lines to be logged";
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum database {
                description "Trace database events";
              }
              enum routing-socket {
                description "Trace Routing socket events";
              }
              enum state {
                description "Trace state change events";
              }
              enum debug {
                description "Trace debug messages";
              }
              enum event {
                description "Trace event handler events";
              }
              enum packet {
                description "Trace packet events";
              }
              enum all {
                description "Trace all areas of code";
              }
            }
          }
        }
      }
    }
    container lacp {
      description "Link Aggregation Control Protocol configuration";
      uses apply-advanced;
      container traceoptions {
        description "LACP trace options";
        uses apply-advanced;
        leaf no-remote-trace {
          type empty;
          description "Disable remote tracing";
        }
        container file {
          description "Trace file information";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "3";
            description "Maximum number of trace files";
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
          leaf match {
            type "jt:regular-expression";
            description "Regular expression for lines to be logged";
          }
        }
        list flag {
          description "Events and packet types to include in the trace";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum configuration {
                description "Configuration events";
              }
              enum routing-socket {
                description "Routing socket events";
              }
              enum process {
                description "Process events";
              }
              enum startup {
                description "Process startup events";
              }
              enum protocol {
                description "Protocol events";
              }
              enum packet {
                description "LACP packets";
              }
              enum ppm {
                description "LACP PPM messages";
              }
              enum bfd {
                description "LACP BFD events";
              }
              enum mc-ae {
                description "Multi-chassis AE messages";
              }
              enum all {
                description "All events and packets";
              }
            }
          }
        }
      }
      leaf ppm {
        type enumeration {
          enum centralized {
            description "Centralized PPM processing";
          }
          enum inline {
            description "Distributed inline PPM processing";
          }
        }
        description "Force PPM processing";
      }
      leaf fast-hello-issu {
        type empty;
        description "ISSU support for peer lacp configured in fast periodic";
      }
    }
    container oam {
      description "Operation, Administration, and Management configuration";
      uses apply-advanced;
      container ethernet {
        description "OAM configuration for Ethernet";
        uses apply-advanced;
        container link-fault-management {
          description "802.3ah Ethernet OAM configuration";
          uses apply-advanced;
          leaf hardware-assisted-keepalives {
            type empty;
            description "Enable delegating keepalives to hardware";
          }
          container traceoptions {
            description "Trace options for link-fault management";
            uses apply-advanced;
            leaf no-remote-trace {
              type empty;
              description "Disable remote tracing";
            }
            container file {
              description "Trace file information";
              leaf filename {
                type string {
                  length "1 .. 1024";
                }
                description "Name of file in which to write trace information";
              }
              leaf size {
                type string;
                description "Maximum trace file size";
              }
              leaf files {
                type uint32 {
                  range "2 .. 1000";
                }
                default "3";
                description "Maximum number of trace files";
              }
              choice world-readable-choice {
                leaf world-readable {
                  type empty;
                  description "Allow any user to read the log file";
                }
                leaf no-world-readable {
                  type empty;
                  description "Don't allow any user to read the log file";
                }
              }
              leaf match {
                type "jt:regular-expression";
                description "Regular expression for lines to be logged";
              }
            }
            list flag {
              description "Tracing parameters";
              key name;
              ordered-by user;
              leaf name {
                type enumeration {
                  enum configuration {
                    description "Trace configuration events";
                  }
                  enum routing-socket {
                    description "Trace routing socket events";
                  }
                  enum protocol {
                    description "Trace protocol processing events";
                  }
                  enum action-profile {
                    description "Trace action profile invocation events";
                  }
                  enum all {
                    description "Trace everything";
                  }
                }
              }
            }
          }
          list action-profile {
            description "Define an action profile";
            key name;
            ordered-by user;
            leaf name {
              type string {
                length "1 .. 32";
              }
              description "Name of action profile";
            }
            uses apply-advanced;
            container event {
              description "Events this action profile will check";
              uses apply-advanced;
              leaf link-adjacency-loss {
                type empty;
                description "Loss of adjacency with OAM peer";
              }
              leaf protocol-down {
                type empty;
                description "Upper layer indication on protocol down";
              }
              container link-event-rate {
                uses apply-advanced;
                leaf symbol-period {
                  type int32 {
                    range "1 .. 100";
                  }
                  description "Rate of receiving symbol period events";
                  units "error(s) per 100 symbol";
                }
                leaf frame-error {
                  type int32 {
                    range "1 .. 1000";
                  }
                  description "Rate of receiving frame error events";
                  units "error(s) per 100 milli-second";
                }
                leaf frame-period {
                  type int32 {
                    range "1 .. 100";
                  }
                  description "Rate of receiving frame period events";
                  units "error(s) per 100 frames";
                }
                leaf frame-period-summary {
                  type int32 {
                    range "1 .. 1000";
                  }
                  description "Rate of receiving frame period summary events";
                  units "error(s) per second";
                }
              }
            }
            container action {
              description "Action to take on specified events";
              uses apply-advanced;
              leaf syslog {
                type empty;
                description "Generate syslog message";
              }
              leaf link-down {
                type empty;
                description "Mark the interface down for transit traffic";
              }
              leaf send-critical-event {
                type empty;
                description "Start sending OAM PDUs with critical event bit set";
              }
            }
          }
          list interface {
            description "Interface on which to set Ethernet OAM parameters";
            key name;
            ordered-by user;
            leaf name {
              type "jt:interface-device";
              description "Interface name";
            }
            uses apply-advanced;
            leaf-list apply-action-profile {
              type string;
              description "Apply the specified action profile on the interface";
              ordered-by user;
            }
            leaf pdu-interval {
              type int32 {
                range "100 .. 1000";
              }
              default "1000";
              description "Periodic OAM protocol data unit interval";
              units milliseconds;
            }
            leaf loopback-tracking {
              type empty;
              description "Enable link down on loopback detection";
            }
            leaf detect-loc {
              type empty;
              description "Detects initial lack of adjacency formation";
            }
            leaf link-discovery {
              type enumeration {
                enum active;
                enum passive;
              }
              default "active";
              description "Mode of discovery";
            }
            leaf pdu-threshold {
              type int32;
              default "3";
              description "Number of PDUs missed before declaring peer lost";
            }
            leaf remote-loopback {
              type empty;
              description "Put remote DTE into remote-loopback mode";
            }
            container negotiation-options {
              description "802.3ah features supported on the interface";
              uses apply-advanced;
              leaf no-allow-link-events {
                type empty;
                description "Do not emit periodic PDUs detailing framing and symbol errors";
              }
              leaf allow-remote-loopback {
                type empty;
                description "Allow local port to be put into loopback mode";
              }
            }
            container event-thresholds {
              description "Thresholds for sending 802.3ah events";
              uses apply-advanced;
              leaf symbol-period {
                type int32 {
                  range "0 .. 100";
                }
                default "1";
                description "Threshold for sending symbol period events";
              }
              leaf frame-error {
                type int32 {
                  range "0 .. 100";
                }
                default "1";
                description "Threshold for sending frame error events";
              }
              leaf frame-period {
                type int32 {
                  range "0 .. 100";
                }
                default "1";
                description "Threshold for sending frame period error events";
              }
              leaf frame-period-summary {
                type int32 {
                  range "0 .. 100";
                }
                default "1";
                description "Threshold for sending frame period summary error events";
              }
            }
          }
        }
        container connectivity-fault-management {
          description "Configurations related to 802.1ag ethernet oam";
          uses apply-advanced;
          container performance-monitoring {
            description "Configurations related to ethernet performance monitoring";
            uses apply-advanced;
            leaf hardware-assisted-timestamping {
              type empty;
              description "Enable timestamping feature in hardware";
            }
            leaf delegate-server-processing {
              type empty;
              description "Delegate performance measurement request handling to PFE";
            }
            leaf hardware-assisted-keepalives {
              type enumeration {
                enum enable {
                  description "Enable delegate keepalives handling to Hardware";
                }
                enum disable {
                  description "Disable delegate keepalives handling to Hardware (default)";
                }
              }
              description "Enable/Disable delegating keepalives to hardware";
            }
            leaf hardware-assisted-pm {
              type empty;
              description "Enable inline support for performance monitoring";
            }
            leaf enhanced-sla-iterator {
              type empty;
              description "Enable Enhanced SLA Iterator Cycle-time";
            }
            leaf measurement-interval {
              type enumeration {
                enum 2 {
                  description "2 minutes measurement interval";
                }
                enum 5 {
                  description "5 minutes measurement interval";
                }
                enum 15 {
                  description "15 minutes measurement interval";
                }
                enum 30 {
                  description "30 minutes measurement interval";
                }
                enum 60 {
                  description "1 hour measurement interval";
                }
              }
              description "Enables measurement-interval based PM (MEF 36 mode). Default 15 min in enhanced-cfm-mode";
              units minutes;
            }
            leaf legacy-pm-display {
              type empty;
              description "Display Legacy PM output (for DM) in MEF mode.";
            }
            list sla-iterator-profiles {
              description "Configuration related to an sla monitoring iterator";
              key name;
              ordered-by user;
              leaf name {
                type string;
              }
              uses apply-advanced;
              leaf disable {
                type empty;
                description "Disable the iterator profile";
              }
              leaf measurement-type {
                type enumeration {
                  enum two-way-delay {
                    description "Y.1731 2-way DM frames are sent for this profile";
                  }
                  enum loss {
                    description "Y.1731 LM frames are sent for this profile";
                  }
                  enum slm {
                    description "Y.1731 SLM frames are sent for this profile";
                  }
                  enum statistical-frame-loss {
                    description "Y.1731 2-way DM frames for statistical frame loss are sent for this profile";
                  }
                }
                description "Choice of the type of Y.1731(SLA measurement) frame to be sent";
              }
              leaf flap-trap-monitor {
                type uint32 {
                  range "1 .. 360";
                }
                description "Configurable timer value 1-360";
                units seconds;
              }
              leaf cycle-time {
                type uint32;
                default "1000";
                description "Time period of an iterator profile";
                units milliseconds;
              }
              leaf iteration-period {
                type uint32 {
                  range "1 .. 2000";
                }
                default "2000";
                description "Maximum services under this iterator profile";
                units connections;
              }
              container calculation-weight {
                description "Configure delay and delay variation calculation weight";
                presence "enable calculation-weight";
                uses apply-advanced;
                leaf delay {
                  type uint32 {
                    range "1 .. 65535";
                  }
                  default "1";
                  description "Weight used in delay calculation";
                }
                leaf delay-variation {
                  type uint32 {
                    range "1 .. 65535";
                  }
                  default "1";
                  description "Weight used in delay-variation calculation";
                }
              }
              container avg-flr-forward-threshold {
                description "Avg forward flr threshold";
                presence "enable avg-flr-forward-threshold";
                uses apply-advanced;
                leaf avg-flr-forward {
                  type uint32 {
                    range "1 .. 100000";
                  }
                  description "Avg forward flr threshold value in mili-percent";
                }
                leaf flap-trap-monitor {
                  type uint32 {
                    range "1 .. 360";
                  }
                  description "Configurable timer value 1-360";
                  units seconds;
                }
              }
              container avg-flr-backward-threshold {
                description "Avg backward flr threshold";
                presence "enable avg-flr-backward-threshold";
                uses apply-advanced;
                leaf avg-flr-backward {
                  type uint32 {
                    range "1 .. 100000";
                  }
                  description "Avg backward flr threshold value in mili-percent";
                }
                leaf flap-trap-monitor {
                  type uint32 {
                    range "1 .. 360";
                  }
                  description "Configurable timer value 1-360";
                  units seconds;
                }
              }
              container avg-fd-twoway-threshold {
                description "Avg frame delay threshold value";
                presence "enable avg-fd-twoway-threshold";
                uses apply-advanced;
                leaf avg-fd-twoway {
                  type uint32 {
                    range "1 .. 4294967295";
                  }
                  description "Avg frame delay threshold value in mili-percent";
                  units microseconds;
                }
                leaf flap-trap-monitor {
                  type uint32 {
                    range "1 .. 360";
                  }
                  description "Configurable timer value 1-360";
                  units seconds;
                }
              }
              container avg-fdv-twoway-threshold {
                description "Avg frame delay variance threshold";
                presence "enable avg-fdv-twoway-threshold";
                uses apply-advanced;
                leaf avg-fdv-twoway {
                  type uint32 {
                    range "1 .. 4294967295";
                  }
                  description "Avg frame delay variance threshold value in mili-percent";
                  units microseconds;
                }
                leaf flap-trap-monitor {
                  type uint32 {
                    range "1 .. 360";
                  }
                  description "Configurable timer value 1-360";
                  units seconds;
                }
              }
              leaf measurement-interval {
                type enumeration {
                  enum 2 {
                    description "2 minutes measurement interval";
                  }
                  enum 5 {
                    description "5 minutes measurement interval";
                  }
                  enum 15 {
                    description "15 minutes measurement interval";
                  }
                  enum 30 {
                    description "30 minutes measurement interval";
                  }
                  enum 60 {
                    description "1 hour measurement interval";
                  }
                }
                description "Measurement-interval to be used for this PM session (MEF 36 mode)";
                units minutes;
              }
              container frame-delay {
                description "Bin configuration for frame delay";
                uses apply-advanced;
                leaf num-bins {
                  type uint32 {
                    range "2 .. 5";
                  }
                  description "Max number of bins";
                }
                container two-way {
                  description "Bin configuration for 2way frame delay";
                  presence "enable two-way";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
                container forward {
                  description "Bin configuration for forward frame delay";
                  presence "enable forward";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
                container backward {
                  description "Bin configuration for backward frame delay";
                  presence "enable backward";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
              }
              container frame-delay-range {
                description "Bin configuration for frame delay range";
                uses apply-advanced;
                leaf num-bins {
                  type uint32 {
                    range "2 .. 5";
                  }
                  description "Max number of bins";
                }
                container two-way {
                  description "Bin configuration for 2way frame delay range";
                  presence "enable two-way";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
                container forward {
                  description "Bin configuration for forward frame delay range";
                  presence "enable forward";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
                container backward {
                  description "Bin configuration for backward frame delay range";
                  presence "enable backward";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
              }
              container ifdv {
                description "Bin configuration for IFDV";
                uses apply-advanced;
                leaf num-bins {
                  type uint32 {
                    range "2 .. 5";
                  }
                  description "Max number of bins";
                }
                container two-way {
                  description "Bin configuration for 2way IFDV";
                  presence "enable two-way";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
                container forward {
                  description "Bin configuration for forward IFDV";
                  presence "enable forward";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
                container backward {
                  description "Bin configuration for backward IFDV";
                  presence "enable backward";
                  uses apply-advanced;
                  leaf-list lower-threshold-bin {
                    type uint32 {
                      range "1 .. 4294967294";
                    }
                    description "Lower threshold bin configuration in ascending order";
                  }
                }
              }
              container availability {
                description "Configuration of availabilty related parameters (MEF 36 mode)";
                uses apply-advanced;
                leaf num-consecutive-pdus {
                  type uint32 {
                    range "1 .. 100";
                  }
                  description "Number of consecutive LM/SLM PDUs to be used in availability measurement";
                }
                leaf flr-threshold {
                  type uint32 {
                    range "0 .. 100000";
                  }
                  description "FLR threshold in milli-percent to be used for evaluating availability";
                }
                leaf num-consecutive-intervals {
                  type uint32 {
                    range "1 .. 10";
                  }
                  description "Number of consecutive availability indicators to detect change in availability";
                }
                leaf num-consecutive-highflr {
                  type uint32 {
                    range "1 .. 9";
                  }
                  description "Number of consecutive availability indicators to access CHLI";
                }
              }
            }
            list interface {
              description "Name of interface for the performance monitoring";
              key name;
              ordered-by user;
              leaf name {
                type "jt:interface-unit";
                description "Interface name";
              }
              leaf enable-multiclass-loss-measurement {
                type empty;
                description "Disable multiclass loss measurement in hardware";
              }
              leaf code-point-based-lm-accounting {
                type empty;
                description "Enable code point based loss measurement in hardware";
              }
              leaf priority-based-lm-accounting {
                type empty;
                description "Enable priority based loss measurement in hardware";
              }
            }
            leaf enable-multiclass-loss-measurement {
              type empty;
              description "Disable multiclass loss measurement in hardware";
            }
            leaf code-point-based-lm-accounting {
              type empty;
              description "Enable code point based loss measurement in hardware";
            }
            leaf priority-based-lm-accounting {
              type empty;
              description "Enable priority based loss measurement in hardware";
            }
            leaf colorless-loss-measurement {
              type empty;
              description "Enable colorless loss measurement in hardware";
            }
          }
          container connection-protection {
            description "Configurations related to Carrier Ethernet Transport Mode";
            uses apply-advanced;
            leaf mark-connection-protection-tlv {
              type empty;
              description "Enable marking of Connection Protection TLV";
            }
            leaf uhp-label-lookup {
              type empty;
              description "Enable lookup for special UHP labels";
            }
          }
          leaf no-aggregate-delegate-processing {
            type empty;
            description "Do not distribute aggregate session to pfe";
          }
          leaf enhanced-cfm-mode {
            type empty;
            description "Enables Enhanced CFM Mode";
          }
          container expected-defect {
            description "Configure Expected Defect Parameters";
            uses apply-advanced;
            leaf rx-enable {
              type empty;
              description "Enables Expected Defect PDU processing";
            }
            leaf rx-max-duration {
              type uint32 {
                range "120 .. 3600";
              }
              description "Max duration that is allowed in EDM in secs";
            }
            leaf tx-enable {
              type empty;
              description "Enables Expected Defect PDU transmission";
            }
            leaf tx-duration {
              type uint32 {
                range "120 .. 3600";
              }
              description "Duration value in secs for Peer to suppress alarms";
            }
          }
          container traceoptions {
            description "Trace options for connectivity fault management";
            presence "enable traceoptions";
            uses cfm-traceoptions;
          }
          list action-profile {
            description "Action profiles to use when one or more remote maintenance association endpoints are down";
            key name;
            ordered-by user;
            leaf name {
              type string;
              description "Name of action profile";
            }
            uses apply-advanced;
            container event {
              description "Events that need to be monitored";
              uses apply-advanced;
              leaf-list interface-status-tlv {
                type enumeration {
                  enum down {
                    description "Interface is administratively down";
                  }
                  enum lower-layer-down {
                    description "Interface is physically down";
                  }
                }
                description "Values that need to be monitored in interface status TLV";
                ordered-by user;
              }
              leaf-list port-status-tlv {
                type enumeration {
                  enum blocked {
                    description "Port is blocked";
                  }
                }
                description "Values that need to be monitored in port status TLV";
                ordered-by user;
              }
              leaf adjacency-loss {
                type empty;
                description "Connectivity is lost";
              }
              leaf rdi {
                type empty;
                description "RDI received from some MEP";
              }
              leaf connection-protection-tlv {
                type enumeration {
                  enum using-working-path {
                    description "Service traffic is using working path";
                  }
                  enum using-protection-path {
                    description "Service traffic is using protection path";
                  }
                }
                description "Values that need to be monitored in connection protection TLV";
              }
              leaf server-mep-defects {
                type enumeration {
                  enum link-loss-defect {
                    description "Detect link loss defects for the ethernet interface";
                  }
                  enum l2circuit-defect {
                    description "Detect l2circuit down defects";
                  }
                  enum l2vpn-defect {
                    description "Detect l2vpn down defects";
                  }
                }
                description "Defects which are monitored by Server MEP";
              }
              leaf-list ais-trigger-condition {
                type enumeration {
                  enum all-defects {
                    description "All defects";
                  }
                  enum adjacency-loss {
                    description "Loss of connectivity defects";
                  }
                  enum cross-connect-ccm {
                    description "Cross connect CCMs";
                  }
                  enum erroneous-ccm {
                    description "Erroneous CCMs";
                  }
                  enum receive-ais {
                    description "AIS message received";
                  }
                }
                description "Defect condition that generates alarm indication signal";
                ordered-by user;
              }
            }
            container action {
              uses apply-advanced;
              leaf interface-down {
                type empty;
                description "Mark the interface as down";
              }
              leaf revertive-interface-down {
                type empty;
                description "Wait for CC loss-threshold to bring back the interface up";
              }
              leaf non-revertive-interface-down {
                type empty;
                description "Interface will not be brought up when CC is received";
              }
              leaf propagate-remote-mac-flush {
                type empty;
                description "Remote mac-flush";
              }
              leaf interface-group-down {
                type empty;
                description "Mark the interface group as down";
              }
              leaf asynchronous-notification {
                type empty;
                description "Generate asynchronous notification (Laser-off for optical phys)";
              }
              container log-and-generate-ais {
                uses apply-advanced;
                leaf-list level {
                  type uint32 {
                    range "1 .. 7";
                  }
                  description "Server maintenance domain levels range";
                }
                leaf interval {
                  type enumeration {
                    enum 1s;
                    enum 1m;
                  }
                  default "1s";
                  description "Interval between AIS messages";
                }
                leaf priority {
                  type uint32 {
                    range "0 .. 7";
                  }
                  default "0";
                  description "802.1p priority of AIS packet";
                }
              }
            }
            container clear-action {
              uses apply-advanced;
              container interface-down {
                description "Mark the interface as down";
                leaf peer-interface {
                  type empty;
                  description "Mark the interface as down";
                }
              }
              leaf propagate-remote-mac-flush {
                type empty;
                description "Remote  mac flush";
              }
            }
            container default-actions {
              description "Action that needs to be taken";
              uses apply-advanced;
              leaf interface-down {
                type empty;
                description "Bring the interface down";
              }
            }
          }
          list server-mep {
            description "Server MEP to use when generation of AIS is required to monitor different services";
            key name;
            ordered-by user;
            leaf name {
              type uint16 {
                range "1 .. 8191";
              }
              description "Identifier for Server MEP";
            }
            uses apply-advanced;
            container protocol {
              description "Protocol that needs to be monitored by Server MEP";
              presence "enable protocol";
              uses apply-advanced;
              choice protocol {
                case case_1 {
                  container l2circuit {
                    description "Protocol that need to be monitored is l2circuit protocol";
                    presence "enable l2circuit";
                    container interface {
                      description "Interface which is participating in l2circuit service";
                      presence "enable interface";
                      leaf interface-name {
                        type "jt:interface-name";
                        description "Interface name";
                      }
                    }
                  }
                }
                case case_2 {
                  container l2vpn {
                    description "Protocol that need to be monitored is l2vpn protocol";
                    presence "enable l2vpn";
                    container interface {
                      description "Interface which is participating in l2vpn service";
                      presence "enable interface";
                      leaf interface-name {
                        type "jt:interface-name";
                        description "Interface name";
                      }
                    }
                  }
                }
                case case_3 {
                  container ethernet {
                    description "Protocol that need to be monitored is physical ethernet service";
                    presence "enable ethernet";
                    container interface {
                      description "Interface which is going to be monitored";
                      presence "enable interface";
                      leaf interface-name {
                        type "jt:interface-device";
                        description "Interface name";
                      }
                    }
                  }
                }
              }
            }
            container action-profile {
              description "Attached action profile for this Server MEP";
              presence "enable action-profile";
              uses apply-advanced;
              leaf action-profile-name {
                type string;
                description "Name of the action profile";
              }
            }
          }
          container policer {
            description "Rate limit Ethernet OAM packets for all sessions";
            uses apply-advanced;
            leaf continuity-check {
              type string;
              description "Policer to rate limit Continuity Check Ethernet OAM messages";
            }
            leaf other {
              type string;
              description "Policer to rate limit non Continuity Check Ethernet OAM messages";
            }
            leaf all {
              type string;
              description "Policer to rate limit all Ethernet OAM messages";
            }
          }
          container linktrace {
            description "Linktrace protocol global options";
            presence "enable linktrace";
            uses apply-advanced;
            leaf path-database-size {
              type uint32 {
                range "1 .. 255";
              }
              default "100";
              description "Number of linktrace reply entries to be stored per linktrace request";
            }
            leaf age {
              type enumeration {
                enum 10s;
                enum 30s;
                enum 1m;
                enum 10m;
                enum 30m;
              }
              default "10m";
              description "Time after which a stale request-response entry is deleted";
            }
          }
          list maintenance-domain {
            description "Maintenance domain configuration";
            key name;
            leaf name {
              type string;
            }
            uses apply-advanced;
            list bridge-domain {
              description "Bridge-domain information for the default maintenance domain";
              key name;
              ordered-by user;
              leaf name {
                type string;
                description "Bridge domain name";
              }
              leaf-list vlan-id {
                type string;
                description "VLAN id";
                ordered-by user;
              }
            }
            list vlan {
              description "VLAN information for the default maintenance domain";
              key name;
              ordered-by user;
              leaf name {
                type string;
                description "VLAN name";
              }
            }
            list virtual-switch {
              description "Virtual switch Bridge-domain information for the default maintenance domain";
              key name;
              ordered-by user;
              leaf name {
                type string;
                description "Routing instance of type virtual switch";
              }
              uses apply-advanced;
              list bridge-domain {
                key name;
                ordered-by user;
                leaf name {
                  type string;
                  description "Bridge domain name";
                }
                leaf-list vlan-id {
                  type string;
                  description "VLAN id";
                  ordered-by user;
                }
              }
            }
            list instance {
              description "VPLS instance name for the default maintenance domain";
              key name;
              ordered-by user;
              leaf name {
                type string;
                description "VPLS routing instance name";
              }
            }
            list interface {
              description "Name of interface for the default maintenance domain";
              key name;
              ordered-by user;
              leaf name {
                type "jt:interface-unit";
                description "Interface name";
              }
            }
            leaf level {
              type uint8 {
                range "0 .. 7";
              }
              description "Level value for maintenance domain";
            }
            leaf name-format {
              type enumeration {
                enum none {
                  description "No format specified";
                }
                enum dns {
                  description "Character string similar to Domain Name System name";
                }
                enum "mac+2oct" {
                  description "MAC address with 2 octet integer (xx:xx:xx:xx:xx:xx.Y format)";
                }
                enum character-string {
                  description "Character string";
                }
              }
              description "Format of maintenance domain name";
            }
            leaf mip-half-function {
              type enumeration {
                enum none {
                  description "No MHFs should be created";
                }
                enum default {
                  description "Create MHF as per IEEE 802.1ag specifications for defMHFDefault";
                }
                enum explicit {
                  description "Create MHF as per IEEE 802.1ag specifications for defMHFExplicit";
                }
              }
              default "none";
              description "Half function to be implemented by MIP";
            }
            list maintenance-association {
              description "Maintenance association configuration";
              key name;
              leaf name {
                type string {
                  length "1 .. 45";
                }
                description "Name of maintenance association in IEEE compliant format";
              }
              uses apply-advanced;
              leaf debug-session {
                type empty;
                description "Debug the CFM session";
              }
              leaf short-name-format {
                type enumeration {
                  enum 2octet {
                    description "An integer in the range 0..65535";
                  }
                  enum rfc-2685-vpn-id {
                    description "VPN identifier that complies with RFC 2685";
                  }
                  enum vlan {
                    description "Primary VLAN identifier";
                  }
                  enum character-string {
                    description "Character string";
                  }
                  enum icc {
                    description "ITU Carrier Code";
                  }
                }
                description "Format of Maintenance Association Name";
              }
              container protect-maintenance-association {
                description "Maintenance association used for connection protection";
                leaf ma-name {
                  type string {
                    length "1 .. 45";
                  }
                  description "Name of the protect maintenance association";
                }
                leaf aps-profile {
                  type string;
                  description "Name of the automatic-protection-switching profile";
                }
                leaf detect-path-type {
                  type empty;
                  description "Enable detection of working and protect paths";
                }
              }
              leaf primary-vid {
                type string;
                description "VLAN id";
              }
              container continuity-check {
                description "Continuity check configuration";
                presence "enable continuity-check";
                uses apply-advanced;
                leaf interval {
                  type enumeration {
                    enum 10ms;
                    enum 100ms;
                    enum 1s;
                    enum 10s;
                    enum 1m;
                    enum 10m;
                    enum "3.3ms";
                  }
                  default "1m";
                  description "Interval between continuity-check messages";
                }
                leaf loss-threshold {
                  type uint32 {
                    range "3 .. 256";
                  }
                  default "3";
                  description "Number of continuity-check messages lost before marking endpoint as down";
                }
                leaf hold-interval {
                  type uint32 {
                    range "1 .. 30240";
                  }
                  default "10";
                  description "Time before flushing MEP database if no updates occur";
                  units minutes;
                }
                leaf port-status-tlv {
                  type empty;
                  description "Include port status TLV in CCM";
                }
                leaf interface-status-tlv {
                  type empty;
                  description "Include interface status TLV in CCM";
                }
                leaf connection-protection-tlv {
                  type empty;
                  description "Include connection protection OUI TLV in CCM";
                }
                leaf convey-loss-threshold {
                  type empty;
                  description "Include Loss Threshold OUI TLV in CCM";
                }
                leaf interface-status-send-rdi {
                  type empty;
                  description "Send RDI on interface operation status down in CCM";
                }
                container sendid-tlv {
                  description "Include sendid-tlv in CCM/LBM/LTM";
                  uses apply-advanced;
                  leaf send-chassis-tlv {
                    type empty;
                    description "Attach Chassis ID & Mgmt Addr to CCM/LBM/LTM";
                  }
                }
              }
              leaf mip-half-function {
                type enumeration {
                  enum none {
                    description "No MHFs should be created";
                  }
                  enum default {
                    description "Create MHF as per IEEE 802.1ag specifications for defMHFDefault";
                  }
                  enum explicit {
                    description "Create MHF as per IEEE 802.1ag specifications for defMHFExplicit";
                  }
                  enum defer {
                    description "Create MHF as per IEEE 802.1ag specifications for defMHFDefer";
                  }
                }
                default "defer";
                description "Half function to be implemented by MIP";
              }
              list mep {
                description "Maintenance association endpoint configuration";
                key name;
                ordered-by user;
                leaf name {
                  type uint16 {
                    range "1 .. 8191";
                  }
                  description "Identifier for maintenance association endpoint";
                }
                uses apply-advanced;
                container interface {
                  description "Name of interface";
                  presence "enable interface";
                  leaf interface-name {
                    type "jt:interface-unit";
                  }
                  leaf vlan {
                    type uint32 {
                      range "1 .. 4094";
                    }
                    description "Trunk port interface VLAN identifier";
                  }
                  choice connection-type {
                    case case_1 {
                      leaf working {
                        type empty;
                        description "Monitory the primary path";
                      }
                    }
                    case case_2 {
                      leaf protect {
                        type empty;
                        description "Monitory the protect path";
                      }
                    }
                  }
                }
                leaf direction {
                  type enumeration {
                    enum up;
                    enum down;
                  }
                  default "down";
                  description "Direction of maintenance endpoint";
                }
                leaf priority {
                  type uint32 {
                    range "0 .. 7";
                  }
                  default "0";
                  description "802.1p priority of continuity-check and link-trace packet";
                }
                leaf auto-discovery {
                  type empty;
                  description "Accept continuity-check messages from all remote MEPs";
                }
                leaf action-profile {
                  type string;
                  description "Name of the action profile";
                }
                list remote-mep {
                  description "Remote maintenance association endpoint configuration";
                  key name;
                  ordered-by user;
                  leaf name {
                    type uint16 {
                      range "1 .. 8191";
                    }
                    description "Identifier for remote maintenance association endpoint";
                  }
                  uses apply-advanced;
                  leaf action-profile {
                    type string;
                    description "Name of the action profile";
                  }
                  container interface-group {
                    description "Mark this interface group down Profile configured with action interface-group-down";
                    presence "enable interface-group";
                    uses apply-advanced;
                    leaf interface-device-name {
                      type "jt:interface-device";
                      description "Interface device name";
                    }
                    leaf-list unit-list {
                      type "jt:range";
                      description "One or more logical interface unit numbers";
                    }
                  }
                  list sla-iterator-profile {
                    description "Name of the iterator profile";
                    key name;
                    ordered-by user;
                    leaf name {
                      type string;
                    }
                    uses apply-advanced;
                    leaf iteration-count {
                      type uint32 {
                        range "1 .. 65535";
                      }
                      description "Iterations to partake for acquiring SLA measurements";
                      units frames;
                    }
                    leaf priority {
                      type uint32 {
                        range "0 .. 7";
                      }
                      description "The vlan pcp value to be sent in the Y.1731 frame";
                    }
                    leaf data-tlv-size {
                      type uint32 {
                        range "1 .. 1400";
                      }
                      description "Size of the data-tlv portion of Y.1731 frame";
                      units bytes;
                    }
                  }
                  leaf detect-loc {
                    type empty;
                    description "Detects initial loss of connectivity with remote mep";
                  }
                }
                leaf lowest-priority-defect {
                  type enumeration {
                    enum all-defects {
                      description "Allows all defects";
                    }
                    enum mac-rem-err-xcon {
                      description "Allows only MAC, not receiving CCM, erroneous CCM and cross connect defects";
                    }
                    enum rem-err-xcon {
                      description "Allows only not receiving CCM, erroneous CCM and cross connect CCM defects";
                    }
                    enum err-xcon {
                      description "Allows only erroneous CCM and cross connect CCM defects";
                    }
                    enum xcon {
                      description "Allows only cross connect CCM defect";
                    }
                    enum no-defect {
                      description "Allows no defect";
                    }
                  }
                  description "Lowest priority defect that is allowed to generate a fault alarm";
                }
              }
              container policer {
                description "Rate limit Ethernet OAM packets for this session";
                uses apply-advanced;
                leaf continuity-check {
                  type string;
                  description "Policer to rate limit Continuity Check Ethernet OAM messages";
                }
                leaf other {
                  type string;
                  description "Policer to rate limit non Continuity Check Ethernet OAM messages";
                }
                leaf all {
                  type string;
                  description "Policer to rate limit all Ethernet OAM messages";
                }
              }
            }
          }
          container sendid-tlv {
            description "Include sendid-tlv in CCM/LBM/LTM";
            uses apply-advanced;
            leaf send-chassis-tlv {
              type empty;
              description "Attach Chassis ID & Mgmt Addr to CCM/LBM/LTM";
            }
          }
        }
        list evcs {
          description "Ethernet virtual circuits configuration";
          key name;
          leaf name {
            type string {
              length "1 .. 100";
            }
            description "EVC id";
          }
          uses apply-advanced;
          container evc-protocol {
            description "Signaling protocol to monitor EVC status";
            choice protocol {
              case case_1 {
                container cfm {
                  description "Connectivity fault management";
                  presence "enable cfm";
                  leaf maintenance-domain {
                    type string;
                    description "Maintenance domain name";
                  }
                  leaf maintenance-association {
                    type string;
                    description "Maintenance association name";
                  }
                  leaf mep {
                    type uint16 {
                      range "1 .. 8191";
                    }
                    description "Identifier for maintenance association endpoint";
                  }
                  container faults {
                    description "CFM faults to trigger ELMI";
                    uses apply-advanced;
                    leaf rdi {
                      type empty;
                      description "RDI received from some MEP";
                    }
                  }
                }
              }
              case case_2 {
                container vpls {
                  description "Virtual private LAN service (BGP/LDP)";
                  presence "enable vpls";
                  leaf routing-instance {
                    type string;
                    description "Routing instance name";
                  }
                }
              }
              case case_3 {
                container l2circuit {
                  description "L2circuit";
                  uses apply-advanced;
                  container interface {
                    description "Name of interface forming the Layer 2 circuit";
                    leaf interface-name {
                      type "jt:interface-name";
                    }
                  }
                }
              }
              case case_4 {
                container l2vpn {
                  description "L2vpn";
                  uses apply-advanced;
                  container interface {
                    description "Name of interface forming the Layer 2 VPN";
                    leaf interface-name {
                      type "jt:interface-name";
                    }
                  }
                }
              }
            }
          }
          leaf remote-uni-count {
            type uint8 {
              range "1 .. 255";
            }
            default "1";
            description "Number of remote UNIs in the EVC";
          }
          leaf async-status-msg-transmit-interval {
            type int32 {
              range "1 .. 10000";
            }
            default "10";
            description "Time interval between E-LMI async status messages per EVC";
            units milliseconds;
          }
          leaf multipoint-to-multipoint {
            type empty;
            description "Multipoint to Multipoint EVC";
          }
        }
        container lmi {
          description "Ethernet local management interface configuration";
          presence "enable lmi";
          uses apply-advanced;
          container traceoptions {
            description "Trace options for ethernet local management interface";
            uses apply-advanced;
            leaf no-remote-trace {
              type empty;
              description "Disable remote tracing";
            }
            container file {
              description "Trace file information";
              leaf filename {
                type string {
                  length "1 .. 1024";
                }
                description "Name of file in which to write trace information";
              }
              leaf size {
                type string;
                description "Maximum trace file size";
              }
              leaf files {
                type uint32 {
                  range "2 .. 1000";
                }
                default "3";
                description "Maximum number of trace files";
              }
              choice world-readable-choice {
                leaf world-readable {
                  type empty;
                  description "Allow any user to read the log file";
                }
                leaf no-world-readable {
                  type empty;
                  description "Don't allow any user to read the log file";
                }
              }
              leaf match {
                type "jt:regular-expression";
                description "Regular expression for lines to be logged";
              }
            }
            list flag {
              description "Tracing parameters";
              key name;
              ordered-by user;
              leaf name {
                type enumeration {
                  enum configuration {
                    description "Trace configuration events";
                  }
                  enum routing-socket {
                    description "Trace routing socket events";
                  }
                  enum protocol {
                    description "Trace protocol processing events";
                  }
                  enum init {
                    description "Trace events related to protocol daemon start-up";
                  }
                  enum error {
                    description "Trace events related to catestrophic errors in daemon";
                  }
                  enum packet {
                    description "Trace events related to packet flow";
                  }
                  enum all {
                    description "Trace everything";
                  }
                }
              }
            }
          }
          leaf status-counter {
            type uint8 {
              range "2 .. 10";
            }
            default "4";
            description "E-LMI status counter (N393)";
          }
          leaf polling-verification-timer {
            type uint8 {
              range "5 .. 30";
            }
            default "15";
            description "Polling verification timer (T392)";
            units seconds;
          }
          list interface {
            description "Interface options";
            key name;
            leaf name {
              type "jt:interface-device";
            }
            uses apply-advanced;
            leaf uni-id {
              type string {
                length "1 .. 64";
              }
              description "UNI identifier";
            }
            leaf status-counter {
              type uint8 {
                range "2 .. 10";
              }
              default "4";
              description "E-LMI status counter (N393)";
            }
            leaf polling-verification-timer {
              type uint8 {
                range "5 .. 30";
              }
              default "15";
              description "Polling verification timer (T392)";
              units seconds;
            }
            leaf evc-map-type {
              type enumeration {
                enum all-to-one-bundling {
                  description "All to one bundling";
                }
                enum service-multiplexing {
                  description "Service multiplexing with no bundling";
                }
                enum bundling {
                  description "Bundling with service multiplexing";
                }
              }
              default "bundling";
              description "CE-VLAN ID/EVC map type";
            }
            list evc {
              description "EVC configuration";
              key name;
              leaf name {
                type string {
                  length "1 .. 100";
                }
                description "EVC identifier";
              }
              uses apply-advanced;
              leaf default-evc {
                type empty;
                description "Default EVC";
              }
              leaf-list vlan-list {
                type "jt:vlan-range";
                description "Vlans mapped to this EVC";
              }
            }
          }
        }
        container fnp {
          description "Failure notification protocol configuration";
          presence "enable fnp";
          uses apply-advanced;
          container traceoptions {
            description "Tracing options for FNP";
            uses apply-advanced;
            container file {
              description "Trace file options";
              leaf filename {
                type string {
                  length "1 .. 1024";
                }
                description "Name of file in which to write trace information";
              }
              leaf replace {
                type empty;
                description "Replace trace file rather than appending to it";
                status deprecated;
              }
              leaf size {
                type string;
                description "Maximum trace file size";
              }
              leaf files {
                type uint32 {
                  range "2 .. 1000";
                }
                default "10";
                description "Maximum number of trace files";
              }
              leaf no-stamp {
                type empty;
                description "Do not timestamp trace file";
                status deprecated;
              }
              choice world-readable-choice {
                leaf world-readable {
                  type empty;
                  description "Allow any user to read the log file";
                }
                leaf no-world-readable {
                  type empty;
                  description "Don't allow any user to read the log file";
                }
              }
            }
            list flag {
              description "Tracing parameters";
              key name;
              ordered-by user;
              leaf name {
                type enumeration {
                  enum events {
                    description "Trace protocol events";
                  }
                  enum pdu {
                    description "Trace PDU reception and transmission";
                  }
                  enum timers {
                    description "Trace protocol timers";
                  }
                  enum error {
                    description "Trace all failure conditions";
                  }
                  enum all {
                    description "Trace all";
                  }
                }
              }
            }
          }
          leaf interval {
            type enumeration {
              enum 100ms;
              enum 1s;
              enum 10s;
              enum 1m;
              enum 10m;
            }
            default "1s";
            description "Interval between FNP messages";
          }
          leaf loss-threshold {
            type uint8 {
              range "3 .. 255";
            }
            default "4";
            description "Number of FNP messages lost before clearing FNP state";
          }
          list interface {
            description "Interface configuration";
            key name;
            ordered-by user;
            leaf name {
              type "jt:interface-name";
            }
            uses apply-advanced;
            leaf domain-id {
              type uint32;
              default "0";
              description "Ethernet domain identifier";
            }
          }
        }
      }
      container gre-tunnel {
        presence "enable gre-tunnel";
        uses apply-advanced;
        container traceoptions {
          description "Trace options for GRE keepalives";
          uses apply-advanced;
          leaf no-remote-trace {
            type empty;
            description "Disable remote tracing";
          }
          container file {
            description "Trace file information";
            leaf filename {
              type string {
                length "1 .. 1024";
              }
              description "Name of file in which to write trace information";
            }
            leaf size {
              type string;
              description "Maximum trace file size";
            }
            leaf files {
              type uint32 {
                range "2 .. 1000";
              }
              default "3";
              description "Maximum number of trace files";
            }
            choice world-readable-choice {
              leaf world-readable {
                type empty;
                description "Allow any user to read the log file";
              }
              leaf no-world-readable {
                type empty;
                description "Don't allow any user to read the log file";
              }
            }
            leaf match {
              type "jt:regular-expression";
              description "Regular expression for lines to be logged";
            }
          }
          list flag {
            description "Tracing parameters";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum configuration {
                  description "Trace configuration events";
                }
                enum routing-socket {
                  description "Trace routing socket events";
                }
                enum protocol {
                  description "Trace protocol processing events";
                }
                enum snmp {
                  description "Trace snmp processing events";
                }
                enum all {
                  description "Trace everything";
                }
              }
            }
          }
        }
        list interface {
          key name;
          ordered-by user;
          leaf name {
            type "jt:interface-unit";
            description "Interface name";
          }
          uses apply-advanced;
          leaf keepalive-time {
            type int32 {
              range "1 .. 50";
            }
            default "1";
            description "Keepalive time";
            units seconds;
          }
          leaf hold-time {
            type int32 {
              range "5 .. 250";
            }
            default "5";
            description "Hold time";
            units seconds;
          }
        }
      }
    }
    container ancp {
      description "Access Node Control Protocol options";
      uses juniper-protocols-ancp;
    }
    container bfd {
      description "Bidirectional Forwarding Detection (BFD) options";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for BFD";
        uses apply-advanced;
        leaf no-remote-trace {
          type empty;
          description "Disable remote tracing";
        }
        container file {
          description "Trace file information";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "3";
            description "Maximum number of trace files";
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
          leaf match {
            type "jt:regular-expression";
            description "Regular expression for lines to be logged";
          }
        }
        list flag {
          description "Trace flag information";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum adjacency {
                description "Trace adjacency messages";
              }
              enum event {
                description "Trace all events";
              }
              enum error {
                description "Trace all errors";
              }
              enum rtsock {
                description "Trace all rtscok messages";
              }
              enum packet {
                description "Trace all packets";
              }
              enum ppm-packet {
                description "Trace packet activity by periodic packet management";
              }
              enum pipe {
                description "Trace pipe messages";
              }
              enum pipe-detail {
                description "Trace pipe messages in detail";
              }
              enum state {
                description "Trace state transitions";
              }
              enum timer {
                description "Trace timer processing";
              }
              enum nsr-synchronization {
                description "Trace NSR synchronization events";
              }
              enum nsr-packet {
                description "Trace packet activity of NSR";
              }
              enum issu {
                description "Trace ISSU packet activity";
              }
              enum slow-start {
                description "Trace slow-start activity";
              }
              enum session {
                description "Per session activity";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
        }
      }
      leaf mhop-inline-disable {
        type empty;
        description "Disable Inline mode for Multi Hop BFD sessions";
      }
      leaf no-issu-timer-negotiation {
        type empty;
        description "Disable ISSU timer negotiation";
      }
      container sbfd {
        description "Seamless BFD parameters";
        uses apply-advanced;
        leaf-list pool {
          type uint32;
          description "List of seamless BFD endpoints";
        }
        list local-discriminator {
          description "Local discriminator for seamless BFD responder";
          key name;
          ordered-by user;
          leaf name {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "Local discriminator for seamless BFD responder";
          }
          uses apply-advanced;
          leaf minimum-receive-interval {
            type uint32 {
              range "10 .. 255000";
            }
            description "Minimum receive interval for seamless BFD responder";
            units milliseconds;
          }
          leaf local-ip-address {
            type "jt:ipv4addr";
            description "IPv4 source address";
          }
          leaf local-ipv6-address {
            type "jt:ipv6addr";
            description "IPv6 source address";
          }
        }
        list local-discriminator-ip {
          description "Local discriminator IP address for sBFD responder";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv4addr";
            description "Local discriminator IP address for sBFD responder";
          }
          uses apply-advanced;
          leaf minimum-receive-interval {
            type uint32 {
              range "10 .. 255000";
            }
            description "Minimum receive interval for seamless BFD responder";
            units milliseconds;
          }
          leaf local-ip-address {
            type "jt:ipv4addr";
            description "IPv4 source address";
          }
        }
      }
    }
    container ptp {
      description "Precision Time Protocol v2 options";
      uses apply-advanced;
      leaf clock-mode {
        type enumeration {
          enum ordinary {
            description "PTP Ordinary clock";
          }
          enum boundary {
            description "PTP Boundary clock";
          }
        }
        description "Clock mode";
      }
      leaf profile-type {
        type enumeration {
          enum ieee1588v2-custom {
            description "IEEE1588v2 With Multicast";
          }
          enum "g.8275.1" {
            description "G.8275.1 profile type";
          }
          enum "g.8275.1.enh" {
            description "G.8275.1 Enhanced profile type";
          }
          enum "g.8275.2" {
            description "G.8275.2 profile type";
          }
          enum "g.8275.2.enh" {
            description "G.8275.2 Enhanced profile type";
          }
          enum enterprise-profile {
            description "Enterprise Profile";
          }
          enum smpte {
            description "SMPTE ST-2059-2 Profile, 2015 version";
          }
          enum aes67 {
            description "AES67 Profile";
          }
          enum aes67-smpte {
            description "Combined profile with AES67 and SMPTE ST-2059-2";
          }
        }
        description "PTP profile type";
      }
      leaf e2e-transparent {
        type empty;
        description "Enable end-to-end IEEE1588 transparent clock functionality";
      }
      leaf syntonized-e2e-transparent {
        type empty;
        description "Enable end-to-end Syntonized IEEE1588 transparent clock functionality";
      }
      leaf timescale {
        type enumeration {
          enum arbitrary {
            description "Master clock with arbitrary timescale";
          }
        }
        description "The timescale of Master";
      }
      leaf priority1 {
        type int32 {
          range "0 .. 255";
        }
        description "Used in selecting best master clock";
      }
      leaf priority2 {
        type int32 {
          range "0 .. 255";
        }
        description "Tie-breaker in selecting best master clock";
      }
      leaf local-priority {
        type uint32 {
          range "1 .. 255";
        }
        description "Priority assigned to the local clock";
      }
      leaf domain {
        type int32 {
          range "0 .. 127";
        }
        description "PTP domain number";
      }
      leaf path-trace {
        type empty;
        description "Enable path tracing";
      }
      leaf unicast-negotiation {
        type empty;
        description "Enable unicast negotiation";
      }
      leaf disable-lag-revertive-switchover {
        type empty;
        description "Disable revertive switchover for LAG";
      }
      leaf phy-timestamping {
        type empty;
        description "PHY time-stamping feature";
      }
      leaf ipv4-dscp {
        type int32 {
          range "0 .. 63";
        }
        description "IPv4 dscp value to be used for PTP packets";
      }
      leaf ipv6-dscp {
        type int32 {
          range "0 .. 63";
        }
        description "IPv6 dscp value to be used for PTP packets";
      }
      container performance-monitor {
        description "PTP packet delay metrics";
        uses apply-advanced;
        container passive-port {
          description "Enable Passive port monitoring feature";
          presence "enable passive-port";
          uses apply-advanced;
          leaf delay-request-rate {
            type int32 {
              range "-4 .. 4";
            }
            default "-4";
            description "Log mean interval between delay requests";
          }
        }
        container slave-port {
          description "Enable IEEE 1588v2.1 (2019) Annex J1 & J3 performance monitoring";
          presence "enable slave-port";
        }
        container threshold {
          description "Configure delay and jitter thresholds";
          uses apply-advanced;
          leaf min-outbound-delay {
            type uint32 {
              range "0 .. 1000000";
            }
            default "0";
            description "Configure minimum outbound delay";
          }
          leaf max-outbound-delay {
            type uint32 {
              range "0 .. 1000000";
            }
            default "1000000";
            description "Configure maximum outbound delay";
          }
          leaf min-inbound-delay {
            type uint32 {
              range "0 .. 1000000";
            }
            default "0";
            description "Configure minimum inbound delay";
          }
          leaf max-inbound-delay {
            type uint32 {
              range "0 .. 1000000";
            }
            default "1000000";
            description "Configure maximum inbound delay";
          }
          leaf max-inbound-jitter-neg {
            type int32 {
              range "-1000000 .. 0";
            }
            default "-1000000";
            description "Configure max inbound negetive jitter";
          }
          leaf max-inbound-jitter-pos {
            type uint32 {
              range "0 .. 1000000";
            }
            default "1000000";
            description "Configure max inbound positive jitter";
          }
          leaf max-outbound-jitter-neg {
            type int32 {
              range "-1000000 .. 0";
            }
            default "-1000000";
            description "Configure max outbound negetive jitter";
          }
          leaf max-outbound-jitter-pos {
            type uint32 {
              range "0 .. 1000000";
            }
            default "1000000";
            description "Configure max outbound positive jitter";
          }
        }
      }
      leaf utc-leap-seconds {
        type int32 {
          range "0 .. 255";
        }
        description "UTC leap seconds offset";
      }
      container slave {
        description "PTP Slave parameters";
        uses apply-advanced;
        leaf frequency-only {
          type empty;
          description "Only for frequency syntonization";
        }
        leaf delay-request {
          type int32 {
            range "-7 .. 7";
          }
          description "Log mean interval between delay requests";
        }
        leaf announce-timeout {
          type uint32 {
            range "2 .. 10";
          }
          description "Timeout period for announce messages";
        }
        leaf announce-interval {
          type int32 {
            range "-3 .. 4";
          }
          description "Log mean interval between announce messages";
        }
        leaf sync-interval {
          type int32 {
            range "-7 .. 7";
          }
          description "Requested log mean interval between sync messages";
        }
        leaf grant-duration {
          type uint32 {
            range "60 .. 1000";
          }
          description "Length of grants in seconds requested during unicast-negotiation";
        }
        leaf convert-clock-class-to-quality-level {
          type empty;
          description "Enable PTP clock class to ESMC quality level mapping";
        }
        container clock-class-to-quality-level-mapping {
          description "PTP clock class to ESMC quality level mapping";
          uses apply-advanced;
          list quality-level {
            key name;
            leaf name {
              type enumeration {
                enum prc {
                  description "Timing quality of a primary reference clock (option-1 only)";
                }
                enum ssu-a {
                  description "Timing quality of a type I or IV slave clock (option-1 only)";
                }
                enum ssu-b {
                  description "Timing quality of a type VI slave clock (option-1 only)";
                }
                enum sec {
                  description "Timing quality of SDH equipment clock (option-1 only)";
                }
                enum prs {
                  description "Clock traceable to primary reference source (option-2 only)";
                }
                enum st2 {
                  description "Clock traceable to stratum 2 (option-2 only)";
                }
                enum tnc {
                  description "Clock traceable to transit node clock (option-2 only)";
                }
                enum st3e {
                  description "Clock traceable to stratum 3E (option-2 only)";
                }
                enum st3 {
                  description "Clock traceable to stratum 3 (option-2 only)";
                }
                enum smc {
                  description "Clock traceable to self-timed SONET (option-2 only)";
                }
                enum st4 {
                  description "Clock traceable to stratum 4 free-run (option-2 only)";
                }
                enum stu {
                  description "Clock traceable to unknown quality (option-2 only)";
                }
              }
            }
            uses apply-advanced;
            leaf clock-class {
              type int32 {
                range "0 .. 255";
              }
              description "PTP clock class threshold value";
            }
          }
        }
        list interface {
          description "Interface on which to respond to upstream PTP master";
          key name;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
          container unicast-mode {
            description "Configure upstream unicast PTP master clock sources";
            uses apply-advanced;
            leaf transport {
              type enumeration {
                enum ipv4 {
                  description "Use IPv4 as transport";
                }
                enum ipv6 {
                  description "Use IPv6 as transport";
                }
              }
              description "Encapsulation for PTP packet transport";
            }
            leaf local-priority {
              type uint32 {
                range "1 .. 255";
              }
              description "Priority assigned to the port";
            }
            list clock-source {
              description "Configure PTP master parameters";
              key "ip-address local-ip-address";
              leaf ip-address {
                type "jt:ipaddr";
                description "IP address of PTP master";
              }
              leaf local-ip-address {
                type "jt:ipaddr";
                description "Must be IP address on local interface";
              }
              uses apply-advanced;
              container l2-ifl {
                uses apply-advanced;
                leaf ifl {
                  type "jt:interface-name";
                  description "L2 interface name";
                }
              }
              leaf asymmetry {
                type int32 {
                  range "-100000000 .. 100000000";
                }
                description "Adjust the slave-to-master delay by value specified in nanoseconds";
              }
              leaf primary-asymmetry {
                type int32 {
                  range "-100000000 .. 100000000";
                }
                description "Adjust asymmetry for primary interface in slave-to-master delay";
              }
              leaf secondary-asymmetry {
                type int32 {
                  range "-100000000 .. 100000000";
                }
                description "Adjust asymmetry for secondary interface in slave-to-master delay";
              }
            }
          }
          container multicast-mode {
            description "Configure PTP slave clock to use multicast frames";
            uses apply-advanced;
            container transport {
              description "Encapsulation for PTP packet transport";
              uses apply-advanced;
              choice transport-type {
                case case_1 {
                  container "ieee-802.3" {
                    description "PTP over 802.3 frames";
                    presence "enable ieee-802.3";
                    leaf link-local {
                      type empty;
                      description "Use link local 802.3 MAC address";
                    }
                  }
                }
                case case_2 {
                  container ipv4 {
                    description "Use IP as transport";
                    presence "enable ipv4";
                  }
                }
              }
            }
            leaf local-priority {
              type uint32 {
                range "1 .. 255";
              }
              description "Priority assigned to the port";
            }
            leaf asymmetry {
              type int32 {
                range "-100000000 .. 100000000";
              }
              description "Adjust the slave-to-master delay by value specified in nanoseconds";
            }
            leaf primary-asymmetry {
              type int32 {
                range "-100000000 .. 100000000";
              }
              description "Adjust asymmetry for primary interface in slave-to-master delay";
            }
            leaf secondary-asymmetry {
              type int32 {
                range "-100000000 .. 100000000";
              }
              description "Adjust asymmetry for secondary interface in slave-to-master delay";
            }
            leaf local-ip-address {
              type "jt:ipv4addr";
              description "IP address on local interface";
            }
          }
          leaf primary {
            type string;
            description "Configure primary interface name for the ae bundle";
          }
          leaf secondary {
            type string;
            description "Configure secondary interface name for the ae bundle";
          }
        }
        container hybrid {
          description "Hybrid mode configuration options";
          presence "enable hybrid";
          uses apply-advanced;
          leaf periodic-alignment {
            type enumeration {
              enum enable {
                description "Enable PTP hybrid periodic re-alignment";
              }
              enum disable {
                description "Disable PTP hybrid periodic re-alignment";
              }
            }
            description "PTP hybrid periodic phase re-alignment";
          }
          leaf re-alignment-threshold {
            type int32 {
              range "50 .. 400";
            }
          }
          container synchronous-ethernet-mapping {
            description "PTP source to synchronous ethernet interface mapping";
            presence "enable synchronous-ethernet-mapping";
            uses apply-advanced;
            list clock-source {
              description "PTP source being mapped";
              key name;
              leaf name {
                type "jt:ipaddr-or-interface";
                description "IP address or interface-name for remote PTP master";
              }
              uses apply-advanced;
              list interface {
                description "Synchonous ethernet interface name";
                key name;
                leaf name {
                  type string;
                }
                uses apply-advanced;
              }
            }
          }
        }
      }
      container master {
        description "PTP Master parameters";
        uses apply-advanced;
        leaf announce-interval {
          type int32 {
            range "-3 .. 4";
          }
          description "Log mean interval between announce messages";
        }
        leaf sync-interval {
          type int32 {
            range "-7 .. 7";
          }
          description "Log mean interval between sync messages";
        }
        leaf min-announce-interval {
          type int32 {
            range "-3 .. 4";
          }
          description "Min log mean interval between announce messages";
        }
        leaf max-announce-interval {
          type int32 {
            range "-3 .. 4";
          }
          description "Max log mean interval between announce messages";
        }
        leaf min-sync-interval {
          type int32 {
            range "-7 .. 7";
          }
          description "Min log mean interval between sync messages";
        }
        leaf max-sync-interval {
          type int32 {
            range "-7 .. 7";
          }
          description "Max log mean interval between sync messages";
        }
        leaf min-delay-response-interval {
          type int32 {
            range "-7 .. 7";
          }
          description "Min log mean interval between delay-resp messages";
        }
        leaf max-delay-response-interval {
          type int32 {
            range "-7 .. 7";
          }
          description "Max log mean interval between delay-resp messages";
        }
        leaf delay-req-timeout {
          type uint32 {
            range "30 .. 300";
          }
          default "30";
          description "Max timeout(in secs) for delay request messages";
        }
        leaf clock-step {
          type enumeration {
            enum one-step {
              description "PTP One-step clock";
            }
            enum two-step {
              description "PTP Two-step clock";
            }
          }
          default "one-step";
          description "Type of clock step";
        }
        list interface {
          description "Interface on which to respond to downstream PTP slaves";
          key name;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
          container unicast-mode {
            description "Configure downstream PTP clock slaves";
            uses apply-advanced;
            leaf transport {
              type enumeration {
                enum ipv4 {
                  description "Use IPv4 as transport";
                }
                enum ipv6 {
                  description "Use IPv6 as transport";
                }
              }
              description "Encapsulation for PTP packet transport";
            }
            list clock-client {
              description "Configure PTP master parameters";
              key "ip-address local-ip-address";
              leaf ip-address {
                type "jt:ipprefix";
                description "IP address or subnet of remote PTP slave";
              }
              leaf local-ip-address {
                type "jt:ipaddr";
                description "IP address of local PTP master interface";
              }
              uses apply-advanced;
              leaf manual {
                type empty;
                description "This slave does not use unicast negotiation";
              }
              container l2-ifl {
                uses apply-advanced;
                leaf ifl {
                  type "jt:interface-name";
                  description "L2 Interface name";
                }
                leaf primary {
                  type string;
                  description "Configure primary interface name for the ae bundle";
                }
                leaf secondary {
                  type string;
                  description "Configure secondary interface name for the ae bundle";
                }
              }
            }
          }
          container multicast-mode {
            description "Configure PTP master clock to use multicast frames";
            uses apply-advanced;
            container transport {
              description "Encapsulation for PTP packet transport";
              uses apply-advanced;
              choice transport-type {
                case case_1 {
                  container "ieee-802.3" {
                    description "PTP over 802.3 frames";
                    presence "enable ieee-802.3";
                    leaf link-local {
                      type empty;
                      description "Use link local 802.3 MAC address";
                    }
                  }
                }
                case case_2 {
                  container ipv4 {
                    description "Use IP as transport";
                    presence "enable ipv4";
                  }
                }
              }
            }
            leaf local-priority {
              type uint32 {
                range "1 .. 255";
              }
              description "Priority assigned to the port";
            }
            leaf local-ip-address {
              type "jt:ipv4addr";
              description "IP address on local interface";
            }
          }
          leaf primary {
            type string;
            description "Configure primary interface name for the ae bundle";
          }
          leaf secondary {
            type string;
            description "Configure secondary interface name for the ae bundle";
          }
        }
      }
      container stateful {
        description "PTP stateful parameters";
        uses apply-advanced;
        list interface {
          description "Interfaces which will set to PTP stateful role";
          key name;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
          container multicast-mode {
            description "Configure PTP stateful clock to use multicast frames";
            uses apply-advanced;
            container transport {
              description "Encapsulation for PTP packet transport";
              presence "enable transport";
              uses apply-advanced;
              choice transport-type {
                case case_1 {
                  container "ieee-802.3" {
                    description "PTP over 802.3 frames";
                    presence "enable ieee-802.3";
                    leaf link-local {
                      type empty;
                      description "Use link local 802.3 MAC address";
                    }
                  }
                }
              }
            }
            leaf vlan-id {
              type string;
              description "Outer VLAN ID to be used for this interface port of form 0xNNNN.vlan-id";
            }
            leaf inner-vlan-id {
              type string;
              description "Inner VLAN ID to be used for this interface port of form 0xNNNN.vlan-id";
            }
            container priority {
              presence "enable priority";
              uses apply-advanced;
              choice priority_choice {
                case case_1 {
                  leaf dot1q {
                    type uint8 {
                      range "0 .. 7";
                    }
                    default "0";
                  }
                }
                case case_2 {
                  container dot1ad {
                    presence "enable dot1ad";
                    uses apply-advanced;
                    leaf outer {
                      type uint8 {
                        range "0 .. 7";
                      }
                      default "0";
                    }
                    leaf inner {
                      type uint8 {
                        range "0 .. 7";
                      }
                      default "0";
                    }
                  }
                }
              }
            }
            leaf local-priority {
              type uint32 {
                range "1 .. 255";
              }
              description "Priority assigned to the port";
            }
            leaf asymmetry {
              type int32 {
                range "-100000000 .. 100000000";
              }
              description "Adjust the slave-to-master delay by value specified in nanoseconds";
            }
            leaf primary-asymmetry {
              type int32 {
                range "-100000000 .. 100000000";
              }
              description "Adjust asymmetry for primary interface in slave-to-master";
            }
            leaf secondary-asymmetry {
              type int32 {
                range "-100000000 .. 100000000";
              }
              description "Adjust asymmetry for secondary slave-to-master delay";
            }
          }
          leaf primary {
            type string;
            description "Configure primary interface name for the ae bundle";
          }
          leaf secondary {
            type string;
            description "Configure secondary interface name for the ae bundle";
          }
          leaf not-master {
            type empty;
            description "Configuring as not-master, shall make the port as passive or slave port";
          }
          container passive-port-monitor {
            description "Enable Passive port monitor on the interface.";
            presence "enable passive-port-monitor";
            uses apply-advanced;
            leaf phase-threshold {
              type uint32 {
                range "20 .. 100000000";
              }
              default "100000000";
              description "Alarm threshold of phase-offset relative to active slave port in ns.";
            }
            leaf measure-only {
              type empty;
              description "Configuring as measure-only, shall make the port as passive or listening port";
            }
          }
        }
      }
      leaf phase-adjust-threshold {
        type uint32 {
          range "1100 .. 100000";
        }
        default "1100";
        description "Maximum phase offset(in ns) adjusted by the G.8273.4 slave in phase aligned state";
      }
      leaf phase-lock-threshold {
        type uint32 {
          range "100 .. 1000";
        }
        default "200";
        description "Acceptable phase offset(in ns) to lock";
      }
      leaf frequency-lock-threshold {
        type uint32 {
          range "1 .. 15";
        }
        default "1";
        description "Acceptable frequency offset(in ppb) to lock";
      }
    }
    container centralized-timing {
      description "Configuring centralized timing options";
      uses apply-advanced;
      container traceoptions {
        description "Configure trace information for centralized timing";
        presence "enable traceoptions";
        uses timingd-traceoptions;
      }
    }
    container clock-synchronization {
      description "Configuring parameters common to SyncE and PTP";
      uses apply-advanced;
      container traceoptions {
        description "Configure trace information for PTP and synce";
        presence "enable traceoptions";
        uses clksync-traceoptions;
      }
    }
    container dot1x {
      description "802.1X options";
      uses juniper-protocols-dot1x;
    }
    container ppp-service {
      description "Configure PPP service";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for PPP service";
        uses apply-advanced;
        leaf no-remote-trace {
          type empty;
          description "Disable remote tracing";
        }
        container file {
          description "Trace file information";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "3";
            description "Maximum number of trace files";
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
          leaf match {
            type "jt:regular-expression";
            description "Regular expression for lines to be logged";
          }
        }
        leaf level {
          type enumeration {
            enum error {
              description "Match error conditions";
            }
            enum warning {
              description "Match warning messages";
            }
            enum notice {
              description "Match conditions that should be handled specially";
            }
            enum info {
              description "Match informational messages";
            }
            enum verbose {
              description "Match verbose messages";
            }
            enum all {
              description "Match all levels";
            }
          }
          default "error";
          description "Level of debugging output";
        }
        list flag {
          description "Area of PPP service to enable debugging output";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum accounting-statistics {
                description "Trace accounting statistics events";
              }
              enum authentication {
                description "Trace authentication code";
              }
              enum chap {
                description "Trace CHAP code";
              }
              enum events {
                description "Trace interface events";
              }
              enum gres {
                description "Trace GRES events";
              }
              enum init {
                description "Trace daemon initialization";
              }
              enum interface-db {
                description "Trace interface database code";
              }
              enum lcp {
                description "Trace LCP state machine code";
              }
              enum memory {
                description "Trace memory management code";
              }
              enum ncp {
                description "Trace NCP state machine code";
              }
              enum packet-error {
                description "Trace Packet error events";
              }
              enum pap {
                description "Trace PAP code";
              }
              enum parse {
                description "Trace parsing events";
              }
              enum profile {
                description "Trace libdynamic-profile events";
              }
              enum receive-packets {
                description "Trace received PPP packets";
              }
              enum routing-process {
                description "Trace routing process interactions";
              }
              enum rtp {
                description "Trace RealTimePriority code";
              }
              enum rtsock {
                description "Trace routing socket code";
              }
              enum session-db {
                description "Trace session database interactions";
              }
              enum smi-services-sentry {
                description "Trace SMI services requests/retries";
              }
              enum states {
                description "Trace state machine events";
              }
              enum transmit-packets {
                description "Trace tranmitted PPP packets";
              }
              enum tunnel {
                description "Trace l2tp tunneling";
              }
              enum all {
                description "Trace all areas of code";
              }
            }
          }
        }
        container filter {
          description "Trace filtering";
          presence "enable filter";
          uses apply-advanced;
          leaf aci {
            type string {
              length "1 .. 64";
            }
            description "Regular expression to match ACI";
          }
          leaf ari {
            type string {
              length "1 .. 64";
            }
            description "Regular expression to match ARI";
          }
          leaf service-name {
            type string {
              length "1 .. 64";
            }
            description "Service name";
          }
          leaf underlying-interface {
            type string;
            description "Underlying interface name";
          }
          container user {
            description "Filter by user name";
            presence "enable user";
            uses apply-advanced;
            leaf username {
              type string {
                length "1 .. 64";
              }
              description "Name of the user to be filtered";
            }
          }
        }
      }
      leaf max-failures {
        type uint32 {
          range "1 .. 10";
        }
        description "Max-Failures";
      }
      leaf on-demand-ip-address {
        type empty;
        description "Enable On-Demand IPv4 address allocation and de-allocation";
      }
      leaf reject-unauthorized-ipv6cp {
        type empty;
        description "Reject IPv6 NCP if no appropriate IPv6 address or prefix is authorized";
      }
      container required-address {
        description "Session address requirement";
        presence "enable required-address";
        uses apply-advanced;
        leaf ip {
          type empty;
          description "Terminate session if no appropriate IP address is authorized";
        }
      }
      leaf pppoe-lcp-options-strict {
        type empty;
        description "Enforce RFC 2516 MUST requirements for FCS, ACFC and ACCM";
      }
      leaf source-interface-set-at-login {
        type enumeration {
          enum svlan {
            description "Compose interface-set name from physical IFD and outer VLAN tag";
          }
        }
        description "Generate interface-set name for use during login";
      }
    }
    container vrrp {
      description "VRRP options";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for VRRP";
        uses apply-advanced;
        leaf no-remote-trace {
          type empty;
          description "Disable remote tracing";
        }
        container file {
          description "Trace file information";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "0 .. 4294967295";
            }
            default "3";
            description "Maximum number of trace files";
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
          leaf match {
            type "jt:regular-expression";
            description "Regular expression for lines to be logged";
          }
          leaf microsecond-stamp {
            type empty;
            description "Timestamp with microsecond granularity";
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum database {
                description "Trace database";
              }
              enum general {
                description "Trace general events";
              }
              enum interfaces {
                description "Trace interface messages";
              }
              enum normal {
                description "Trace normal events";
              }
              enum packets {
                description "Trace packets";
              }
              enum state {
                description "Trace state transitions";
              }
              enum timer {
                description "Trace timer events";
              }
              enum ppm {
                description "VRRP PPM related messages";
              }
              enum all {
                description "Trace all events";
              }
            }
          }
        }
      }
      leaf failover-delay {
        type uint32 {
          range "50 .. 100000";
        }
        description "Additional failover delay timer";
        units milliseconds;
      }
      leaf startup-silent-period {
        type uint32 {
          range "1 .. 2000";
        }
        description "Period for ignoring master down timer at device startup";
        units seconds;
      }
      leaf asymmetric-hold-time {
        type empty;
        description "Priority hold time asymmetric behaviour";
      }
      container delegate-processing {
        description "Switch to distributed PPMD";
        presence "enable delegate-processing";
        uses apply-advanced;
        leaf ae-irb {
          type empty;
          description "Enable distributed PPMD for vrrp over AE and IRB";
        }
      }
      leaf skew-timer-disable {
        type empty;
        description "Disable the skew timer";
      }
      leaf global-advertisements-threshold {
        type uint32 {
          range "1 .. 15";
        }
        default "3";
        description "Number of vrrp advertisements missed before declaring master down";
      }
      leaf inherit-advertisement-interval {
        type uint32 {
          range "5 .. 120";
        }
        default "120";
        description "Advertisement interval for inherit sessions";
      }
      leaf version-3 {
        type empty;
        description "VRRPv3 conformance";
      }
    }
    container pgm {
      description "PGM options";
      presence "enable pgm";
      status deprecated;
      uses juniper-protocols-pgm;
    }
    container amt {
      description "AMT configuration";
      uses juniper-protocols-amt;
    }
    container bgp {
      description "BGP options";
      uses juniper-protocols-bgp;
    }
    container bgpmcast {
      description "BGP multicast options";
      presence "enable bgpmcast";
      uses juniper-protocols-bgpmcast;
    }
    container bier {
      description "Define bier attributes";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for BIER";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum error {
                description "Trace errors";
              }
              enum config {
                description "Trace BIER config changes";
              }
              enum backtrace {
                description "Trace BIER backtrace";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      list sub-domain {
        description "Configure BIER sub-domain";
        key name;
        ordered-by user;
        leaf name {
          type uint8;
          description "Configure bier subdomain id";
        }
        uses apply-advanced;
        leaf bfr-id {
          type uint16 {
            range "1 .. 1024";
          }
          description "Configure BFR identifier";
        }
        leaf bfr-prefix {
          type "jt:ipaddr";
          description "Configure BFR prefix";
        }
        container encapsulation {
          description "Configure bier encapsulation";
          choice encaps {
            case case_1 {
              leaf mpls {
                type empty;
                description "Configure MPLS encapsulation";
              }
            }
          }
          leaf bitstringlen {
            type enumeration {
              enum 256;
            }
            default "256";
            description "Configure bitstring length";
          }
          leaf number-sets {
            type uint8 {
              range "2 .. 16";
            }
            default "4";
            description "Number of bier sets (set range size)";
          }
          leaf static-base-label {
            type uint32 {
              range "16 .. 1048575";
            }
            description "Configure Static Base Label";
          }
        }
        leaf topology-name {
          type string;
          description "Topology name";
        }
      }
    }
    container connections {
      description "Circuit cross-connect configuration";
      uses apply-advanced;
      list interface-switch {
        description "Bidirectional switch between interfaces";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Name of interface switch";
        }
        uses apply-advanced;
        list interface {
          description "Interface to be switched";
          key name;
          ordered-by user;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
        }
      }
      list remote-interface-switch {
        description "Bidirectional switch between a local and a remote interface";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Name of remote interface switch";
        }
        uses apply-advanced;
        leaf interface {
          type "jt:interface-name";
          description "Local interface name";
        }
        leaf transmit-lsp {
          type string;
          description "Name of outgoing label-switched path";
        }
        leaf receive-lsp {
          type string;
          description "Name of incoming label-switched path";
        }
      }
      list lsp-switch {
        description "Unidirectional switch between two label-switched paths";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Name of label-switched path switch";
        }
        uses apply-advanced;
        leaf transmit-lsp {
          type string;
          description "Name of outgoing label-switched path";
        }
        leaf receive-lsp {
          type string;
          description "Name of incoming label-switched path";
        }
      }
      list p2mp-transmit-switch {
        description "Local interface to point-to-multipoint LSP switch";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Point-to-multipoint switch name on which to transmit";
        }
        uses apply-advanced;
        leaf input-interface {
          type "jt:interface-name";
          description "Input interface name";
        }
        leaf transmit-p2mp-lsp {
          type string;
          description "Point-to-multipoint LSP name on which to transmit";
        }
        leaf-list output-interface {
          type "jt:interface-name";
          description "Outgoing interface name";
          max-elements 16;
          ordered-by user;
        }
      }
      list p2mp-receive-switch {
        description "Point-to-multipoint LSP to local interfaces switch";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Point-to-multipoint switch name on which to receive";
        }
        uses apply-advanced;
        leaf receive-p2mp-lsp {
          type string;
          description "Point-to-multipoint LSP name on which to receive";
        }
        leaf-list output-interface {
          type "jt:interface-name";
          description "Next outgoing interface name";
          ordered-by user;
        }
      }
    }
    container dvmrp {
      description "DVMRP options";
      presence "enable dvmrp";
      status deprecated;
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable DVMRP";
          }
        }
      }
      container traceoptions {
        description "Trace options for DVMRP";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum route {
                description "Trace routing information";
              }
              enum poison {
                description "Trace poison-route-reverse packets";
              }
              enum packets {
                description "Trace all DVMRP packets";
              }
              enum probe {
                description "Trace probe packets";
              }
              enum report {
                description "Trace DVMRP route report packets";
              }
              enum neighbor {
                description "Trace neighbor probe packets";
              }
              enum prune {
                description "Trace prune messages";
              }
              enum graft {
                description "Trace graft messages";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      container rib-group {
        description "Routing table group";
        uses rib_group_inet_type;
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
      leaf-list export {
        type "jt:policy-algebra";
        description "Export policy";
        ordered-by user;
      }
      list interface {
        description "DVMRP interface options";
        key name;
        ordered-by user;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable DVMRP on this interface";
            }
          }
        }
        leaf mode {
          type enumeration {
            enum forwarding {
              description "Use DVMRP for multicast forwarding";
            }
            enum unicast-routing {
              description "Use DVMRP for unicast routing only";
            }
          }
          description "Mode of interface";
        }
        leaf metric {
          type uint32 {
            range "1 .. 32";
          }
          description "DVMRP metric value";
        }
        leaf hold-time {
          type uint32 {
            range "1 .. 255";
          }
          description "When neighbors think the interface is down";
          units seconds;
        }
      }
    }
    container esis {
      description "End system-intermediate system options";
      uses juniper-protocols-esis;
    }
    container evpn {
      description "Configuration EVPN default routing instance";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for Layer 2 VPNs";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum error {
                description "Trace errors";
              }
              enum topology {
                description "Trace Layer 2 VPN, VPLS and EVPN topology changes";
              }
              enum nlri {
                description "Trace Layer 2 VPN, VPLS and EVPN remote site advertisements";
              }
              enum connections {
                description "Trace Layer 2 VPN and VPLS connections";
              }
              enum automatic-site {
                description "Trace VPLS automatic site state";
              }
              enum oam {
                description "Trace OAM messages";
              }
              enum mac-database {
                description "Trace MAC route database in a EVPN instance";
              }
              enum nsr {
                description "Trace NSR in a EVPN instance";
              }
              enum egress-protection {
                description "Trace Edge Protection messages";
              }
              enum instance {
                description "Evpn instance related messages";
              }
              enum interface {
                description "Interface related messages";
              }
              enum l2aldsync {
                description "Messages related to EVPN-L2ALD communication";
              }
              enum p2mp {
                description "P2MP messages";
              }
              enum esi {
                description "Evpn ethernet segment related messages";
              }
              enum mcsn {
                description "Evpn multicast snooping related messages";
              }
              enum vpws {
                description "VPWS messages";
              }
              enum irb {
                description "Integrated routing bridging messages";
              }
              enum ar {
                description "Assisted-replication messages";
              }
              enum etree {
                description "Evpn etree messages";
              }
              enum kernel {
                description "Messages related to rpd-kernel communication";
              }
              enum bd {
                description "Evpn bridge domain messages";
              }
              enum pbb {
                description "Evpn provider backbone bridging messages";
              }
              enum infra {
                description "Messages related to infrastructure in evpn";
              }
              enum pfxdb {
                description "Type-5 related messages";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      leaf mac-history {
        type uint16 {
          range "0 .. 255";
        }
        description "Number of history entries to be maitained per mac";
      }
      leaf peg-df-election-history {
        type uint16 {
          range "0 .. 255";
        }
        description "Number of DF Election history entries to be maintained per PEG BD";
      }
      leaf oism-core-route-history {
        type uint16 {
          range "0 .. 255";
        }
        description "Number of history entries to be maintained per OISM Core Route";
      }
      leaf core-isolation-delay-response {
        type uint32 {
          range "0 .. 255";
        }
        description "Delay core-isolation response (seconds)";
      }
      list mac-list {
        description "Configure MAC lists";
        key name;
        leaf name {
          type string {
            length "1 .. 128";
          }
          description "List name";
        }
        uses apply-advanced;
        leaf-list mac-address {
          type "jt:mac-addr";
          description "MAC address";
        }
      }
      container mac-mobility {
        description "MAC mobility settings";
        uses apply-advanced;
        leaf no-sequence-numbers {
          type empty;
          description "Don't use sequence numbers for MAC mobility";
        }
      }
      leaf no-core-isolation {
        type empty;
        description "Disable EVPN Core isolation";
      }
      leaf leave-sync-route-oldstyle {
        type empty;
        description "Originate leave sync route oldstyle";
      }
      leaf-list interconnect-multihoming-peer-gateways {
        type "jt:ipaddr";
        description "Configure multihoming peer gateway VTEP IPv4 addresses";
        max-elements 64;
      }
      leaf-list interconnect-multihoming-peer-v6-gateways {
        type "jt:ipv6addr";
        description "Configure multihoming peer gateway VTEP IPv6 addresses";
        max-elements 64;
      }
      leaf advertise-evpn-esi-routes {
        type empty;
        description "Advertise AD/ES routes considering instance ifl status";
      }
      container node-detection {
        description "Node detection";
        presence "enable node-detection";
        uses apply-advanced;
        leaf next-hop {
          type "jt:interface-unit";
          description "Next-hop identifier to which to map";
        }
        leaf action {
          type enumeration {
            enum laser-off {
              description "Will trigger laser-off on core-isolation";
            }
            enum trigger-node-isolation {
              description "Will trigger link-down on core-isolation";
            }
          }
          description "Isolation action";
        }
        container bfd-liveness-detection {
          description "Bidirectional Forwarding Detection (BFD) options";
          uses apply-advanced;
          leaf version {
            type enumeration {
              enum 0 {
                description "BFD version 0 (deprecated)";
              }
              enum 1 {
                description "BFD version 1";
              }
              enum automatic {
                description "Choose BFD version automatically";
              }
            }
            default "automatic";
            description "BFD protocol version number";
          }
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
          leaf minimum-transmit-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            status deprecated;
            units milliseconds;
          }
          leaf minimum-receive-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum receive interval";
            units milliseconds;
          }
          leaf multiplier {
            type uint32 {
              range "1 .. 255";
            }
            default "3";
            description "Detection time multiplier";
          }
          leaf inline-disable {
            type empty;
            description "Disable inline mode for this BFD session";
          }
          leaf pdu-size {
            type uint32 {
              range "24 .. 9000";
            }
            default "24";
            description "BFD transport protocol payload size";
          }
          choice adaptation-choice {
            case case_1 {
              leaf no-adaptation {
                type empty;
                description "Disable adaptation";
              }
            }
          }
          container transmit-interval {
            description "Transmit-interval options";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf threshold {
              type uint32;
              description "High transmit interval triggering a trap";
              units milliseconds;
            }
          }
          container detection-time {
            description "Detection-time options";
            uses apply-advanced;
            leaf threshold {
              type uint32;
              description "High detection-time triggering a trap";
              units milliseconds;
            }
          }
          leaf neighbor {
            type "jt:ipaddr";
            description "BFD neighbor address";
          }
        }
      }
      leaf es-import-oldstyle {
        type empty;
        description "Enable noncompliant ES import route-target computation";
      }
      leaf es-label-oldstyle {
        type empty;
        description "Enable noncompliant ESI 24 bit label";
      }
      leaf encapsulation {
        type enumeration {
          enum mpls {
            description "MPLS encapsulation";
          }
          enum vxlan {
            description "VXLAN encapsulation";
          }
          enum mpls-inet6 {
            description "MPLS over IPv6 encapsulation";
          }
          enum srv6 {
            description "SRv6 encapsulation";
          }
        }
        default "mpls";
        description "Encapsulation type for EVPN";
      }
      container assisted-replication {
        description "Option to enable Assisted Replication";
        uses apply-advanced;
        choice AR {
          case case_1 {
            container leaf {
              description "Assisted Replicator Leaf";
              presence "enable leaf";
              uses apply-advanced;
              leaf replicator-activation-delay {
                type uint32 {
                  range "0 .. 180";
                }
                default "10";
                description "Dealy interval in starting replication";
                units seconds;
              }
              leaf-list deterministic-ar-policy {
                type "jt:policy-algebra";
                description "Deterministic mapping of multicast flow to replicator";
                ordered-by user;
              }
            }
          }
          case case_2 {
            container replicator {
              description "Assisted Replicator";
              presence "enable replicator";
              uses apply-advanced;
              choice family {
                case case_1 {
                  container inet {
                    description "IPv4 source";
                    presence "enable inet";
                    uses apply-advanced;
                    leaf ip {
                      type "jt:ipv4addr";
                      description "Assisted Replicator IP address";
                    }
                  }
                }
              }
              leaf vxlan-encapsulation-source-ip {
                type enumeration {
                  enum ingress-replication-ip {
                    description "Use regular ingress replication IP address";
                  }
                }
                description "VXLAN encapsulation source IP for replicated traffic";
              }
            }
          }
        }
      }
      leaf default-gateway {
        type enumeration {
          enum advertise {
            description "Advertise IRB MACs with default gateway community";
          }
          enum no-gateway-community {
            description "Advertise IRB MACs without default gateway community";
          }
          enum do-not-advertise {
            description "Do not advertise IRB MACs";
          }
        }
        description "Default gateway mode";
      }
      leaf designated-forwarder-election-hold-time {
        type uint32 {
          range "1 .. 1800";
        }
        description "Time to wait before electing a DF(seconds)";
        units seconds;
      }
      leaf designated-forwarder-preference-least {
        type empty;
        description "Use least preference in DF election";
      }
      container duplicate-mac-detection {
        description "Duplicate MAC detection settings";
        uses apply-advanced;
        leaf detection-threshold {
          type uint32 {
            range "2 .. 20";
          }
          description "Number of moves to trigger duplicate MAC detection";
        }
        leaf detection-window {
          type uint32 {
            range "5 .. 600";
          }
          description "Time window for detection of duplicate MACs";
          units seconds;
        }
        leaf auto-recovery-time {
          type uint32 {
            range "1 .. 360";
          }
          description "Automatically unblock duplicate MACs after a time delay";
          units minutes;
        }
        leaf include-local-moves {
          type empty;
          description "Include local moves in duplicate MAC detection";
        }
      }
      container remote-ip-host-routes {
        description "Virtual machine traffic optimization(VMTO) for EVPN";
        presence "enable remote-ip-host-routes";
        uses apply-advanced;
        leaf-list import {
          type "jt:policy-algebra";
          description "Policy to control the creation of remote IP host routes";
          ordered-by user;
        }
        leaf no-advertise-community {
          type empty;
          description "Don't advertise Type 2 route's community";
        }
      }
      leaf pmsi-tunnel-endpoint {
        type "jt:ipv4addr";
        description "IM IR PMSI tunnel Endpoint for remote PE";
      }
      leaf label-allocation {
        type enumeration {
          enum per-bridge-domain {
            description "Allocate one label for each bridge-domain";
          }
        }
        description "Label allocation policy";
      }
      leaf esi-resolution-per-bridge-domain {
        type empty;
        description "Enable ESI Resolution Per BD";
      }
      leaf riot-loopback {
        type empty;
        description "Track loopback irb interface state on RIOT platform";
      }
      container interconnect {
        description "Interconnect";
        uses juniper-protocols-evpn-interconnect;
      }
      container mark-local-ip-host-routes {
        description "Mark local ip host routes";
        uses apply-advanced;
        leaf-list export {
          type "jt:policy-algebra";
          description "Policy to mark local IP host routes";
          ordered-by user;
        }
      }
      leaf multicast-mode {
        type enumeration {
          enum ingress-replication {
            description "Ingress Replication";
          }
        }
        default "ingress-replication";
        description "Multicast mode for EVPN";
      }
      container vni-options {
        description "Vni options";
        uses juniper-protocols-vni-options;
      }
      leaf-list extended-vni-list {
        type string;
        description "List of VNI identifiers or all, that are to be EVPN extended";
      }
    }
    container express-segments {
      description "Configuration for Express Segments";
      uses apply-advanced;
      list segment-template {
        description "Express Segments Template Definition";
        key name;
        max-elements 64;
        ordered-by user;
        leaf name {
          type string;
          description "Express Segment Template Name";
        }
        uses apply-advanced;
        leaf-list admin-group {
          type string;
          description "Administrative groups";
          max-elements 16;
          ordered-by user;
        }
        leaf-list admin-group-extended {
          type string;
          description "Extended administrative groups";
          max-elements 16;
          ordered-by user;
        }
        leaf-list srlg {
          type string;
          description "SRLG Name";
          max-elements 16;
          ordered-by user;
        }
        container metric {
          description "Metric values for Express Segment Template";
          uses apply-advanced;
          leaf te {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "TE metric value";
          }
          leaf igp {
            type uint32 {
              range "1 .. 16777215";
            }
            description "IGP metric value";
          }
          leaf delay {
            type uint32 {
              range "1 .. 16777215";
            }
            description "Delay metric value";
            units microseconds;
          }
        }
      }
      list segment-set {
        description "Express Segments Set Definition";
        key name;
        max-elements 64;
        ordered-by user;
        leaf name {
          type string;
          description "Express Segment Set Name";
        }
        uses apply-advanced;
        leaf-list membership-policy {
          type "jt:policy-algebra";
          description "Policy for matching specific LSPs to this express segment";
          ordered-by user;
        }
        container template {
          description "Template for Express Segment Attribute Selection";
          uses apply-advanced;
          leaf template-name {
            type string;
            description "Name of Express Segment template";
          }
        }
      }
      container traffic-engineering {
        description "Enable Import of all Express Segments into TED";
        presence "enable traffic-engineering";
        uses apply-advanced;
      }
      container traceoptions {
        description "Trace options for Express Segment";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum all {
                description "Trace everything";
              }
              enum error {
                description "Trace errors";
              }
              enum route {
                description "Trace route-related changes";
              }
              enum state {
                description "Trace state transitions";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
    }
    container igmp {
      description "IGMP options";
      presence "enable igmp";
      uses apply-advanced;
      leaf protocol-instance-name {
        type string;
        description "Name of protocol instance under routing instance";
      }
      container traceoptions {
        description "Trace options for IGMP";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum packets {
                description "Trace all IGMP packets";
              }
              enum query {
                description "Trace IGMP membership query messages";
              }
              enum report {
                description "Trace membership report messages";
              }
              enum leave {
                description "Trace leave group messages (IGMPv2 only)";
              }
              enum mtrace {
                description "Trace mtrace packets";
              }
              enum group {
                description "Trace group operations";
              }
              enum client-notification {
                description "Trace notifications";
              }
              enum host-notification {
                description "Trace host notifications";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      leaf query-interval {
        type uint32 {
          range "1 .. 1024";
        }
        description "When to send host query messages";
        units seconds;
      }
      leaf query-response-interval {
        type string;
        description "How long to wait for a host query response";
        units seconds;
      }
      leaf query-last-member-interval {
        type string;
        description "When to send group query messages";
        units seconds;
      }
      leaf robust-count {
        type uint32 {
          range "2 .. 10";
        }
        description "Expected packet loss on a subnet";
      }
      leaf maximum-transmit-rate {
        type uint32 {
          range "1 .. 10000";
        }
        description "Maximum transmission rate (packets per second)";
      }
      leaf accounting {
        type empty;
        description "Enable join and leave event notification";
      }
      list interface {
        description "Interface options for IGMP";
        key name;
        ordered-by user;
        leaf name {
          type string;
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable IGMP on this interface";
            }
          }
        }
        leaf version {
          type uint8 {
            range "1 .. 3";
          }
          description "Set IGMP version number on this interface";
        }
        container static {
          description "Static group or source membership";
          uses apply-advanced;
          list group {
            description "IP multicast group address";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv4addr";
              description "IP multicast group address";
            }
            uses apply-advanced;
            leaf group-increment {
              type "jt:ipv4addr";
              description "Mask for the incrementing group IP address";
            }
            leaf group-count {
              type uint32 {
                range "1 .. 512";
              }
              description "Number of groups";
            }
            leaf exclude {
              type empty;
              description "Exclude sources";
            }
            list source {
              description "IP multicast source address";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv4addr";
                description "Source address of IP multicast data";
              }
              uses apply-advanced;
              leaf source-increment {
                type "jt:ipv4addr";
                description "Mask for the incrementing source IP address";
              }
              leaf source-count {
                type uint32 {
                  range "1 .. 1024";
                }
                description "Number of sources";
              }
            }
          }
        }
        leaf ssm-map {
          type string;
          description "Map for SSM translation of IGMPv1 or IGMPv2 messages";
        }
        leaf-list ssm-map-policy {
          type "jt:policy-algebra";
          description "SSM map policy name";
          ordered-by user;
        }
        leaf immediate-leave {
          type empty;
          description "Group removed immediately, last membership query not sent";
        }
        leaf promiscuous-mode {
          type empty;
          description "Accept igmp messages coming from different subnet";
        }
        choice accounting-choice {
          leaf accounting {
            type empty;
            description "Enable join and leave event notification";
          }
          leaf no-accounting {
            type empty;
            description "Don't enable join and leave event notification";
          }
        }
        leaf-list group-policy {
          type "jt:policy-algebra";
          description "Group filter applied to incoming IGMP report messages";
          ordered-by user;
        }
        leaf group-limit {
          type uint16 {
            range "1 .. 32767";
          }
          description "Maximum number of (source,group) per interface";
        }
        leaf group-threshold {
          type uint32 {
            range "1 .. 100";
          }
          description "Percentage of limit at which to generate warnings";
        }
        leaf log-interval {
          type uint32 {
            range "6 .. 32767";
          }
          description "Time between consecutive log messages";
        }
        container passive {
          description "Suppress sending and receiving IGMP messages";
          presence "enable passive";
          leaf allow-receive {
            type empty;
            description "Allow receiving IGMP messages";
          }
          leaf send-general-query {
            type empty;
            description "Send IGMP general query messages";
          }
          leaf send-group-query {
            type empty;
            description "Send IGMP group query messages";
          }
        }
        leaf-list oif-map {
          type "jt:policy-algebra";
          description "Output interface map";
          ordered-by user;
        }
        leaf distributed {
          type empty;
          description "Distributed IGMP interface";
        }
      }
      container amt {
        description "Automatic Multicast Tunnel options for IGMP";
        uses apply-advanced;
        container relay {
          description "AMT relay options for IGMP";
          uses apply-advanced;
          container defaults {
            description "Default AMT relay options for IGMP";
            presence "enable defaults";
            uses apply-advanced;
            leaf version {
              type uint8 {
                range "1 .. 3";
              }
              description "Set IGMP version number on AMT interfaces";
            }
            leaf ssm-map {
              type string;
              description "Map for SSM translation of IGMPv1 or IGMPv2 messages";
            }
            leaf-list ssm-map-policy {
              type "jt:policy-algebra";
              description "SSM map policy name";
              ordered-by user;
            }
            choice accounting-choice {
              leaf accounting {
                type empty;
                description "Enable join and leave event notification";
              }
              leaf no-accounting {
                type empty;
                description "Don't enable join and leave event notification";
              }
            }
            leaf-list group-policy {
              type "jt:policy-algebra";
              description "Group filter applied to incoming IGMP report messages";
              ordered-by user;
            }
            leaf group-limit {
              type uint16 {
                range "1 .. 32767";
              }
              description "Maximum number of (source,group) per interface";
            }
            leaf group-threshold {
              type uint32 {
                range "1 .. 100";
              }
              description "Percentage of limit at which to generate warnings";
            }
            leaf log-interval {
              type uint32 {
                range "6 .. 32767";
              }
              description "Time between consecutive log messages";
            }
            leaf robust-count {
              type uint32 {
                range "2 .. 10";
              }
              description "Expected packet loss on a subnet";
            }
            leaf query-interval {
              type uint32 {
                range "1 .. 1024";
              }
              description "When to send host query messages";
              units seconds;
            }
            leaf query-response-interval {
              type string;
              description "How long to wait for a host query response";
              units seconds;
            }
          }
        }
      }
    }
    container router-discovery {
      description "ICMP router discovery options";
      uses juniper-protocols-router-discovery;
    }
    container isis {
      description "IS-IS options";
      uses juniper-protocols-isis;
    }
    list isis-instance {
      description "Multi-instance IS-IS configuration";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "IS-IS instance name";
      }
      uses apply-advanced;
      list interface {
        description "Interface configuration";
        key name;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        uses apply-advanced;
        container ldp-synchronization {
          description "Advertise maximum metric until LDP is operational";
          presence "enable ldp-synchronization";
          uses ldp-sync-obj;
        }
        list level {
          description "Configure levels on this interface";
          key name;
          ordered-by user;
          leaf name {
            type uint32 {
              range "1 .. 2";
            }
            description "IS-IS level number";
          }
          uses apply-advanced;
          leaf te-metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "Traffic engineering metric";
          }
          leaf no-advertise-adjacency-segment {
            type empty;
            description "Do not advertise an adjacency segment for this level";
          }
          container ipv4-adjacency-segment {
            description "Configure ipv4 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
          container ipv6-adjacency-segment {
            description "Configure ipv6 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
          container srm6-adjacency-segment {
            description "Configure srm6 adjacency segment";
            uses apply-advanced;
            container unprotected {
              description "Adjacency SID uneligible for protection";
              leaf sid {
                type uint32 {
                  range "1 .. 65535";
                }
                description "Set Adjacency SID Value";
              }
            }
          }
          container srv6-adjacency-segment {
            description "Configure srv6 adjacency segment";
            uses apply-advanced;
            container protected {
              description "SRv6 Adjacency segment is eligible for protection";
              presence "enable protected";
              uses apply-advanced;
              list locator {
                description "Locator to bind SRv6 adjacency segment";
                key name;
                ordered-by user;
                leaf name {
                  type string;
                  description "Locator name";
                }
                uses apply-advanced;
                list end-x-sid {
                  description "Endpoint 128 bit address";
                  key name;
                  ordered-by user;
                  leaf name {
                    type "jt:ipv6addr";
                  }
                  uses apply-advanced;
                  container flavor {
                    description "Configure end-x-SID flavor";
                    presence "enable flavor";
                    uses apply-advanced;
                    leaf psp {
                      type empty;
                      description "Penultimate segment pop of the SRH";
                    }
                    leaf usp {
                      type empty;
                      description "Ultimate segment pop of the SRH";
                    }
                    leaf usd {
                      type empty;
                      description "Ultimate segment decapsulation";
                    }
                  }
                }
                container micro-adjacency-sid {
                  description "Micro-adjacency-SID";
                  presence "enable micro-adjacency-sid";
                  uses apply-advanced;
                  leaf static-sid {
                    type uint32;
                    description "Static micro-adjacency-SID";
                  }
                }
                container dynamic-end-x-sid {
                  description "Allocate end-x-SID dynamically";
                  presence "enable dynamic-end-x-sid";
                  uses apply-advanced;
                  container flavor {
                    description "Configure end-x-SID flavor";
                    presence "enable flavor";
                    uses apply-advanced;
                    leaf psp {
                      type empty;
                      description "Penultimate segment pop of the SRH";
                    }
                    leaf usp {
                      type empty;
                      description "Ultimate segment pop of the SRH";
                    }
                    leaf usd {
                      type empty;
                      description "Ultimate segment decapsulation";
                    }
                  }
                }
              }
            }
            container unprotected {
              description "SRv6 Adjacency segment is uneligible for protection";
              presence "enable unprotected";
              uses apply-advanced;
              list locator {
                description "Locator to bind SRv6 adjacency segment";
                key name;
                ordered-by user;
                leaf name {
                  type string;
                  description "Locator name";
                }
                uses apply-advanced;
                list end-x-sid {
                  description "Endpoint 128 bit address";
                  key name;
                  ordered-by user;
                  leaf name {
                    type "jt:ipv6addr";
                  }
                  uses apply-advanced;
                  container flavor {
                    description "Configure end-x-SID flavor";
                    presence "enable flavor";
                    uses apply-advanced;
                    leaf psp {
                      type empty;
                      description "Penultimate segment pop of the SRH";
                    }
                    leaf usp {
                      type empty;
                      description "Ultimate segment pop of the SRH";
                    }
                    leaf usd {
                      type empty;
                      description "Ultimate segment decapsulation";
                    }
                  }
                }
                container micro-adjacency-sid {
                  description "Micro-adjacency-SID";
                  presence "enable micro-adjacency-sid";
                  uses apply-advanced;
                  leaf static-sid {
                    type uint32;
                    description "Static micro-adjacency-SID";
                  }
                }
                container dynamic-end-x-sid {
                  description "Allocate end-x-SID dynamically";
                  presence "enable dynamic-end-x-sid";
                  uses apply-advanced;
                  container flavor {
                    description "Configure end-x-SID flavor";
                    presence "enable flavor";
                    uses apply-advanced;
                    leaf psp {
                      type empty;
                      description "Penultimate segment pop of the SRH";
                    }
                    leaf usp {
                      type empty;
                      description "Ultimate segment pop of the SRH";
                    }
                    leaf usd {
                      type empty;
                      description "Ultimate segment decapsulation";
                    }
                  }
                }
              }
            }
          }
          list lan-neighbor {
            description "Configuration specific to a LAN neighbor";
            key name;
            ordered-by user;
            leaf name {
              type "jt:sysid";
              description "Neighbor's sysid";
            }
            uses apply-advanced;
            container ipv4-adjacency-segment {
              description "Configure ipv4 adjacency segment";
              uses apply-advanced;
              container protected {
                description "Adjacency SID is eligible for protection";
                choice adjsid-type {
                  case case_1 {
                    container index {
                      description "Adjacency SID indexed from SRGB";
                      leaf index-number {
                        type uint32 {
                          range "0 .. 199999";
                        }
                      }
                    }
                  }
                  case case_2 {
                    leaf label {
                      type uint32 {
                        range "16 .. 1048575";
                      }
                      description "Adjacency SID from static label pool";
                    }
                  }
                  case case_3 {
                    leaf dynamic {
                      type empty;
                      description "Dynamically allocate an adjacency segment";
                    }
                  }
                }
              }
              container unprotected {
                description "Adjacency SID uneligible for protection";
                choice adjsid-type {
                  case case_1 {
                    container index {
                      description "Adjacency SID indexed from SRGB";
                      leaf index-number {
                        type uint32 {
                          range "0 .. 199999";
                        }
                      }
                    }
                  }
                  case case_2 {
                    leaf label {
                      type uint32 {
                        range "16 .. 1048575";
                      }
                      description "Adjacency SID from static label pool";
                    }
                  }
                  case case_3 {
                    leaf dynamic {
                      type empty;
                      description "Dynamically allocate an adjacency segment";
                    }
                  }
                }
              }
            }
            container ipv6-adjacency-segment {
              description "Configure ipv6 adjacency segment";
              uses apply-advanced;
              container protected {
                description "Adjacency SID is eligible for protection";
                choice adjsid-type {
                  case case_1 {
                    container index {
                      description "Adjacency SID indexed from SRGB";
                      leaf index-number {
                        type uint32 {
                          range "0 .. 199999";
                        }
                      }
                    }
                  }
                  case case_2 {
                    leaf label {
                      type uint32 {
                        range "16 .. 1048575";
                      }
                      description "Adjacency SID from static label pool";
                    }
                  }
                  case case_3 {
                    leaf dynamic {
                      type empty;
                      description "Dynamically allocate an adjacency segment";
                    }
                  }
                }
              }
              container unprotected {
                description "Adjacency SID uneligible for protection";
                choice adjsid-type {
                  case case_1 {
                    container index {
                      description "Adjacency SID indexed from SRGB";
                      leaf index-number {
                        type uint32 {
                          range "0 .. 199999";
                        }
                      }
                    }
                  }
                  case case_2 {
                    leaf label {
                      type uint32 {
                        range "16 .. 1048575";
                      }
                      description "Adjacency SID from static label pool";
                    }
                  }
                  case case_3 {
                    leaf dynamic {
                      type empty;
                      description "Dynamically allocate an adjacency segment";
                    }
                  }
                }
              }
            }
            container srm6-adjacency-segment {
              description "Configure srm6 adjacency segment";
              uses apply-advanced;
              container unprotected {
                description "Adjacency SID uneligible for protection";
                leaf sid {
                  type uint32 {
                    range "1 .. 65535";
                  }
                  description "Set Adjacency SID Value";
                }
              }
            }
            container srv6-adjacency-segment {
              description "Configure srv6 adjacency segment";
              uses apply-advanced;
              container protected {
                description "SRv6 Adjacency segment is eligible for protection";
                presence "enable protected";
                uses apply-advanced;
                list locator {
                  description "Locator to bind SRv6 adjacency segment";
                  key name;
                  ordered-by user;
                  leaf name {
                    type string;
                    description "Locator name";
                  }
                  uses apply-advanced;
                  list end-x-sid {
                    description "Endpoint 128 bit address";
                    key name;
                    ordered-by user;
                    leaf name {
                      type "jt:ipv6addr";
                    }
                    uses apply-advanced;
                    container flavor {
                      description "Configure end-x-SID flavor";
                      presence "enable flavor";
                      uses apply-advanced;
                      leaf psp {
                        type empty;
                        description "Penultimate segment pop of the SRH";
                      }
                      leaf usp {
                        type empty;
                        description "Ultimate segment pop of the SRH";
                      }
                      leaf usd {
                        type empty;
                        description "Ultimate segment decapsulation";
                      }
                    }
                  }
                  container micro-adjacency-sid {
                    description "Micro-adjacency-SID";
                    presence "enable micro-adjacency-sid";
                    uses apply-advanced;
                    leaf static-sid {
                      type uint32;
                      description "Static micro-adjacency-SID";
                    }
                  }
                  container dynamic-end-x-sid {
                    description "Allocate end-x-SID dynamically";
                    presence "enable dynamic-end-x-sid";
                    uses apply-advanced;
                    container flavor {
                      description "Configure end-x-SID flavor";
                      presence "enable flavor";
                      uses apply-advanced;
                      leaf psp {
                        type empty;
                        description "Penultimate segment pop of the SRH";
                      }
                      leaf usp {
                        type empty;
                        description "Ultimate segment pop of the SRH";
                      }
                      leaf usd {
                        type empty;
                        description "Ultimate segment decapsulation";
                      }
                    }
                  }
                }
              }
              container unprotected {
                description "SRv6 Adjacency segment is uneligible for protection";
                presence "enable unprotected";
                uses apply-advanced;
                list locator {
                  description "Locator to bind SRv6 adjacency segment";
                  key name;
                  ordered-by user;
                  leaf name {
                    type string;
                    description "Locator name";
                  }
                  uses apply-advanced;
                  list end-x-sid {
                    description "Endpoint 128 bit address";
                    key name;
                    ordered-by user;
                    leaf name {
                      type "jt:ipv6addr";
                    }
                    uses apply-advanced;
                    container flavor {
                      description "Configure end-x-SID flavor";
                      presence "enable flavor";
                      uses apply-advanced;
                      leaf psp {
                        type empty;
                        description "Penultimate segment pop of the SRH";
                      }
                      leaf usp {
                        type empty;
                        description "Ultimate segment pop of the SRH";
                      }
                      leaf usd {
                        type empty;
                        description "Ultimate segment decapsulation";
                      }
                    }
                  }
                  container micro-adjacency-sid {
                    description "Micro-adjacency-SID";
                    presence "enable micro-adjacency-sid";
                    uses apply-advanced;
                    leaf static-sid {
                      type uint32;
                      description "Static micro-adjacency-SID";
                    }
                  }
                  container dynamic-end-x-sid {
                    description "Allocate end-x-SID dynamically";
                    presence "enable dynamic-end-x-sid";
                    uses apply-advanced;
                    container flavor {
                      description "Configure end-x-SID flavor";
                      presence "enable flavor";
                      uses apply-advanced;
                      leaf psp {
                        type empty;
                        description "Penultimate segment pop of the SRH";
                      }
                      leaf usp {
                        type empty;
                        description "Ultimate segment pop of the SRH";
                      }
                      leaf usd {
                        type empty;
                        description "Ultimate segment decapsulation";
                      }
                    }
                  }
                }
              }
            }
          }
          container post-convergence-lfa {
            description "Configure backup along post convergence on this interface";
            presence "enable post-convergence-lfa";
            uses apply-advanced;
            container node-protection {
              description "Enable node protection";
              presence "enable node-protection";
              uses apply-advanced;
              leaf cost {
                type uint32 {
                  range "0 .. 16777215";
                }
                description "Cost for node protection";
              }
            }
            leaf srlg-protection {
              type empty;
              description "Enable srlg protection";
            }
            leaf fate-sharing-protection {
              type empty;
              description "Enable fate-sharing protection";
            }
          }
          container application-specific {
            description "Advertise application-specific TE attributes";
            uses apply-advanced;
            list attribute-group {
              description "Link attribute group name";
              key name;
              max-elements 1;
              ordered-by user;
              leaf name {
                type string;
                description "Link attribute group name";
              }
              uses apply-advanced;
              leaf advertise-delay-metric {
                type empty;
                description "Advertise delay metric as per interface config";
              }
              leaf te-metric {
                type uint32 {
                  range "0 .. 16777215";
                }
                description "Traffic engineering metric for this attribute group";
              }
              leaf-list admin-group {
                type string;
                description "Administrative groups for this attribute-group";
                max-elements 16;
                ordered-by user;
              }
              container application {
                description "Standard Applications part of this attribute-group";
                uses apply-advanced;
                leaf flex-algorithm {
                  type empty;
                  description "Set X flag in standard application bit mask";
                }
              }
            }
          }
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable IS-IS for this level";
              }
            }
          }
          leaf metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "Metric for this level";
          }
          leaf ipv4-multicast-metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "IPv4 multicast metric for this level";
          }
          leaf ipv6-unicast-metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "IPv6 unicast metric for this level";
          }
          leaf ipv6-multicast-metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "IPv6 multicast metric for this level";
          }
          list topology {
            description "Topology specific attributes";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum default {
                  description "Default topology";
                }
                enum ipv4-multicast {
                  description "IPv4 multicast topology";
                }
                enum ipv6-unicast {
                  description "IPv6 unicast topology";
                }
                enum ipv6-multicast {
                  description "IPv6 multicast topology";
                }
              }
              description "Topology name";
            }
            uses apply-advanced;
            leaf metric {
              type uint32 {
                range "0 .. 16777215";
              }
              description "Topology metric";
            }
            container bandwidth-based-metrics {
              description "Configure bandwidth based metrics";
              uses apply-advanced;
              list bandwidth {
                description "Bandwidth threshold";
                key name;
                leaf name {
                  type string;
                }
                leaf metric {
                  type uint32 {
                    range "0 .. 16777215";
                  }
                  description "Metric associated with specified bandwidth";
                }
              }
            }
          }
          leaf authentication-key {
            type "jt:unreadable";
            description "Authentication key (password)";
            status deprecated;
          }
          leaf authentication-type {
            type enumeration {
              enum md5 {
                description "MD5 authentication";
                status deprecated;
              }
              enum simple {
                description "Simple password authentication";
                status deprecated;
              }
            }
            description "Authentication type";
            status deprecated;
          }
          leaf hello-authentication-key {
            type "jt:unreadable";
            description "Authentication key (password) for hello packets";
          }
          leaf hello-authentication-type {
            type enumeration {
              enum md5 {
                description "MD5 authentication";
              }
              enum simple {
                description "Simple password authentication";
              }
            }
            description "Authentication type for hello packets";
          }
          leaf hello-authentication-key-chain {
            type string {
              length "1 .. 128";
            }
            description "Key chain name";
          }
          leaf hello-interval {
            type uint32 {
              range "1 .. 21845";
            }
            description "Interval between hello packet transmissions";
            units seconds;
          }
          leaf hold-time {
            type uint32 {
              range "1 .. 65535";
            }
            description "Time after which neighbors think the interface is down";
            units seconds;
          }
          leaf priority {
            type uint32 {
              range "0 .. 127";
            }
            description "Designated router election priority";
          }
          container flood-reflector {
            description "Configure interface as flood-reflector";
            presence "enable flood-reflector";
            uses apply-advanced;
            leaf cluster-id {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Cluster-ID";
            }
          }
          container passive {
            description "Do not run IS-IS at this level, but advertise it";
            presence "enable passive";
            uses apply-advanced;
            leaf remote-node-iso {
              type "jt:sysid";
              description "ISO System-ID of the remote node";
            }
            leaf remote-node-id {
              type "jt:ipv4addr";
              description "Remote address of the link";
            }
          }
          leaf strict-bfd-old {
            type empty;
            description "Enable strict bfd over this interface";
          }
        }
        leaf delay-metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "Delay metric";
          units microseconds;
        }
        container delay-measurement {
          description "Enable delay measurement";
          presence "enable delay-measurement";
          uses apply-advanced;
          leaf probe-interval {
            type uint32 {
              range "1 .. 255";
            }
            description "Probe interval";
            units seconds;
          }
          leaf probe-count {
            type uint32 {
              range "1 .. 15";
            }
            description "Probe count";
            units seconds;
          }
          container advertisement {
            description "Delay advertisement";
            uses apply-advanced;
            container periodic {
              description "Periodic advertisement parameters";
              uses apply-advanced;
              leaf threshold {
                type uint32 {
                  range "0 .. 100";
                }
                description "Threshold";
                units percentage;
              }
              leaf interval {
                type uint32 {
                  range "30 .. 3600";
                }
                description "Interval";
                units seconds;
              }
            }
            container accelerated {
              description "Accelerated advertisement parameters";
              presence "enable accelerated";
              uses apply-advanced;
              leaf threshold {
                type uint32 {
                  range "0 .. 100";
                }
                description "Threshold";
                units percentage;
              }
            }
          }
        }
        leaf no-advertise-adjacency-segment {
          type empty;
          description "Do not advertise an adjacency segment for this interface";
        }
        container auto-bandwidth {
          description "Auto bandwidth configuration";
          uses apply-advanced;
          leaf template-name {
            type string;
            description "Auto bandwidth template name";
          }
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable Auto bandwidth on this interface";
              }
            }
          }
        }
        choice protection-type {
          case case_1 {
            leaf link-protection {
              type empty;
              description "Protect interface from link faults only";
            }
          }
          case case_2 {
            leaf node-link-protection {
              type empty;
              description "Protect interface from both link and node faults";
            }
          }
        }
        leaf no-eligible-backup {
          type empty;
          description "Not eligible for backup traffic from protected interfaces";
        }
        leaf no-eligible-remote-backup {
          type empty;
          description "Not eligible for Remote-LFA backup traffic from protected interfaces";
        }
        container link-degradation-threshold {
          description "Link up and down thresholds (in %) for proactive link protection";
          presence "enable link-degradation-threshold";
          leaf link-down {
            type uint32 {
              range "0 .. 100";
            }
            description "Signal degradation threshold above which link marked down";
          }
          leaf link-up {
            type uint32 {
              range "0 .. 100";
            }
            description "Signal degradation threshold below which link is marked up.";
          }
        }
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable IS-IS on this interface";
            }
          }
        }
        leaf authentication-key {
          type "jt:unreadable";
          description "Authentication key (password)";
          status deprecated;
        }
        leaf authentication-type {
          type enumeration {
            enum md5 {
              description "MD5 authentication";
              status deprecated;
            }
            enum simple {
              description "Simple password authentication";
              status deprecated;
            }
          }
          description "Authentication type";
          status deprecated;
        }
        leaf flood-group {
          type string;
          description "ISO Area that this interface should send LSPs to";
        }
        leaf hello-authentication-key {
          type "jt:unreadable";
          description "Authentication key (password) for hello packets";
          status deprecated;
        }
        leaf hello-authentication-type {
          type enumeration {
            enum md5 {
              description "MD5 authentication";
              status deprecated;
            }
            enum simple {
              description "Simple password authentication";
              status deprecated;
            }
          }
          description "Authentication type for hello packets";
          status deprecated;
        }
        leaf hello-padding-type {
          type enumeration {
            enum strict {
              description "Padding for all adjacency states";
            }
            enum adaptive {
              description "Padding until state of neighbor adjacency is 'up'";
            }
            enum loose {
              description "Padding until state of adjacency is 'initializing'";
            }
            enum disable {
              description "Do not add any padding for hello packets";
            }
          }
          default "loose";
          description "Type of padding for hello packets";
        }
        leaf interface-group-holddown-delay {
          type uint32 {
            range "0 .. 60";
          }
          description "Time to wait before including in BBM calculation";
          units seconds;
        }
        choice layer2-map-choice {
          leaf layer2-map {
            type empty;
            description "Kernel ARP/ND creation for nexthops";
          }
          leaf no-layer2-map {
            type empty;
            description "Don't kernel ARP/ND creation for nexthops";
          }
        }
        leaf max-hello-size {
          type uint32 {
            range "512 .. 16000";
          }
          description "Maximum size allowed for ISIS Hello PDUs";
        }
        leaf lsp-interval {
          type uint32 {
            range "1 .. 1000";
          }
          default "100";
          description "Interval between LSP transmissions";
          units milliseconds;
        }
        container csnp-interval {
          description "Rate of CSN packets (for LAN interfaces only)";
          choice csnp_interval_option {
            case case_1 {
              leaf csnp-interval-number {
                type uint32 {
                  range "1 .. 65535";
                }
                description "Interval between CSN packets";
                units seconds;
              }
            }
            case case_2 {
              leaf disable {
                type empty;
                description "Do not send CSN packets on this interface";
              }
            }
          }
        }
        container strict-dual-isis {
          description "Enable dual isis if spf computation is required for both ipv4 and ipv6 family";
          presence "enable strict-dual-isis";
          uses apply-advanced;
          leaf holdown {
            type uint32 {
              range "1 .. 65535";
            }
            default "12";
            description "Time to wait for ipv4 and ipv6 connectivity";
            status deprecated;
          }
          leaf holddown {
            type uint32 {
              range "1 .. 65535";
            }
            default "12";
            description "Time to wait for ipv4 and ipv6 connectivity";
          }
        }
        container mesh-group {
          description "Add the interface to a mesh group";
          choice mesh_group_option {
            case case_1 {
              leaf mesh-group-number {
                type uint32;
                description "Mesh group number for this interface";
              }
            }
            case case_2 {
              leaf blocked {
                type empty;
                description "Do not flood new LSPs on this interface";
              }
            }
          }
        }
        leaf point-to-point {
          type empty;
          description "Treat interface as point to point";
        }
        container passive {
          description "Do not run IS-IS, but advertise it";
          presence "enable passive";
          uses apply-advanced;
          leaf remote-node-iso {
            type "jt:sysid";
            description "ISO System-ID of the remote node";
          }
          leaf remote-node-id {
            type "jt:ipv4addr";
            description "Remote address of the link";
          }
        }
        leaf checksum {
          type empty;
          description "Enable checksum for packets on this interface";
        }
        leaf no-unicast-topology {
          type empty;
          description "Do not include this interface in the unicast topology";
        }
        leaf no-ipv4-multicast {
          type empty;
          description "Do not include this interface in the IPv4 multicast topology";
        }
        leaf no-ipv6-unicast {
          type empty;
          description "Do not include this interface in the IPv6 unicast topology";
        }
        leaf no-ipv6-multicast {
          type empty;
          description "Do not include this interface in the IPv6 multicast topology";
        }
        leaf no-adjacency-down-notification {
          type empty;
          description "Do not inform other protocols about adjacency down events";
        }
        container bfd-liveness-detection {
          description "Bidirectional Forwarding Detection options";
          status deprecated;
          uses apply-advanced;
          leaf version {
            type enumeration {
              enum 0 {
                description "BFD version 0 (deprecated)";
              }
              enum 1 {
                description "BFD version 1";
              }
              enum automatic {
                description "Choose BFD version automatically";
              }
            }
            default "automatic";
            description "BFD protocol version number";
          }
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
          leaf minimum-transmit-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            status deprecated;
            units milliseconds;
          }
          leaf minimum-receive-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum receive interval";
            units milliseconds;
          }
          leaf multiplier {
            type uint32 {
              range "1 .. 255";
            }
            default "3";
            description "Detection time multiplier";
          }
          leaf inline-disable {
            type empty;
            description "Disable inline mode for this BFD session";
          }
          leaf pdu-size {
            type uint32 {
              range "24 .. 9000";
            }
            default "24";
            description "BFD transport protocol payload size";
          }
          choice adaptation-choice {
            case case_1 {
              leaf no-adaptation {
                type empty;
                description "Disable adaptation";
              }
            }
          }
          container transmit-interval {
            description "Transmit-interval options";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf threshold {
              type uint32;
              description "High transmit interval triggering a trap";
              units milliseconds;
            }
          }
          container detection-time {
            description "Detection-time options";
            uses apply-advanced;
            leaf threshold {
              type uint32;
              description "High detection-time triggering a trap";
              units milliseconds;
            }
          }
          container authentication {
            description "Authentication options";
            uses apply-advanced;
            leaf key-chain {
              type string;
              description "Key chain name";
            }
            leaf algorithm {
              type enumeration {
                enum simple-password {
                  description "Simple password";
                }
                enum keyed-md5 {
                  description "Keyed message Digest 5";
                }
                enum meticulous-keyed-md5 {
                  description "Meticulous keyed message Digest 5";
                }
                enum keyed-sha-1 {
                  description "Keyed secure hash algorithm (SHA1) ";
                }
                enum meticulous-keyed-sha-1 {
                  description "Meticulous keyed secure hash algorithm (SHA1) ";
                }
              }
              description "Algorithm name";
            }
            leaf loose-check {
              type empty;
              description "Verify authentication only if authentication is negotiated";
            }
          }
        }
        list family {
          description "Address family specific interface attributes";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum inet {
                description "IPv4 family";
              }
              enum inet6 {
                description "IPv6 family";
              }
            }
          }
          uses apply-advanced;
          container bfd-liveness-detection {
            description "Bidirectional Forwarding Detection options";
            uses apply-advanced;
            leaf version {
              type enumeration {
                enum 0 {
                  description "BFD version 0 (deprecated)";
                }
                enum 1 {
                  description "BFD version 1";
                }
                enum automatic {
                  description "Choose BFD version automatically";
                }
              }
              default "automatic";
              description "BFD protocol version number";
            }
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
            leaf minimum-transmit-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              status deprecated;
              units milliseconds;
            }
            leaf minimum-receive-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum receive interval";
              units milliseconds;
            }
            leaf multiplier {
              type uint32 {
                range "1 .. 255";
              }
              default "3";
              description "Detection time multiplier";
            }
            leaf inline-disable {
              type empty;
              description "Disable inline mode for this BFD session";
            }
            leaf pdu-size {
              type uint32 {
                range "24 .. 9000";
              }
              default "24";
              description "BFD transport protocol payload size";
            }
            choice adaptation-choice {
              case case_1 {
                leaf no-adaptation {
                  type empty;
                  description "Disable adaptation";
                }
              }
            }
            container transmit-interval {
              description "Transmit-interval options";
              uses apply-advanced;
              leaf minimum-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum transmit interval";
                units milliseconds;
              }
              leaf threshold {
                type uint32;
                description "High transmit interval triggering a trap";
                units milliseconds;
              }
            }
            container detection-time {
              description "Detection-time options";
              uses apply-advanced;
              leaf threshold {
                type uint32;
                description "High detection-time triggering a trap";
                units milliseconds;
              }
            }
            container authentication {
              description "Authentication options";
              uses apply-advanced;
              leaf key-chain {
                type string;
                description "Key chain name";
              }
              leaf algorithm {
                type enumeration {
                  enum simple-password {
                    description "Simple password";
                  }
                  enum keyed-md5 {
                    description "Keyed message Digest 5";
                  }
                  enum meticulous-keyed-md5 {
                    description "Meticulous keyed message Digest 5";
                  }
                  enum keyed-sha-1 {
                    description "Keyed secure hash algorithm (SHA1) ";
                  }
                  enum meticulous-keyed-sha-1 {
                    description "Meticulous keyed secure hash algorithm (SHA1) ";
                  }
                }
                description "Algorithm name";
              }
              leaf loose-check {
                type empty;
                description "Verify authentication only if authentication is negotiated";
              }
            }
            container echo {
              description "Echo mode parameters";
              uses apply-advanced;
              leaf minimum-interval {
                type uint32 {
                  range "100 .. 255000";
                }
                description "Minimum transmit and receive interval";
                units milliseconds;
              }
            }
            container echo-lite {
              description "Echo-lite more parameters";
              uses apply-advanced;
              leaf minimum-interval {
                type uint32 {
                  range "100 .. 255000";
                }
                description "Minimum transmit and receive interval";
                units milliseconds;
              }
            }
            leaf holddown-interval {
              type uint32 {
                range "0 .. 255000";
              }
              description "Time to hold the session-UP notification to the client";
              units milliseconds;
            }
          }
        }
        leaf strict-bfd {
          type empty;
          description "Enable strict bfd over this interface";
        }
      }
      list bier-sub-domain {
        description "Configuration of bier subdomain";
        key name;
        leaf name {
          type uint8;
          description "Enable bier subdomain id";
        }
      }
      container source-packet-routing {
        description "Enable Source Packet Routing (SPRING)";
        presence "enable source-packet-routing";
        uses apply-advanced;
        container adjacency-segment {
          description "Configure attributes for Adjacency Segments in SPRING";
          uses apply-advanced;
          leaf hold-time {
            type uint32 {
              range "180000 .. 900000";
            }
            description "Duration(ms) for which adjacency segments will be retained after isolating from an interface";
          }
        }
        container udp-tunneling {
          description "Enable SR over UDP feature";
          uses apply-advanced;
          leaf encapsulation {
            type empty;
            description "Enable UDP Tunnel Encapsulation";
          }
          leaf decapsulation {
            type empty;
            description "Enable UDP Tunnel decapsulation";
          }
        }
        container srgb {
          description "Set the SRGB global block in SPRING";
          leaf start-label {
            type uint32;
            description "Start range for SRGB label block";
          }
          leaf index-range {
            type uint32;
            description "Index to the SRGB start label block";
          }
        }
        container node-segment {
          description "Enable support for Node segments in SPRING";
          uses apply-advanced;
          leaf ipv4-index {
            type uint32 {
              range "0 .. 199999";
            }
            description "Set IPv4 Node Segment index";
          }
          leaf ipv6-index {
            type uint32 {
              range "0 .. 199999";
            }
            description "Set IPv6 Node Segment index";
          }
          leaf index-range {
            type uint32 {
              range "32 .. 16385";
            }
            description "Set Range of Node Segment indices allowed";
          }
        }
        leaf-list flex-algorithm {
          type uint32 {
            range "128 .. 255";
          }
          description "Flex-algorithms we would like to participate in";
          max-elements 16;
        }
        leaf use-flex-algorithm-metric-always {
          type empty;
          description "Use flex-algo prefix metric whenever available";
        }
        leaf strict-asla-based-flex-algorithm {
          type empty;
          description "Flex-Algorithm to ignore links not having ASLA sub-TLVs";
        }
        leaf new-capability-subtlv {
          type empty;
          description "Advertise all ranges in single spring capability subtlv";
        }
        leaf explicit-null {
          type empty;
          description "Set E and P bits in all Prefix SID advertisements";
        }
        leaf mapping-server {
          type string;
          description "Mapping server name";
        }
        leaf no-strict-spf {
          type empty;
          description " Disable strict spf algo 1 advertisement";
        }
        leaf no-binding-sid-leaking {
          type empty;
          description " Disable SRMS binding sid leaking";
        }
        leaf ldp-stitching {
          type empty;
          description "Enable SR to LDP stitching";
        }
        container srv6 {
          description "Enable IPv6 Segment Routing (SRv6)";
          presence "enable srv6";
          uses apply-advanced;
          list locator {
            description "SRv6 Locator";
            key name;
            ordered-by user;
            leaf name {
              type string;
              description "Locator name";
            }
            uses apply-advanced;
            leaf anycast {
              type empty;
              description "Set A flag in the Prefix-Attribute sub-TLV";
            }
            list end-sid {
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv6addr";
              }
              uses apply-advanced;
              container flavor {
                description "Configure end-SID flavor";
                presence "enable flavor";
                uses apply-advanced;
                leaf psp {
                  type empty;
                  description "Penultimate segment pop of the SRH";
                }
                leaf usp {
                  type empty;
                  description "Ultimate segment pop of the SRH";
                }
                leaf usd {
                  type empty;
                  description "Ultimate segment decapsulation";
                }
              }
            }
            container dynamic-end-sid {
              description "Allocate end SID dynamically";
              presence "enable dynamic-end-sid";
              uses apply-advanced;
              container flavor {
                description "Configure end-SID flavor";
                presence "enable flavor";
                uses apply-advanced;
                leaf psp {
                  type empty;
                  description "Penultimate segment pop of the SRH";
                }
                leaf usp {
                  type empty;
                  description "Ultimate segment pop of the SRH";
                }
                leaf usd {
                  type empty;
                  description "Ultimate segment decapsulation";
                }
              }
            }
            leaf micro-node-sid {
              type empty;
              description "Program and advertise micro-node-SID";
            }
          }
        }
        container sensor-based-stats {
          description "Configure sensor based stats in SPRING";
          uses apply-advanced;
          container per-interface-per-member-link {
            description "Configure sensor based stats per nexthop";
            leaf ingress {
              type empty;
              description "Enable sensor based stats on ingress interface";
            }
            leaf egress {
              type empty;
              description "Enable sensor based stats on egress interface";
            }
          }
          container per-sid {
            description "Configure sensor based stats per spring route";
            leaf ingress {
              type empty;
              description "Enable sensor based stats for per-sid ingress accounting";
            }
            leaf egress {
              type empty;
              description "Enable sensor based stats for IP-MPLS egress accounting";
            }
          }
          container subscribe {
            description "Enable on-box sensor-based statistics collection";
            presence "enable subscribe";
            uses apply-advanced;
            leaf interval {
              type uint32 {
                range "30 .. 86400";
              }
              description "Statistics collection interval (seconds)";
            }
          }
        }
        container traffic-statistics {
          description "Enable support for traffic statistics in SPRING";
          uses apply-advanced;
          container statistics-granularity {
            description "Granularity for traffic statistics in SPRING";
            uses apply-advanced;
            leaf per-interface {
              type empty;
              description "Interface Based traffic statistics in SPRING";
            }
          }
          leaf congestion-protection {
            type empty;
            description "Enable tactical traffic engineering";
          }
          leaf auto-bandwidth {
            type string;
            description "Auto bandwidth name";
          }
        }
      }
      container srm6 {
        description "Enable SRm6";
        presence "enable srm6";
        uses apply-advanced;
        container sid {
          description "Configure attributes for SID in srm6";
          uses apply-advanced;
          leaf node-sid {
            type uint32 {
              range "1 .. 65535";
            }
            description "Set Node SID Value";
          }
          leaf address {
            type "jt:ipv6addr";
            description "IPv6 address corresponding to SID";
          }
        }
      }
      list level {
        description "Configure global level attributes";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "1 .. 2";
          }
          description "IS-IS level number";
        }
        uses apply-advanced;
        leaf labeled-preference {
          type uint32;
          description "Preference of labeled IS-IS routes";
        }
        leaf srv6-preference {
          type uint32;
          description "Preference of SRV6 IS-IS routes";
        }
        leaf flex-algorithm-preference {
          type uint32;
          description "Preference of flex-algorithm L-ISIS routes";
        }
        container source-packet-routing {
          description "Enable Source Packet Routing (SPRING)";
          presence "enable source-packet-routing";
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable Source Packet Routing on this level";
              }
            }
          }
          leaf srms-preference {
            type uint32 {
              range "0 .. 255";
            }
            description "Set SRMS preference value";
          }
        }
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable IS-IS on this level";
            }
          }
        }
        leaf authentication-key {
          type "jt:unreadable";
          description "Authentication key (password)";
        }
        leaf authentication-type {
          type enumeration {
            enum md5 {
              description "MD5 authentication";
            }
            enum simple {
              description "Simple password authentication";
            }
          }
          description "Authentication type";
        }
        leaf purge-originator {
          type enumeration {
            enum self {
              description "Add POI only for self-originated purge LSPs";
            }
            enum empty {
              description "Add POI for purge LSPs who do not have POI information";
            }
          }
          description "Add Purge Originator information";
        }
        leaf no-hello-authentication {
          type empty;
          description "Disable authentication for hello packets";
        }
        leaf no-csnp-authentication {
          type empty;
          description "Disable authentication for CSN packets";
        }
        leaf no-psnp-authentication {
          type empty;
          description "Disable authentication for PSN packets";
        }
        leaf no-lsp-authentication {
          type empty;
          description "Disable authentication for LSP packets";
        }
        leaf authentication-key-chain {
          type string {
            length "1 .. 128";
          }
          description "Key chain name";
        }
        leaf wide-metrics-only {
          type empty;
          description "Generate wide metrics only";
        }
        leaf preference {
          type uint32;
          description "Preference of internal routes";
        }
        leaf external-preference {
          type uint32;
          description "Preference of external routes";
        }
        leaf prefix-export-limit {
          type uint32 {
            range "0 .. 4294967295";
          }
          description "Maximum number of external prefixes that can be exported";
        }
        leaf max-lsp-size {
          type uint32 {
            range "512 .. 9192";
          }
          description "Maximum size allowed for LSPs";
        }
        container flood-reflector {
          description "Enable flood-reflector";
          uses apply-advanced;
          choice flood-reflector-choice {
            case case_1 {
              container reflector {
                description "Configure this as a flood-reflector";
                uses apply-advanced;
                leaf cluster-id {
                  type uint32 {
                    range "1 .. 4294967295";
                  }
                  description "Cluster-ID";
                }
              }
            }
            case case_2 {
              leaf client {
                type empty;
                description "Configure interface as flood-reflector client";
              }
            }
          }
        }
      }
      list interface-group {
        description "Interface grouping configuration";
        key name;
        leaf name {
          type string;
          description "Interface group name";
        }
        uses apply-advanced;
        list level {
          description "Configure levels on this interface-group";
          key name;
          ordered-by user;
          leaf name {
            type uint32 {
              range "1 .. 2";
            }
            description "IS-IS level number";
          }
          uses apply-advanced;
          container ipv4-adjacency-segment {
            description "Configure ipv4 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
          container ipv6-adjacency-segment {
            description "Configure ipv6 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
          container srm6-adjacency-segment {
            description "Configure srm6 adjacency segment";
            uses apply-advanced;
            container unprotected {
              description "Adjacency SID uneligible for protection";
              leaf sid {
                type uint32 {
                  range "1 .. 65535";
                }
                description "Set Adjacency SID Value";
              }
            }
          }
          list topology {
            description "Topology specific attributes";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum default {
                  description "Default topology";
                }
                enum ipv4-multicast {
                  description "IPv4 multicast topology";
                }
                enum ipv6-unicast {
                  description "IPv6 unicast topology";
                }
                enum ipv6-multicast {
                  description "IPv6 multicast topology";
                }
              }
              description "Topology name";
            }
            uses apply-advanced;
            leaf metric {
              type uint32 {
                range "0 .. 16777215";
              }
              description "Topology metric";
            }
            container bandwidth-based-metrics {
              description "Configure bandwidth based metrics";
              uses apply-advanced;
              list bandwidth {
                description "Bandwidth threshold";
                key name;
                leaf name {
                  type string;
                }
                leaf metric {
                  type uint32 {
                    range "0 .. 16777215";
                  }
                  description "Metric associated with specified bandwidth";
                }
              }
            }
          }
        }
        container link-group-protection {
          description "Configure link group protection";
          uses apply-advanced;
          leaf minimum-bandwidth {
            type string;
            description "Minimum bandwidth to carry traffic";
          }
          leaf revert-bandwidth {
            type string;
            description "Revert bandwidth to carry traffic";
          }
        }
        list interface {
          description "List interfaces for this group";
          key name;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
          leaf weight {
            type uint32 {
              range "1 .. 255";
            }
            description "Interface weight for adjacency set";
          }
        }
      }
      container spf-options {
        description "Configure SPF attributes";
        uses apply-advanced;
        container microloop-avoidance {
          description "Configure microloop avoidance mechanisms";
          uses apply-advanced;
          container post-convergence-path {
            description "Temporarily install post-convergence path for routes potentially affected by microloops";
            presence "enable post-convergence-path";
            uses apply-advanced;
            leaf delay {
              type uint32 {
                range "500 .. 60000";
              }
              description "Time after which temporary post-convergence paths are removed";
              units milliseconds;
            }
            leaf maximum-labels {
              type uint32 {
                range "2 .. 8";
              }
              description "Set maximum number of label supported for Micro-Loop-Avoidance calculations";
            }
            leaf maximum-srv6-sids {
              type uint32 {
                range "2 .. 12";
              }
              description "Set maximum number of SRV6 SIDs supported for Micro-Loop-Avoidance calculations";
            }
          }
        }
        leaf delay {
          type uint32 {
            range "50 .. 1000";
          }
          description "Time to wait before running an SPF";
          units milliseconds;
        }
        leaf holddown {
          type uint32 {
            range "2000 .. 10000";
          }
          description "Time to hold down before running an SPF";
          units milliseconds;
        }
        leaf rapid-runs {
          type uint32 {
            range "1 .. 5";
          }
          description "Number of rapid SPF runs before SPF holddown";
        }
        container multipath {
          description "Configure multipath options";
          uses apply-advanced;
          container weighted {
            description "Weighted multipath options";
            uses apply-advanced;
            leaf one-hop {
              type empty;
              description "Enable load balancing on onehop multipath based on interface bandwidth";
            }
          }
        }
      }
      container traceoptions {
        description "Trace options for IS-IS";
        uses apply-advanced;
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum traffic-statistics {
                description "Trace traffic-statistics related events";
              }
              enum post-convergence-lfa {
                description "Trace post-convergence-lfa related events";
              }
              enum error {
                description "Trace errored packets";
              }
              enum spf {
                description "Trace SPF events";
              }
              enum packets {
                description "Trace IS-IS packets";
              }
              enum hello {
                description "Trace hello packets";
              }
              enum lsp {
                description "Trace link-state packets";
              }
              enum psn {
                description "Trace partial sequence number (PSN) packets";
              }
              enum csn {
                description "Trace complete sequence number (CSN) packets";
              }
              enum layer2-map {
                description "Trace ARP/ND kernel state manipulation";
              }
              enum lsp-generation {
                description "Trace LSP generation";
              }
              enum graceful-restart {
                description "Trace graceful restart events";
              }
              enum ldp-synchronization {
                description "Trace synchronization between IS-IS and LDP";
              }
              enum nsr-synchronization {
                description "Trace NSR synchronization events";
              }
              enum spring {
                description "Trace source packet routing";
              }
              enum prefix-sid {
                description "Trace source packet routing, prefix-sids";
              }
              enum flex-algorithm {
                description "Trace flex-algorithm related events";
              }
              enum adj-sid {
                description "Trace adj-sid related events";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum srv6 {
                description "Trace srv6 related events";
              }
              enum rmopd {
                description "Trace rmopd interactions";
              }
              enum mapping-server {
                description "Trace mapping server related events";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
      }
      container backup-spf-options {
        description "Configure backup SPF attributes";
        uses apply-advanced;
        container remote-backup-calculation {
          description "Calculate Remote LFA backup nexthops";
          presence "enable remote-backup-calculation";
          uses apply-advanced;
        }
        container use-post-convergence-lfa {
          description "Calculate Post Convergence Backup Nexthops";
          presence "enable use-post-convergence-lfa";
          uses apply-advanced;
          leaf maximum-labels {
            type uint32 {
              range "2 .. 8";
            }
            description "Set maximum number of label supported for post convergence path calculations";
          }
          leaf maximum-srv6-sids {
            type uint32 {
              range "2 .. 12";
            }
            description "Set maximum number of SRV6 SIDs for post convergence path calculations";
          }
          leaf maximum-backup-paths {
            type uint32 {
              range "1 .. 8";
            }
            description "Set maximum equal cost backup post convergence paths";
          }
        }
        container use-source-packet-routing {
          description "Use SPRING routed paths for protection";
          presence "enable use-source-packet-routing";
          uses apply-advanced;
        }
        leaf per-prefix-calculation {
          type empty;
          description "Calculate backup nexthops for non-best prefix originators";
        }
        leaf node-link-degradation {
          type empty;
          description "Degrade to link protection when nodelink protection not available";
        }
      }
      list context-identifier {
        description "Configuration for advertisement of a context-identifier ";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipprefix";
          description "Context identifier range";
        }
        uses apply-advanced;
        list level {
          description "Configure global level attributes";
          key name;
          ordered-by user;
          leaf name {
            type uint32 {
              range "1 .. 2";
            }
            description "IS-IS level number";
          }
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable advertisements to this level";
              }
            }
          }
        }
      }
      container traffic-engineering {
        description "Configure traffic engineering attributes";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable traffic engineering";
            }
          }
        }
        leaf l3-unicast-topology {
          type empty;
          description "Download IGP topology into TED";
        }
        leaf ipv6 {
          type empty;
          description "Enable TEDv6";
        }
        leaf credibility-protocol-preference {
          type empty;
          description "Follow IGP protocol preference for TED protocol credibility";
        }
        leaf ipv4-multicast-rpf-routes {
          type empty;
          description "Install IPv4 routes for multicast RPF checks into inet.2";
          status deprecated;
        }
        leaf ignore-lsp-metrics {
          type empty;
          description "Ignore label-switched path metrics when doing shortcuts";
        }
        container tunnel-source-protocol {
          description "Protocols from which to pick label-switched paths";
          uses apply-advanced;
          container rsvp {
            description "Pick label-switched paths from rsvp";
            presence "enable rsvp";
            uses apply-advanced;
            leaf preference {
              type uint32 {
                range "1 .. 255";
              }
              description "Preference for label-switched paths from this protocol";
            }
          }
          container spring-te {
            description "Pick label-switched paths from spring-te";
            presence "enable spring-te";
            uses apply-advanced;
            leaf preference {
              type uint32 {
                range "1 .. 255";
              }
              description "Preference for label-switched paths from this protocol";
            }
          }
        }
        list family {
          description "Address family specific traffic-engineering attributes";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum inet {
                description "IPv4 family";
              }
              enum inet6 {
                description "IPv6 family";
              }
              enum inet-mpls {
                description "IPv4-MPLS family";
              }
              enum inet6-mpls {
                description "IPv6-MPLS family";
              }
            }
          }
          uses apply-advanced;
          container shortcuts {
            description "Use label-switched paths as next hops, if possible";
            presence "enable shortcuts";
            uses apply-advanced;
            leaf multicast-rpf-routes {
              type empty;
              description "Install routes for multicast RPF checks into multicast RIB";
            }
            leaf-list import {
              type "jt:policy-algebra";
              description "Import policy for shortcut";
              ordered-by user;
            }
          }
        }
        container shortcuts {
          description "Use label-switched paths as next hops, if possible";
          presence "enable shortcuts";
          status deprecated;
          uses apply-advanced;
          leaf ignore-lsp-metrics {
            type empty;
            description "Ignore label-switched path metrics when doing shortcuts";
            status deprecated;
          }
        }
        container multipath {
          description "Configure label-switched-path multipath behavior";
          uses apply-advanced;
          leaf lsp-equal-cost {
            type empty;
            description "Include equal cost label-switched-paths";
          }
        }
        container advertisement {
          description "Configure traffic engineering attribute advertisements";
          uses apply-advanced;
          leaf always {
            type empty;
            description "Advertise applicable legacy TE attributes always";
          }
          container application-specific {
            description "Advertise application-specific TE attributes";
            uses apply-advanced;
            container all-applications {
              description "Advertise common application-specific link attributes";
              presence "enable all-applications";
              uses apply-advanced;
              leaf legacy {
                type empty;
                description "Use legacy TE attributes for this application";
              }
            }
          }
        }
      }
      list label-switched-path {
        description "Configuration for advertisement of a label-switched path";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of label-switched path to be advertised";
        }
        uses apply-advanced;
        list level {
          description "Configure global level attributes";
          key name;
          ordered-by user;
          leaf name {
            type uint32 {
              range "1 .. 2";
            }
            description "IS-IS level number";
          }
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable advertisements to this level";
              }
            }
          }
          leaf metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "SPF metric for this level";
          }
        }
      }
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable IS-IS";
          }
        }
      }
      leaf-list export {
        type "jt:policy-algebra";
        description "Export policy";
        ordered-by user;
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
      leaf reference-bandwidth {
        type string;
        description "Bandwidth for calculating metric defaults";
      }
      choice layer2-map-choice {
        leaf layer2-map {
          type empty;
          description "Kernel ARP/ND creation for nexthops";
        }
        leaf no-layer2-map {
          type empty;
          description "Don't kernel ARP/ND creation for nexthops";
        }
      }
      leaf job-stats {
        type empty;
        description "Collect job statistics";
      }
      leaf lsp-lifetime {
        type uint32 {
          range "350 .. 65535";
        }
        description "Lifetime of LSPs";
        units seconds;
      }
      leaf max-lsp-size {
        type uint32 {
          range "512 .. 9192";
        }
        default "1492";
        description "Maximum size allowed for LSPs";
      }
      leaf max-hello-size {
        type uint32 {
          range "512 .. 16000";
        }
        default "1492";
        description "Maximum size allowed for ISIS Hello PDUs";
      }
      leaf max-snp-size {
        type uint32 {
          range "512 .. 1400";
        }
        default "1400";
        description "Maximum size allowed for Sequence Number (Complete/Partial) PDUs";
      }
      leaf spf-delay {
        type uint32 {
          range "50 .. 120000";
        }
        description "Time to wait before running an SPF";
        status deprecated;
        units milliseconds;
      }
      leaf authentication-key {
        type "jt:unreadable";
        description "Authentication key (password)";
        status deprecated;
      }
      leaf authentication-type {
        type enumeration {
          enum md5 {
            description "MD5 authentication";
            status deprecated;
          }
          enum simple {
            description "Simple password authentication";
            status deprecated;
          }
        }
        description "Authentication type";
        status deprecated;
      }
      leaf loose-authentication-check {
        type empty;
        description "Verify authentication only if PDU has authentication TLV";
      }
      leaf max-areas {
        type uint32 {
          range "3 .. 64";
        }
        default "3";
        description "Maximum number of advertised Areas";
      }
      leaf no-authentication-check {
        type empty;
        description "Disable authentication checking";
      }
      leaf no-ipv4-routing {
        type empty;
        description "Disable IPv4 routing";
      }
      leaf no-ipv6-routing {
        type empty;
        description "Disable IPv6 routing";
      }
      leaf clns-routing {
        type empty;
        description "Enable CLNS routing";
      }
      leaf clns-updown-compatibility {
        type empty;
        description "Set the Up/Down Bit in place of the I/E bit in CLNS TLVs";
      }
      leaf no-adjacency-holddown {
        type empty;
        description "Disable adjacency hold down";
      }
      leaf multicast-topology {
        type empty;
        description "Enable multicast topology";
        status deprecated;
      }
      leaf ignore-attached-bit {
        type empty;
        description "Ignore the attached bit in Level 1 LSPs";
      }
      container rib-group {
        description "Routing table group for importing IS-IS routes";
        uses rib_group_type;
      }
      container no-external-export {
        description "No external export";
        uses apply-advanced;
        list protocol {
          description "Protocol parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum bgp {
                description "BGP";
              }
              enum ospf {
                description "OSPF";
              }
              enum isis {
                description "ISIS";
              }
              enum l-isis {
                description "Labelled ISIS";
              }
              enum l-ospf {
                description "Labelled OSPF";
              }
              enum static {
                description "Static";
              }
            }
          }
        }
      }
      container strict-dual-isis {
        description "Enable dual isis if spf computation is required for both ipv4 and ipv6 family";
        presence "enable strict-dual-isis";
        uses apply-advanced;
        leaf holdown {
          type uint32 {
            range "1 .. 65535";
          }
          default "12";
          description "Time to wait for ipv4 and ipv6 connectivity";
          status deprecated;
        }
        leaf holddown {
          type uint32 {
            range "1 .. 65535";
          }
          default "12";
          description "Time to wait for ipv4 and ipv6 connectivity";
        }
      }
      container topologies {
        description "Enable topologies";
        uses apply-advanced;
        leaf ipv4-multicast {
          type empty;
          description "Enable IPv4-multicast topology";
        }
        leaf ipv6-unicast {
          type empty;
          description "Enable IPv6-unicast topology";
        }
        leaf ipv6-multicast {
          type empty;
          description "Enable IPv6-multicast topology";
        }
      }
      container overload {
        description "Set the overload bit (no transit traffic)";
        presence "enable overload";
        uses apply-advanced;
        leaf timeout {
          type uint32 {
            range "60 .. 3600";
          }
          description "Time after which overload bit is reset";
          units seconds;
        }
        leaf advertise-high-metrics {
          type empty;
          description "Advertise high metrics instead of setting the overload bit";
        }
        leaf allow-route-leaking {
          type empty;
          description "Allow routes to be leaked when overload is configured";
        }
        leaf internal-prefixes {
          type empty;
          description "Allow internal prefixes to be advertised with high metric";
        }
        leaf external-prefixes {
          type empty;
          description "Allow external prefixes to be advertised with high metric";
        }
      }
      container dynamic-overload {
        description "Set the dynamic overload options";
        uses apply-advanced;
        leaf no-overload-on-prefix-export-limit {
          type empty;
          description "Do not set overload bit when prefix export limit is reached";
        }
        leaf auto-recovery {
          type empty;
          description "Enable Auto recovery to recover from dynamic overload state";
        }
      }
      container graceful-restart {
        description "IS-IS graceful restart options";
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable graceful restart";
            }
          }
        }
        leaf helper-disable {
          type empty;
          description "Disable graceful restart helper capability";
        }
        leaf restart-duration {
          type uint32 {
            range "30 .. 300";
          }
          description "Maximum time for graceful restart to finish";
          units seconds;
        }
      }
      list net {
        description "Assign Network Entity Title (NET) configuration";
        key name;
        leaf name {
          type "jt:isoaddr";
          description "Assign Network Entity Title (NET) address to an IS-IS router";
        }
      }
    }
    container l2iw {
      description "Configuration for Layer 2 interworking";
      presence "enable l2iw";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for Layer 2 circuits";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum error {
                description "Trace errors";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
    }
    container l2circuit {
      description "Configuration for Layer 2 circuits over MPLS";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for Layer 2 circuits";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum error {
                description "Trace errors";
              }
              enum topology {
                description "Trace Layer 2 circuit topology changes";
              }
              enum fec {
                description "Trace Layer 2 circuit VC FEC advertisements";
              }
              enum connections {
                description "Trace Layer 2 circuit connections";
              }
              enum oam {
                description "Trace Layer 2 circuit OAM messages";
              }
              enum egress-protection {
                description "Trace Layer 2 circuit egress protection messages";
              }
              enum auto-sensing {
                description "Trace Layer 2 circuit PW auto-sensing";
              }
              enum sdb {
                description "Trace SDB";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      list neighbor {
        description "List of Layer 2 circuits to this neighbor";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4addr";
          description "Neighbor ID";
        }
        uses apply-advanced;
        list interface {
          description "Interface forming the Layer 2 circuit";
          key name;
          ordered-by user;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
          container static {
            description "Configuration of static Pseudowire";
            presence "enable static";
            uses apply-advanced;
            leaf incoming-label {
              type uint32 {
                range "16 .. 1048575";
              }
              description "Layer 2 circuit incoming static label";
            }
            leaf outgoing-label {
              type uint32 {
                range "16 .. 1048575";
              }
              description "Layer 2 circuit outgoing static label";
            }
            leaf send-oam {
              type empty;
              description "Turn on sending of l2ckt ping";
            }
          }
          leaf psn-tunnel-endpoint {
            type "jt:ipv4addr";
            description "Endpoint of the transport tunnel on the remote PE";
          }
          leaf protect-interface {
            type "jt:interface-name";
            description "Name of protect interface";
          }
          leaf virtual-circuit-id {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "Identifier for this Layer 2 circuit";
          }
          leaf description {
            type string;
            description "Text description of Layer 2 circuit";
          }
          choice control-word-choice {
            leaf control-word {
              type empty;
              description "Add control word to the Layer 2 encapsulation";
            }
            leaf no-control-word {
              type empty;
              description "Don't add control word to the Layer 2 encapsulation";
            }
          }
          leaf flow-label-transmit {
            type empty;
            description "Advertise capability to push Flow Label in transmit direction to remote PE";
          }
          leaf flow-label-transmit-static {
            type empty;
            description "Push Flow Label on PW packets sent to remote PE";
          }
          leaf flow-label-receive {
            type empty;
            description "Advertise capability to pop Flow Label in receive direction to remote PE";
          }
          leaf flow-label-receive-static {
            type empty;
            description "Pop Flow Label from PW packets received from remote PE";
          }
          leaf community {
            type string;
            description "Community associated with this Layer 2 circuit";
          }
          leaf mtu {
            type uint32 {
              range "512 .. 65535";
            }
            description "MTU to be advertised for this Layer 2 circuit";
          }
          leaf encapsulation-type {
            type enumeration {
              enum atm-aal5 {
                description "ATM AAL/5 encapsulation";
              }
              enum atm-cell {
                description "ATM port promiscuous mode cell encapsulation";
              }
              enum atm-cell-port-mode {
                description "ATM port promiscuous mode cell encapsulation";
              }
              enum atm-cell-vp-mode {
                description "ATM VP promiscuous mode cell encapsulation";
              }
              enum atm-cell-vc-mode {
                description "ATM non-promiscuous cell encapsulation";
              }
              enum frame-relay {
                description "Frame Relay encapsulation";
              }
              enum ppp {
                description "PPP encapsulation";
              }
              enum cisco-hdlc {
                description "Cisco-compatible HDLC encapsulation";
              }
              enum ethernet-vlan {
                description "Ethernet VLAN encapsulation";
              }
              enum ethernet {
                description "Ethernet encapsulation";
              }
              enum interworking {
                description "Layer 2.5 interworking VPN";
              }
              enum frame-relay-port-mode {
                description "Frame Relay port mode encapsulation";
              }
              enum satop-t1 {
                description "SATOP-T1 based Layer 2 VPN";
              }
              enum satop-e1 {
                description "SATOP-E1 based Layer 2 VPN";
              }
              enum satop-t3 {
                description "SATOP-T3 based Layer 2 VPN";
              }
              enum satop-e3 {
                description "SATOP-E3 based Layer 2 VPN";
              }
              enum cesop {
                description "CESOP based Layer 2 VPN";
              }
            }
            description "Encapsulation type for VPN";
          }
          leaf ignore-encapsulation-mismatch {
            type empty;
            description "Allow different encapsulation types on local and remote end";
          }
          leaf ignore-mtu-mismatch {
            type empty;
            description "Allow different MTUs on interfaces";
          }
          leaf no-revert {
            type empty;
            description "Don't revert to primary-interface";
          }
          container bandwidth {
            description "Bandwidth to reserve (bps)";
            uses bandwidth-type;
          }
          leaf send-ip-addr-list-tlv {
            type empty;
            description "Send IP ADDR LIST TLV to remote side";
          }
          container pseudowire-status-tlv {
            description "Send pseudowire status TLV";
            presence "enable pseudowire-status-tlv";
            uses apply-advanced;
            leaf hot-standby-vc-on {
              type empty;
              description "Activate pseudowire upon arrival of 'hot-standby' status TLV message";
            }
          }
          leaf switchover-delay {
            type uint32 {
              range "0 .. 180000";
            }
            default "10000";
            description "Layer 2 circuit switchover delay";
            units milliseconds;
          }
          container revert-time {
            description "Enable pseudowire redundancy reversion";
            presence "enable revert-time";
            leaf delay {
              type uint32 {
                range "0 .. 3600";
              }
              description "Reversion timer (seconds)";
              units seconds;
            }
            leaf maximum {
              type uint32 {
                range "0 .. 7200";
              }
              description "Maximum reversion interval to add over revert-time delay";
              units seconds;
            }
          }
          leaf connection-protection {
            type empty;
            description "End-2-end protection via OAM failure detection";
          }
          list backup-neighbor {
            description "Configuration of redundant l2circuit";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv4addr";
              description "Neighbor ID";
            }
            uses apply-advanced;
            container static {
              description "Configuration of static Pseudowire";
              presence "enable static";
              uses apply-advanced;
              leaf incoming-label {
                type uint32 {
                  range "16 .. 1048575";
                }
                description "Layer 2 circuit incoming static label";
              }
              leaf outgoing-label {
                type uint32 {
                  range "16 .. 1048575";
                }
                description "Layer 2 circuit outgoing static label";
              }
            }
            leaf virtual-circuit-id {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Identifier for this Layer 2 circuit";
            }
            leaf community {
              type string;
              description "Community associated with this Layer 2 circuit";
            }
            leaf psn-tunnel-endpoint {
              type "jt:ipv4addr";
              description "Endpoint of the transport tunnel on the remote PE";
            }
            leaf standby {
              type empty;
              description "Keep backup pseudowire in continuous standby";
            }
            leaf hot-standby {
              type empty;
              description "Keep backup pseudowire in continuous standby mode and ready for traffic forwarding";
            }
          }
          container oam {
            description "OAM Configuration for Layer 2 circuit";
            uses apply-advanced;
            leaf ping-interval {
              type uint16 {
                range "30 .. 3600";
              }
              default "60";
              description "Time interval between ping messages";
              units seconds;
            }
            leaf ping-multiplier {
              type uint8 {
                range "1 .. 5";
              }
              description "Number of ping reply missed before declaring BFD down";
            }
            container bfd-liveness-detection {
              description "Bidirectional Forwarding Detection (BFD) options";
              uses apply-advanced;
              leaf version {
                type enumeration {
                  enum 0 {
                    description "BFD version 0 (deprecated)";
                  }
                  enum 1 {
                    description "BFD version 1";
                  }
                  enum automatic {
                    description "Choose BFD version automatically";
                  }
                }
                default "automatic";
                description "BFD protocol version number";
              }
              leaf minimum-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum transmit and receive interval";
                units milliseconds;
              }
              leaf minimum-transmit-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum transmit interval";
                status deprecated;
                units milliseconds;
              }
              leaf minimum-receive-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum receive interval";
                units milliseconds;
              }
              leaf multiplier {
                type uint32 {
                  range "1 .. 255";
                }
                default "3";
                description "Detection time multiplier";
              }
              leaf inline-disable {
                type empty;
                description "Disable inline mode for this BFD session";
              }
              leaf pdu-size {
                type uint32 {
                  range "24 .. 9000";
                }
                default "24";
                description "BFD transport protocol payload size";
              }
              choice adaptation-choice {
                case case_1 {
                  leaf no-adaptation {
                    type empty;
                    description "Disable adaptation";
                  }
                }
              }
              container transmit-interval {
                description "Transmit-interval options";
                uses apply-advanced;
                leaf minimum-interval {
                  type uint32 {
                    range "1 .. 255000";
                  }
                  description "Minimum transmit interval";
                  units milliseconds;
                }
                leaf threshold {
                  type uint32;
                  description "High transmit interval triggering a trap";
                  units milliseconds;
                }
              }
              container detection-time {
                description "Detection-time options";
                uses apply-advanced;
                leaf threshold {
                  type uint32;
                  description "High detection-time triggering a trap";
                  units milliseconds;
                }
              }
            }
          }
          container egress-protection {
            description "Egress protection for Layer 2 circuit";
            uses apply-advanced;
            choice protection-type {
              case case_1 {
                leaf protector-interface {
                  type "jt:interface-name";
                  description "Name of the protector interface for local protection";
                }
              }
              case case_2 {
                container protector-pe {
                  description "Address of the protector PE";
                  leaf address {
                    type "jt:ipv4addr";
                    description "Address of the protector PE";
                  }
                  leaf context-identifier {
                    type "jt:ipv4addr";
                    description "Identifier of the context used for this protection";
                  }
                  leaf lsp {
                    type string;
                    description "Name of the label-switched path used for the protection";
                  }
                }
              }
            }
            container protected-l2circuit {
              description "Primary Layer 2 circuit to be protected";
              leaf l2circuit-name {
                type string;
                description "Name of the protected Layer 2 circuit";
              }
              leaf ingress-pe {
                type "jt:ipv4addr";
                description "Ingress PE address of the protected Layer 2 circuit";
              }
              leaf egress-pe {
                type "jt:ipv4addr";
                description "Egress PE address of the protected Layer 2 circuit";
              }
              leaf virtual-circuit-id {
                type uint32 {
                  range "1 .. 4294967295";
                }
                description "Identifier of the protected Layer 2 circuit";
              }
            }
          }
        }
      }
      container local-switching {
        description "Configuration of Layer 2 circuits local switching";
        uses apply-advanced;
        list interface {
          description "Interface forming the local Layer 2 circuit";
          key name;
          ordered-by user;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
          leaf no-revert {
            type empty;
            description "Do not revert to primary-interface";
          }
          leaf protect-interface {
            type "jt:interface-name";
            description "Name of protect interface";
          }
          leaf connection-protection {
            type empty;
            description "End-2-end protection via OAM failure detection";
          }
          list neighbor {
            description "Configuration of Layer 2 circuit";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv4addr";
              description "Neighbor ID";
            }
            uses apply-advanced;
            leaf virtual-circuit-id {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Identifier for this Layer 2 circuit";
            }
            leaf community {
              type string;
              description "Community associated with this Layer 2 circuit";
            }
            leaf psn-tunnel-endpoint {
              type "jt:ipv4addr";
              description "Endpoint of the transport tunnel on the neighbor PE";
            }
            leaf mtu {
              type uint32 {
                range "512 .. 65535";
              }
              description "MTU to be advertised for this Layer 2 circuit";
            }
          }
          list backup-neighbor {
            description "Configuration of redundant l2circuit";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv4addr";
              description "Backup Neighbor ID";
            }
            uses apply-advanced;
            leaf virtual-circuit-id {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Identifier for this Layer 2 circuit";
            }
            leaf psn-tunnel-endpoint {
              type "jt:ipv4addr";
              description "Endpoint of the transport tunnel on the backup neighbor PE";
            }
            leaf community {
              type string;
              description "Community associated with this Layer 2 circuit";
            }
            leaf mtu {
              type uint32 {
                range "512 .. 65535";
              }
              description "MTU to be advertised for this Layer 2 circuit";
            }
          }
          container end-interface {
            description "Interface name of the other end point";
            uses apply-advanced;
            leaf interface {
              type "jt:interface-name";
              description "Interface name";
            }
            leaf no-revert {
              type empty;
              description "Do not revert to primary-interface";
            }
            leaf protect-interface {
              type "jt:interface-name";
              description "Name of protect interface";
            }
            leaf backup-interface {
              type "jt:interface-name";
              description "Name of backup interface";
            }
          }
          leaf description {
            type string;
            description "Text description of Layer 2 circuit";
          }
          leaf encapsulation-type {
            type enumeration {
              enum atm-aal5 {
                description "ATM AAL/5 encapsulation";
              }
              enum atm-cell {
                description "ATM port promiscuous mode cell encapsulation";
              }
              enum atm-cell-port-mode {
                description "ATM port promiscuous mode cell encapsulation";
              }
              enum atm-cell-vp-mode {
                description "ATM VP promiscuous mode cell encapsulation";
              }
              enum atm-cell-vc-mode {
                description "ATM non-promiscuous cell encapsulation";
              }
              enum frame-relay {
                description "Frame Relay encapsulation";
              }
              enum ppp {
                description "PPP encapsulation";
              }
              enum cisco-hdlc {
                description "Cisco-compatible HDLC encapsulation";
              }
              enum ethernet-vlan {
                description "Ethernet VLAN encapsulation";
              }
              enum ethernet {
                description "Ethernet encapsulation";
              }
              enum interworking {
                description "Layer 2.5 interworking VPN";
              }
              enum frame-relay-port-mode {
                description "Frame Relay port mode encapsulation";
              }
              enum satop-t1 {
                description "SATOP-T1 based Layer 2 VPN";
              }
              enum satop-e1 {
                description "SATOP-E1 based Layer 2 VPN";
              }
              enum satop-t3 {
                description "SATOP-T3 based Layer 2 VPN";
              }
              enum satop-e3 {
                description "SATOP-E3 based Layer 2 VPN";
              }
              enum cesop {
                description "CESOP based Layer 2 VPN";
              }
            }
            description "Encapsulation type for VPN";
          }
          leaf ignore-encapsulation-mismatch {
            type empty;
            description "Allow different encapsulation types on local and remote end";
          }
          leaf ignore-mtu-mismatch {
            type empty;
            description "Allow different MTUs on interfaces";
          }
        }
      }
      container auto-sensing {
        description "Configuration of PW auto-sensing";
        presence "enable auto-sensing";
        uses apply-advanced;
        leaf password {
          type "jt:unreadable";
          description "Password for authentication with Radius server; 1 to 15 characters long";
        }
      }
      container resolution {
        description "Configuration of PW nexthop resolution";
        uses apply-advanced;
        leaf preserve-nexthop-hierarchy {
          type empty;
          description "Install expanded hierarchy";
        }
      }
    }
    container l2vpn {
      description "Configuration for Layer 2 VPN circuits over MPLS";
      uses apply-advanced;
      container resolution {
        description "Configuration of PW nexthop resolution";
        uses apply-advanced;
        leaf preserve-nexthop-hierarchy {
          type empty;
          description "Install expanded hierarchy";
        }
      }
    }
    container vpls {
      description "Configuration for global vpls module";
      uses apply-advanced;
      container static-vpls {
        description "Enables static vpls configuration using no-tunnel-services";
        uses apply-advanced;
        leaf no-tunnel-services {
          type empty;
          description "Enables static partitioning of vpls labels";
        }
      }
    }
    container ldp {
      description "LDP options";
      uses juniper-protocols-ldp;
    }
    container link-management {
      description "LMP options";
      uses juniper-protocols-lmp;
    }
    container mld {
      description "MLD options";
      presence "enable mld";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for MLD";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum packets {
                description "Trace all MLD packets";
              }
              enum query {
                description "Trace MLD membership query messages";
              }
              enum report {
                description "Trace membership report messages";
              }
              enum leave {
                description "Trace leave group messages (MLDv2 only)";
              }
              enum mtrace {
                description "Trace mtrace packets";
              }
              enum group {
                description "Trace group operations";
              }
              enum client-notification {
                description "Trace notifications";
              }
              enum host-notification {
                description "Trace host notifications";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      leaf query-interval {
        type uint32 {
          range "1 .. 1024";
        }
        description "When to send host query messages";
        units seconds;
      }
      leaf query-response-interval {
        type string;
        description "How long to wait for a host query response";
        units seconds;
      }
      leaf query-last-member-interval {
        type string;
        description "When to send group query messages";
        units seconds;
      }
      leaf robust-count {
        type uint32 {
          range "2 .. 10";
        }
        description "Expected packet loss on a subnet";
      }
      leaf maximum-transmit-rate {
        type uint32 {
          range "1 .. 10000";
        }
        description "Maximum transmission rate (packets per second)";
      }
      leaf accounting {
        type empty;
        description "Enable join and leave event notification";
      }
      list interface {
        description "Interface options for MLD";
        key name;
        ordered-by user;
        leaf name {
          type string;
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable MLD on this interface";
            }
          }
        }
        leaf version {
          type uint8 {
            range "1 .. 2";
          }
          description "Set mld version number on this interface";
        }
        container static {
          description "Static group or source membership";
          uses apply-advanced;
          list group {
            description "IP multicast group address";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv6addr";
              description "IP multicast group address";
            }
            uses apply-advanced;
            leaf group-increment {
              type "jt:ipv6addr";
              description "Mask for the incrementing group IP address";
            }
            leaf group-count {
              type uint32 {
                range "1 .. 512";
              }
              description "Number of groups";
            }
            leaf exclude {
              type empty;
              description "Exclude sources";
            }
            list source {
              description "IP multicast source address";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv6addr";
                description "Source address of IP multicast data";
              }
              uses apply-advanced;
              leaf source-increment {
                type "jt:ipv6addr";
                description "Mask for the incrementing source IP address";
              }
              leaf source-count {
                type uint32 {
                  range "1 .. 1024";
                }
                description "Number of sources";
              }
            }
          }
        }
        leaf ssm-map {
          type string;
          description "Map for ssm translation of mld v1 messages";
        }
        leaf-list ssm-map-policy {
          type "jt:policy-algebra";
          description "SSM map policy name";
          ordered-by user;
        }
        leaf immediate-leave {
          type empty;
          description "Group removed immediately, last membership query not sent";
        }
        leaf-list group-policy {
          type "jt:policy-algebra";
          description "Group filter applied to incoming mld report messages";
          ordered-by user;
        }
        leaf group-limit {
          type uint16 {
            range "1 .. 32767";
          }
          description "Maximum number of (source,group) per interface";
        }
        leaf group-threshold {
          type uint16 {
            range "1 .. 100";
          }
          description "Percentage of group-limit at which to start generating warnings";
        }
        leaf log-interval {
          type uint32 {
            range "6 .. 32767";
          }
          description "Time between consecutive log messages";
        }
        choice accounting-choice {
          leaf accounting {
            type empty;
            description "Enable join and leave event notification";
          }
          leaf no-accounting {
            type empty;
            description "Don't enable join and leave event notification";
          }
        }
        container passive {
          description "Suppress sending and receiving mld messages";
          presence "enable passive";
          leaf allow-receive {
            type empty;
            description "Allow receiving mld messages";
          }
          leaf send-general-query {
            type empty;
            description "Send mld general query messages";
          }
          leaf send-group-query {
            type empty;
            description "Send mld group query messages";
          }
        }
        leaf-list oif-map {
          type "jt:policy-algebra";
          description "Output interface map";
          ordered-by user;
        }
        leaf distributed {
          type empty;
          description "Distributed MLD interface";
        }
      }
    }
    container mpls {
      description "Multiprotocol Label Switching options";
      uses juniper-protocols-mpls;
    }
    container msdp {
      description "MSDP configuration";
      uses juniper-protocols-msdp;
    }
    container mvpn {
      description "BGP-MVPN configuration";
      uses juniper-protocols-mvpn;
    }
    container ospf {
      description "OSPF configuration";
      uses juniper-protocols-ospf;
    }
    container ospf3 {
      description "OSPFv3 configuration";
      uses juniper-protocols-ospf3;
    }
    container pim {
      description "PIM configuration";
      uses juniper-protocols-pim;
    }
    container ripng {
      description "RIPng options";
      uses juniper-protocols-ripng;
    }
    container rip {
      description "RIP options";
      uses juniper-protocols-rip;
    }
    container rsvp {
      description "RSVP options";
      uses juniper-protocols-rsvp;
    }
    container sap {
      description "Session Advertisement Protocol options";
      presence "enable sap";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable SAP";
          }
        }
      }
      list listen {
        description "Address for SAP and SDP to listen on";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4addr";
          description "IP address";
        }
        leaf port {
          type uint16;
          description "Port to listen for session advertisements";
        }
      }
    }
    container source-packet-routing {
      description "Enable source packet routing (SPRING)";
      presence "enable source-packet-routing";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for soure-packet-routing";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum controller {
                description "Trace controller-related activity";
              }
              enum state {
                description "Trace LSP state-related activity";
              }
              enum route {
                description "Trace route-related activity";
              }
              enum general {
                description "Trace general activity";
              }
              enum interface {
                description "Trace interface-related activity";
              }
              enum dtm {
                description "Trace dtm-related activity";
              }
              enum bfd {
                description "Trace bfd-related activity";
              }
              enum translation {
                description "Trace translation-related activity";
              }
              enum srv6-te {
                description "Trace srv6-te activity";
              }
              enum telemetry-statistics {
                description "Trace telemetry statistics related activity";
              }
              enum compute {
                description "Trace compute profile and computed lsp related activity";
              }
              enum nsr-replication {
                description "Trace NSR replication activity";
              }
              enum traffic-engineering-database {
                description "Trace spring-te to ted export related activity";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
        }
      }
      list lsp-external-controller {
        description "External path computing entity";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of the external path computing entity";
        }
        uses apply-advanced;
      }
      leaf preference {
        type uint32;
        description "Route preference for SPRING-TE routes";
      }
      leaf sr-preference-override {
        type uint32 {
          range "0 .. 4294967295";
        }
        description "SR-preference override for static SR-policies.Higher value is more preferred";
      }
      leaf sr-preference {
        type uint32 {
          range "0 .. 4294967295";
        }
        description "SR-preference for static SR-policies.Higher value is more preferred";
      }
      leaf maximum-segment-list-depth {
        type uint32 {
          range "1 .. 16";
        }
        description "Maximum segment list depth for SR-TE policies";
      }
      leaf maximum-srv6-te-segment-list-depth {
        type uint32 {
          range "1 .. 6";
        }
        description "Maximum segment list depth for SRv6-TE policies";
      }
      leaf no-chained-composite-next-hop {
        type empty;
        description "Do not use chained composite next hops for SRTE routes";
      }
      leaf tunnel-tracking {
        type empty;
        description "Track route status for first hop label based tunnels";
      }
      list segment-list {
        description "Explicit path for SR-TE segments";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of SR-TE segment-list";
        }
        uses apply-advanced;
        leaf inherit-label-nexthops {
          type empty;
          description "Inherit label nexthops for first hop in this segment list";
        }
        choice translation-type {
          case case_1 {
            container auto-translate {
              description "Enable auto translation from IP address to labels";
              presence "enable auto-translate";
              uses apply-advanced;
              choice protection-choice {
                case case_1 {
                  container protected {
                    description "Choose protected labels if available";
                    presence "enable protected";
                    uses apply-advanced;
                    leaf mandatory {
                      type empty;
                      description "Mandatorily choose protected labels";
                    }
                  }
                }
                case case_2 {
                  container unprotected {
                    description "Choose unprotected labels if available";
                    presence "enable unprotected";
                    uses apply-advanced;
                    leaf mandatory {
                      type empty;
                      description "Mandatorily choose unprotected labels";
                    }
                  }
                }
              }
              leaf skip-tail-end-validation {
                type empty;
                description "Skip validation of end hops";
              }
            }
          }
          case case_2 {
            container dynamic {
              description "Enable dynamic last hop computation";
              presence "enable dynamic";
              uses apply-advanced;
              choice protection-choice {
                case case_1 {
                  container protected {
                    description "Choose protected labels if available";
                    presence "enable protected";
                    uses apply-advanced;
                    leaf mandatory {
                      type empty;
                      description "Mandatorily choose protected labels";
                    }
                  }
                }
                case case_2 {
                  container unprotected {
                    description "Choose unprotected labels if available";
                    presence "enable unprotected";
                    uses apply-advanced;
                    leaf mandatory {
                      type empty;
                      description "Mandatorily choose unprotected labels";
                    }
                  }
                }
              }
            }
          }
        }
        leaf compute {
          type empty;
          description "Segment list used for specifying explicit path for computed paths";
        }
        leaf srv6 {
          type empty;
          description "Segment list used for SRv6";
        }
        list hop-list {
          key name;
          max-elements 36;
          ordered-by user;
          leaf name {
            type string {
              length "1 .. 64";
            }
            description "Next hop in segment-list";
          }
          uses apply-advanced;
          leaf label {
            type uint32 {
              range "0 .. 1048575";
            }
            description "Next label in SR-TE segment-list";
          }
          leaf ip-address {
            type "jt:ipaddr";
            description "IP address of the hop";
          }
          leaf srv6-sid {
            type "jt:ipaddr";
            description "Sid for SRv6 segment-list in form of ipv6 address";
          }
          container micro-srv6-sid {
            description "Configure a micro srv6 sid";
            uses apply-advanced;
            leaf micro-sid {
              type "jt:ipaddr";
              description "Micro sid for SRv6 segment-list in form of ipv6 address";
            }
            leaf strict-adjacency {
              type empty;
              description "Strictly follow the micro adjacency sid";
            }
          }
          choice hop-choice {
            case case_1 {
              leaf strict {
                type empty;
                description "Strict hop";
              }
            }
            case case_2 {
              leaf loose {
                type empty;
                description "Loose hop";
              }
            }
          }
          container label-type {
            description "Type of label for the hop";
            uses apply-advanced;
            leaf node {
              type empty;
              description "Hop represents a node";
            }
          }
        }
      }
      list compute-profile {
        description "Compute profile for dynamically computed paths";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of the computation-profile";
        }
        uses apply-advanced;
        container admin-group {
          description "Administrative group policy";
          uses admin_group_include_exclude;
        }
        leaf maximum-segment-list-depth {
          type uint32 {
            range "1 .. 16";
          }
          description "Maximum depth of computed path";
        }
        leaf algorithm {
          type uint32 {
            range "1 .. 255";
          }
          description "Algorithm to constrain the path into";
        }
        leaf no-label-stack-compression {
          type empty;
          description "Provide fully expanded path, using adjacency segment identifiers";
        }
        choice protection-choice {
          case case_1 {
            container protected {
              description "Choose protected labels if available";
              presence "enable protected";
              uses apply-advanced;
              leaf mandatory {
                type empty;
                description "Mandatorily choose protected labels";
              }
            }
          }
          case case_2 {
            container unprotected {
              description "Choose unprotected labels if available";
              presence "enable unprotected";
              uses apply-advanced;
              leaf mandatory {
                type empty;
                description "Mandatorily choose unprotected labels";
              }
            }
          }
        }
        leaf compute-segment-list {
          type string {
            length "1 .. 64";
          }
          description "Name of the compute type segmentlist";
        }
        leaf maximum-computed-segment-lists {
          type uint32 {
            range "1 .. 128";
          }
          description "Maximum number of segment-lists(ECMP paths) to be computed";
        }
        container metric-type {
          description "Metric type used for computaion";
          uses apply-advanced;
          choice metric-choice {
            case case_1 {
              leaf te {
                type empty;
                description "TE metric";
              }
            }
            case case_2 {
              leaf igp {
                type empty;
                description "IGP metric";
              }
            }
            case case_3 {
              container delay {
                description "Delay metric";
                presence "enable delay";
                uses apply-advanced;
                choice metric-choice {
                  case case_1 {
                    leaf minimum {
                      type empty;
                      description "Minimum delay metric type";
                    }
                  }
                  case case_2 {
                    leaf maximum {
                      type empty;
                      description "Maximum delay metric type";
                    }
                  }
                  case case_3 {
                    leaf average {
                      type empty;
                      description "Average delay metric type";
                    }
                  }
                }
                leaf delay-variation-threshold {
                  type uint32 {
                    range "1 .. 16777215";
                  }
                  description "Link delay variation threshold";
                }
              }
            }
          }
        }
        container bound-metric {
          description "Bound metric used for computation";
          uses apply-advanced;
          leaf te {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "TE bound metric value";
          }
          leaf igp {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "IGP bound metric value";
          }
          leaf delay {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "Delay bound metric value";
          }
        }
        leaf bandwidth-requested {
          type string;
          description "SR Path requested bandwidth in (bits/sec)";
          units bps;
        }
        container bandwidth-reservation-priority {
          description "SR path bandwidth reservation priority";
          presence "enable bandwidth-reservation-priority";
        }
        leaf setup-priority {
          type uint32 {
            range "0 .. 7";
          }
          description "Setup priority";
        }
        leaf reservation-priority {
          type uint32 {
            range "0 .. 7";
          }
          description "Reservation priority";
        }
      }
      leaf srv6 {
        type empty;
        description "Enable srv6 support for source-packet-routing";
      }
      container preserve-nexthop-hierarchy {
        description "Enable preserve-nexthop-hierarchy for source-packet-routing";
        presence "enable preserve-nexthop-hierarchy";
        uses apply-advanced;
        container sr-mpls {
          description "Disable preserve-nexthop-hierarchy for sr-mpls";
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable preserve-nexthop-hierarchy for sr-mpls";
              }
            }
          }
        }
        container srv6 {
          description "Disable preserve-nexthop-hierarchy for srv6";
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable preserve-nexthop-hierarchy for srv6";
              }
            }
          }
        }
      }
      leaf sbfd-frr {
        type empty;
        description "Enable sbfd frr support for source-packet-routing";
      }
      list source-routing-path {
        description "Configure a source-routing-path";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of the source routing path";
        }
        uses apply-advanced;
        leaf srv6 {
          type empty;
          description "Tunnel type SRv6";
        }
        leaf ldp-tunneling {
          type empty;
          description "Allow LDP to use this LSP for tunneling";
        }
        leaf use-for-shortcut {
          type empty;
          description "Allow this LSP to be used as a shortcut tunnel";
        }
        container diversity-association {
          description "Configure diversity association for LSP";
          uses apply-advanced;
          leaf-list group {
            type string;
            description "Configure diversity association group";
            max-elements 8;
            ordered-by user;
          }
          leaf shortest-path-first {
            type empty;
            description "Enable priority computation";
          }
        }
        container te-policy-association {
          description "Configure te policy association for LSP";
          uses apply-advanced;
          leaf-list group {
            type string;
            description "Configure te policy association group";
            max-elements 8;
            ordered-by user;
          }
        }
        leaf to {
          type "jt:ipaddr";
          description "Ip-address of the tunnel end-point";
        }
        leaf from {
          type "jt:ipaddr";
          description "Ip-address of the tunnel start-point";
        }
        leaf color {
          type uint32;
          description "Color identifier for the tunnel end-point";
        }
        leaf no-ingress {
          type empty;
          description "Disable ingress functionality for this tunnel";
        }
        leaf binding-sid {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Specify the binding-label to enable transit functionality for this tunnel";
        }
        list install {
          description "Install prefix";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "Destination prefix";
          }
        }
        leaf preference {
          type uint32;
          description "Preference for routes downloaded for this tunnel";
          status deprecated;
        }
        leaf metric {
          type uint32 {
            range "1 .. 16777215";
          }
          description "Metric for routes downloaded for this tunnel";
        }
        leaf te-group-id {
          type uint32 {
            range "1 .. 128";
          }
          description "Te group id";
        }
        leaf sr-preference {
          type uint32 {
            range "0 .. 4294967295";
          }
          description "SR-preference for SPRING-TE routes. Higher value is more preferred";
        }
        leaf lsp-external-controller {
          type string {
            length "1 .. 64";
          }
          description "Name of the external path computing entity";
        }
        list primary {
          description "Configure a primary segment list for this source-routing-path";
          key name;
          max-elements 128;
          ordered-by user;
          leaf name {
            type string {
              length "1 .. 64";
            }
            description "Name of SR-TE segment-list";
          }
          uses apply-advanced;
          leaf weight {
            type uint32;
            description "Specify the balance factor for this segment list in SR-TE tunnel";
          }
          container bfd-liveness-detection {
            description "Bidirectional forwarding detection options";
            uses apply-advanced;
            container sbfd {
              description "Seamless BFD parameters";
              presence "enable sbfd";
              uses apply-advanced;
              leaf remote-discriminator {
                type uint32 {
                  range "1 .. 4294967295";
                }
                description "Remote discriminator of reflector";
              }
              leaf responder-ip {
                type "jt:ipaddr";
                description "Seamless BFD responder address";
              }
              leaf ip-ttl {
                type uint8 {
                  range "1 .. 255";
                }
                default "5";
                description "TTL for IP Header";
              }
            }
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
            leaf multiplier {
              type uint32 {
                range "1 .. 255";
              }
              default "3";
              description "Detection time multiplier";
            }
            leaf pdu-size {
              type uint32 {
                range "24 .. 9000";
              }
              default "24";
              description "BFD transport protocol payload size";
            }
            leaf no-router-alert-option {
              type empty;
              description "Do not set the router alert option in IP header";
            }
          }
          container compute {
            description "Enable computation";
            presence "enable compute";
            uses apply-advanced;
            leaf compute-profile-name {
              type string {
                length "1 .. 64";
              }
              description "Name of compute-profile";
            }
          }
          leaf lsp-external-controller {
            type string {
              length "1 .. 64";
            }
            description "Name of the external path computing entity";
          }
        }
        list secondary {
          description "Configure a secondary segment list for this source-routing-path";
          key name;
          max-elements 1;
          ordered-by user;
          leaf name {
            type string {
              length "1 .. 64";
            }
            description "Name of SR-TE segment-list";
          }
          uses apply-advanced;
          container bfd-liveness-detection {
            description "Bidirectional forwarding detection options";
            uses apply-advanced;
            container sbfd {
              description "Seamless BFD parameters";
              presence "enable sbfd";
              uses apply-advanced;
              leaf remote-discriminator {
                type uint32 {
                  range "1 .. 4294967295";
                }
                description "Remote discriminator of reflector";
              }
              leaf responder-ip {
                type "jt:ipaddr";
                description "Seamless BFD responder address";
              }
              leaf ip-ttl {
                type uint8 {
                  range "1 .. 255";
                }
                default "5";
                description "TTL for IP Header";
              }
            }
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
            leaf multiplier {
              type uint32 {
                range "1 .. 255";
              }
              default "3";
              description "Detection time multiplier";
            }
            leaf pdu-size {
              type uint32 {
                range "24 .. 9000";
              }
              default "24";
              description "BFD transport protocol payload size";
            }
            leaf no-router-alert-option {
              type empty;
              description "Do not set the router alert option in IP header";
            }
          }
          container compute {
            description "Enable computation";
            presence "enable compute";
            uses apply-advanced;
            leaf compute-profile-name {
              type string {
                length "1 .. 64";
              }
              description "Name of compute-profile";
            }
          }
        }
      }
      list source-routing-path-template {
        description "Configure a source-routing-path-template";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of the source routing path";
        }
        uses apply-advanced;
        leaf no-ingress {
          type empty;
          description "Disable ingress functionality for this tunnel";
        }
        leaf use-for-shortcut {
          type empty;
          description "Allow this LSP to be used as a shortcut tunnel";
        }
        container diversity-association {
          description "Configure diversity association for LSP";
          uses apply-advanced;
          leaf-list group {
            type string;
            description "Configure diversity association group";
            max-elements 8;
            ordered-by user;
          }
          leaf shortest-path-first {
            type empty;
            description "Enable priority computation";
          }
        }
        container te-policy-association {
          description "Configure te policy association for LSP";
          uses apply-advanced;
          leaf-list group {
            type string;
            description "Configure te policy association group";
            max-elements 8;
            ordered-by user;
          }
        }
        leaf metric {
          type uint32 {
            range "1 .. 16777215";
          }
          description "Metric for routes downloaded for this tunnel";
        }
        leaf sr-preference {
          type uint32 {
            range "0 .. 4294967295";
          }
          description "SR-preference for SPRING-TE routes. Higher value is more preferred";
        }
        leaf ldp-tunneling {
          type empty;
          description "Allow LDP to use this LSP for tunneling";
        }
        leaf lsp-external-controller {
          type string {
            length "1 .. 64";
          }
          description "Name of the external path computing entity";
        }
        list primary {
          description "Configure a primary segment list for this source-routing-path";
          key name;
          max-elements 128;
          ordered-by user;
          leaf name {
            type string {
              length "1 .. 64";
            }
            description "Name of SR-TE segment-list";
          }
          uses apply-advanced;
          leaf weight {
            type uint32;
            description "Specify the balance factor for this segment list in SR-TE tunnel";
          }
          container compute {
            description "Enable computation";
            presence "enable compute";
            uses apply-advanced;
            leaf compute-profile-name {
              type string {
                length "1 .. 64";
              }
              description "Name of compute-profile";
            }
          }
          leaf lsp-external-controller {
            type string {
              length "1 .. 64";
            }
            description "Name of the external path computing entity";
          }
        }
        list secondary {
          description "Configure a secondary segment list for this source-routing-path";
          key name;
          max-elements 1;
          ordered-by user;
          leaf name {
            type string {
              length "1 .. 64";
            }
            description "Name of SR-TE segment-list";
          }
          uses apply-advanced;
          container compute {
            description "Enable computation";
            presence "enable compute";
            uses apply-advanced;
            leaf compute-profile-name {
              type string {
                length "1 .. 64";
              }
              description "Name of compute-profile";
            }
          }
        }
        container bfd-liveness-detection {
          description "Bidirectional forwarding detection options";
          uses apply-advanced;
          container sbfd {
            description "Seamless BFD parameters";
            presence "enable sbfd";
            uses apply-advanced;
            leaf remote-discriminator {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Remote discriminator of reflector";
            }
            leaf responder-ip {
              type "jt:ipaddr";
              description "Seamless BFD responder address";
            }
            leaf ip-ttl {
              type uint8 {
                range "1 .. 255";
              }
              default "5";
              description "TTL for IP Header";
            }
          }
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
          leaf multiplier {
            type uint32 {
              range "1 .. 255";
            }
            default "3";
            description "Detection time multiplier";
          }
          leaf pdu-size {
            type uint32 {
              range "24 .. 9000";
            }
            default "24";
            description "BFD transport protocol payload size";
          }
          leaf no-router-alert-option {
            type empty;
            description "Do not set the router alert option in IP header";
          }
        }
        leaf srv6 {
          type empty;
          description "Template type SRv6";
        }
      }
      leaf inherit-label-nexthops {
        type empty;
        description "Inherit label nexthops for first hop in segment lists";
      }
      container rib-group {
        description "Enable rib-group import  poilicies on SR-TE";
        uses apply-advanced;
        container ipv4 {
          description "Import  policy to be applied on ipv4 uncolored route";
          presence "enable ipv4";
          uses apply-advanced;
          leaf rib-group-name {
            type string {
              length "1 .. 64";
            }
            description "Rib-group import policy";
          }
        }
        container ipv6 {
          description "Import  policy to be applied on ipv6 uncolored route";
          presence "enable ipv6";
          uses apply-advanced;
          leaf rib-group-name {
            type string {
              length "1 .. 64";
            }
            description "Rib-group import policy";
          }
        }
        container ipv4-color {
          description "Import  policy to be applied on ipv4 colored route";
          presence "enable ipv4-color";
          uses apply-advanced;
          leaf rib-group-name {
            type string {
              length "1 .. 64";
            }
            description "Rib-group import policy";
          }
        }
        container ipv6-color {
          description "Import  policy to be applied on ipv6 colored route";
          presence "enable ipv6-color";
          uses apply-advanced;
          leaf rib-group-name {
            type string {
              length "1 .. 64";
            }
            description "Rib-group import policy";
          }
        }
        container tag {
          description "Import  policy to be applied on mpls route";
          presence "enable tag";
          uses apply-advanced;
          leaf rib-group-name {
            type string {
              length "1 .. 64";
            }
            description "Rib-group import policy";
          }
        }
      }
      container telemetry {
        description "Enable telemetry on SR-TE policies";
        uses apply-advanced;
        container statistics {
          description "Enable traffic-statistics collection on SR-TE policies";
          presence "enable statistics";
          uses apply-advanced;
          leaf no-transit {
            type empty;
            description "Disable statistics collection on binding sid route";
          }
          leaf no-ingress {
            type empty;
            description "Disable statistics collection on destination route";
          }
          container per-source {
            description "Enable traffic-statistics collection per source";
            uses apply-advanced;
            leaf per-segment-list {
              type empty;
              description "Enable per path level traffic-statistics collection";
            }
          }
        }
      }
      container traffic-engineering {
        description "Enable import of all Spring-TE policies into TED";
        uses apply-advanced;
        leaf database {
          type empty;
          description "Spring-TE policies Traffic engineering database";
        }
      }
      container use-transport-class {
        description "Enable transport class on SR-TE colored policies";
        presence "enable use-transport-class";
        uses apply-advanced;
        leaf fib-install {
          type empty;
          description "Install SRTE routes in FIB";
        }
        leaf inet3-install {
          type empty;
          description "Install SRTE routes in inet{6}.3 table";
        }
      }
      leaf inet-color-append-explicit-null {
        type empty;
        description "Enable appending explicit NULL for inet SRTE policy";
      }
      leaf retry-timer {
        type int32 {
          range "1 .. 600";
        }
        description "Time before retrying auto-translation failed paths";
        units seconds;
      }
      leaf import-color-only-cross-af {
        type empty;
        description "Enable importing of Null Endpoint color route for cross address family";
      }
      leaf inet6-color-append-explicit-null {
        type empty;
        description "Enable appending explicit NULL for inet6 SRTE policy";
      }
      leaf ipv6-tunneling-append-explicit-null {
        type empty;
        description "Enable appending explicit NULL for v4ov6 SRTE routes ";
      }
      container source-routing-path-template-map {
        description "Configure a source routing path template map";
        uses apply-advanced;
        leaf-list policy {
          type "jt:policy-algebra";
          description "Configure policy";
          ordered-by user;
        }
      }
    }
    container l2-learning {
      description "Layer 2 forwarding configuration";
      uses juniper-protocols-bridge;
    }
    container network-isolation {
      description "Network isolation configuration";
      uses apply-advanced;
      list group {
        description "Network isolation group";
        key name;
        max-elements 64;
        leaf name {
          type string {
            length "1 .. 63";
          }
          description "Group name";
        }
        uses apply-advanced;
        container detection {
          description "Network isolation detection";
          presence "enable detection";
          uses apply-advanced;
          container hold-time {
            description "Hold time for network core isolation ";
            leaf up {
              type uint32 {
                range "0 .. 3600000";
              }
              description "Hold time in milliseconds for declaring network reachable";
              units milliseconds;
            }
            leaf down {
              type uint32 {
                range "0 .. 3600000";
              }
              description "Hold time in milliseconds for declaring network not reachable";
              units milliseconds;
            }
          }
          container link-tracking {
            description "Network isolation detection via link tracking";
            presence "enable link-tracking";
            uses apply-advanced;
            leaf minimum-links {
              type uint32 {
                range "0 .. 10";
              }
              description "Minimum link count in up state to consider network not isolated";
            }
            leaf failure-type {
              type enumeration {
                enum link {
                  description "Failure type link";
                }
              }
              default "link";
              description "Type of Failure";
            }
            list interface {
              description "Interface or list of interfaces ";
              key name;
              leaf name {
                type "jt:interface-name";
                description "Interface name";
              }
              uses apply-advanced;
            }
          }
          container service-tracking {
            description "Network isolation service tracking";
            presence "enable service-tracking";
            uses apply-advanced;
            leaf core-isolation {
              type empty;
              description "Network isolation via core-isolation";
            }
          }
        }
        container service-tracking-action {
          choice actions {
            case case_1 {
              leaf link-down {
                type empty;
                description "Bring down associated interfaces";
              }
            }
            case case_2 {
              leaf lacp-out-of-sync {
                type empty;
                description "Put ESI LAG in lacp out of sync state";
              }
            }
          }
        }
      }
    }
    container dcbx {
      presence "enable dcbx";
    }
    container lldp {
      description "Link Layer Detection Protocol";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable LLDP";
          }
        }
      }
      container traceoptions {
        description "Trace options for LLDP";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          leaf name {
            type enumeration {
              enum all {
                description "Trace configuration events";
              }
              enum configuration {
                description "Log configuration events";
              }
              enum rtsock {
                description "Trace rtsock message events";
              }
              enum packet {
                description "Trace packet information";
              }
              enum protocol {
                description "Trace protocol information";
              }
              enum interface {
                description "Trace interface update events";
              }
              enum vlan {
                description "Trace VLAN update events";
              }
              enum snmp {
                description "Trace SNMP events";
              }
              enum jvision {
                description "Trace Jvision events";
              }
            }
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      leaf management-address {
        type "jt:ipaddr";
        description "LLDP management address";
      }
      leaf advertisement-interval {
        type uint32 {
          range "5 .. 32768";
        }
        default "30";
        description "Transmit interval for LLDP messages";
        units seconds;
      }
      leaf transmit-delay {
        type uint32 {
          range "1 .. 8192";
        }
        description "Transmit delay time interval for LLDP messages";
        units seconds;
      }
      leaf hold-multiplier {
        type uint32 {
          range "2 .. 10";
        }
        default "4";
        description "Hold timer interval for LLDP messages";
      }
      leaf ptopo-configuration-trap-interval {
        type uint32 {
          range "0 .. 3600";
        }
        default "0";
        description "Interval for physical topology configuration change trap";
        units seconds;
      }
      leaf ptopo-configuration-maximum-hold-time {
        type uint32 {
          range "1 .. 2147483647";
        }
        default "300";
        description "Hold time for physical topology connection entries";
        units seconds;
      }
      leaf lldp-configuration-notification-interval {
        type uint32 {
          range "5 .. 3600";
        }
        default "5";
        description "Time interval for LLDP notification";
        units seconds;
      }
      leaf port-id-subtype {
        type enumeration {
          enum locally-assigned {
            description "Locally assigned value (SNMP index of the interface)";
          }
          enum interface-name {
            description "Interface name on which LLDPDU is sent";
          }
        }
        default "locally-assigned";
        description "Sub-type to be used for Port ID TLV generation";
      }
      container chassis-id {
        description "Chassis-id to be used for Chassis ID TLV generation";
        uses apply-advanced;
        leaf chassis-id-type {
          type enumeration {
            enum chassis-component {
              description "User define chassis component name.";
            }
            enum interface-alias {
              description "Interface description or name on which LLDPDU is sent";
            }
            enum port-component {
              description "User define port component name";
            }
            enum mac-address {
              description "MAC Address of Interface on which LLDPDU is sent";
            }
            enum network-address {
              description "Netwok Address of Interface on which LLDPDU is sent";
            }
            enum interface-name {
              description "Interface name on which LLDPDU is sent";
            }
            enum locally-assigned {
              description "Locally assigned value (SNMP index of the interface)";
            }
          }
          description "Chassis-id-type to be used for Chassis ID TLV generation";
        }
        leaf chassis-id-value {
          type string {
            length "1 .. 256";
          }
          description "Chassis-id value as per chassis id type";
        }
      }
      leaf port-description-type {
        type enumeration {
          enum interface-alias {
            description "Use object ifAlias value for TLV generation";
          }
          enum interface-description {
            description "Use object ifDescr value for TLV generation";
          }
        }
        default "interface-alias";
        description "The Interfaces Group MIB object to be used for Port Description TLV generation";
      }
      leaf neighbour-port-info-display {
        type enumeration {
          enum port-id {
            description "Display port-id information of neighbor in port info";
          }
          enum port-description {
            description "Display port description of neighbor in port info";
          }
        }
        description "Show lldp neighbors to display port-id or port-description ";
      }
      leaf mau-type {
        type empty;
        description "Populate mau-type in lldp PDU";
      }
      leaf vlan-name-tlv-option {
        type enumeration {
          enum vlan-id {
            description "Use vlan-id for tlv";
          }
          enum name {
            description "Use vlan-name for tlv";
          }
        }
        default "vlan-id";
        description "Vlan tlv options to transmit vlan name or vlan-id";
      }
      leaf lldp-tx-fast-init {
        type uint32 {
          range "1 .. 8";
        }
        description "Transmission count in fast transmission mode";
      }
      leaf fast-rx-processing {
        type empty;
        description "Start optimised processing of received pdu";
      }
      leaf-list tlv-select {
        type enumeration {
          enum port-description {
            description "Port Description";
          }
          enum system-name {
            description "System Name";
          }
          enum system-description {
            description "System Description";
          }
          enum system-capabilities {
            description "System Capabilities";
          }
          enum management-address {
            description "Management Address";
          }
          enum mac-phy-config-status {
            description "OUI IEEE 802.3 mac-phy-config-status";
          }
          enum power-vi-mdi {
            description "OUI IEEE 802.3 power-vi-mdi";
          }
          enum link-aggregation {
            description "OUI IEEE 802.3 link-aggregation";
          }
          enum maximum-frame-size {
            description "OUI IEEE 802.3 maximum-frame-size";
          }
          enum jnpr-chassis-serial {
            description "OUI Juniper chassis-serial";
          }
          enum jnpr-vcp {
            description "OUI Juniper vcp";
          }
          enum jnpr-mode-change {
            description "OUI Juniper mode-change";
          }
          enum jnpr-mode-change-error {
            description "OUI Juniper mode-change-error";
          }
          enum jnpr-mode-change-ip-address {
            description "OUI Juniper mode-change-ip-address";
          }
          enum jnpr-mode-change-image-name {
            description "OUI Juniper mode-change-image-name";
          }
          enum jnpr-mode-change-ftp-login {
            description "OUI Juniper mode-change-ftp-login";
          }
          enum jnpr-mode-change-image-md5 {
            description "OUI Juniper mode-change-image-md5";
          }
          enum jnpr-mode-change-ftp-server {
            description "OUI Juniper mode-change-ftp-server";
          }
          enum port-vid {
            description "OUI IEEE 802.1 port-vid";
          }
          enum port-protocol-vid {
            description "OUI IEEE 802.1 port-procol-vid";
          }
          enum vlan-name {
            description "OUI IEEE 802.1 vlan-name";
          }
          enum protocol-id {
            description "OUI IEEE 802.1 protocol-id";
          }
          enum link-aggregation-8021 {
            description "OUI IEEE 802.1 link-aggregation";
          }
          enum dcbx-ets-configuration {
            description "OUI IEEE 802.1 dcbx ets configuration";
          }
          enum dcbx-ets-recommendation {
            description "OUI IEEE 802.1 dcbx ets recommendation";
          }
          enum dcbx-priority-flow-control {
            description "OUI IEEE 802.1 dcbx pfc";
          }
          enum dcbx-version-101 {
            description "OUI IEEE 802.1 dcbx version 1.01";
          }
          enum evb {
            description "OUI IEEE 82.1QBG evb";
          }
          enum power-via-mdi-measurements {
            description "OUI IEEE 802.3 power-via-mdi-measurements";
          }
          enum cloud-reach-event {
            description "Cloud reachability event";
          }
          enum phone-home-active {
            description "Phone-home active configuration";
          }
          enum cloud-connect-event {
            description "Cloud-connectivity configuration";
          }
        }
        description "Select TLVs to be sent";
        ordered-by user;
      }
      leaf-list tlv-filter {
        type enumeration {
          enum all {
            description "Filter all non mandatory TLVs";
          }
          enum port-description {
            description "Port Description";
          }
          enum system-name {
            description "System Name";
          }
          enum system-description {
            description "System Description";
          }
          enum system-capabilities {
            description "System Capabilities";
          }
          enum management-address {
            description "Management Address";
          }
          enum mac-phy-config-status {
            description "OUI IEEE 802.3 mac-phy-config-status";
          }
          enum power-vi-mdi {
            description "OUI IEEE 802.3 power-vi-mdi";
          }
          enum link-aggregation {
            description "OUI IEEE 802.3 link-aggregation";
          }
          enum maximum-frame-size {
            description "OUI IEEE 802.3 maximum-frame-size";
          }
          enum jnpr-chassis-serial {
            description "OUI Juniper chassis-serial";
          }
          enum jnpr-vcp {
            description "OUI Juniper vcp";
          }
          enum jnpr-mode-change {
            description "OUI Juniper mode-change";
          }
          enum jnpr-mode-change-error {
            description "OUI Juniper mode-change-error";
          }
          enum jnpr-mode-change-ip-address {
            description "OUI Juniper mode-change-ip-address";
          }
          enum jnpr-mode-change-image-name {
            description "OUI Juniper mode-change-image-name";
          }
          enum jnpr-mode-change-ftp-login {
            description "OUI Juniper mode-change-ftp-login";
          }
          enum jnpr-mode-change-image-md5 {
            description "OUI Juniper mode-change-image-md5";
          }
          enum jnpr-mode-change-ftp-server {
            description "OUI Juniper mode-change-ftp-server";
          }
          enum port-vid {
            description "OUI IEEE 802.1 port-vid";
          }
          enum port-protocol-vid {
            description "OUI IEEE 802.1 port-procol-vid";
          }
          enum vlan-name {
            description "OUI IEEE 802.1 vlan-name";
          }
          enum protocol-id {
            description "OUI IEEE 802.1 protocol-id";
          }
          enum link-aggregation-8021 {
            description "OUI IEEE 802.1 Link Aggregation";
          }
          enum dcbx-priority-flow-control {
            description "OUI IEEE 802.1 dcbx pfc";
          }
          enum dcbx-ets-configuration {
            description "OUI IEEE 802.1 dcbx ets configuration";
          }
          enum dcbx-ets-recommendation {
            description "OUI IEEE 802.1 dcbx ets recommendation";
          }
          enum dcbx-version-101 {
            description "OUI IEEE 802.1 dcbx version 1.01";
          }
          enum evb {
            description "OUI IEEE 802.1QBG evb";
          }
          enum power-via-mdi-measurements {
            description "OUI IEEE 802.3 power-via-mdi-measurements";
          }
          enum cloud-reach-event {
            description "Cloud reachability event";
          }
          enum phone-home-active {
            description "Phone-home active configuration";
          }
          enum cloud-connect-event {
            description "Cloud-connectivity configuration";
          }
        }
        description "Filter TLVs to be sent";
        ordered-by user;
      }
      leaf dest-mac-type {
        type enumeration {
          enum nearest-bridge {
            description "To set destination mac as 01:80:C2:00:00:0E";
          }
          enum nearest-non-tpmr-bridge {
            description "To set destination mac as 01:80:C2:00:00:03";
          }
          enum nearest-customer-bridge {
            description "To set destination mac as 01:80:C2:00:00:00";
          }
        }
        description "Destination address to be used";
      }
      leaf management-interface {
        type "jt:interface-name";
        description "Management interface to be used in LLDP PDUs";
      }
      list interface {
        description "Interface configuration";
        key name;
        ordered-by user;
        leaf name {
          type string;
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable LLDP";
            }
          }
        }
        container power-negotiation {
          description "LLDP power negotiation";
          presence "enable power-negotiation";
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable power negotiation";
              }
            }
          }
        }
        leaf-list tlv-select {
          type enumeration {
            enum port-description {
              description "Port Description";
            }
            enum system-name {
              description "System Name";
            }
            enum system-description {
              description "System Description";
            }
            enum system-capabilities {
              description "System Capabilities";
            }
            enum management-address {
              description "Management Address";
            }
            enum mac-phy-config-status {
              description "OUI IEEE 802.3 mac-phy-config-status";
            }
            enum power-vi-mdi {
              description "OUI IEEE 802.3 power-vi-mdi";
            }
            enum link-aggregation {
              description "OUI IEEE 802.3 link-aggregation";
            }
            enum maximum-frame-size {
              description "OUI IEEE 802.3 maximum-frame-size";
            }
            enum jnpr-chassis-serial {
              description "OUI Juniper chassis-serial";
            }
            enum jnpr-vcp {
              description "OUI Juniper vcp";
            }
            enum jnpr-mode-change {
              description "OUI Juniper mode-change";
            }
            enum jnpr-mode-change-error {
              description "OUI Juniper mode-change-error";
            }
            enum jnpr-mode-change-ip-address {
              description "OUI Juniper mode-change-ip-address";
            }
            enum jnpr-mode-change-image-name {
              description "OUI Juniper mode-change-image-name";
            }
            enum jnpr-mode-change-ftp-login {
              description "OUI Juniper mode-change-ftp-login";
            }
            enum jnpr-mode-change-image-md5 {
              description "OUI Juniper mode-change-image-md5";
            }
            enum jnpr-mode-change-ftp-server {
              description "OUI Juniper mode-change-ftp-server";
            }
            enum port-vid {
              description "OUI IEEE 802.1 port-vid";
            }
            enum port-protocol-vid {
              description "OUI IEEE 802.1 port-procol-vid";
            }
            enum vlan-name {
              description "OUI IEEE 802.1 vlan-name";
            }
            enum protocol-id {
              description "OUI IEEE 802.1 protocol-id";
            }
            enum link-aggregation-8021 {
              description "OUI IEEE 802.1 link-aggregation";
            }
            enum dcbx-ets-configuration {
              description "OUI IEEE 802.1 dcbx ets configuration";
            }
            enum dcbx-ets-recommendation {
              description "OUI IEEE 802.1 dcbx ets recommendation";
            }
            enum dcbx-priority-flow-control {
              description "OUI IEEE 802.1 dcbx pfc";
            }
            enum dcbx-version-101 {
              description "OUI IEEE 802.1 dcbx version 1.01";
            }
            enum evb {
              description "OUI IEEE 82.1QBG evb";
            }
            enum power-via-mdi-measurements {
              description "OUI IEEE 802.3 power-via-mdi-measurements";
            }
            enum cloud-reach-event {
              description "Cloud reachability event";
            }
            enum phone-home-active {
              description "Phone-home active configuration";
            }
            enum cloud-connect-event {
              description "Cloud-connectivity configuration";
            }
          }
          description "Select TLV(s) to be sent";
          ordered-by user;
        }
        leaf-list tlv-filter {
          type enumeration {
            enum all {
              description "Filter all non mandatory TLVs";
            }
            enum port-description {
              description "Port Description";
            }
            enum system-name {
              description "System Name";
            }
            enum system-description {
              description "System Description";
            }
            enum system-capabilities {
              description "System Capabilities";
            }
            enum management-address {
              description "Management Address";
            }
            enum mac-phy-config-status {
              description "OUI IEEE 802.3 mac-phy-config-status";
            }
            enum power-vi-mdi {
              description "OUI IEEE 802.3 power-vi-mdi";
            }
            enum link-aggregation {
              description "OUI IEEE 802.3 link-aggregation";
            }
            enum maximum-frame-size {
              description "OUI IEEE 802.3 maximum-frame-size";
            }
            enum jnpr-chassis-serial {
              description "OUI Juniper chassis-serial";
            }
            enum jnpr-vcp {
              description "OUI Juniper vcp";
            }
            enum jnpr-mode-change {
              description "OUI Juniper mode-change";
            }
            enum jnpr-mode-change-error {
              description "OUI Juniper mode-change-error";
            }
            enum jnpr-mode-change-ip-address {
              description "OUI Juniper mode-change-ip-address";
            }
            enum jnpr-mode-change-image-name {
              description "OUI Juniper mode-change-image-name";
            }
            enum jnpr-mode-change-ftp-login {
              description "OUI Juniper mode-change-ftp-login";
            }
            enum jnpr-mode-change-image-md5 {
              description "OUI Juniper mode-change-image-md5";
            }
            enum jnpr-mode-change-ftp-server {
              description "OUI Juniper mode-change-ftp-server";
            }
            enum port-vid {
              description "OUI IEEE 802.1 port-vid";
            }
            enum port-protocol-vid {
              description "OUI IEEE 802.1 port-procol-vid";
            }
            enum vlan-name {
              description "OUI IEEE 802.1 vlan-name";
            }
            enum protocol-id {
              description "OUI IEEE 802.1 protocol-id";
            }
            enum link-aggregation-8021 {
              description "OUI IEEE 802.1 Link Aggregation";
            }
            enum dcbx-priority-flow-control {
              description "OUI IEEE 802.1 dcbx pfc";
            }
            enum dcbx-ets-configuration {
              description "OUI IEEE 802.1 dcbx ets configuration";
            }
            enum dcbx-ets-recommendation {
              description "OUI IEEE 802.1 dcbx ets recommendation";
            }
            enum dcbx-version-101 {
              description "OUI IEEE 802.1 dcbx version 1.01";
            }
            enum evb {
              description "OUI IEEE 802.1QBG evb";
            }
            enum power-via-mdi-measurements {
              description "OUI IEEE 802.3 power-via-mdi-measurements";
            }
            enum cloud-reach-event {
              description "Cloud reachability event";
            }
            enum phone-home-active {
              description "Phone-home active configuration";
            }
            enum cloud-connect-event {
              description "Cloud-connectivity configuration";
            }
          }
          description "Filter TLV(s) to be sent";
          ordered-by user;
        }
        leaf trap-notification {
          type enumeration {
            enum enable {
              description "Enable trap notification";
            }
            enum disable {
              description "Disable trap notification";
            }
          }
          default "enable";
          description "To enable or disable for lldp-trap notification";
        }
        leaf dest-mac-type {
          type enumeration {
            enum nearest-bridge {
              description "To set destination mac as 01:80:C2:00:00:0E";
            }
            enum nearest-non-tpmr-bridge {
              description "To set destination mac as 01:80:C2:00:00:03";
            }
            enum nearest-customer-bridge {
              description "To set destination mac as 01:80:C2:00:00:00";
            }
          }
          description "Destination address to be used";
        }
        leaf transmit-max-vlan-tlv {
          type empty;
          description "Enable to Transmit max Vlan Name TLVs";
        }
      }
      leaf system-name {
        type string {
          length "1 .. 255";
        }
        description "System name to be used in system-name TLV";
      }
      leaf system-description {
        type string {
          length "1 .. 255";
        }
        description "System description to be used in system-description TLV";
      }
    }
    container lldp-med {
      description "LLDP Media Endpoint Discovery";
      presence "enable lldp-med";
      uses apply-advanced;
      leaf fast-start {
        type uint32 {
          range "1 .. 10";
        }
        description "Discovery count for MED";
      }
      list interface {
        description "Interface configuration";
        key name;
        ordered-by user;
        leaf name {
          type string;
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable LLDP";
            }
          }
        }
        container location {
          presence "enable location";
          uses apply-advanced;
          choice location-type {
            case case_1 {
              container civic-based {
                description "Postal address";
                presence "enable civic-based";
                uses civic-address-elements;
              }
            }
            case case_2 {
              leaf elin {
                type string;
                description "Emergency line identification (ELIN) string";
              }
            }
            case case_3 {
              container co-ordinate {
                description "Address based on longitude and latitude coordinates";
                presence "enable co-ordinate";
                uses co-ordinate-elements;
              }
            }
          }
        }
        leaf-list tlv-select {
          type enumeration {
            enum med-capabilities {
              description "OUI TIA med-capabilities";
            }
            enum network-policy {
              description "OUI TIA network-policy";
            }
            enum location-id {
              description "OUI TIA location-id";
            }
            enum ext-power-via-mdi {
              description "OUI TIA ext-power-via-mdi";
            }
          }
          description "Select TLV(s) to be sent";
          ordered-by user;
        }
        leaf-list tlv-filter {
          type enumeration {
            enum all {
              description "Filter all non mandatory TLVs";
            }
            enum med-capabilities {
              description "OUI TIA med-capabilities";
            }
            enum network-policy {
              description "OUI TIA network-policy";
            }
            enum location-id {
              description "OUI TIA location-id";
            }
            enum ext-power-via-mdi {
              description "OUI TIA ext-power-via-mdi";
            }
          }
          description "Filter TLV(s) to be sent";
          ordered-by user;
        }
      }
      leaf-list tlv-select {
        type enumeration {
          enum med-capabilities {
            description "OUI TIA med-capabilities";
          }
          enum network-policy {
            description "OUI TIA network-policy";
          }
          enum location-id {
            description "OUI TIA location-id";
          }
          enum ext-power-via-mdi {
            description "OUI TIA ext-power-via-mdi";
          }
        }
        description "Select MED TLVs to be sent";
        ordered-by user;
      }
      leaf-list tlv-filter {
        type enumeration {
          enum all {
            description "Filter all non mandatory TLVs";
          }
          enum med-capabilities {
            description "OUI TIA med-capabilities";
          }
          enum network-policy {
            description "OUI TIA network-policy";
          }
          enum location-id {
            description "OUI TIA location-id";
          }
          enum ext-power-via-mdi {
            description "OUI TIA ext-power-via-mdi";
          }
        }
        description "Filter MED TLVs to be sent";
        ordered-by user;
      }
    }
    container igmp-snooping {
      description "IGMP snooping configuration";
      uses juniper-default-ri-protocols-igmp-snooping;
    }
    container mld-snooping {
      description "MLD snooping configuration";
      uses juniper-default-ri-protocols-mld-snooping;
    }
    container openflow {
      description "OpenFlow protocol";
      uses juniper-protocols-openflow;
    }
    container pcep {
      description "Path computation client configuration";
      uses apply-advanced;
      leaf message-rate-limit {
        type uint16 {
          range "0 .. 16384";
        }
        description "Messages per minute rate that path computation client will handle at maximum. 0 - disabled";
      }
      leaf update-rate-limit {
        type uint16 {
          range "0 .. 16384";
        }
        description "Updates per minute rate that path computation client will handle at maximum. 0 - disabled";
      }
      leaf max-provisioned-lsps {
        type uint32 {
          range "1 .. 32000";
        }
        default "16000";
        description "Defines max count of externally provisioned LSPs over all conected PCEs (default: 16000)";
      }
      leaf maximum-srmpls-segment-list-depth {
        type uint32 {
          range "1 .. 16";
        }
        default "5";
        description "Maximum segment list depth for SRMPLS LSP (default: 5)";
      }
      leaf maximum-srv6-segment-list-depth {
        type uint32 {
          range "1 .. 6";
        }
        description "Maximum segment list depth for SR LSP";
      }
      leaf propagate-max-segmentlist {
        type empty;
        description " Enable multipath capability to be sent in LSP object";
      }
      leaf propagate-lsp-max-segment-list-depth {
        type empty;
        description "Send maximum segment list depth for LSP";
      }
      leaf disable-multipath-capability {
        type empty;
        description " Disable multipath capability in open message for all pcep connections";
      }
      leaf diversity-association-capability {
        type empty;
        description "Enable disjoint association in open message for all pcep connections";
      }
      leaf policy-association-capability {
        type empty;
        description "Enable policy association in open message for all pcep connections";
      }
      leaf tls-strict {
        type empty;
        description "Enable TLSv1.2 for all PCEP connections";
      }
      list pce-group {
        description "PCE group definition";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 63";
          }
          description "PCE group identifier";
        }
        uses apply-advanced;
        container pce-type {
          description "Type of the PCE (e.g. stateful or stateless)";
          leaf active {
            type empty;
            description "The PCE can modify delegated LSPs";
          }
          choice statefullness {
            case case_1 {
              leaf stateful {
                type empty;
                description "The PCE is stateful";
              }
            }
          }
        }
        leaf lsp-provisioning {
          type empty;
          description "The PCE is capable of provisioning LSPs";
        }
        leaf p2mp-lsp-report-capability {
          type empty;
          description "The PCE is capable of reporting P2MP  LSPs";
        }
        leaf p2mp-lsp-update-capability {
          type empty;
          description "The PCE is capable of update P2MP  LSPs";
        }
        leaf p2mp-lsp-init-capability {
          type empty;
          description "The PCE is capable of provisioning P2MP  LSPs";
        }
        leaf lsp-cleanup-timer {
          type uint32 {
            range "0 .. 2147483647";
          }
          description "LSP cleanup time (default: 60)";
          units seconds;
        }
        leaf spring-capability {
          type empty;
          description "PCE is capable of supporting SPRING based provisioning";
        }
        leaf srv6-capability {
          type empty;
          description "PCE is capable of supporting SRv6 based provisioning";
        }
        leaf max-sid-depth {
          type uint32 {
            range "1 .. 16";
          }
          default "5";
          description "Max SID Depth (default: 5)";
          status deprecated;
        }
        leaf lsp-retry-delegation {
          type empty;
          description "Retry LSP delegation process is enabled";
        }
        leaf lsp-retry-delegation-timer {
          type uint32 {
            range "0 .. 2147483647";
          }
          description "LSP retry delegation timer in case delegation failure or re-delegate (default: 3600)";
          units seconds;
        }
        leaf start-tls-wait-timer {
          type uint8 {
            range "60 .. 255";
          }
          default "60";
          description "The time PCEP client waits for a StartTLS message (Default: 60).";
          units seconds;
        }
        leaf request-timer {
          type uint16 {
            range "0 .. 65535";
          }
          description "The amount of time path computation client waits for a reply before resending its requests";
          units seconds;
        }
        leaf max-unknown-requests {
          type uint32 {
            range "0 .. 16384";
          }
          default "5";
          description "Max unknown requests per minute after which the connection will be closed. 0 - disabled";
          units requests-per-minute;
        }
        leaf max-unknown-messages {
          type uint32 {
            range "0 .. 16384";
          }
          default "5";
          description "Max unknown messages per minute after which the connection will be closed. 0 - disabled";
          units messages-per-minute;
        }
        container traceoptions {
          description "Path Computation Element Protocol trace options";
          uses apply-advanced;
          leaf no-remote-trace {
            type empty;
            description "Disable remote tracing";
          }
          container file {
            description "Trace file information";
            leaf filename {
              type string {
                length "1 .. 1024";
              }
              description "Name of file in which to write trace information";
            }
            leaf size {
              type string;
              description "Maximum trace file size";
            }
            leaf files {
              type uint32 {
                range "2 .. 1000";
              }
              default "3";
              description "Maximum number of trace files";
            }
            choice world-readable-choice {
              leaf world-readable {
                type empty;
                description "Allow any user to read the log file";
              }
              leaf no-world-readable {
                type empty;
                description "Don't allow any user to read the log file";
              }
            }
            leaf match {
              type "jt:regular-expression";
              description "Regular expression for lines to be logged";
            }
          }
          list flag {
            description "Area of Path Computation Client Daemon to enable debugging output";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum pcep {
                  description "Trace Path Computation Element protocol";
                }
                enum all {
                  description "Trace all areas of Path Computation Client Daemon  code";
                }
              }
            }
          }
        }
        leaf delegation-cleanup-timeout {
          type uint32 {
            range "0 .. 2147483647";
          }
          description "Return control of LSPs or Re-delegation time after PCEP session disconnect (default: 30)";
          units seconds;
        }
        leaf pce-traffic-steering {
          type empty;
          description "Enable PCE traffic steering (FlowSpec Capability)";
        }
      }
      list pce {
        description "Per PCE configuration";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 63";
          }
          description "PCE unique identifier";
        }
        uses apply-advanced;
        leaf local-address {
          type "jt:ipv4addr";
          description "Address of local end of PCEP session";
        }
        leaf local-ipv6-address {
          type "jt:ipv6addr";
          description "IPv6 Address of local end of PCEP session";
        }
        leaf destination-ipv4-address {
          type "jt:ipv4addr";
          description "IPV4 Address of PCE";
        }
        leaf destination-ipv6-address {
          type "jt:ipv6addr";
          description "IPv6 Address of PCE";
        }
        leaf destination-port {
          type uint16 {
            range "1 .. 65535";
          }
          default "4189";
          description "Destination TCP port PCE is listening on";
        }
        leaf delegation-priority {
          type uint16 {
            range "1 .. 65535";
          }
          description "This PCE's priority among configured stateful PCEs in one pce-group";
        }
        leaf request-priority {
          type uint16 {
            range "1 .. 65535";
          }
          description "This PCE's priority among configured stateless PCEs in one pce-group";
        }
        leaf pce-group {
          type string;
          description "Assign this PCE to defined pce group. PCE will inherit default values from the pce-group";
        }
        leaf authentication-key {
          type string {
            length "1 .. 128";
          }
          description "MD5 authentication key";
        }
        leaf authentication-algorithm {
          type enumeration {
            enum md5 {
              description "Message Digest 5";
            }
          }
          description "Authentication algorithm name";
        }
        leaf authentication-key-chain {
          type string {
            length "1 .. 128";
          }
          description "Key chain name";
        }
        container pce-type {
          description "Type of the PCE (e.g. stateful or stateless)";
          leaf active {
            type empty;
            description "The PCE can modify delegated LSPs";
          }
          choice statefullness {
            case case_1 {
              leaf stateful {
                type empty;
                description "The PCE is stateful";
              }
            }
          }
        }
        leaf lsp-provisioning {
          type empty;
          description "The PCE is capable of provisioning LSPs";
        }
        leaf p2mp-lsp-report-capability {
          type empty;
          description "The PCE is capable of reporting P2MP  LSPs";
        }
        leaf p2mp-lsp-update-capability {
          type empty;
          description "The PCE is capable of update P2MP  LSPs";
        }
        leaf p2mp-lsp-init-capability {
          type empty;
          description "The PCE is capable of provisioning P2MP  LSPs";
        }
        leaf lsp-cleanup-timer {
          type uint32 {
            range "0 .. 2147483647";
          }
          description "LSP cleanup time (default: 60)";
          units seconds;
        }
        leaf spring-capability {
          type empty;
          description "PCE is capable of supporting SPRING based provisioning";
        }
        leaf srv6-capability {
          type empty;
          description "PCE is capable of supporting SRv6 based provisioning";
        }
        leaf max-sid-depth {
          type uint32 {
            range "1 .. 16";
          }
          default "5";
          description "Max SID Depth (default: 5)";
          status deprecated;
        }
        leaf lsp-retry-delegation {
          type empty;
          description "Retry LSP delegation process is enabled";
        }
        leaf lsp-retry-delegation-timer {
          type uint32 {
            range "0 .. 2147483647";
          }
          description "LSP retry delegation timer in case delegation failure or re-delegate (default: 3600)";
          units seconds;
        }
        leaf start-tls-wait-timer {
          type uint8 {
            range "60 .. 255";
          }
          default "60";
          description "The time PCEP client waits for a StartTLS message (Default: 60).";
          units seconds;
        }
        leaf request-timer {
          type uint16 {
            range "0 .. 65535";
          }
          description "The amount of time path computation client waits for a reply before resending its requests";
          units seconds;
        }
        leaf max-unknown-requests {
          type uint32 {
            range "0 .. 16384";
          }
          default "5";
          description "Max unknown requests per minute after which the connection will be closed. 0 - disabled";
          units requests-per-minute;
        }
        leaf max-unknown-messages {
          type uint32 {
            range "0 .. 16384";
          }
          default "5";
          description "Max unknown messages per minute after which the connection will be closed. 0 - disabled";
          units messages-per-minute;
        }
        container traceoptions {
          description "Path Computation Element Protocol trace options";
          uses apply-advanced;
          leaf no-remote-trace {
            type empty;
            description "Disable remote tracing";
          }
          container file {
            description "Trace file information";
            leaf filename {
              type string {
                length "1 .. 1024";
              }
              description "Name of file in which to write trace information";
            }
            leaf size {
              type string;
              description "Maximum trace file size";
            }
            leaf files {
              type uint32 {
                range "2 .. 1000";
              }
              default "3";
              description "Maximum number of trace files";
            }
            choice world-readable-choice {
              leaf world-readable {
                type empty;
                description "Allow any user to read the log file";
              }
              leaf no-world-readable {
                type empty;
                description "Don't allow any user to read the log file";
              }
            }
            leaf match {
              type "jt:regular-expression";
              description "Regular expression for lines to be logged";
            }
          }
          list flag {
            description "Area of Path Computation Client Daemon to enable debugging output";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum pcep {
                  description "Trace Path Computation Element protocol";
                }
                enum all {
                  description "Trace all areas of Path Computation Client Daemon  code";
                }
              }
            }
          }
        }
        leaf delegation-cleanup-timeout {
          type uint32 {
            range "0 .. 2147483647";
          }
          description "Return control of LSPs or Re-delegation time after PCEP session disconnect (default: 30)";
          units seconds;
        }
        leaf pce-traffic-steering {
          type empty;
          description "Enable PCE traffic steering (FlowSpec Capability)";
        }
      }
      container traceoptions {
        description "Path Computation Client Daemon trace options";
        uses pccd-traceoptions-type;
      }
    }
    container ppp {
      description "Configure PPP process";
      uses apply-advanced;
      container traceoptions {
        description "PPP trace options";
        uses ppp-traceoptions-type;
      }
      list monitor-session {
        description "Monitor packet exchange for PPP session";
        key session-name;
        leaf session-name {
          type string;
          description "PPP session name";
        }
        uses apply-advanced;
      }
    }
    container pppoe {
      description "Configure PPPoE process";
      uses apply-advanced;
      container traceoptions {
        description "PPPoE trace options";
        uses pppoe-traceoptions-type;
      }
      leaf pado-advertise {
        type empty;
        description "Enable PADO advertising of PPPoE Service-Names";
      }
      list service-name-tables {
        description "PPPoE Service Name Tables";
        key name;
        leaf name {
          type string {
            length "1 .. 32";
          }
          description "Table name";
        }
        uses apply-advanced;
        container empty-service {
          description "Empty Service configuration";
          status deprecated;
          uses apply-advanced;
          choice service-action {
            case case_1 {
              leaf terminate {
                type empty;
                description "Service Action Terminate";
              }
            }
            case case_2 {
              leaf drop {
                type empty;
                description "Service Action Drop";
              }
            }
            case case_3 {
              leaf delay {
                type uint32 {
                  range "1 .. 120";
                }
                description "Service Action Delay";
                units seconds;
              }
            }
          }
        }
        list service {
          description "One or more named PPPoE services";
          key name;
          leaf name {
            type string {
              length "1 .. 64";
            }
            description "Service name";
          }
          uses apply-advanced;
          choice service-action {
            case case_1 {
              leaf terminate {
                type empty;
                description "Service Action Terminate";
              }
            }
            case case_2 {
              leaf drop {
                type empty;
                description "Service Action Drop";
              }
            }
            case case_3 {
              leaf delay {
                type uint32 {
                  range "1 .. 120";
                }
                description "Service Action Delay";
                units seconds;
              }
            }
          }
          leaf dynamic-profile {
            type string {
              length "1 .. 64";
            }
            description "Attach dynamic-profile to entry";
          }
          leaf routing-instance {
            type string;
            description "Attach routing-instance to entry";
          }
          leaf max-sessions {
            type uint32;
            description "Maximum sessions associated with Service";
          }
          list agent-specifier {
            description "One or more ACI/ARI entries";
            key "aci ari";
            ordered-by user;
            leaf aci {
              type string {
                length "1 .. 64";
              }
              description "Agent Circuit ID";
            }
            leaf ari {
              type string {
                length "1 .. 64";
              }
              description "Agent Remote ID";
            }
            uses apply-advanced;
            choice service-action {
              case case_1 {
                leaf terminate {
                  type empty;
                  description "Service Action Terminate";
                }
              }
              case case_2 {
                leaf drop {
                  type empty;
                  description "Service Action Drop";
                }
              }
              case case_3 {
                leaf delay {
                  type uint32 {
                    range "1 .. 120";
                  }
                  description "Service Action Delay";
                  units seconds;
                }
              }
            }
            leaf dynamic-profile {
              type string {
                length "1 .. 64";
              }
              description "Attach dynamic-profile to entry";
            }
            leaf routing-instance {
              type string;
              description "Attach routing-instance to entry";
            }
            leaf static-interface {
              type "jt:interface-unit";
              description "Attach static-interface to entry";
            }
          }
        }
      }
    }
    container r2cp {
      description "Radio-to-Router Control Protocol configuration";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable R2CP";
          }
        }
      }
      container traceoptions {
        description "R2CP trace options";
        uses r2cp-traceoptions-type;
      }
      leaf server-port {
        type uint16 {
          range "1 .. 65535";
        }
        description "R2CP server port number";
      }
      container client-port {
        description "R2CP client port number";
        choice client-port-value {
          case case_1 {
            leaf port-number {
              type uint16 {
                range "1 .. 65535";
              }
              description "UDP port number for R2CP clients";
            }
          }
          case case_2 {
            choice port-any {
              case case_1 {
                leaf any {
                  type empty;
                  description "Accept R2CP messages sent on any port";
                }
              }
            }
          }
        }
      }
      leaf node-terminate-count {
        type uint16 {
          range "1 .. 5";
        }
        description "Node Term retransmit count";
      }
      leaf node-terminate-interval {
        type uint16 {
          range "100 .. 5000";
        }
        description "Node Terminate interval";
        units milliseconds;
      }
      leaf session-terminate-count {
        type uint16 {
          range "1 .. 5";
        }
        description "Session Term retransmit count";
      }
      leaf session-terminate-interval {
        type uint16 {
          range "100 .. 5000";
        }
        description "Session Term interval";
        units milliseconds;
      }
      list radio {
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Radio name";
        }
        uses apply-advanced;
        leaf interface {
          type "jt:interface-unit";
          description "Interface listening for R2CP messages";
        }
        leaf down-count {
          type uint16;
          description "Number of missed keepalives before radio is assumed 'down'";
          status deprecated;
        }
        leaf virtual-channel-group {
          type string;
          description "Virtual channel group name";
        }
        list radio-interface {
          key name;
          ordered-by user;
          leaf name {
            type "jt:interface-unit";
            description "Data channel interface";
          }
          uses apply-advanced;
        }
      }
    }
    container sflow {
      description "SFLOW protocol";
      presence "enable sflow";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for SFLOW";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum configuration {
                description "Trace sflow configuration";
              }
              enum rtsock {
                description "Trace rtsock events";
              }
              enum interface {
                description "Trace interface events";
              }
              enum client-server {
                description "Trace sflow client-server events";
              }
              enum all {
                description "Trace all sflow events";
              }
            }
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      container agent-id {
        description "Sflow agent id configuration";
        leaf inet {
          type "jt:ipv4addr";
          description "Sflow agent ipv4 address";
        }
        leaf inet6 {
          type "jt:ipv6addr";
          description "Sflow agent ipv6 address";
        }
      }
      leaf polling-interval {
        type uint32 {
          range "0 .. 3600";
        }
        default "20";
        description "Interval between port statistics";
        units seconds;
      }
      container adaptive-sample-rate {
        description "Trigger adaptive sampling";
        leaf sample-rate {
          type uint32;
          description "Sflow adaptive sampling rate configuration";
        }
        leaf fallback {
          type empty;
          description "Enable fallback to previous adapted sample rates";
        }
        leaf sample-limit-threshold {
          type uint32;
          description "Per FPC Sample limits in pps ";
        }
      }
      leaf inline-sampling {
        type empty;
        description "Enable inline sampling of packets";
      }
      container sample-rate {
        description "Sampling rate";
        uses apply-advanced;
        leaf ingress {
          type uint32;
          description "Ingress direction";
        }
        leaf egress {
          type uint32;
          description "Egress direction";
        }
      }
      container source-ip {
        description "Sflow source ip configuration";
        leaf inet {
          type "jt:ipv4addr";
          description "Sflow datagram source ipv4 address";
        }
        leaf inet6 {
          type "jt:ipv6addr";
          description "Sflow datagram source ipv6 address";
        }
      }
      list collector {
        description "SFLOW collector configuration";
        key name;
        max-elements 4;
        ordered-by user;
        leaf name {
          type "jt:ipaddr";
          description "Collector IP v4/v6 address";
        }
        uses apply-advanced;
        leaf udp-port {
          type uint16;
          default "6343";
          description "Collector UDP port";
        }
        leaf dscp {
          type uint16 {
            range "0 .. 63";
          }
          default "0";
          description "Collector DSCP Value";
        }
        leaf forwarding-class {
          type string;
          description "Forwarding class for exported sflow packets";
        }
      }
      list interfaces {
        description "Enable SFLOW on this interface";
        key name;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        uses apply-advanced;
        leaf polling-interval {
          type uint32 {
            range "0 .. 3600";
          }
          description "Interval between port statistics";
          units seconds;
        }
        container sample-rate {
          description "Sampling rate";
          uses apply-advanced;
          leaf ingress {
            type uint32;
            description "Ingress direction";
          }
          leaf egress {
            type uint32;
            description "Egress direction";
          }
        }
      }
      leaf disable-sw-rate-limiter {
        type empty;
        description "Disable sw rate limiter";
      }
      leaf sample-size {
        type uint32 {
          range "128 .. 512";
        }
        description "Sample Size";
      }
    }
    container layer2-control {
      description "Global options for layer 2 protocols";
      uses juniper-protocols-l2control;
    }
    container rstp {
      description "Rapid Spanning Tree Protocol options";
      uses juniper-protocols-stp;
    }
    container mstp {
      description "Multiple Spanning Tree Protocol options";
      uses juniper-protocols-mstp;
    }
    container vstp {
      description "VLAN Spanning Tree Protocol options";
      uses juniper-protocols-vstp;
    }
    container loop-detect {
      description "Layer2 Loop Detect on interface with non-IP L2 Multicast mac as destination mac";
      presence "enable loop-detect";
      uses apply-advanced;
      list interface {
        description "Interface name to block Loop Detect PDUs on";
        key name;
        ordered-by user;
        leaf name {
          type string;
        }
        uses apply-advanced;
        leaf disable {
          type empty;
          description "Disable loop detect feature on a port";
        }
      }
      container enhanced {
        description "Enhanced loop detect configuration";
        uses apply-advanced;
        list interface {
          description "Name of interface";
          key name;
          ordered-by user;
          leaf name {
            type string;
          }
          uses apply-advanced;
          leaf vlan-id {
            type uint32 {
              range "1 .. 4094";
            }
            description "VLAN identifier for trunk interface";
          }
          leaf loop-detect-action {
            type enumeration {
              enum interface-down {
                description "Interface down action";
              }
              enum laser-off {
                description "Laser off action";
              }
            }
            default "interface-down";
            description "Action that needs to be taken";
          }
          leaf transmit-interval {
            type enumeration {
              enum 1s;
              enum 10s;
              enum 1m;
              enum 10m;
            }
            default "1s";
            description "Interval between loop-detect messages";
          }
          leaf revert-interval {
            type uint32 {
              range "0 .. 300";
            }
            default "0";
            description "Interval after which action will be reverted";
            units seconds;
          }
        }
      }
      leaf destination-mac {
        type "jt:mac-multicast";
        description "Destination non-IP L2 multicast mac to be used for transmitting Loop Detect PDUs";
      }
      leaf transmit-interval {
        type uint16 {
          range "5 .. 3600";
        }
        description "Loop Detect PDU TX interval in sec --default 30s";
        units seconds;
      }
    }
    container protection-group {
      description "Protection group";
      presence "enable protection-group";
      uses juniper-protocols-protection-group;
    }
    container mvrp {
      description "MVRP configuration";
      uses juniper-protocols-mvrp;
    }
    container ovsdb {
      description "OVSDB protocol";
      uses juniper-protocols-vgd;
    }
  }
  grouping admin_group_include_exclude {
    uses apply-advanced;
    choice include-any-choice {
      case case_1 {
        leaf-list include-any {
          type string;
          description "Groups, one or more of which must be present";
          ordered-by user;
        }
      }
    }
    choice include-all-choice {
      case case_1 {
        leaf-list include-all {
          type string;
          description "Groups, all of which must be present";
          ordered-by user;
        }
      }
    }
    choice exclude-choice {
      case case_1 {
        leaf-list exclude {
          type string;
          description "Groups, all of which must be absent";
          ordered-by user;
        }
      }
    }
  }
  grouping apply-advanced {
    description "Apply advanced configuration logic";
    leaf-list apply-groups {
      type string;
      description "Groups from which to inherit configuration data";
      ordered-by user;
    }
    leaf-list apply-groups-except {
      type string;
      description "Don't inherit configuration data from these groups";
      ordered-by user;
    }
    list apply-macro {
      description "Macro and parameters for commit script expansion";
      key name;
      ordered-by user;
      uses apply-macro-type;
    }
  }
  grouping apply-macro-type {
    description "Macro data for commit-script expansion";
    leaf name {
      type string;
      description "Name of the macro to be expanded";
    }
    list data {
      key name;
      uses macro-data-type;
    }
  }
  grouping bandwidth-type {
    uses apply-advanced;
    leaf per-traffic-class-bandwidth {
      type string;
      description "Bandwidth to reserve";
      units bps;
    }
    leaf ct0 {
      type string;
      description "Bandwidth from traffic class 0";
      units bps;
    }
    leaf ct1 {
      type string;
      description "Bandwidth from traffic class 1";
      units bps;
    }
    leaf ct2 {
      type string;
      description "Bandwidth from traffic class 2";
      units bps;
    }
    leaf ct3 {
      type string;
      description "Bandwidth from traffic class 3";
      units bps;
    }
  }
  grouping cfm-traceoptions {
    description "Trace options for connectivity fault management";
    uses apply-advanced;
    leaf no-remote-trace {
      type empty;
      description "Disable remote tracing";
    }
    container file {
      description "Trace file information";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "3";
        description "Maximum number of trace files";
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
      leaf match {
        type "jt:regular-expression";
        description "Regular expression for lines to be logged";
      }
    }
    list flag {
      description "Tracing parameters";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum configuration {
            description "Trace configuration events";
          }
          enum routing-socket {
            description "Trace routing socket events";
          }
          enum protocol {
            description "Trace protocol processing events";
          }
          enum init {
            description "Trace events related to protocol daemon start-up";
          }
          enum error {
            description "Trace events related to catestrophic errors in daemon";
          }
          enum issu {
            description "Trace ISSU related events";
          }
          enum all {
            description "Trace everything";
          }
        }
      }
    }
  }
  grouping civic-address-elements {
    uses apply-advanced;
    leaf what {
      type uint16 {
        range "0 .. 2";
      }
      default "1";
      description "Type of address";
    }
    leaf country-code {
      type string {
        length "2";
      }
      description "Two-letter country code";
    }
    list ca-type {
      key name;
      ordered-by user;
      leaf name {
        type uint16 {
          range "0 .. 255";
        }
        description "Address element type";
      }
      uses apply-advanced;
      leaf ca-value {
        type string {
          length "1 .. 248";
        }
        description "Address element value";
      }
    }
  }
  grouping clksync-traceoptions {
    description "Trace options for syncE and PTP";
    uses apply-advanced;
    leaf no-remote-trace {
      type empty;
      description "Disable remote tracing";
    }
    container file {
      description "Trace file information";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "3";
        description "Maximum number of trace files";
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
      leaf match {
        type "jt:regular-expression";
        description "Regular expression for lines to be logged";
      }
    }
    list flag {
      description "Tracing parameters";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum init {
            description "Trace daemon start-up related events";
          }
          enum routing-socket {
            description "Trace routing-socket events";
          }
          enum synchronization {
            description "Trace esmc protocol events only";
          }
          enum ptp {
            description "Trace ptp protocol events only";
          }
          enum protocol {
            description "Trace protocol events";
          }
          enum configuration {
            description "Trace configuration events";
          }
          enum debug {
            description "Trace generic debug events";
          }
          enum ppm {
            description "Trace periodic packet management events";
          }
          enum error {
            description "Trace error events";
          }
          enum hybrid {
            description "Trace hybrid events";
          }
          enum framer {
            description "Trace BITS framer events";
          }
          enum ipc {
            description "Trace IPC messages";
          }
          enum all {
            description "Trace everything";
          }
        }
      }
    }
  }
  grouping co-ordinate-elements {
    description "Geographical co-ordinates";
    uses apply-advanced;
    leaf longitude {
      type uint16 {
        range "0 .. 360";
      }
      description "Longitude value";
    }
    leaf lattitude {
      type uint16 {
        range "0 .. 360";
      }
      description "Lattitude value";
    }
  }
  grouping juniper-default-ri-protocols-igmp-snooping {
    description "IGMP snooping options";
    uses apply-advanced;
    list vlan {
      description "VLAN options";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "VLAN name";
      }
      uses apply-advanced;
      container traceoptions {
        description "Trace options for IGMP Snooping";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum packets {
                description "Trace all IGMP packets";
              }
              enum query {
                description "Trace IGMP membership query messages";
              }
              enum report {
                description "Trace membership report messages";
              }
              enum leave {
                description "Trace leave group messages (IGMPv2 only)";
              }
              enum group {
                description "Trace group operations";
              }
              enum client-notification {
                description "Trace notifications";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      leaf query-interval {
        type uint32 {
          range "1 .. 1024";
        }
        default "125";
        description "When to send host query messages";
        units seconds;
      }
      container l2-querier {
        description "Enable L2 querier mode";
        uses apply-advanced;
        leaf source-address {
          type "jt:ipv4addr";
          description "Source IP address to use for L2 querier";
        }
      }
      leaf query-response-interval {
        type string;
        default "10";
        description "How long to wait for a host query response";
        units seconds;
      }
      leaf query-last-member-interval {
        type string;
        default "1";
        description "When to send group query messages";
        units seconds;
      }
      leaf robust-count {
        type uint32 {
          range "2 .. 10";
        }
        default "2";
        description "Expected packet loss on a subnet";
      }
      leaf immediate-leave {
        type empty;
        description "Enable immediate group leave on interfaces";
      }
      container proxy {
        description "Enable proxy mode";
        presence "enable proxy";
        uses apply-advanced;
        leaf source-address {
          type "jt:ipv4addr";
          description "Source IP address to use for proxy";
        }
      }
      leaf evpn-ssm-reports-only {
        type empty;
        description "Accept and process only <s,g> reports of SSM groups";
      }
      container data-forwarding {
        description "MVR Data forwarding options";
        uses apply-advanced;
        choice source_receiver {
          case case_1 {
            container source {
              description "MVR source vlan";
              uses apply-advanced;
              leaf groups {
                type "jt:ipv4prefix";
                description "Group range";
              }
            }
          }
          case case_2 {
            container receiver {
              description "MVR receiver vlan";
              uses apply-advanced;
              choice enab_disab_translate {
                case case_1 {
                  leaf translate {
                    type empty;
                    description "Translate vid of outgoing pkt to receiver vlan's tag";
                  }
                }
              }
              list source-list {
                description "Source VLANs for this receiver vlan";
                key name;
                ordered-by user;
                leaf name {
                  type string;
                  description "VLAN name";
                }
                uses apply-advanced;
              }
              leaf install {
                type empty;
                description "Install forwarded bridging entires";
              }
              leaf mode {
                type enumeration {
                  enum transparent {
                    description "MVR Transparent Mode";
                  }
                  enum proxy {
                    description "MVR Proxy Mode";
                  }
                }
                default "transparent";
                description "MVR Mode";
              }
            }
          }
        }
      }
      list interface {
        description "Interface options for IGMP";
        key name;
        ordered-by user;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        uses apply-advanced;
        leaf multicast-router-interface {
          type empty;
          description "Enabling multicast-router-interface on the interface";
        }
        leaf immediate-leave {
          type empty;
          description "Enable immediate group leave on interface";
        }
        leaf host-only-interface {
          type empty;
          description "Enable interface to be treated as host-side interface";
        }
        leaf group-limit {
          type uint16;
          description "Maximum number of groups an interface can join";
        }
        container static {
          description "Static group or source membership";
          uses apply-advanced;
          list group {
            description "IP multicast group address";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv4addr";
              description "IP multicast group address";
            }
            uses apply-advanced;
            list source {
              description "IP multicast source address";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv4addr";
                description "Source address of IP multicast data";
              }
              uses apply-advanced;
            }
          }
        }
      }
      list qualified-vlan {
        description "VLAN options for qualified-learning";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "0 .. 1023";
          }
          description "VLAN ID of the learning-domain";
        }
        uses apply-advanced;
        leaf query-interval {
          type uint32 {
            range "1 .. 1024";
          }
          description "When to send host query messages";
          units seconds;
        }
        container l2-querier {
          description "Enable L2 querier mode";
          uses apply-advanced;
          leaf source-address {
            type "jt:ipv4addr";
            description "Source IP address to use for L2 querier";
          }
        }
        leaf query-response-interval {
          type string;
          description "How long to wait for a host query response";
          units seconds;
        }
        leaf query-last-member-interval {
          type string;
          description "When to send group query messages";
          units seconds;
        }
        leaf robust-count {
          type uint32 {
            range "2 .. 10";
          }
          description "Expected packet loss on a subnet";
        }
        leaf immediate-leave {
          type empty;
          description "Enable immediate group leave on interfaces";
        }
        container proxy {
          description "Enable proxy mode";
          presence "enable proxy";
          uses apply-advanced;
          leaf source-address {
            type "jt:ipv4addr";
            description "Source IP address to use for proxy";
          }
        }
        leaf evpn-ssm-reports-only {
          type empty;
          description "Accept and process only <s,g> reports of SSM groups";
        }
        list interface {
          description "Interface options for IGMP";
          key name;
          ordered-by user;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
          leaf multicast-router-interface {
            type empty;
            description "Enabling multicast-router-interface on the interface";
          }
          leaf immediate-leave {
            type empty;
            description "Enable immediate group leave on interface";
          }
          leaf host-only-interface {
            type empty;
            description "Enable interface to be treated as host-side interface";
          }
          leaf group-limit {
            type uint16;
            description "Maximum number of groups an interface can join";
          }
          container static {
            description "Static group or source membership";
            uses apply-advanced;
            list group {
              description "IP multicast group address";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv4addr";
                description "IP multicast group address";
              }
              uses apply-advanced;
              list source {
                description "IP multicast source address";
                key name;
                ordered-by user;
                leaf name {
                  type "jt:ipv4addr";
                  description "Source address of IP multicast data";
                }
                uses apply-advanced;
              }
            }
          }
        }
      }
      leaf version {
        type uint8 {
          range "2 .. 3";
        }
        description "Set IGMP version number on interface_help_string";
      }
    }
    container traceoptions {
      description "Trace options for IGMP Snooping";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum packets {
              description "Trace all IGMP packets";
            }
            enum query {
              description "Trace IGMP membership query messages";
            }
            enum report {
              description "Trace membership report messages";
            }
            enum leave {
              description "Trace leave group messages (IGMPv2 only)";
            }
            enum group {
              description "Trace group operations";
            }
            enum client-notification {
              description "Trace notifications";
            }
            enum host-notification {
              description "Trace host notifications";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf query-interval {
      type uint32 {
        range "1 .. 1024";
      }
      default "125";
      description "When to send host query messages";
      units seconds;
    }
    leaf query-response-interval {
      type string;
      default "10";
      description "How long to wait for a host query response";
      units seconds;
    }
    leaf query-last-member-interval {
      type string;
      default "1";
      description "When to send group query messages";
      units seconds;
    }
    leaf robust-count {
      type uint32 {
        range "2 .. 10";
      }
      default "2";
      description "Expected packet loss on a subnet";
    }
    leaf immediate-leave {
      type empty;
      description "Enable immediate group leave on interfaces";
    }
    leaf evpn-ssm-reports-only {
      type empty;
      description "Accept and process only <s,g> reports of SSM groups";
    }
    leaf version {
      type uint8 {
        range "2 .. 3";
      }
      description "Set IGMP snooping version number";
    }
    container proxy {
      description "Enable proxy mode";
      presence "enable proxy";
      uses apply-advanced;
      leaf source-address {
        type "jt:ipv4addr";
        description "Source IP address to use for proxy";
      }
      leaf irb {
        type empty;
        description "Proxy IGMP reports to IRB";
      }
    }
    list interface {
      description "Interface options for IGMP";
      key name;
      ordered-by user;
      leaf name {
        type "jt:interface-name";
        description "Interface name";
      }
      uses apply-advanced;
      leaf multicast-router-interface {
        type empty;
        description "Enabling multicast-router-interface on the interface";
      }
      leaf immediate-leave {
        type empty;
        description "Enable immediate group leave on interfaces";
      }
      leaf host-only-interface {
        type empty;
        description "Enable interfaces to be treated as host-side interfaces";
      }
      leaf group-limit {
        type uint16 {
          range "1 .. 65535";
        }
        description "Maximum number of (source,group) per interface";
      }
      container static {
        description "Static group or source membership";
        uses apply-advanced;
        list group {
          description "IP multicast group address";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv4addr";
            description "IP multicast group address";
          }
          uses apply-advanced;
          list source {
            description "IP multicast source address";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv4addr";
              description "Source address of IP multicast data";
            }
            uses apply-advanced;
          }
        }
      }
    }
  }
  grouping juniper-default-ri-protocols-mld-snooping {
    description "MLD snooping options";
    uses apply-advanced;
    list vlan {
      description "VLAN options";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "VLAN name";
      }
      uses apply-advanced;
      container traceoptions {
        description "Trace options for MLD Snooping";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum packets {
                description "Trace all MLD packets";
              }
              enum query {
                description "Trace MLD membership query messages";
              }
              enum report {
                description "Trace membership report messages";
              }
              enum leave {
                description "Trace leave group messages (MLDv1 only)";
              }
              enum group {
                description "Trace group operations";
              }
              enum client-notification {
                description "Trace notifications";
              }
              enum host-notification {
                description "Trace host notifications";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      leaf query-interval {
        type uint32 {
          range "1 .. 1024";
        }
        default "125";
        description "When to send host query messages";
        units seconds;
      }
      container l2-querier {
        description "Enable L2 querier mode";
        uses apply-advanced;
        leaf source-address {
          type "jt:ipv6addr";
          description "Source IP address to use for L2 querier";
        }
      }
      leaf query-response-interval {
        type string;
        default "10";
        description "How long to wait for a host query response";
        units seconds;
      }
      leaf query-last-member-interval {
        type string;
        default "1";
        description "When to send group query messages";
        units seconds;
      }
      leaf robust-count {
        type uint32 {
          range "2 .. 10";
        }
        default "2";
        description "Expected packet loss on a subnet";
      }
      leaf immediate-leave {
        type empty;
        description "Enable immediate group leave on interfaces";
      }
      container proxy {
        description "Enable proxy mode";
        uses apply-advanced;
        leaf source-address {
          type "jt:ipv6addr";
          description "Source IP address to use for proxy";
        }
      }
      leaf evpn-ssm-reports-only {
        type empty;
        description "Accept and process only <s,g> reports of SSM groups";
      }
      leaf version {
        type uint8 {
          range "1 .. 2";
        }
        description "Set MLD snooping version number";
      }
      list interface {
        description "Interface options for MLD";
        key name;
        ordered-by user;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        uses apply-advanced;
        leaf multicast-router-interface {
          type empty;
          description "Enabling multicast-router-interface on the interface";
        }
        leaf immediate-leave {
          type empty;
          description "Enable immediate group leave on interfaces";
        }
        leaf host-only-interface {
          type empty;
          description "Enable interfaces to be treated as host-side interfaces";
        }
        leaf group-limit {
          type uint16;
          description "Maximum number of groups an interface can join";
        }
        container static {
          description "Static group or source membership";
          uses apply-advanced;
          list group {
            description "IP multicast group address";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv6addr";
              description "IP multicast group address";
            }
            uses apply-advanced;
            list source {
              description "IP multicast source address";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv6addr";
                description "Source address of IP multicast data";
              }
              uses apply-advanced;
            }
          }
        }
      }
      list qualified-vlan {
        description "VLAN options for qualified-learning";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "0 .. 1023";
          }
          description "VLAN ID of the learning-domain";
        }
        uses apply-advanced;
        leaf query-interval {
          type uint32 {
            range "1 .. 1024";
          }
          description "When to send host query messages";
          units seconds;
        }
        container l2-querier {
          uses apply-advanced;
          leaf source-address {
            type "jt:ipv6addr";
            description "Source IP address to use for L2 querier";
          }
        }
        leaf query-response-interval {
          type string;
          description "How long to wait for a host query response";
          units seconds;
        }
        leaf query-last-member-interval {
          type string;
          description "When to send group query messages";
          units seconds;
        }
        leaf robust-count {
          type uint32 {
            range "2 .. 10";
          }
          description "Expected packet loss on a subnet";
        }
        leaf immediate-leave {
          type empty;
          description "Enable immediate group leave on interfaces";
        }
        container proxy {
          description "Enable proxy mode";
          uses apply-advanced;
          leaf source-address {
            type "jt:ipv6addr";
            description "Source IP address to use for proxy";
          }
        }
        leaf evpn-ssm-reports-only {
          type empty;
          description "Accept and process only <s,g> reports of SSM groups";
        }
        list interface {
          description "Interface options for MLD";
          key name;
          ordered-by user;
          leaf name {
            type "jt:interface-name";
            description "Interface name";
          }
          uses apply-advanced;
          leaf multicast-router-interface {
            type empty;
            description "Enabling multicast-router-interface on the interface";
          }
          leaf immediate-leave {
            type empty;
            description "Enable immediate group leave on interfaces";
          }
          leaf host-only-interface {
            type empty;
            description "Enable interfaces to be treated as host-side interfaces";
          }
          leaf group-limit {
            type uint16;
            description "Maximum number of groups an interface can join";
          }
          container static {
            description "Static group or source membership";
            uses apply-advanced;
            list group {
              description "IP multicast group address";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv6addr";
                description "IP multicast group address";
              }
              uses apply-advanced;
              list source {
                description "IP multicast source address";
                key name;
                ordered-by user;
                leaf name {
                  type "jt:ipv6addr";
                  description "Source address of IP multicast data";
                }
                uses apply-advanced;
              }
            }
          }
        }
      }
    }
    container traceoptions {
      description "Trace options for MLD Snooping";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum packets {
              description "Trace all MLD packets";
            }
            enum query {
              description "Trace MLD membership query messages";
            }
            enum report {
              description "Trace membership report messages";
            }
            enum leave {
              description "Trace leave group messages (MLDv2 only)";
            }
            enum group {
              description "Trace group operations";
            }
            enum client-notification {
              description "Trace notifications";
            }
            enum host-notification {
              description "Trace host notifications";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf query-interval {
      type uint32 {
        range "1 .. 1024";
      }
      default "125";
      description "When to send host query messages";
      units seconds;
    }
    leaf query-response-interval {
      type string;
      default "10";
      description "How long to wait for a host query response";
      units seconds;
    }
    leaf query-last-member-interval {
      type string;
      default "1";
      description "When to send group query messages";
      units seconds;
    }
    leaf robust-count {
      type uint32 {
        range "2 .. 10";
      }
      default "2";
      description "Expected packet loss on a subnet";
    }
    leaf immediate-leave {
      type empty;
      description "Enable immediate group leave on interfaces";
    }
    leaf evpn-ssm-reports-only {
      type empty;
      description "Accept and process only <s,g> reports of SSM groups";
    }
    leaf version {
      type uint8 {
        range "1 .. 2";
      }
      description "Set MLD snooping version number";
    }
    container proxy {
      description "Enable proxy mode";
      uses apply-advanced;
      leaf source-address {
        type "jt:ipv6addr";
        description "Source IP address to use for proxy";
      }
      leaf irb {
        type empty;
        description "Proxy IGMP reports to IRB";
      }
    }
    list interface {
      description "Interface options for MLD";
      key name;
      ordered-by user;
      leaf name {
        type "jt:interface-name";
        description "Interface name";
      }
      uses apply-advanced;
      leaf multicast-router-interface {
        type empty;
        description "Enabling multicast-router-interface on the interface";
      }
      leaf immediate-leave {
        type empty;
        description "Enable immediate group leave on interfaces";
      }
      leaf host-only-interface {
        type empty;
        description "Enable interfaces to be treated as host-side interfaces";
      }
      leaf group-limit {
        type uint16 {
          range "1 .. 65535";
        }
        description "Maximum number of (source,group) per interface";
      }
      container static {
        description "Static group or source membership";
        uses apply-advanced;
        list group {
          description "IP multicast group address";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv6addr";
            description "IP multicast group address";
          }
          uses apply-advanced;
          list source {
            description "IP multicast source address";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv6addr";
              description "Source address of IP multicast data";
            }
            uses apply-advanced;
          }
        }
      }
    }
  }
  grouping juniper-protocols-amt {
    uses apply-advanced;
    container traceoptions {
      description "Trace options for AMT";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum packets {
              description "Trace all AMT packets";
            }
            enum errors {
              description "Trace all error messages";
            }
            enum tunnels {
              description "Trace all AMT tunnel messages";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    container relay {
      description "AMT relay";
      presence "enable relay";
      uses juniper-protocols-amt-relay;
    }
  }
  grouping juniper-protocols-amt-relay {
    uses apply-advanced;
    container family {
      description "Protocol family";
      presence "enable family";
      uses apply-advanced;
      container inet {
        presence "enable inet";
        uses apply-advanced;
        leaf anycast-prefix {
          type "jt:ipv4prefix";
          description "IPv4 anycast prefix";
        }
        leaf local-address {
          type "jt:ipv4addr";
          description "IPv4 local address";
        }
      }
    }
    leaf secret-key-timeout {
      type uint32 {
        range "5 .. 1440";
      }
      description "Time interval for the secret key to expire";
      units minutes;
    }
    leaf tunnel-limit {
      type uint32;
      description "Number of AMT tunnels";
    }
    leaf unicast-stream-limit {
      type uint32;
      description "Maximum number of AMT unicast streams(s,g,intf)";
    }
    leaf accounting {
      type empty;
      description "Enable AMT accounting";
    }
    leaf-list tunnel-devices {
      type "jt:interface-device";
      description "Tunnel devices to be used for creating ud interfaces";
      ordered-by user;
    }
  }
  grouping juniper-protocols-ancp {
    uses apply-advanced;
    container traceoptions {
      description "Trace options for ANCP";
      uses apply-advanced;
      leaf no-remote-trace {
        type empty;
        description "Disable remote tracing";
      }
      container file {
        description "Trace file information";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "3";
          description "Maximum number of trace files";
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
        leaf match {
          type "jt:regular-expression";
          description "Regular expression for lines to be logged";
        }
      }
      leaf level {
        type enumeration {
          enum error {
            description "Match error conditions";
          }
          enum warning {
            description "Match warning messages";
          }
          enum notice {
            description "Match conditions that should be handled specially";
          }
          enum info {
            description "Match informational messages";
          }
          enum verbose {
            description "Match verbose messages";
          }
          enum all {
            description "Match all levels";
          }
        }
        default "error";
        description "Level of debugging output";
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum config {
              description "Trace config events";
            }
            enum cos {
              description "Trace CoS events";
            }
            enum routing-socket {
              description "Trace routing-socket events";
            }
            enum packet {
              description "Trace ANCP packet Transmit/Receive";
            }
            enum protocol {
              description "Trace protocol events";
            }
            enum process {
              description "Trace process internals";
            }
            enum startup {
              description "Trace ANCP startup events/flow";
            }
            enum session {
              description "Trace connection events/sessions";
            }
            enum general {
              description "Trace general flow";
            }
            enum restart {
              description "Trace process restart flow";
            }
            enum subscriber {
              description "Trace subscriber events";
            }
            enum timer {
              description "Trace timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    container qos-adjust {
      description "Enable QoS adjust for interfaces and interface-sets";
      presence "enable qos-adjust";
      uses apply-advanced;
      leaf sdsl-bytes {
        type int32 {
          range "-100 .. 100";
        }
        default "0";
        description "Set SDSL byte adjust value";
        status deprecated;
        units bytes;
      }
      leaf sdsl-overhead-adjust {
        type uint32 {
          range "80 .. 100";
        }
        default "100";
        description "Set SDSL overhead adjusted";
        status deprecated;
        units percent;
      }
      leaf vdsl-bytes {
        type int32 {
          range "-100 .. 100";
        }
        default "0";
        description "Set VDSL byte adjust value";
        status deprecated;
        units bytes;
      }
      leaf vdsl-overhead-adjust {
        type uint32 {
          range "80 .. 100";
        }
        default "100";
        description "Set VDSL overhead adjusted";
        status deprecated;
        units percent;
      }
      leaf vdsl2-bytes {
        type int32 {
          range "-100 .. 100";
        }
        default "0";
        description "Set VDSL2 byte adjust value";
        status deprecated;
        units bytes;
      }
      leaf vdsl2-overhead-adjust {
        type uint32 {
          range "80 .. 100";
        }
        default "100";
        description "Set VDSL2 overhead adjusted";
        status deprecated;
        units percent;
      }
      leaf adsl-bytes {
        type int32 {
          range "-100 .. 100";
        }
        default "0";
        description "Set ADSL byte adjust value";
        status deprecated;
        units bytes;
      }
      leaf adsl2-bytes {
        type int32 {
          range "-100 .. 100";
        }
        default "0";
        description "Set ADSL2 byte adjust value";
        status deprecated;
        units bytes;
      }
      leaf adsl2-plus-bytes {
        type int32 {
          range "-100 .. 100";
        }
        default "0";
        description "Set ADSL-PLUS byte adjust value";
        status deprecated;
        units bytes;
      }
      leaf other-bytes {
        type int32 {
          range "-100 .. 100";
        }
        default "0";
        description "Set OTHER byte adjust value";
        status deprecated;
        units bytes;
      }
      leaf other-overhead-adjust {
        type uint32 {
          range "80 .. 100";
        }
        default "100";
        description "Set OTHER overhead adjusted";
        status deprecated;
        units percent;
      }
    }
    leaf pre-ietf-mode {
      type empty;
      description "Enable backward compatibility mode";
    }
    leaf maximum-discovery-table-entries {
      type uint32 {
        range "1 .. 100000";
      }
      description "Maximum number of discovery table entries per neighbor";
    }
    leaf adjacency-timer {
      type uint32 {
        range "1 .. 25";
      }
      description "Set adjacency timer in seconds";
    }
    leaf maximum-helper-restart-time {
      type uint32 {
        range "45 .. 600";
      }
      description "Set maximum helper restart timer";
      units seconds;
    }
    leaf qos-adjust-adsl {
      type uint32 {
        range "0 .. 100";
      }
      default "100";
      description "Set ADSL QoS adjustment factor";
      status deprecated;
      units percent;
    }
    leaf qos-adjust-adsl2 {
      type uint32 {
        range "0 .. 100";
      }
      default "100";
      description "Set ADSL2 QoS adjustment factor";
      status deprecated;
      units percent;
    }
    leaf qos-adjust-adsl2-plus {
      type uint32 {
        range "0 .. 100";
      }
      default "100";
      description "Set ADSL2+ QoS adjustment factor";
      status deprecated;
      units percent;
    }
    leaf qos-adjust-vdsl {
      type uint32 {
        range "0 .. 100";
      }
      default "100";
      description "Set VDSL QoS adjustment factor";
      status deprecated;
      units percent;
    }
    leaf qos-adjust-vdsl2 {
      type uint32 {
        range "0 .. 100";
      }
      default "100";
      description "Set VDSL2 QoS adjustment factor";
      status deprecated;
      units percent;
    }
    leaf qos-adjust-sdsl {
      type uint32 {
        range "0 .. 100";
      }
      default "100";
      description "Set SDSL QoS adjustment factor";
      status deprecated;
      units percent;
    }
    leaf qos-adjust-other {
      type uint32 {
        range "0 .. 100";
      }
      default "100";
      description "Set OTHER QoS adjustment factor";
      status deprecated;
      units percent;
    }
    leaf gsmp-syn-wait {
      type empty;
      description "Enable partition ID learning";
    }
    leaf gsmp-syn-timeout {
      type uint32 {
        range "1 .. 60";
      }
      default "30";
      description "Set partition ID learning timeout";
      units seconds;
    }
    leaf adjacency-loss-hold-time {
      type uint32 {
        range "0 .. 1800";
      }
      default "0";
      description "Audit duration upon adjacency loss";
      units seconds;
    }
    container interfaces {
      description "ANCP interface config options";
      uses apply-advanced;
      list interface-set {
        description "ANCP interface-set specific options";
        key name;
        leaf name {
          type string;
          description "Name of the interface set";
        }
        uses apply-advanced;
        leaf access-identifier {
          type string;
          description "Subscriber specific access identifier information";
        }
        leaf neighbor {
          type "jt:ipaddr";
          description "Neighbor IP address";
          status deprecated;
        }
      }
      list interface {
        key name;
        uses ancp_interfaces_type;
      }
    }
    list neighbor {
      description "ANCP neighbor config options";
      key name;
      leaf name {
        type "jt:ipaddr";
        description "IP address of neighbor";
      }
      uses apply-advanced;
      leaf discovery-mode {
        type empty;
        description "Enable topology discovery";
        status deprecated;
      }
      choice ietf-mode-option {
        case case_1 {
          leaf pre-ietf-mode {
            type empty;
            description "Enable backward compatibility mode";
          }
        }
        case case_2 {
          leaf ietf-mode {
            type empty;
            description "Enable IETF mode";
          }
        }
      }
      leaf adjacency-timer {
        type uint32 {
          range "1 .. 25";
        }
        description "Set adjacency timer in seconds";
      }
      leaf maximum-discovery-table-entries {
        type uint32 {
          range "1 .. 100000";
        }
        description "Maximum number of discovery table entries";
      }
      container auto-configure-trigger {
        description "Auto-configure trigger support";
        presence "enable auto-configure-trigger";
        uses apply-advanced;
        leaf interface {
          type "jt:interface-device";
        }
      }
      leaf adjacency-loss-hold-time {
        type uint32 {
          range "0 .. 1800";
        }
        description "Audit duration upon adjacency loss";
        units seconds;
      }
    }
  }
  grouping ancp_interfaces_type {
    description "Physical interface";
    leaf name {
      type "jt:interface-name";
    }
    uses apply-advanced;
    leaf access-identifier {
      type string;
      description "Subscriber specific access identifier information";
    }
    leaf neighbor {
      type "jt:ipaddr";
      description "Neighbor IP address";
      status deprecated;
    }
    leaf overhead-accounting {
      type empty;
      description "Enable overhead accounting on per ACI basis";
      status deprecated;
    }
  }
  grouping juniper-protocols-bgp {
    uses apply-advanced;
    container path-selection {
      description "Configure path selection strategy";
      uses apply-advanced;
      leaf l2vpn-use-bgp-rules {
        type empty;
        description "Use standard BGP rules during L2VPN path selection";
      }
      leaf cisco-non-deterministic {
        type empty;
        description "Use Cisco IOS nondeterministic path selection algorithm";
      }
      leaf always-compare-med {
        type empty;
        description "Always compare MED values, regardless of neighbor AS";
      }
      container med-plus-igp {
        description "Add IGP cost to next-hop to MED before comparing MED values";
        presence "enable med-plus-igp";
        uses apply-advanced;
        leaf med-multiplier {
          type uint16 {
            range "1 .. 1000";
          }
          default "1";
          description "Multiplier for MED";
        }
        leaf igp-multiplier {
          type uint16 {
            range "1 .. 1000";
          }
          default "1";
          description "Multiplier for IGP cost to next-hop";
        }
      }
      leaf external-router-id {
        type empty;
        description "Compare router ID on BGP externals";
      }
      leaf as-path-ignore {
        type empty;
        description "Ignore AS path comparison during path selection";
      }
    }
    container accept-prpd-connection {
      description "Enable BGP to accept PRPD connections";
      presence "enable accept-prpd-connection";
    }
    leaf advertise-from-main-vpn-tables {
      type empty;
      description "Advertise VPN routes from bgp.Xvpn.0 tables in master instance";
    }
    leaf stale-labels-holddown-period {
      type int32 {
        range "1 .. 600";
      }
      description "Duration (sec) MPLS labels allocated by BGP are kept after they go stale";
    }
    leaf holddown-all-stale-labels {
      type empty;
      description "Hold all BGP stale-labels, facilitating make-before-break for new label advertisements";
    }
    container egress-te-backup-paths {
      description "Backup-path for Egress-TE peer interface failure";
      uses apply-advanced;
      list template {
        description "Backup-path template";
        key name;
        leaf name {
          type string;
          description "Name of Egress-TE backup path";
        }
        uses apply-advanced;
        list peer {
          description "Egress peer TE backup exit path";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "Address of BGP peer to use as backup next-hop";
          }
          uses apply-advanced;
        }
        container remote-nexthop {
          description "Resolve and use tunnel to this next-hop as backup path";
          uses apply-advanced;
          leaf remote-nh-addr {
            type "jt:ipaddr";
            description "Address of remote-nexthop to use as backup path";
          }
        }
        container ip-forward {
          description "Use IP-forward backup path for Egress TE";
          presence "enable ip-forward";
          uses apply-advanced;
          leaf rti-name {
            type string;
            description "Routing-instance to use as IP forward backup-path";
          }
        }
      }
    }
    leaf sr-preference-override {
      type uint32;
      description "Replace received segment routing traffic engineering preference value with override value";
    }
    leaf vpn-apply-export {
      type empty;
      description "Apply BGP export policy when exporting VPN routes";
    }
    container family {
      description "Protocol family for NLRIs in updates";
      uses apply-advanced;
      container inet {
        description "IPv4 NLRI parameters";
        uses apply-advanced;
        container labeled-unicast {
          description "Include labeled unicast NLRI";
          presence "enable labeled-unicast";
          uses bgp-afi-labeled;
        }
        container segment-routing-te {
          description "Include segment-routing TE policy";
          presence "enable segment-routing-te";
          uses bgp-afi-srte;
        }
        container transport {
          description "Include Classful Transport NLRI";
          presence "enable transport";
          uses bgp-afi-inet-transport;
        }
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-topo;
        }
        container multicast {
          description "Include multicast NLRI";
          presence "enable multicast";
          uses bgp-afi-default;
        }
        container flow {
          description "Include flow NLRI";
          presence "enable flow";
          uses bgp-afi-flow-with-redirect-ip-action;
        }
        container any {
          description "Include unicast or multicast NLRI";
          presence "enable any";
          uses bgp-afi-default;
        }
      }
      container inet-vpn {
        description "IPv4 Layer 3 VPN NLRI parameters";
        uses apply-advanced;
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-l3vpn;
        }
        container multicast {
          description "Include multicast NLRI";
          presence "enable multicast";
          uses bgp-afi-vpn;
        }
        container flow {
          description "Include flow VPN NLRI";
          presence "enable flow";
          uses bgp-afi-flow-with-redirect-ip-action;
        }
        container any {
          description "Include unicast or multicast NLRI";
          presence "enable any";
          uses bgp-afi-vpn;
        }
      }
      container inet6 {
        description "IPv6 NLRI parameters";
        uses apply-advanced;
        container labeled-unicast {
          description "Include labeled unicast NLRI";
          presence "enable labeled-unicast";
          uses bgp-afi-inet6-labeled;
        }
        container segment-routing-te {
          description "Include segment-routing TE policy";
          presence "enable segment-routing-te";
          uses bgp-afi-srte;
        }
        container transport {
          description "Include Classful Transport NLRI";
          presence "enable transport";
          uses bgp-afi-inet6-transport;
        }
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-topo;
        }
        container multicast {
          description "Include multicast NLRI";
          presence "enable multicast";
          uses bgp-afi-default;
        }
        container flow {
          description "Include flow NLRI";
          presence "enable flow";
          uses bgp-afi-flow;
        }
        container any {
          description "Include unicast or multicast NLRI";
          presence "enable any";
          uses bgp-afi-default;
        }
      }
      container inet6-vpn {
        description "IPv6 Layer 3 VPN NLRI parameters";
        uses apply-advanced;
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-l3vpn;
        }
        container multicast {
          description "Include multicast NLRI";
          presence "enable multicast";
          uses bgp-afi-vpn;
        }
        container flow {
          description "Include flow VPN NLRI";
          presence "enable flow";
          uses bgp-afi-flow;
        }
        container any {
          description "Include unicast or multicast NLRI";
          presence "enable any";
          uses bgp-afi-vpn;
        }
      }
      container iso-vpn {
        description "ISO Layer 3 VPN NLRI parameters";
        uses apply-advanced;
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-vpn-protection;
        }
      }
      container l2vpn {
        description "MPLS-based Layer 2 VPN and VPLS NLRI parameters";
        uses apply-advanced;
        container auto-discovery-only {
          description "Include auto-discovery NLRI for LDP Layer 2 VPN and VPLS";
          presence "enable auto-discovery-only";
          uses bgp-afi-default;
        }
        container auto-discovery-mspw {
          description "Include auto-discovery NLRI for LDP Signalled MultiSegment PW";
          presence "enable auto-discovery-mspw";
          uses bgp-afi-default;
        }
        container signaling {
          description "Include Layer 2 VPN and VPLS signaling NLRI";
          presence "enable signaling";
          uses bgp-afi-l2vpn;
        }
      }
      container evpn {
        description "EVPN NLRI parameters";
        uses apply-advanced;
        container signaling {
          description "Include EVPN signaling NLRI";
          presence "enable signaling";
          uses bgp-afi-default;
        }
      }
      container inet-mvpn {
        description "IPv4 MVPN NLRI parameters";
        uses apply-advanced;
        container signaling {
          description "Include IPv4 multicast VPN signaling NLRI";
          presence "enable signaling";
          uses bgp-afi-default;
        }
      }
      container inet6-mvpn {
        description "IPv6 MVPN NLRI parameters";
        uses apply-advanced;
        container signaling {
          description "Include IPv6 multicast VPN signaling NLRI";
          presence "enable signaling";
          uses bgp-afi-default;
        }
      }
      container inet-mdt {
        description "IPv4 Multicast Distribution Tree (MDT) NLRI parameters";
        uses apply-advanced;
        container signaling {
          description "Include IPv4 multicast VPN auto-discovery NLRI";
          presence "enable signaling";
          uses bgp-afi-default;
        }
      }
      container traffic-engineering {
        description "Traffic Engineering (BGP-TE) NLRI parameters";
        uses apply-advanced;
        container unicast {
          description "Include BGP-TE NLRI";
          presence "enable unicast";
          uses bgp-afi-default;
        }
      }
      container route-target {
        description "Route target NLRI used for VPN route filtering";
        presence "enable route-target";
        uses apply-advanced;
        container prefix-limit {
          description "Limit maximum number of prefixes from a peer";
          uses bgpaf-prefix-limit;
        }
        container accepted-prefix-limit {
          description "Limit maximum number of prefixes accepted from a peer";
          uses bgpaf-accepted-prefix-limit;
        }
        container proxy-generate {
          description "Generate route target NLRI for peers that don't support it";
          presence "enable proxy-generate";
          uses apply-advanced;
          leaf-list route-target-policy {
            type "jt:policy-algebra";
            description "Limit VPN routes that are used to generate proxy route-target filters";
            ordered-by user;
          }
        }
        leaf external-paths {
          type uint32 {
            range "1 .. 256";
          }
          description "Number of external paths accepted for route filtering";
        }
        leaf advertise-default {
          type empty;
          description "Advertise default and suppress more specific routes";
        }
        leaf damping {
          type empty;
          description "Enable route flap damping";
        }
        container graceful-restart {
          description "BGP graceful restart options";
          uses bgp-af-gr;
        }
        leaf local-ipv4-address {
          type "jt:ipv4addr";
          description "Local IPv4 address";
        }
        container nexthop-resolution {
          description "Configure nexthop resolution properties";
          uses apply-advanced;
          leaf no-resolution {
            type empty;
            description "Consider nexthop good without resolution attempt";
          }
        }
        container output-queue-priority {
          description "Default output-queue to assign updates to";
          uses bgp-output-queue-priority-class;
        }
        container route-refresh-priority {
          description "Default output-queue to assign route refreshes to";
          uses bgp-output-queue-priority-class;
        }
        container withdraw-priority {
          description "Default output-queue to assign withdrawn routes to";
          uses bgp-output-queue-priority-class;
        }
      }
      container fabric {
        description "Fabric NLRI parameters";
        status deprecated;
        uses apply-advanced;
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-default;
        }
      }
      container bridge {
        description "Bridge NLRI parameters";
        status deprecated;
        uses apply-advanced;
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-default;
        }
      }
      container bridge-vpn {
        description "Bridge VPN NLRI parameters";
        status deprecated;
        uses apply-advanced;
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-vpn;
        }
      }
      container fabric-vpn {
        description "Fabric VPN NLRI parameters";
        status deprecated;
        uses apply-advanced;
        container unicast {
          description "Include unicast NLRI";
          presence "enable unicast";
          uses bgp-afi-vpn;
        }
      }
      container inet-bgpmcast {
        description "IPv4 BGPMCAST NLRI parameters";
        uses apply-advanced;
        container signaling {
          description "Include IPv4 BGP multicast signaling NLRI";
          presence "enable signaling";
          uses bgp-afi-default;
        }
      }
      container inet6-bgpmcast {
        description "IPv6 BGPMCAST NLRI parameters";
        uses apply-advanced;
        container signaling {
          description "Include IPv6 BGP multicast signaling NLRI";
          presence "enable signaling";
          uses bgp-afi-default;
        }
      }
    }
    container egress-te {
      description "Use Egress Peering traffic engineering";
      presence "enable egress-te";
      uses apply-advanced;
      leaf install-address {
        type "jt:ipaddr";
        description "Address to use in egress-te created inet route";
      }
      container rib {
        description "Select primary table for Egress-TE routes";
        uses apply-advanced;
        leaf "inet.0" {
          type empty;
          description "Install Egress-TE routes in inet.0";
        }
        leaf "inet6.0" {
          type empty;
          description "Install Egress-TE routes in inet6.0";
        }
      }
      leaf no-install {
        type empty;
        description "Avoid installation to FIB or resolving over";
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy to set attributes";
        ordered-by user;
      }
      leaf backup-path {
        type string;
        description "The 'egress-te-backup-paths template' to use for this peer";
      }
    }
    leaf advertise-prefix-sid {
      type empty;
      description "Advertise prefix sid to E-BGP peers";
    }
    leaf accept-prefix-sid {
      type empty;
      description "Accept prefix sid from E-BGP peers";
    }
    leaf advertise-srgb {
      type empty;
      description "Advertise SRGB TLV";
    }
    leaf tcp-connect-port {
      type uint16 {
        range "1 .. 65535";
      }
      description "TCP port number to connect with peer on";
    }
    leaf egress-te-sid-stats {
      type empty;
      description "Create BGP-Peer-SID sensor";
    }
    list egress-te-set-segment {
      description "Configure BGP-Peer-Set segment";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "The BGP-Peer-Set segment name";
      }
      uses apply-advanced;
      container label {
        description "BGP-Peer-Set SID label from static label pool";
        uses apply-advanced;
        leaf label-value {
          type uint32 {
            range "16 .. 1048575";
          }
          description "BGP-Peer-Set SID label value from static label pool";
        }
      }
      container egress-te-backup-segment {
        description "Backup segment for FRR";
        uses apply-advanced;
        container label {
          description "Backup segment label from static label pool";
          uses apply-advanced;
          leaf label-value {
            type uint32 {
              range "16 .. 1048575";
            }
            description "Backup segment label value from static label pool";
          }
        }
      }
      container egress-te-backup-ip-forward {
        description "Use IP-forward backup path for Egress TE";
        presence "enable egress-te-backup-ip-forward";
        uses apply-advanced;
        leaf instance-name {
          type string;
          description "Routing-instance to use as IP forward backup-path";
        }
      }
    }
    list group {
      description "Define a peer group";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Group name";
      }
      uses apply-advanced;
      leaf type {
        type enumeration {
          enum internal {
            description "IBGP group";
          }
          enum external {
            description "EBGP group";
          }
        }
        description "Type of peer group";
      }
      leaf protocol {
        type enumeration {
          enum rip {
            description "Use RIP to resolve the BGP next hop";
            status deprecated;
          }
          enum ospf {
            description "Use OSPF to resolve the BGP next hop";
            status deprecated;
          }
          enum isis {
            description "Use IS-IS to resolve the BGP next hop";
            status deprecated;
          }
        }
        description "IGP to use to resolve the next hop";
        status deprecated;
      }
      container traceoptions {
        description "Trace options for BGP";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum damping {
                description "Trace BGP damping information";
              }
              enum packets {
                description "Trace all BGP protocol packets";
              }
              enum open {
                description "Trace BGP open packets";
              }
              enum update {
                description "Trace BGP update packets";
              }
              enum keepalive {
                description "Trace BGP keepalive packets";
              }
              enum refresh {
                description "Trace BGP refresh packets";
              }
              enum nsr-synchronization {
                description "Trace NSR synchronization events";
              }
              enum bfd {
                description "Trace BFD events";
              }
              enum 4byte-as {
                description "Trace 4 byte AS events";
              }
              enum add-path {
                description "Trace add-path events";
              }
              enum graceful-restart {
                description "Trace Graceful Restart events";
              }
              enum egress-te {
                description "Egress Peering Traffic-Engineering events";
              }
              enum thread-io {
                description "Trace threaded I/O processing";
              }
              enum sharding {
                description "Trace BGP rib sharding";
              }
              enum thread-update-io {
                description "Trace threaded update I/O processing";
              }
              enum route-validation {
                description "Trace route validation";
              }
              enum ipsec {
                description "Trace ipsec";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
          container filter {
            description "Filter to apply to this flag";
            presence "enable filter";
            uses bgp_filter_obj;
          }
        }
      }
      leaf description {
        type string {
          length "1 .. 255";
        }
        description "Text description";
      }
      container metric-out {
        description "Route metric sent in MED";
        choice metric_param {
          case case_1 {
            leaf metric-value {
              type uint32 {
                range "0 .. 4294967295";
              }
              description "Metric value";
            }
          }
          case case_2 {
            container minimum-igp {
              description "Track the minimum IGP metric";
              presence "enable minimum-igp";
              leaf metric-offset {
                type int32;
                description "Metric offset for MED";
              }
            }
          }
          case case_3 {
            container igp {
              description "Track the IGP metric";
              presence "enable igp";
              leaf metric-offset {
                type int32;
                description "Metric offset for MED";
              }
              leaf delay-med-update {
                type empty;
                description "Delay updating MED when IGP metric increases";
              }
            }
          }
          case case_4 {
            container effective-aigp {
              description "Track the effective AIGP metric";
              presence "enable effective-aigp";
              leaf metric-offset {
                type int32;
                description "Metric offset for MED";
              }
            }
          }
          case case_5 {
            container minimum-effective-aigp {
              description "Track the minimum effective AIGP metric";
              presence "enable minimum-effective-aigp";
              leaf metric-offset {
                type int32;
                description "Metric offset for MED";
              }
            }
          }
        }
      }
      container multihop {
        description "Configure an EBGP multihop session";
        presence "enable multihop";
        uses apply-advanced;
        leaf ttl {
          type uint8 {
            range "1 .. 255";
          }
          description "TTL value for the session";
        }
        leaf no-nexthop-change {
          type empty;
          description "Do not change next hop to self in advertisements";
        }
      }
      container ebgp-community-cleanup {
        description "Community specific cleanup for eBGP peers";
        presence "enable ebgp-community-cleanup";
        uses apply-advanced;
        leaf origin-validation {
          type enumeration {
            enum accept {
              description "Accept Origin Validation State Community";
            }
            enum reject {
              description "Reject Origin Validation State Community";
            }
          }
          description "Origin Validation State receive behavior";
        }
      }
      leaf route-server-client {
        type empty;
        description "Enable route server client behavior";
      }
      leaf accept-remote-nexthop {
        type empty;
        description "Allow import policy to specify a non-directly connected next-hop";
      }
      leaf preference {
        type uint32;
        description "Preference value";
      }
      leaf local-preference {
        type uint32;
        description "Value of LOCAL_PREF path attribute";
      }
      leaf local-address {
        type "jt:ipaddr";
        description "Address of local end of BGP session";
      }
      leaf local-interface {
        type "jt:interface-name";
        description "Local interface for IPv6 link local EBGP peering";
      }
      leaf forwarding-context {
        type string;
        description "Routing-instance used for data-forwarding and transport-session";
      }
      leaf hold-time {
        type uint32 {
          range "0 .. 65535";
        }
        description "Hold time used when negotiating with a peer";
      }
      leaf minimum-hold-time {
        type uint32 {
          range "3 .. 65535";
        }
        description "Minimum hold time accepted from the peer";
      }
      leaf passive {
        type empty;
        description "Do not send open messages to a peer";
      }
      leaf advertise-inactive {
        type empty;
        description "Advertise inactive routes";
      }
      choice advertise-peer-as-choice {
        leaf advertise-peer-as {
          type empty;
          description "Advertise routes received from the same autonomous system";
        }
        leaf no-advertise-peer-as {
          type empty;
          description "Don't advertise routes received from the same autonomous system";
        }
      }
      container advertise-external {
        description "Advertise best external routes";
        presence "enable advertise-external";
        leaf conditional {
          type empty;
          description "Route matches active route upto med-comparison rule";
        }
      }
      leaf keep {
        type enumeration {
          enum all {
            description "Retain all routes";
          }
          enum none {
            description "Retain no routes";
          }
        }
        description "How to retain routes in the routing table";
      }
      leaf rfc6514-compliant-safi129 {
        type empty;
        description "Compliant with RFC6514 SAFI129 format";
      }
      leaf no-aggregator-id {
        type empty;
        description "Set router ID in aggregator path attribute to 0";
      }
      leaf mtu-discovery {
        type empty;
        description "Enable TCP path MTU discovery";
      }
      leaf enforce-first-as {
        type empty;
        description "Enforce first AS in AS-path is the neighbor's AS";
      }
      leaf out-delay {
        type uint32 {
          range "0 .. 65535";
        }
        description "How long before exporting routes from routing table";
      }
      leaf ttl {
        type enumeration {
          enum 1;
          enum 255;
        }
        description "TTL value for the single-hop peer";
      }
      leaf log-updown {
        type empty;
        description "Log a message for peer state transitions";
      }
      leaf damping {
        type empty;
        description "Enable route flap damping";
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
      leaf-list nlri {
        type enumeration {
          enum unicast {
            description "Include unicast NLRI";
            status deprecated;
          }
          enum multicast {
            description "Include multicast NLRI";
            status deprecated;
          }
          enum any {
            description "Include any kind of NLRI";
            status deprecated;
          }
        }
        description "NLRI type to include in updates";
        ordered-by user;
        status deprecated;
      }
      container bgp-error-tolerance {
        description "Handle BGP malformed updates softly";
        presence "enable bgp-error-tolerance";
        uses apply-advanced;
        leaf malformed-update-log-interval {
          type uint32 {
            range "10 .. 65535";
          }
          default "300";
          description "Time used when logging malformed update";
          units seconds;
        }
        choice malformed-routes-limit-choice {
          case case_1 {
            leaf malformed-route-limit {
              type uint32 {
                range "0 .. 4294967295";
              }
              default "1000";
              description "Maximum number of malformed routes from a peer";
            }
          }
          case case_2 {
            leaf no-malformed-route-limit {
              type empty;
              description "No malformed route limit";
            }
          }
        }
      }
      container family {
        description "Protocol family for NLRIs in updates";
        uses apply-advanced;
        container inet {
          description "IPv4 NLRI parameters";
          uses apply-advanced;
          container labeled-unicast {
            description "Include labeled unicast NLRI";
            presence "enable labeled-unicast";
            uses bgp-afi-labeled;
          }
          container segment-routing-te {
            description "Include segment-routing TE policy";
            presence "enable segment-routing-te";
            uses bgp-afi-srte;
          }
          container transport {
            description "Include Classful Transport NLRI";
            presence "enable transport";
            uses bgp-afi-inet-transport;
          }
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-topo;
          }
          container multicast {
            description "Include multicast NLRI";
            presence "enable multicast";
            uses bgp-afi-default;
          }
          container flow {
            description "Include flow NLRI";
            presence "enable flow";
            uses bgp-afi-flow-with-redirect-ip-action;
          }
          container any {
            description "Include unicast or multicast NLRI";
            presence "enable any";
            uses bgp-afi-default;
          }
        }
        container inet-vpn {
          description "IPv4 Layer 3 VPN NLRI parameters";
          uses apply-advanced;
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-l3vpn;
          }
          container multicast {
            description "Include multicast NLRI";
            presence "enable multicast";
            uses bgp-afi-vpn;
          }
          container flow {
            description "Include flow VPN NLRI";
            presence "enable flow";
            uses bgp-afi-flow-with-redirect-ip-action;
          }
          container any {
            description "Include unicast or multicast NLRI";
            presence "enable any";
            uses bgp-afi-vpn;
          }
        }
        container inet6 {
          description "IPv6 NLRI parameters";
          uses apply-advanced;
          container labeled-unicast {
            description "Include labeled unicast NLRI";
            presence "enable labeled-unicast";
            uses bgp-afi-inet6-labeled;
          }
          container segment-routing-te {
            description "Include segment-routing TE policy";
            presence "enable segment-routing-te";
            uses bgp-afi-srte;
          }
          container transport {
            description "Include Classful Transport NLRI";
            presence "enable transport";
            uses bgp-afi-inet6-transport;
          }
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-topo;
          }
          container multicast {
            description "Include multicast NLRI";
            presence "enable multicast";
            uses bgp-afi-default;
          }
          container flow {
            description "Include flow NLRI";
            presence "enable flow";
            uses bgp-afi-flow;
          }
          container any {
            description "Include unicast or multicast NLRI";
            presence "enable any";
            uses bgp-afi-default;
          }
        }
        container inet6-vpn {
          description "IPv6 Layer 3 VPN NLRI parameters";
          uses apply-advanced;
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-l3vpn;
          }
          container multicast {
            description "Include multicast NLRI";
            presence "enable multicast";
            uses bgp-afi-vpn;
          }
          container flow {
            description "Include flow VPN NLRI";
            presence "enable flow";
            uses bgp-afi-flow;
          }
          container any {
            description "Include unicast or multicast NLRI";
            presence "enable any";
            uses bgp-afi-vpn;
          }
        }
        container iso-vpn {
          description "ISO Layer 3 VPN NLRI parameters";
          uses apply-advanced;
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-vpn-protection;
          }
        }
        container l2vpn {
          description "MPLS-based Layer 2 VPN and VPLS NLRI parameters";
          uses apply-advanced;
          container auto-discovery-only {
            description "Include auto-discovery NLRI for LDP Layer 2 VPN and VPLS";
            presence "enable auto-discovery-only";
            uses bgp-afi-default;
          }
          container auto-discovery-mspw {
            description "Include auto-discovery NLRI for LDP Signalled MultiSegment PW";
            presence "enable auto-discovery-mspw";
            uses bgp-afi-default;
          }
          container signaling {
            description "Include Layer 2 VPN and VPLS signaling NLRI";
            presence "enable signaling";
            uses bgp-afi-l2vpn;
          }
        }
        container evpn {
          description "EVPN NLRI parameters";
          uses apply-advanced;
          container signaling {
            description "Include EVPN signaling NLRI";
            presence "enable signaling";
            uses bgp-afi-default;
          }
        }
        container inet-mvpn {
          description "IPv4 MVPN NLRI parameters";
          uses apply-advanced;
          container signaling {
            description "Include IPv4 multicast VPN signaling NLRI";
            presence "enable signaling";
            uses bgp-afi-default;
          }
        }
        container inet6-mvpn {
          description "IPv6 MVPN NLRI parameters";
          uses apply-advanced;
          container signaling {
            description "Include IPv6 multicast VPN signaling NLRI";
            presence "enable signaling";
            uses bgp-afi-default;
          }
        }
        container inet-mdt {
          description "IPv4 Multicast Distribution Tree (MDT) NLRI parameters";
          uses apply-advanced;
          container signaling {
            description "Include IPv4 multicast VPN auto-discovery NLRI";
            presence "enable signaling";
            uses bgp-afi-default;
          }
        }
        container traffic-engineering {
          description "Traffic Engineering (BGP-TE) NLRI parameters";
          uses apply-advanced;
          container unicast {
            description "Include BGP-TE NLRI";
            presence "enable unicast";
            uses bgp-afi-default;
          }
        }
        container route-target {
          description "Route target NLRI used for VPN route filtering";
          presence "enable route-target";
          uses apply-advanced;
          container prefix-limit {
            description "Limit maximum number of prefixes from a peer";
            uses bgpaf-prefix-limit;
          }
          container accepted-prefix-limit {
            description "Limit maximum number of prefixes accepted from a peer";
            uses bgpaf-accepted-prefix-limit;
          }
          container proxy-generate {
            description "Generate route target NLRI for peers that don't support it";
            presence "enable proxy-generate";
            uses apply-advanced;
            leaf-list route-target-policy {
              type "jt:policy-algebra";
              description "Limit VPN routes that are used to generate proxy route-target filters";
              ordered-by user;
            }
          }
          leaf external-paths {
            type uint32 {
              range "1 .. 256";
            }
            description "Number of external paths accepted for route filtering";
          }
          leaf advertise-default {
            type empty;
            description "Advertise default and suppress more specific routes";
          }
          leaf damping {
            type empty;
            description "Enable route flap damping";
          }
          container graceful-restart {
            description "BGP graceful restart options";
            uses bgp-af-gr;
          }
          leaf local-ipv4-address {
            type "jt:ipv4addr";
            description "Local IPv4 address";
          }
          container nexthop-resolution {
            description "Configure nexthop resolution properties";
            uses apply-advanced;
            leaf no-resolution {
              type empty;
              description "Consider nexthop good without resolution attempt";
            }
          }
          container output-queue-priority {
            description "Default output-queue to assign updates to";
            uses bgp-output-queue-priority-class;
          }
          container route-refresh-priority {
            description "Default output-queue to assign route refreshes to";
            uses bgp-output-queue-priority-class;
          }
          container withdraw-priority {
            description "Default output-queue to assign withdrawn routes to";
            uses bgp-output-queue-priority-class;
          }
        }
        container fabric {
          description "Fabric NLRI parameters";
          status deprecated;
          uses apply-advanced;
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-default;
          }
        }
        container bridge {
          description "Bridge NLRI parameters";
          status deprecated;
          uses apply-advanced;
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-default;
          }
        }
        container bridge-vpn {
          description "Bridge VPN NLRI parameters";
          status deprecated;
          uses apply-advanced;
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-vpn;
          }
        }
        container fabric-vpn {
          description "Fabric VPN NLRI parameters";
          status deprecated;
          uses apply-advanced;
          container unicast {
            description "Include unicast NLRI";
            presence "enable unicast";
            uses bgp-afi-vpn;
          }
        }
        container inet-bgpmcast {
          description "IPv4 BGPMCAST NLRI parameters";
          uses apply-advanced;
          container signaling {
            description "Include IPv4 BGP multicast signaling NLRI";
            presence "enable signaling";
            uses bgp-afi-default;
          }
        }
        container inet6-bgpmcast {
          description "IPv6 BGPMCAST NLRI parameters";
          uses apply-advanced;
          container signaling {
            description "Include IPv6 BGP multicast signaling NLRI";
            presence "enable signaling";
            uses bgp-afi-default;
          }
        }
      }
      leaf authentication-key {
        type string {
          length "1 .. 126";
        }
        description "MD5 authentication key";
      }
      leaf authentication-algorithm {
        type enumeration {
          enum md5 {
            description "Message Digest 5";
          }
          enum hmac-sha-1-96 {
            description "Hash-based Message Authentication Code (SHA1) (96 bits)";
          }
          enum aes-128-cmac-96 {
            description "Cipher-based Message Authentication Code (AES128) (96 bits)";
          }
          enum ao {
            description "TCP Authentication Option";
          }
        }
        description "Authentication algorithm name";
      }
      leaf tcpao-auth-mismatch {
        type enumeration {
          enum allow-without-tcpao {
            description "Allow the connection establishment without TCP-AO";
          }
        }
        description "Continue without TCP-AO if any one TCP endpoint does not have TCP-AO configured";
      }
      leaf authentication-key-chain {
        type string {
          length "1 .. 128";
        }
        description "Key chain name";
      }
      leaf-list export {
        type "jt:policy-algebra";
        description "Export policy";
        ordered-by user;
      }
      container remove-private {
        description "Remove well-known private AS numbers";
        presence "enable remove-private";
        uses apply-advanced;
        container all {
          description "Remove all private AS numbers and do not stop at the first public AS number";
          presence "enable all";
          container replace {
            description "Replace private AS numbers with the BGP Group's local AS number";
            presence "enable replace";
            leaf nearest {
              type empty;
              description "Use closest public AS number to replace a private AS number";
            }
          }
        }
        leaf no-peer-loop-check {
          type empty;
          description "Remove peer loop-check";
        }
      }
      leaf cluster {
        type "jt:areaid";
        description "Cluster identifier";
      }
      leaf no-client-reflect {
        type empty;
        description "Disable intracluster route redistribution";
      }
      leaf peer-as {
        type string;
        description " Autonomous system number in plain number or 'higher 16bits'.'Lower 16 bits' (asdot notation) format";
      }
      container local-as {
        description "Local autonomous system number";
        leaf as-number {
          type string;
          description " Autonomous system number in plain number or 'higher 16bits'.'Lower 16 bits' (asdot notation) format";
        }
        leaf loops {
          type int32 {
            range "1 .. 10";
          }
          description "Maximum number of times this AS can be in an AS path";
        }
        leaf private {
          type empty;
          description "Hide this local AS in paths learned from this peering";
        }
        leaf alias {
          type empty;
          description "Treat this AS as an alias to the system AS";
        }
        leaf no-prepend-global-as {
          type empty;
          description "Do not prepend global autonomous-system number in advertised paths";
        }
      }
      leaf ipsec-sa {
        type string {
          length "1 .. 32";
        }
        description "IPSec SA name";
      }
      container graceful-shutdown {
        description "BGP peer graceful shutdown option";
        uses apply-advanced;
        container receiver {
          description "BGP peer graceful-shutdown receiver";
          presence "enable receiver";
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable graceful-shutdown receiver";
          }
          leaf local-preference {
            type uint32;
            description "Value of receiver LOCAL_PREF path attribute";
          }
        }
        container sender {
          description "BGP peer graceful-shutdown sender";
          presence "enable sender";
          uses apply-advanced;
          leaf local-preference {
            type uint32;
            description "Value of sender LOCAL_PREF path attribute";
          }
        }
      }
      container shutdown {
        description "Shutdown";
        presence "enable shutdown";
        uses apply-advanced;
        leaf notify-message {
          type string;
          description "Notification message";
        }
      }
      leaf unconfigured-peer-graceful-restart {
        type empty;
        description "BGP unconfigured peer graceful restart options";
      }
      container graceful-restart {
        description "BGP graceful restart options";
        presence "enable graceful-restart";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable graceful restart";
            }
          }
        }
        leaf restart-time {
          type uint32 {
            range "1 .. 1800";
          }
          description "Restart time used when negotiating with a peer";
        }
        leaf stale-routes-time {
          type uint32 {
            range "1 .. 1800";
          }
          description "Maximum time for which stale routes are kept";
        }
        container long-lived {
          description "Long-lived graceful restart options";
          uses apply-advanced;
          container receiver {
            description "Long-lived graceful restart receiver (helper) options";
            uses apply-advanced;
            choice enable-disable {
              case case_1 {
                leaf disable {
                  type empty;
                  description "Disable receiver (helper) functionality";
                }
              }
            }
          }
          container advertise-to-non-llgr-neighbor {
            description "Advertise stale routes to non-LLGR neighbors";
            presence "enable advertise-to-non-llgr-neighbor";
            uses apply-advanced;
            leaf omit-no-export {
              type empty;
              description "Do not attach no-export community to stale routes";
            }
          }
        }
        leaf disable-notification-extensions {
          type empty;
          description "Disable notification extensions";
        }
        leaf forwarding-state-bit {
          type enumeration {
            enum as-rr-client {
              description "As for a route reflector client";
            }
            enum from-fib {
              description "Always use state of associated FIB(s)";
            }
          }
          description "Control forwarding-state flag negotiation";
        }
        leaf dont-help-shared-fate-bfd-down {
          type empty;
          description "Honor BFD-Down(C=0) if GR-restart not in progress";
        }
      }
      leaf include-mp-next-hop {
        type empty;
        description "Include NEXT-HOP attribute in multiprotocol updates";
      }
      leaf disable-4byte-as {
        type empty;
        description "Disable 4 byte AS capability advertisement";
      }
      container idle-after-switch-over {
        description "Stop peer session from coming up after nonstop-routing switch-over";
        choice idle-interval {
          case case_1 {
            leaf forever {
              type empty;
              description "Idle the peer until the user intervenes";
            }
          }
          case case_2 {
            leaf timeout {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Timeout value, in seconds, for starting peer after switch over";
            }
          }
        }
      }
      container outbound-route-filter {
        description "Dynamically negotiated cooperative route filtering";
        uses apply-advanced;
        leaf bgp-orf-cisco-mode {
          type empty;
          description "Using BGP ORF capability code 130 and Prefix ORF type 128";
        }
        container extended-community {
          description "Extended community filtering";
          status deprecated;
          uses apply-advanced;
          choice accept-choice {
            leaf accept {
              type empty;
              description "Honor remote requests for extended community ORF";
            }
            leaf no-accept {
              type empty;
              description "Don't honor remote requests for extended community ORF";
            }
          }
          leaf vrf-filter {
            type empty;
            description "Request remote filtering using locally configured VRF import targets";
          }
        }
        container prefix-based {
          description "Prefix-based outbound route filtering";
          presence "enable prefix-based";
          uses apply-advanced;
          container accept {
            description "Honor Prefix-based ORFs from remote peers";
            presence "enable accept";
            uses apply-advanced;
            leaf inet {
              type empty;
              description "Honor IPv4 prefix filters";
            }
            leaf inet6 {
              type empty;
              description "Honor IPv6 prefix filters";
            }
          }
        }
      }
      container message-batching {
        description "DEPRECATED - Batching of outgoing messages";
        status deprecated;
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf enable {
              type empty;
              description "Enable parameter";
            }
          }
          case case_2 {
            leaf disable {
              type empty;
              description "Disable parameter";
            }
          }
        }
        leaf interval {
          type uint32 {
            range "100 .. 1000";
          }
          default "250";
          description "DEPRECATED - Interval over which to batch messages";
          units milliseconds;
        }
      }
      container multipath {
        description "Allow load sharing among multiple BGP paths";
        presence "enable multipath";
        uses apply-advanced;
        leaf disable {
          type empty;
          description "Disable Multipath";
        }
        leaf multiple-as {
          type empty;
          description "Use paths received from different ASs";
        }
        leaf allow-protection {
          type empty;
          description "Allow protection for multipath legs";
        }
        leaf pause-computation-during-churn {
          type empty;
          description "Pause multipath job to absorb churn";
        }
        leaf list-nexthop {
          type empty;
          description "Use List-NH for homogenous nexthop-set also";
        }
        container allow-external-internal {
          description "Allow multipath to mix EBGP and IBGP routes";
          presence "enable allow-external-internal";
          uses apply-advanced;
          leaf-list prefix-policy {
            type "jt:policy-algebra";
            description "Policy to constrain prefixes that apply";
            ordered-by user;
          }
        }
      }
      leaf tcp-mss {
        type uint32 {
          range "1 .. 4096";
        }
        description "Maximum TCP segment size";
      }
      leaf bgp-identifier {
        type "jt:ipv4addr";
        description "BGP Identifier";
      }
      leaf tcp-aggressive-transmission {
        type empty;
        description "Enable aggressive transmission of pure TCP ACKs and retransmissions";
      }
      container bmp {
        description "Specific settings to override the routing-options settings";
        uses apply-advanced;
        leaf monitor {
          type enumeration {
            enum enable {
              description "Enable monitoring of BGP peer(s)";
            }
            enum disable {
              description "Disable monitoring of BGP peer(s)";
            }
          }
          description "Enable/Disable monitoring";
        }
        container route-monitoring {
          description "Control route monitoring settings";
          uses apply-advanced;
          leaf none {
            type empty;
            description "Do not send route monitoring messages";
          }
          container pre-policy {
            description "Send pre-policy route monitoring messages";
            presence "enable pre-policy";
            leaf exclude-non-feasible {
              type empty;
              description "Exclude looped routes, etc";
            }
          }
          container post-policy {
            description "Send post-policy route monitoring messages";
            presence "enable post-policy";
            leaf exclude-non-eligible {
              type empty;
              description "Exclude unresolved routes, etc.";
            }
          }
          container rib-out {
            description "Send adj-ribs-out route monitoring messages";
            presence "enable rib-out";
            leaf pre-policy {
              type empty;
              description "Send pre-policy adj-ribs-out route monitoring messages";
            }
            leaf post-policy {
              type empty;
              description "Send post-policy adj-ribs-out route monitoring messages";
            }
          }
        }
      }
      container advertise-bgp-static {
        description "Advertise bgp-static routes";
        presence "enable advertise-bgp-static";
        uses apply-advanced;
        leaf-list policy {
          type "jt:policy-algebra";
          description "Static route advertisement policy";
          ordered-by user;
        }
      }
      leaf add-path-display-ipv4-address {
        type empty;
        description "Display add-path path-id in IPv4 address format";
      }
      container domain-path-id {
        description "Domain path id attribute";
        uses apply-advanced;
        leaf send {
          type empty;
          description "Allow sending domain path id attribute";
        }
        leaf receive {
          type empty;
          description "Allow receiving domain path id attribute";
        }
      }
      container bfd-liveness-detection {
        description "Bidirectional Forwarding Detection (BFD) options";
        uses apply-advanced;
        leaf version {
          type enumeration {
            enum 0 {
              description "BFD version 0 (deprecated)";
            }
            enum 1 {
              description "BFD version 1";
            }
            enum automatic {
              description "Choose BFD version automatically";
            }
          }
          default "automatic";
          description "BFD protocol version number";
        }
        leaf minimum-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit and receive interval";
          units milliseconds;
        }
        leaf minimum-transmit-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit interval";
          status deprecated;
          units milliseconds;
        }
        leaf minimum-receive-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum receive interval";
          units milliseconds;
        }
        leaf multiplier {
          type uint32 {
            range "1 .. 255";
          }
          default "3";
          description "Detection time multiplier";
        }
        leaf inline-disable {
          type empty;
          description "Disable inline mode for this BFD session";
        }
        leaf pdu-size {
          type uint32 {
            range "24 .. 9000";
          }
          default "24";
          description "BFD transport protocol payload size";
        }
        choice adaptation-choice {
          case case_1 {
            leaf no-adaptation {
              type empty;
              description "Disable adaptation";
            }
          }
        }
        container transmit-interval {
          description "Transmit-interval options";
          uses apply-advanced;
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            units milliseconds;
          }
          leaf threshold {
            type uint32;
            description "High transmit interval triggering a trap";
            units milliseconds;
          }
        }
        container detection-time {
          description "Detection-time options";
          uses apply-advanced;
          leaf threshold {
            type uint32;
            description "High detection-time triggering a trap";
            units milliseconds;
          }
        }
        container authentication {
          description "Authentication options";
          uses apply-advanced;
          leaf key-chain {
            type string;
            description "Key chain name";
          }
          leaf algorithm {
            type enumeration {
              enum simple-password {
                description "Simple password";
              }
              enum keyed-md5 {
                description "Keyed message Digest 5";
              }
              enum meticulous-keyed-md5 {
                description "Meticulous keyed message Digest 5";
              }
              enum keyed-sha-1 {
                description "Keyed secure hash algorithm (SHA1) ";
              }
              enum meticulous-keyed-sha-1 {
                description "Meticulous keyed secure hash algorithm (SHA1) ";
              }
            }
            description "Algorithm name";
          }
          leaf loose-check {
            type empty;
            description "Verify authentication only if authentication is negotiated";
          }
        }
        leaf session-mode {
          type enumeration {
            enum automatic {
              description "Choose session-mode automatically";
            }
            enum single-hop {
              description "Use single-hop";
            }
            enum multihop {
              description "Use multihop";
            }
          }
          default "automatic";
          description "BFD single-hop or multihop session-mode";
        }
        container echo {
          description "Echo mode parameters";
          uses apply-advanced;
          leaf minimum-interval {
            type uint32 {
              range "100 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
        }
        container echo-lite {
          description "Echo-lite more parameters";
          uses apply-advanced;
          leaf minimum-interval {
            type uint32 {
              range "100 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
        }
        container strict-bfd {
          description "Bgp session waits for bfd";
          presence "enable strict-bfd";
          uses apply-advanced;
          leaf bfd-up-wait-interval {
            type uint32 {
              range "10 .. 255";
            }
            description "Time to wait for bfd to come up";
            units seconds;
          }
        }
        leaf holddown-interval {
          type uint32 {
            range "0 .. 255000";
          }
          description "Time to hold the session-UP notification to the client";
          units milliseconds;
        }
      }
      leaf as-override {
        type empty;
        description "Replace neighbor AS number with our AS number";
      }
      leaf-list allow {
        type "jt:ipprefix";
        description "Configure peer connections for specific networks";
        ordered-by user;
      }
      list dynamic-neighbor {
        description "Configure peer options for specific networks";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Template name";
        }
        uses apply-advanced;
        leaf-list allow {
          type "jt:ipprefix";
          description "Configure peer connections for specific networks";
          ordered-by user;
        }
        leaf peer-limit {
          type uint32 {
            range "0 .. 2048";
          }
          description "Limit the number of peers for each subnet configured via dynamic-neighbor";
        }
        leaf authentication-key {
          type string {
            length "1 .. 126";
          }
          description "MD5 authentication key";
        }
        leaf authentication-algorithm {
          type enumeration {
            enum md5 {
              description "Message Digest 5";
            }
            enum hmac-sha-1-96 {
              description "Hash-based Message Authentication Code (SHA1) (96 bits)";
            }
            enum aes-128-cmac-96 {
              description "Cipher-based Message Authentication Code (AES128) (96 bits)";
            }
            enum ao {
              description "TCP Authentication Option";
            }
          }
          description "Authentication algorithm name";
        }
        leaf tcpao-auth-mismatch {
          type enumeration {
            enum allow-without-tcpao {
              description "Allow the connection establishment without TCP-AO";
            }
          }
          description "Continue without TCP-AO if any one TCP endpoint does not have TCP-AO configured";
        }
        leaf authentication-key-chain {
          type string {
            length "1 .. 128";
          }
          description "Key chain name";
        }
        container peer-auto-discovery {
          description "Configure auto-discovery options for BGP neighbors";
          uses apply-advanced;
          container family {
            description "Address family based neighbor auto-discovery parameters";
            container inet6 {
              uses apply-advanced;
              choice auto-discovery-type {
                case case_1 {
                  container ipv6-nd {
                    description "Use ipv6 neighbor discovery to learn neighbor address";
                    presence "enable ipv6-nd";
                  }
                }
              }
            }
          }
          list interface {
            key name;
            leaf name {
              type "jt:interface-name";
              description "Configure interfaces over which to discover bgp neighbors";
            }
            uses apply-advanced;
            choice enable-disable {
              case case_1 {
                leaf disable {
                  type empty;
                  description "Disable peer discovery on interface";
                }
              }
            }
          }
        }
      }
      container optimal-route-reflection {
        description "Enable optimal route reflection for this client group";
        uses apply-advanced;
        leaf igp-primary {
          type "jt:ipv4addr";
          description "Primary node identifier for this client group";
        }
        leaf igp-backup {
          type "jt:ipv4addr";
          description "Backup node identifier for this client group";
        }
        leaf-list export {
          type "jt:policy-algebra";
          description "Optimal route reflection export policy";
        }
      }
      leaf peer-as-list {
        type string;
        description "Configure list of peer autonomous systems for unconfigured neighbors";
      }
      leaf mvpn-iana-rt-import {
        type empty;
        description "Use IANA assigned rt-import type value for MVPN";
        status deprecated;
      }
      list neighbor {
        description "Configure a neighbor";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipaddr-scoped";
        }
        uses apply-advanced;
        container traceoptions {
          description "Trace options for BGP";
          uses apply-advanced;
          container file {
            description "Trace file options";
            leaf filename {
              type string {
                length "1 .. 1024";
              }
              description "Name of file in which to write trace information";
            }
            leaf replace {
              type empty;
              description "Replace trace file rather than appending to it";
              status deprecated;
            }
            leaf size {
              type string;
              description "Maximum trace file size";
            }
            leaf files {
              type uint32 {
                range "2 .. 1000";
              }
              default "10";
              description "Maximum number of trace files";
            }
            leaf no-stamp {
              type empty;
              description "Do not timestamp trace file";
              status deprecated;
            }
            choice world-readable-choice {
              leaf world-readable {
                type empty;
                description "Allow any user to read the log file";
              }
              leaf no-world-readable {
                type empty;
                description "Don't allow any user to read the log file";
              }
            }
          }
          list flag {
            description "Tracing parameters";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum damping {
                  description "Trace BGP damping information";
                }
                enum packets {
                  description "Trace all BGP protocol packets";
                }
                enum open {
                  description "Trace BGP open packets";
                }
                enum update {
                  description "Trace BGP update packets";
                }
                enum keepalive {
                  description "Trace BGP keepalive packets";
                }
                enum refresh {
                  description "Trace BGP refresh packets";
                }
                enum nsr-synchronization {
                  description "Trace NSR synchronization events";
                }
                enum bfd {
                  description "Trace BFD events";
                }
                enum 4byte-as {
                  description "Trace 4 byte AS events";
                }
                enum add-path {
                  description "Trace add-path events";
                }
                enum graceful-restart {
                  description "Trace Graceful Restart events";
                }
                enum egress-te {
                  description "Egress Peering Traffic-Engineering events";
                }
                enum thread-io {
                  description "Trace threaded I/O processing";
                }
                enum sharding {
                  description "Trace BGP rib sharding";
                }
                enum thread-update-io {
                  description "Trace threaded update I/O processing";
                }
                enum route-validation {
                  description "Trace route validation";
                }
                enum ipsec {
                  description "Trace ipsec";
                }
                enum route {
                  description "Trace routing information";
                }
                enum normal {
                  description "Trace normal events";
                }
                enum general {
                  description "Trace general events";
                }
                enum state {
                  description "Trace state transitions";
                }
                enum policy {
                  description "Trace policy processing";
                }
                enum task {
                  description "Trace routing protocol task processing";
                }
                enum timer {
                  description "Trace routing protocol timer processing";
                }
                enum all {
                  description "Trace everything";
                }
              }
            }
            leaf send {
              type empty;
              description "Trace transmitted packets";
            }
            leaf receive {
              type empty;
              description "Trace received packets";
            }
            leaf detail {
              type empty;
              description "Trace detailed information";
            }
            leaf disable {
              type empty;
              description "Disable this trace flag";
            }
            container filter {
              description "Filter to apply to this flag";
              presence "enable filter";
              uses bgp_filter_obj;
            }
          }
        }
        leaf description {
          type string {
            length "1 .. 255";
          }
          description "Text description";
        }
        container metric-out {
          description "Route metric sent in MED";
          choice metric_param {
            case case_1 {
              leaf metric-value {
                type uint32 {
                  range "0 .. 4294967295";
                }
                description "Metric value";
              }
            }
            case case_2 {
              container minimum-igp {
                description "Track the minimum IGP metric";
                presence "enable minimum-igp";
                leaf metric-offset {
                  type int32;
                  description "Metric offset for MED";
                }
              }
            }
            case case_3 {
              container igp {
                description "Track the IGP metric";
                presence "enable igp";
                leaf metric-offset {
                  type int32;
                  description "Metric offset for MED";
                }
                leaf delay-med-update {
                  type empty;
                  description "Delay updating MED when IGP metric increases";
                }
              }
            }
            case case_4 {
              container effective-aigp {
                description "Track the effective AIGP metric";
                presence "enable effective-aigp";
                leaf metric-offset {
                  type int32;
                  description "Metric offset for MED";
                }
              }
            }
            case case_5 {
              container minimum-effective-aigp {
                description "Track the minimum effective AIGP metric";
                presence "enable minimum-effective-aigp";
                leaf metric-offset {
                  type int32;
                  description "Metric offset for MED";
                }
              }
            }
          }
        }
        container multihop {
          description "Configure an EBGP multihop session";
          presence "enable multihop";
          uses apply-advanced;
          leaf ttl {
            type uint8 {
              range "1 .. 255";
            }
            description "TTL value for the session";
          }
          leaf no-nexthop-change {
            type empty;
            description "Do not change next hop to self in advertisements";
          }
        }
        container ebgp-community-cleanup {
          description "Community specific cleanup for eBGP peers";
          presence "enable ebgp-community-cleanup";
          uses apply-advanced;
          leaf origin-validation {
            type enumeration {
              enum accept {
                description "Accept Origin Validation State Community";
              }
              enum reject {
                description "Reject Origin Validation State Community";
              }
            }
            description "Origin Validation State receive behavior";
          }
        }
        leaf route-server-client {
          type empty;
          description "Enable route server client behavior";
        }
        leaf accept-remote-nexthop {
          type empty;
          description "Allow import policy to specify a non-directly connected next-hop";
        }
        leaf preference {
          type uint32;
          description "Preference value";
        }
        leaf local-preference {
          type uint32;
          description "Value of LOCAL_PREF path attribute";
        }
        leaf local-address {
          type "jt:ipaddr";
          description "Address of local end of BGP session";
        }
        leaf local-interface {
          type "jt:interface-name";
          description "Local interface for IPv6 link local EBGP peering";
        }
        leaf forwarding-context {
          type string;
          description "Routing-instance used for data-forwarding and transport-session";
        }
        leaf hold-time {
          type uint32 {
            range "0 .. 65535";
          }
          description "Hold time used when negotiating with a peer";
        }
        leaf minimum-hold-time {
          type uint32 {
            range "3 .. 65535";
          }
          description "Minimum hold time accepted from the peer";
        }
        leaf passive {
          type empty;
          description "Do not send open messages to a peer";
        }
        leaf advertise-inactive {
          type empty;
          description "Advertise inactive routes";
        }
        choice advertise-peer-as-choice {
          leaf advertise-peer-as {
            type empty;
            description "Advertise routes received from the same autonomous system";
          }
          leaf no-advertise-peer-as {
            type empty;
            description "Don't advertise routes received from the same autonomous system";
          }
        }
        container advertise-external {
          description "Advertise best external routes";
          presence "enable advertise-external";
          leaf conditional {
            type empty;
            description "Route matches active route upto med-comparison rule";
          }
        }
        leaf keep {
          type enumeration {
            enum all {
              description "Retain all routes";
            }
            enum none {
              description "Retain no routes";
            }
          }
          description "How to retain routes in the routing table";
        }
        leaf rfc6514-compliant-safi129 {
          type empty;
          description "Compliant with RFC6514 SAFI129 format";
        }
        leaf no-aggregator-id {
          type empty;
          description "Set router ID in aggregator path attribute to 0";
        }
        leaf mtu-discovery {
          type empty;
          description "Enable TCP path MTU discovery";
        }
        leaf enforce-first-as {
          type empty;
          description "Enforce first AS in AS-path is the neighbor's AS";
        }
        leaf out-delay {
          type uint32 {
            range "0 .. 65535";
          }
          description "How long before exporting routes from routing table";
        }
        leaf ttl {
          type enumeration {
            enum 1;
            enum 255;
          }
          description "TTL value for the single-hop peer";
        }
        leaf log-updown {
          type empty;
          description "Log a message for peer state transitions";
        }
        leaf damping {
          type empty;
          description "Enable route flap damping";
        }
        leaf-list import {
          type "jt:policy-algebra";
          description "Import policy";
          ordered-by user;
        }
        leaf-list nlri {
          type enumeration {
            enum unicast {
              description "Include unicast NLRI";
              status deprecated;
            }
            enum multicast {
              description "Include multicast NLRI";
              status deprecated;
            }
            enum any {
              description "Include any kind of NLRI";
              status deprecated;
            }
          }
          description "NLRI type to include in updates";
          ordered-by user;
          status deprecated;
        }
        container bgp-error-tolerance {
          description "Handle BGP malformed updates softly";
          presence "enable bgp-error-tolerance";
          uses apply-advanced;
          leaf malformed-update-log-interval {
            type uint32 {
              range "10 .. 65535";
            }
            default "300";
            description "Time used when logging malformed update";
            units seconds;
          }
          choice malformed-routes-limit-choice {
            case case_1 {
              leaf malformed-route-limit {
                type uint32 {
                  range "0 .. 4294967295";
                }
                default "1000";
                description "Maximum number of malformed routes from a peer";
              }
            }
            case case_2 {
              leaf no-malformed-route-limit {
                type empty;
                description "No malformed route limit";
              }
            }
          }
        }
        container family {
          description "Protocol family for NLRIs in updates";
          uses apply-advanced;
          container inet {
            description "IPv4 NLRI parameters";
            uses apply-advanced;
            container labeled-unicast {
              description "Include labeled unicast NLRI";
              presence "enable labeled-unicast";
              uses bgp-afi-labeled;
            }
            container segment-routing-te {
              description "Include segment-routing TE policy";
              presence "enable segment-routing-te";
              uses bgp-afi-srte;
            }
            container transport {
              description "Include Classful Transport NLRI";
              presence "enable transport";
              uses bgp-afi-inet-transport;
            }
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-topo;
            }
            container multicast {
              description "Include multicast NLRI";
              presence "enable multicast";
              uses bgp-afi-default;
            }
            container flow {
              description "Include flow NLRI";
              presence "enable flow";
              uses bgp-afi-flow-with-redirect-ip-action;
            }
            container any {
              description "Include unicast or multicast NLRI";
              presence "enable any";
              uses bgp-afi-default;
            }
          }
          container inet-vpn {
            description "IPv4 Layer 3 VPN NLRI parameters";
            uses apply-advanced;
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-l3vpn;
            }
            container multicast {
              description "Include multicast NLRI";
              presence "enable multicast";
              uses bgp-afi-vpn;
            }
            container flow {
              description "Include flow VPN NLRI";
              presence "enable flow";
              uses bgp-afi-flow-with-redirect-ip-action;
            }
            container any {
              description "Include unicast or multicast NLRI";
              presence "enable any";
              uses bgp-afi-vpn;
            }
          }
          container inet6 {
            description "IPv6 NLRI parameters";
            uses apply-advanced;
            container labeled-unicast {
              description "Include labeled unicast NLRI";
              presence "enable labeled-unicast";
              uses bgp-afi-inet6-labeled;
            }
            container segment-routing-te {
              description "Include segment-routing TE policy";
              presence "enable segment-routing-te";
              uses bgp-afi-srte;
            }
            container transport {
              description "Include Classful Transport NLRI";
              presence "enable transport";
              uses bgp-afi-inet6-transport;
            }
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-topo;
            }
            container multicast {
              description "Include multicast NLRI";
              presence "enable multicast";
              uses bgp-afi-default;
            }
            container flow {
              description "Include flow NLRI";
              presence "enable flow";
              uses bgp-afi-flow;
            }
            container any {
              description "Include unicast or multicast NLRI";
              presence "enable any";
              uses bgp-afi-default;
            }
          }
          container inet6-vpn {
            description "IPv6 Layer 3 VPN NLRI parameters";
            uses apply-advanced;
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-l3vpn;
            }
            container multicast {
              description "Include multicast NLRI";
              presence "enable multicast";
              uses bgp-afi-vpn;
            }
            container flow {
              description "Include flow VPN NLRI";
              presence "enable flow";
              uses bgp-afi-flow;
            }
            container any {
              description "Include unicast or multicast NLRI";
              presence "enable any";
              uses bgp-afi-vpn;
            }
          }
          container iso-vpn {
            description "ISO Layer 3 VPN NLRI parameters";
            uses apply-advanced;
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-vpn-protection;
            }
          }
          container l2vpn {
            description "MPLS-based Layer 2 VPN and VPLS NLRI parameters";
            uses apply-advanced;
            container auto-discovery-only {
              description "Include auto-discovery NLRI for LDP Layer 2 VPN and VPLS";
              presence "enable auto-discovery-only";
              uses bgp-afi-default;
            }
            container auto-discovery-mspw {
              description "Include auto-discovery NLRI for LDP Signalled MultiSegment PW";
              presence "enable auto-discovery-mspw";
              uses bgp-afi-default;
            }
            container signaling {
              description "Include Layer 2 VPN and VPLS signaling NLRI";
              presence "enable signaling";
              uses bgp-afi-l2vpn;
            }
          }
          container evpn {
            description "EVPN NLRI parameters";
            uses apply-advanced;
            container signaling {
              description "Include EVPN signaling NLRI";
              presence "enable signaling";
              uses bgp-afi-default;
            }
          }
          container inet-mvpn {
            description "IPv4 MVPN NLRI parameters";
            uses apply-advanced;
            container signaling {
              description "Include IPv4 multicast VPN signaling NLRI";
              presence "enable signaling";
              uses bgp-afi-default;
            }
          }
          container inet6-mvpn {
            description "IPv6 MVPN NLRI parameters";
            uses apply-advanced;
            container signaling {
              description "Include IPv6 multicast VPN signaling NLRI";
              presence "enable signaling";
              uses bgp-afi-default;
            }
          }
          container inet-mdt {
            description "IPv4 Multicast Distribution Tree (MDT) NLRI parameters";
            uses apply-advanced;
            container signaling {
              description "Include IPv4 multicast VPN auto-discovery NLRI";
              presence "enable signaling";
              uses bgp-afi-default;
            }
          }
          container traffic-engineering {
            description "Traffic Engineering (BGP-TE) NLRI parameters";
            uses apply-advanced;
            container unicast {
              description "Include BGP-TE NLRI";
              presence "enable unicast";
              uses bgp-afi-default;
            }
          }
          container route-target {
            description "Route target NLRI used for VPN route filtering";
            presence "enable route-target";
            uses apply-advanced;
            container prefix-limit {
              description "Limit maximum number of prefixes from a peer";
              uses bgpaf-prefix-limit;
            }
            container accepted-prefix-limit {
              description "Limit maximum number of prefixes accepted from a peer";
              uses bgpaf-accepted-prefix-limit;
            }
            container proxy-generate {
              description "Generate route target NLRI for peers that don't support it";
              presence "enable proxy-generate";
              uses apply-advanced;
              leaf-list route-target-policy {
                type "jt:policy-algebra";
                description "Limit VPN routes that are used to generate proxy route-target filters";
                ordered-by user;
              }
            }
            leaf external-paths {
              type uint32 {
                range "1 .. 256";
              }
              description "Number of external paths accepted for route filtering";
            }
            leaf advertise-default {
              type empty;
              description "Advertise default and suppress more specific routes";
            }
            leaf damping {
              type empty;
              description "Enable route flap damping";
            }
            container graceful-restart {
              description "BGP graceful restart options";
              uses bgp-af-gr;
            }
            leaf local-ipv4-address {
              type "jt:ipv4addr";
              description "Local IPv4 address";
            }
            container nexthop-resolution {
              description "Configure nexthop resolution properties";
              uses apply-advanced;
              leaf no-resolution {
                type empty;
                description "Consider nexthop good without resolution attempt";
              }
            }
            container output-queue-priority {
              description "Default output-queue to assign updates to";
              uses bgp-output-queue-priority-class;
            }
            container route-refresh-priority {
              description "Default output-queue to assign route refreshes to";
              uses bgp-output-queue-priority-class;
            }
            container withdraw-priority {
              description "Default output-queue to assign withdrawn routes to";
              uses bgp-output-queue-priority-class;
            }
          }
          container fabric {
            description "Fabric NLRI parameters";
            status deprecated;
            uses apply-advanced;
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-default;
            }
          }
          container bridge {
            description "Bridge NLRI parameters";
            status deprecated;
            uses apply-advanced;
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-default;
            }
          }
          container bridge-vpn {
            description "Bridge VPN NLRI parameters";
            status deprecated;
            uses apply-advanced;
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-vpn;
            }
          }
          container fabric-vpn {
            description "Fabric VPN NLRI parameters";
            status deprecated;
            uses apply-advanced;
            container unicast {
              description "Include unicast NLRI";
              presence "enable unicast";
              uses bgp-afi-vpn;
            }
          }
          container inet-bgpmcast {
            description "IPv4 BGPMCAST NLRI parameters";
            uses apply-advanced;
            container signaling {
              description "Include IPv4 BGP multicast signaling NLRI";
              presence "enable signaling";
              uses bgp-afi-default;
            }
          }
          container inet6-bgpmcast {
            description "IPv6 BGPMCAST NLRI parameters";
            uses apply-advanced;
            container signaling {
              description "Include IPv6 BGP multicast signaling NLRI";
              presence "enable signaling";
              uses bgp-afi-default;
            }
          }
        }
        leaf authentication-key {
          type string {
            length "1 .. 126";
          }
          description "MD5 authentication key";
        }
        leaf authentication-algorithm {
          type enumeration {
            enum md5 {
              description "Message Digest 5";
            }
            enum hmac-sha-1-96 {
              description "Hash-based Message Authentication Code (SHA1) (96 bits)";
            }
            enum aes-128-cmac-96 {
              description "Cipher-based Message Authentication Code (AES128) (96 bits)";
            }
            enum ao {
              description "TCP Authentication Option";
            }
          }
          description "Authentication algorithm name";
        }
        leaf tcpao-auth-mismatch {
          type enumeration {
            enum allow-without-tcpao {
              description "Allow the connection establishment without TCP-AO";
            }
          }
          description "Continue without TCP-AO if any one TCP endpoint does not have TCP-AO configured";
        }
        leaf authentication-key-chain {
          type string {
            length "1 .. 128";
          }
          description "Key chain name";
        }
        leaf-list export {
          type "jt:policy-algebra";
          description "Export policy";
          ordered-by user;
        }
        container remove-private {
          description "Remove well-known private AS numbers";
          presence "enable remove-private";
          uses apply-advanced;
          container all {
            description "Remove all private AS numbers and do not stop at the first public AS number";
            presence "enable all";
            container replace {
              description "Replace private AS numbers with the BGP Group's local AS number";
              presence "enable replace";
              leaf nearest {
                type empty;
                description "Use closest public AS number to replace a private AS number";
              }
            }
          }
          leaf no-peer-loop-check {
            type empty;
            description "Remove peer loop-check";
          }
        }
        leaf cluster {
          type "jt:areaid";
          description "Cluster identifier";
        }
        leaf no-client-reflect {
          type empty;
          description "Disable intracluster route redistribution";
        }
        leaf peer-as {
          type string;
          description " Autonomous system number in plain number or 'higher 16bits'.'Lower 16 bits' (asdot notation) format";
        }
        container local-as {
          description "Local autonomous system number";
          leaf as-number {
            type string;
            description " Autonomous system number in plain number or 'higher 16bits'.'Lower 16 bits' (asdot notation) format";
          }
          leaf loops {
            type int32 {
              range "1 .. 10";
            }
            description "Maximum number of times this AS can be in an AS path";
          }
          leaf private {
            type empty;
            description "Hide this local AS in paths learned from this peering";
          }
          leaf alias {
            type empty;
            description "Treat this AS as an alias to the system AS";
          }
          leaf no-prepend-global-as {
            type empty;
            description "Do not prepend global autonomous-system number in advertised paths";
          }
        }
        leaf ipsec-sa {
          type string {
            length "1 .. 32";
          }
          description "IPSec SA name";
        }
        container graceful-shutdown {
          description "BGP peer graceful shutdown option";
          uses apply-advanced;
          container receiver {
            description "BGP peer graceful-shutdown receiver";
            presence "enable receiver";
            uses apply-advanced;
            leaf disable {
              type empty;
              description "Disable graceful-shutdown receiver";
            }
            leaf local-preference {
              type uint32;
              description "Value of receiver LOCAL_PREF path attribute";
            }
          }
          container sender {
            description "BGP peer graceful-shutdown sender";
            presence "enable sender";
            uses apply-advanced;
            leaf local-preference {
              type uint32;
              description "Value of sender LOCAL_PREF path attribute";
            }
          }
        }
        container shutdown {
          description "Shutdown";
          presence "enable shutdown";
          uses apply-advanced;
          leaf notify-message {
            type string;
            description "Notification message";
          }
        }
        leaf unconfigured-peer-graceful-restart {
          type empty;
          description "BGP unconfigured peer graceful restart options";
        }
        container graceful-restart {
          description "BGP graceful restart options";
          presence "enable graceful-restart";
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable graceful restart";
              }
            }
          }
          leaf restart-time {
            type uint32 {
              range "1 .. 1800";
            }
            description "Restart time used when negotiating with a peer";
          }
          leaf stale-routes-time {
            type uint32 {
              range "1 .. 1800";
            }
            description "Maximum time for which stale routes are kept";
          }
          container long-lived {
            description "Long-lived graceful restart options";
            uses apply-advanced;
            container receiver {
              description "Long-lived graceful restart receiver (helper) options";
              uses apply-advanced;
              choice enable-disable {
                case case_1 {
                  leaf disable {
                    type empty;
                    description "Disable receiver (helper) functionality";
                  }
                }
              }
            }
            container advertise-to-non-llgr-neighbor {
              description "Advertise stale routes to non-LLGR neighbors";
              presence "enable advertise-to-non-llgr-neighbor";
              uses apply-advanced;
              leaf omit-no-export {
                type empty;
                description "Do not attach no-export community to stale routes";
              }
            }
          }
          leaf disable-notification-extensions {
            type empty;
            description "Disable notification extensions";
          }
          leaf forwarding-state-bit {
            type enumeration {
              enum as-rr-client {
                description "As for a route reflector client";
              }
              enum from-fib {
                description "Always use state of associated FIB(s)";
              }
            }
            description "Control forwarding-state flag negotiation";
          }
          leaf dont-help-shared-fate-bfd-down {
            type empty;
            description "Honor BFD-Down(C=0) if GR-restart not in progress";
          }
        }
        leaf include-mp-next-hop {
          type empty;
          description "Include NEXT-HOP attribute in multiprotocol updates";
        }
        leaf disable-4byte-as {
          type empty;
          description "Disable 4 byte AS capability advertisement";
        }
        container idle-after-switch-over {
          description "Stop peer session from coming up after nonstop-routing switch-over";
          choice idle-interval {
            case case_1 {
              leaf forever {
                type empty;
                description "Idle the peer until the user intervenes";
              }
            }
            case case_2 {
              leaf timeout {
                type uint32 {
                  range "1 .. 4294967295";
                }
                description "Timeout value, in seconds, for starting peer after switch over";
              }
            }
          }
        }
        container outbound-route-filter {
          description "Dynamically negotiated cooperative route filtering";
          uses apply-advanced;
          leaf bgp-orf-cisco-mode {
            type empty;
            description "Using BGP ORF capability code 130 and Prefix ORF type 128";
          }
          container extended-community {
            description "Extended community filtering";
            status deprecated;
            uses apply-advanced;
            choice accept-choice {
              leaf accept {
                type empty;
                description "Honor remote requests for extended community ORF";
              }
              leaf no-accept {
                type empty;
                description "Don't honor remote requests for extended community ORF";
              }
            }
            leaf vrf-filter {
              type empty;
              description "Request remote filtering using locally configured VRF import targets";
            }
          }
          container prefix-based {
            description "Prefix-based outbound route filtering";
            presence "enable prefix-based";
            uses apply-advanced;
            container accept {
              description "Honor Prefix-based ORFs from remote peers";
              presence "enable accept";
              uses apply-advanced;
              leaf inet {
                type empty;
                description "Honor IPv4 prefix filters";
              }
              leaf inet6 {
                type empty;
                description "Honor IPv6 prefix filters";
              }
            }
          }
        }
        container message-batching {
          description "DEPRECATED - Batching of outgoing messages";
          status deprecated;
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf enable {
                type empty;
                description "Enable parameter";
              }
            }
            case case_2 {
              leaf disable {
                type empty;
                description "Disable parameter";
              }
            }
          }
          leaf interval {
            type uint32 {
              range "100 .. 1000";
            }
            default "250";
            description "DEPRECATED - Interval over which to batch messages";
            units milliseconds;
          }
        }
        container multipath {
          description "Allow load sharing among multiple BGP paths";
          presence "enable multipath";
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable Multipath";
          }
          leaf multiple-as {
            type empty;
            description "Use paths received from different ASs";
          }
          leaf allow-protection {
            type empty;
            description "Allow protection for multipath legs";
          }
          leaf pause-computation-during-churn {
            type empty;
            description "Pause multipath job to absorb churn";
          }
          leaf list-nexthop {
            type empty;
            description "Use List-NH for homogenous nexthop-set also";
          }
          container allow-external-internal {
            description "Allow multipath to mix EBGP and IBGP routes";
            presence "enable allow-external-internal";
            uses apply-advanced;
            leaf-list prefix-policy {
              type "jt:policy-algebra";
              description "Policy to constrain prefixes that apply";
              ordered-by user;
            }
          }
        }
        leaf tcp-mss {
          type uint32 {
            range "1 .. 4096";
          }
          description "Maximum TCP segment size";
        }
        leaf bgp-identifier {
          type "jt:ipv4addr";
          description "BGP Identifier";
        }
        leaf tcp-aggressive-transmission {
          type empty;
          description "Enable aggressive transmission of pure TCP ACKs and retransmissions";
        }
        container bmp {
          description "Specific settings to override the routing-options settings";
          uses apply-advanced;
          leaf monitor {
            type enumeration {
              enum enable {
                description "Enable monitoring of BGP peer(s)";
              }
              enum disable {
                description "Disable monitoring of BGP peer(s)";
              }
            }
            description "Enable/Disable monitoring";
          }
          container route-monitoring {
            description "Control route monitoring settings";
            uses apply-advanced;
            leaf none {
              type empty;
              description "Do not send route monitoring messages";
            }
            container pre-policy {
              description "Send pre-policy route monitoring messages";
              presence "enable pre-policy";
              leaf exclude-non-feasible {
                type empty;
                description "Exclude looped routes, etc";
              }
            }
            container post-policy {
              description "Send post-policy route monitoring messages";
              presence "enable post-policy";
              leaf exclude-non-eligible {
                type empty;
                description "Exclude unresolved routes, etc.";
              }
            }
            container rib-out {
              description "Send adj-ribs-out route monitoring messages";
              presence "enable rib-out";
              leaf pre-policy {
                type empty;
                description "Send pre-policy adj-ribs-out route monitoring messages";
              }
              leaf post-policy {
                type empty;
                description "Send post-policy adj-ribs-out route monitoring messages";
              }
            }
          }
        }
        container advertise-bgp-static {
          description "Advertise bgp-static routes";
          presence "enable advertise-bgp-static";
          uses apply-advanced;
          leaf-list policy {
            type "jt:policy-algebra";
            description "Static route advertisement policy";
            ordered-by user;
          }
        }
        leaf add-path-display-ipv4-address {
          type empty;
          description "Display add-path path-id in IPv4 address format";
        }
        container domain-path-id {
          description "Domain path id attribute";
          uses apply-advanced;
          leaf send {
            type empty;
            description "Allow sending domain path id attribute";
          }
          leaf receive {
            type empty;
            description "Allow receiving domain path id attribute";
          }
        }
        container bfd-liveness-detection {
          description "Bidirectional Forwarding Detection (BFD) options";
          uses apply-advanced;
          leaf version {
            type enumeration {
              enum 0 {
                description "BFD version 0 (deprecated)";
              }
              enum 1 {
                description "BFD version 1";
              }
              enum automatic {
                description "Choose BFD version automatically";
              }
            }
            default "automatic";
            description "BFD protocol version number";
          }
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
          leaf minimum-transmit-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            status deprecated;
            units milliseconds;
          }
          leaf minimum-receive-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum receive interval";
            units milliseconds;
          }
          leaf multiplier {
            type uint32 {
              range "1 .. 255";
            }
            default "3";
            description "Detection time multiplier";
          }
          leaf inline-disable {
            type empty;
            description "Disable inline mode for this BFD session";
          }
          leaf pdu-size {
            type uint32 {
              range "24 .. 9000";
            }
            default "24";
            description "BFD transport protocol payload size";
          }
          choice adaptation-choice {
            case case_1 {
              leaf no-adaptation {
                type empty;
                description "Disable adaptation";
              }
            }
          }
          container transmit-interval {
            description "Transmit-interval options";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf threshold {
              type uint32;
              description "High transmit interval triggering a trap";
              units milliseconds;
            }
          }
          container detection-time {
            description "Detection-time options";
            uses apply-advanced;
            leaf threshold {
              type uint32;
              description "High detection-time triggering a trap";
              units milliseconds;
            }
          }
          container authentication {
            description "Authentication options";
            uses apply-advanced;
            leaf key-chain {
              type string;
              description "Key chain name";
            }
            leaf algorithm {
              type enumeration {
                enum simple-password {
                  description "Simple password";
                }
                enum keyed-md5 {
                  description "Keyed message Digest 5";
                }
                enum meticulous-keyed-md5 {
                  description "Meticulous keyed message Digest 5";
                }
                enum keyed-sha-1 {
                  description "Keyed secure hash algorithm (SHA1) ";
                }
                enum meticulous-keyed-sha-1 {
                  description "Meticulous keyed secure hash algorithm (SHA1) ";
                }
              }
              description "Algorithm name";
            }
            leaf loose-check {
              type empty;
              description "Verify authentication only if authentication is negotiated";
            }
          }
          leaf session-mode {
            type enumeration {
              enum automatic {
                description "Choose session-mode automatically";
              }
              enum single-hop {
                description "Use single-hop";
              }
              enum multihop {
                description "Use multihop";
              }
            }
            default "automatic";
            description "BFD single-hop or multihop session-mode";
          }
          container echo {
            description "Echo mode parameters";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "100 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
          }
          container echo-lite {
            description "Echo-lite more parameters";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "100 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
          }
          container strict-bfd {
            description "Bgp session waits for bfd";
            presence "enable strict-bfd";
            uses apply-advanced;
            leaf bfd-up-wait-interval {
              type uint32 {
                range "10 .. 255";
              }
              description "Time to wait for bfd to come up";
              units seconds;
            }
          }
          leaf holddown-interval {
            type uint32 {
              range "0 .. 255000";
            }
            description "Time to hold the session-UP notification to the client";
            units milliseconds;
          }
        }
        leaf as-override {
          type empty;
          description "Replace neighbor AS number with our AS number";
        }
        container egress-te-node-segment {
          description "Configure BGP-Peer-Node segment";
          uses apply-advanced;
          container label {
            description "BGP-Peer-Node SID label from static label pool";
            uses apply-advanced;
            leaf label-value {
              type uint32 {
                range "16 .. 1048575";
              }
              description "BGP-Peer-Node SID label value from static label pool";
            }
          }
          container egress-te-set {
            description "Configure as a member of a SET segment";
            uses apply-advanced;
            leaf set-name {
              type string;
              description "Set name";
            }
            leaf weight {
              type uint32 {
                range "1 .. 255";
              }
              description "Weight for set segment";
            }
          }
          container egress-te-backup-segment {
            description "Backup segment for FRR";
            uses apply-advanced;
            container label {
              description "Backup segment label from static label pool";
              uses apply-advanced;
              leaf label-value {
                type uint32 {
                  range "16 .. 1048575";
                }
                description "Backup segment label value from static label pool";
              }
            }
          }
          container egress-te-backup-ip-forward {
            description "Use IP-forward backup path for Egress TE";
            presence "enable egress-te-backup-ip-forward";
            uses apply-advanced;
            leaf instance-name {
              type string;
              description "Routing-instance to use as IP forward backup-path";
            }
          }
        }
        list egress-te-adj-segment {
          description "Configure BGP-Peer-Adj segment";
          key name;
          leaf name {
            type string;
            description "The BGP-Adj-Set segment name";
          }
          uses apply-advanced;
          container label {
            description "BGP-Peer-Adj SID label from static label pool";
            uses apply-advanced;
            leaf label-value {
              type uint32 {
                range "16 .. 1048575";
              }
              description "BGP-Peer-Adj SID label value from static label pool";
            }
          }
          container next-hop {
            description "Address of directly connected next-hop to use";
            uses apply-advanced;
            leaf next-hop-addr {
              type "jt:ipaddr";
              description "Address of directly connected next-hop";
            }
          }
          container egress-te-set {
            description "Configure as a member of a SET segment";
            uses apply-advanced;
            leaf set-name {
              type string;
              description "Set name";
            }
            leaf weight {
              type uint32 {
                range "1 .. 255";
              }
              description "Weight for set segment";
            }
          }
          container egress-te-backup-segment {
            description "Backup segment for FRR";
            uses apply-advanced;
            container label {
              description "Backup segment label from static label pool";
              uses apply-advanced;
              leaf label-value {
                type uint32 {
                  range "16 .. 1048575";
                }
                description "Backup segment label value from static label pool";
              }
            }
          }
          container egress-te-backup-ip-forward {
            description "Use IP-forward backup path for Egress TE";
            presence "enable egress-te-backup-ip-forward";
            uses apply-advanced;
            leaf instance-name {
              type string;
              description "Routing-instance to use as IP forward backup-path";
            }
          }
          container te-link-attribute {
            description "Link attribute";
            presence "enable te-link-attribute";
            uses apply-advanced;
            leaf te-metric {
              type uint32 {
                range "1 .. 4294967295";
              }
              default "1";
              description "TE Metric value";
            }
            leaf igp-metric {
              type uint32 {
                range "1 .. 16777215";
              }
              default "1";
              description "IGP Metric value";
            }
            leaf delay-metric {
              type uint32 {
                range "1 .. 16777215";
              }
              description "Delay Metric";
              units microseconds;
            }
            leaf-list admin-group {
              type string;
              description "Administrative groups";
              max-elements 16;
              ordered-by user;
            }
          }
        }
        leaf vpn-apply-export {
          type empty;
          description "Apply BGP export policy when exporting VPN routes";
        }
        container egress-te {
          description "Use Egress Peering traffic engineering";
          presence "enable egress-te";
          uses apply-advanced;
          leaf install-address {
            type "jt:ipaddr";
            description "Address to use in egress-te created inet route";
          }
          container rib {
            description "Select primary table for Egress-TE routes";
            uses apply-advanced;
            leaf "inet.0" {
              type empty;
              description "Install Egress-TE routes in inet.0";
            }
            leaf "inet6.0" {
              type empty;
              description "Install Egress-TE routes in inet6.0";
            }
          }
          leaf no-install {
            type empty;
            description "Avoid installation to FIB or resolving over";
          }
          leaf-list import {
            type "jt:policy-algebra";
            description "Import policy to set attributes";
            ordered-by user;
          }
          leaf backup-path {
            type string;
            description "The 'egress-te-backup-paths template' to use for this peer";
          }
        }
        leaf advertise-prefix-sid {
          type empty;
          description "Advertise prefix sid to E-BGP peers";
        }
        leaf accept-prefix-sid {
          type empty;
          description "Accept prefix sid from E-BGP peers";
        }
        leaf advertise-srgb {
          type empty;
          description "Advertise SRGB TLV";
        }
        leaf tcp-connect-port {
          type uint16 {
            range "1 .. 65535";
          }
          description "TCP port number to connect with peer on";
        }
      }
      leaf vpn-apply-export {
        type empty;
        description "Apply BGP export policy when exporting VPN routes";
      }
      container egress-te {
        description "Use Egress Peering traffic engineering";
        presence "enable egress-te";
        uses apply-advanced;
        leaf install-address {
          type "jt:ipaddr";
          description "Address to use in egress-te created inet route";
        }
        container rib {
          description "Select primary table for Egress-TE routes";
          uses apply-advanced;
          leaf "inet.0" {
            type empty;
            description "Install Egress-TE routes in inet.0";
          }
          leaf "inet6.0" {
            type empty;
            description "Install Egress-TE routes in inet6.0";
          }
        }
        leaf no-install {
          type empty;
          description "Avoid installation to FIB or resolving over";
        }
        leaf-list import {
          type "jt:policy-algebra";
          description "Import policy to set attributes";
          ordered-by user;
        }
        leaf backup-path {
          type string;
          description "The 'egress-te-backup-paths template' to use for this peer";
        }
      }
      leaf advertise-prefix-sid {
        type empty;
        description "Advertise prefix sid to E-BGP peers";
      }
      leaf accept-prefix-sid {
        type empty;
        description "Accept prefix sid from E-BGP peers";
      }
      leaf advertise-srgb {
        type empty;
        description "Advertise SRGB TLV";
      }
      leaf tcp-connect-port {
        type uint16 {
          range "1 .. 65535";
        }
        description "TCP port number to connect with peer on";
      }
    }
    container traffic-statistics-labeled-path {
      description "Collect periodic ingress labeled statistics for BGP label-switched paths ";
      presence "enable traffic-statistics-labeled-path";
      uses apply-advanced;
      container file {
        description "Statistics file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      leaf interval {
        type int32 {
          range "60 .. 65535";
        }
        description "Time interval to collect statistics";
        units seconds;
      }
    }
    container source-packet-routing {
      description "Enable Source Packet Routing (SPRING)";
      uses apply-advanced;
      container srgb {
        description "Set the SRGB global block in SPRING";
        leaf start-label {
          type uint32;
          description "Start range for SRGB label block";
        }
        leaf index-range {
          type uint32;
          description "Index to the SRGB start label block";
        }
      }
      container srv6 {
        description "Enable IPv6 Segment Routing (SRv6)";
        uses apply-advanced;
        list locator {
          description "SRv6 Locator";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Locator name";
          }
          uses apply-advanced;
          container end-dt4-sid {
            description "End dt4 sid with 128 bit address";
            presence "enable end-dt4-sid";
            uses apply-advanced;
            leaf sid {
              type "jt:ipv6addr";
              description "Sid value";
            }
            leaf non-default {
              type empty;
              description "Non default sid for policy usage";
            }
          }
          container end-dt6-sid {
            description "End dt6 sid with 128 bit address";
            presence "enable end-dt6-sid";
            uses apply-advanced;
            leaf sid {
              type "jt:ipv6addr";
              description "Sid value";
            }
            leaf non-default {
              type empty;
              description "Non default sid for policy usage";
            }
          }
          container end-dt46-sid {
            description "End dt46 sid with 128 bit address";
            presence "enable end-dt46-sid";
            uses apply-advanced;
            leaf sid {
              type "jt:ipv6addr";
              description "Sid value";
            }
            leaf non-default {
              type empty;
              description "Non default sid for policy usage";
            }
          }
          container micro-dt4-sid {
            description "Micro dt4 sid";
            presence "enable micro-dt4-sid";
            uses apply-advanced;
            leaf micro-sid-value {
              type uint32;
              description "Static micro sid value 16-bit or 32-bit";
            }
            leaf non-default {
              type empty;
              description "Non default micro dt4 sid for policy usage";
            }
          }
          container micro-dt6-sid {
            description "Micro dt6 sid";
            presence "enable micro-dt6-sid";
            uses apply-advanced;
            leaf micro-sid-value {
              type uint32;
              description "Static micro sid value 16-bit or 32-bit";
            }
            leaf non-default {
              type empty;
              description "Non default micro dt6 sid for policy usage";
            }
          }
          container micro-dt46-sid {
            description "Micro dt46 sid";
            presence "enable micro-dt46-sid";
            uses apply-advanced;
            leaf micro-sid-value {
              type uint32;
              description "Static micro sid value 16-bit or 32-bit";
            }
            leaf non-default {
              type empty;
              description "Non default micro dt46 sid for policy usage";
            }
          }
        }
      }
    }
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable BGP";
        }
      }
    }
    leaf protocol-instance-name {
      type string;
      description "Name of protocol instance under routing instance";
    }
    choice precision-timers-choice {
      leaf precision-timers {
        type empty;
        description "Use precision timers for scheduling keepalives";
      }
      leaf no-precision-timers {
        type empty;
        description "Don't use precision timers for scheduling keepalives";
      }
    }
    container snmp-options {
      description "Customize SNMP behaviors specifically for BGP MIBs";
      uses apply-advanced;
      leaf backward-traps-only-from-established {
        type empty;
        description "Limit traps for backward transitions to only those moving from Established state.";
      }
      leaf emit-inet-address-length-in-oid {
        type empty;
        description "Emit Length in OID for InetAddress MIB type.";
      }
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    leaf prioritize-route-queueing {
      type empty;
      description "Let route-queue building happen without getting throttled";
    }
    container traceoptions {
      description "Trace options for BGP";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum damping {
              description "Trace BGP damping information";
            }
            enum packets {
              description "Trace all BGP protocol packets";
            }
            enum open {
              description "Trace BGP open packets";
            }
            enum update {
              description "Trace BGP update packets";
            }
            enum keepalive {
              description "Trace BGP keepalive packets";
            }
            enum refresh {
              description "Trace BGP refresh packets";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum bfd {
              description "Trace BFD events";
            }
            enum 4byte-as {
              description "Trace 4 byte AS events";
            }
            enum add-path {
              description "Trace add-path events";
            }
            enum graceful-restart {
              description "Trace Graceful Restart events";
            }
            enum egress-te {
              description "Egress Peering Traffic-Engineering events";
            }
            enum thread-io {
              description "Trace threaded I/O processing";
            }
            enum sharding {
              description "Trace BGP rib sharding";
            }
            enum thread-update-io {
              description "Trace threaded update I/O processing";
            }
            enum route-validation {
              description "Trace route validation";
            }
            enum ipsec {
              description "Trace ipsec";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
        container filter {
          description "Filter to apply to this flag";
          presence "enable filter";
          uses bgp_filter_obj;
        }
      }
    }
    leaf description {
      type string {
        length "1 .. 255";
      }
      description "Text description";
    }
    container metric-out {
      description "Route metric sent in MED";
      choice metric_param {
        case case_1 {
          leaf metric-value {
            type uint32 {
              range "0 .. 4294967295";
            }
            description "Metric value";
          }
        }
        case case_2 {
          container minimum-igp {
            description "Track the minimum IGP metric";
            presence "enable minimum-igp";
            leaf metric-offset {
              type int32;
              description "Metric offset for MED";
            }
          }
        }
        case case_3 {
          container igp {
            description "Track the IGP metric";
            presence "enable igp";
            leaf metric-offset {
              type int32;
              description "Metric offset for MED";
            }
            leaf delay-med-update {
              type empty;
              description "Delay updating MED when IGP metric increases";
            }
          }
        }
        case case_4 {
          container effective-aigp {
            description "Track the effective AIGP metric";
            presence "enable effective-aigp";
            leaf metric-offset {
              type int32;
              description "Metric offset for MED";
            }
          }
        }
        case case_5 {
          container minimum-effective-aigp {
            description "Track the minimum effective AIGP metric";
            presence "enable minimum-effective-aigp";
            leaf metric-offset {
              type int32;
              description "Metric offset for MED";
            }
          }
        }
      }
    }
    container multihop {
      description "Configure an EBGP multihop session";
      presence "enable multihop";
      uses apply-advanced;
      leaf ttl {
        type uint8 {
          range "1 .. 255";
        }
        description "TTL value for the session";
      }
      leaf no-nexthop-change {
        type empty;
        description "Do not change next hop to self in advertisements";
      }
    }
    container ebgp-community-cleanup {
      description "Community specific cleanup for eBGP peers";
      presence "enable ebgp-community-cleanup";
      uses apply-advanced;
      leaf origin-validation {
        type enumeration {
          enum accept {
            description "Accept Origin Validation State Community";
          }
          enum reject {
            description "Reject Origin Validation State Community";
          }
        }
        description "Origin Validation State receive behavior";
      }
    }
    leaf route-server-client {
      type empty;
      description "Enable route server client behavior";
    }
    leaf accept-remote-nexthop {
      type empty;
      description "Allow import policy to specify a non-directly connected next-hop";
    }
    leaf preference {
      type uint32;
      description "Preference value";
    }
    leaf local-preference {
      type uint32;
      description "Value of LOCAL_PREF path attribute";
    }
    leaf local-address {
      type "jt:ipaddr";
      description "Address of local end of BGP session";
    }
    leaf local-interface {
      type "jt:interface-name";
      description "Local interface for IPv6 link local EBGP peering";
    }
    leaf forwarding-context {
      type string;
      description "Routing-instance used for data-forwarding and transport-session";
    }
    leaf hold-time {
      type uint32 {
        range "0 .. 65535";
      }
      description "Hold time used when negotiating with a peer";
    }
    leaf minimum-hold-time {
      type uint32 {
        range "3 .. 65535";
      }
      description "Minimum hold time accepted from the peer";
    }
    leaf passive {
      type empty;
      description "Do not send open messages to a peer";
    }
    leaf advertise-inactive {
      type empty;
      description "Advertise inactive routes";
    }
    choice advertise-peer-as-choice {
      leaf advertise-peer-as {
        type empty;
        description "Advertise routes received from the same autonomous system";
      }
      leaf no-advertise-peer-as {
        type empty;
        description "Don't advertise routes received from the same autonomous system";
      }
    }
    container advertise-external {
      description "Advertise best external routes";
      presence "enable advertise-external";
      leaf conditional {
        type empty;
        description "Route matches active route upto med-comparison rule";
      }
    }
    leaf keep {
      type enumeration {
        enum all {
          description "Retain all routes";
        }
        enum none {
          description "Retain no routes";
        }
      }
      description "How to retain routes in the routing table";
    }
    leaf rfc6514-compliant-safi129 {
      type empty;
      description "Compliant with RFC6514 SAFI129 format";
    }
    leaf no-aggregator-id {
      type empty;
      description "Set router ID in aggregator path attribute to 0";
    }
    leaf mtu-discovery {
      type empty;
      description "Enable TCP path MTU discovery";
    }
    leaf enforce-first-as {
      type empty;
      description "Enforce first AS in AS-path is the neighbor's AS";
    }
    leaf out-delay {
      type uint32 {
        range "0 .. 65535";
      }
      description "How long before exporting routes from routing table";
    }
    leaf ttl {
      type enumeration {
        enum 1;
        enum 255;
      }
      description "TTL value for the single-hop peer";
    }
    leaf log-updown {
      type empty;
      description "Log a message for peer state transitions";
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Import policy";
      ordered-by user;
    }
    leaf-list nlri {
      type enumeration {
        enum unicast {
          description "Include unicast NLRI";
          status deprecated;
        }
        enum multicast {
          description "Include multicast NLRI";
          status deprecated;
        }
        enum any {
          description "Include any kind of NLRI";
          status deprecated;
        }
      }
      description "NLRI type to include in updates";
      ordered-by user;
      status deprecated;
    }
    container bgp-error-tolerance {
      description "Handle BGP malformed updates softly";
      presence "enable bgp-error-tolerance";
      uses apply-advanced;
      leaf malformed-update-log-interval {
        type uint32 {
          range "10 .. 65535";
        }
        default "300";
        description "Time used when logging malformed update";
        units seconds;
      }
      choice malformed-routes-limit-choice {
        case case_1 {
          leaf malformed-route-limit {
            type uint32 {
              range "0 .. 4294967295";
            }
            default "1000";
            description "Maximum number of malformed routes from a peer";
          }
        }
        case case_2 {
          leaf no-malformed-route-limit {
            type empty;
            description "No malformed route limit";
          }
        }
      }
    }
    leaf authentication-key {
      type string {
        length "1 .. 126";
      }
      description "MD5 authentication key";
    }
    leaf authentication-algorithm {
      type enumeration {
        enum md5 {
          description "Message Digest 5";
        }
        enum hmac-sha-1-96 {
          description "Hash-based Message Authentication Code (SHA1) (96 bits)";
        }
        enum aes-128-cmac-96 {
          description "Cipher-based Message Authentication Code (AES128) (96 bits)";
        }
        enum ao {
          description "TCP Authentication Option";
        }
      }
      default "hmac-sha-1-96";
      description "Authentication algorithm name";
    }
    leaf tcpao-auth-mismatch {
      type enumeration {
        enum allow-without-tcpao {
          description "Allow the connection establishment without TCP-AO";
        }
      }
      description "Continue without TCP-AO if any one TCP endpoint does not have TCP-AO configured";
    }
    leaf authentication-key-chain {
      type string {
        length "1 .. 128";
      }
      description "Key chain name";
    }
    leaf-list export {
      type "jt:policy-algebra";
      description "Export policy";
      ordered-by user;
    }
    container remove-private {
      description "Remove well-known private AS numbers";
      presence "enable remove-private";
      uses apply-advanced;
      container all {
        description "Remove all private AS numbers and do not stop at the first public AS number";
        presence "enable all";
        container replace {
          description "Replace private AS numbers with the BGP Group's local AS number";
          presence "enable replace";
          leaf nearest {
            type empty;
            description "Use closest public AS number to replace a private AS number";
          }
        }
      }
      leaf no-peer-loop-check {
        type empty;
        description "Remove peer loop-check";
      }
    }
    leaf cluster {
      type "jt:areaid";
      description "Cluster identifier";
    }
    leaf no-client-reflect {
      type empty;
      description "Disable intracluster route redistribution";
    }
    leaf peer-as {
      type string;
      description " Autonomous system number in plain number or 'higher 16bits'.'Lower 16 bits' (asdot notation) format";
    }
    container local-as {
      description "Local autonomous system number";
      leaf as-number {
        type string;
        description " Autonomous system number in plain number or 'higher 16bits'.'Lower 16 bits' (asdot notation) format";
      }
      leaf loops {
        type int32 {
          range "1 .. 10";
        }
        description "Maximum number of times this AS can be in an AS path";
      }
      leaf private {
        type empty;
        description "Hide this local AS in paths learned from this peering";
      }
      leaf alias {
        type empty;
        description "Treat this AS as an alias to the system AS";
      }
      leaf no-prepend-global-as {
        type empty;
        description "Do not prepend global autonomous-system number in advertised paths";
      }
    }
    leaf ipsec-sa {
      type string {
        length "1 .. 32";
      }
      description "IPSec SA name";
    }
    container graceful-shutdown {
      description "BGP peer graceful shutdown option";
      uses apply-advanced;
      container receiver {
        description "BGP peer graceful-shutdown receiver";
        presence "enable receiver";
        uses apply-advanced;
        leaf disable {
          type empty;
          description "Disable graceful-shutdown receiver";
        }
        leaf local-preference {
          type uint32;
          description "Value of receiver LOCAL_PREF path attribute";
        }
      }
      container sender {
        description "BGP peer graceful-shutdown sender";
        presence "enable sender";
        uses apply-advanced;
        leaf local-preference {
          type uint32;
          description "Value of sender LOCAL_PREF path attribute";
        }
      }
    }
    container shutdown {
      description "Shutdown";
      presence "enable shutdown";
      uses apply-advanced;
      leaf notify-message {
        type string;
        description "Notification message";
      }
    }
    leaf unconfigured-peer-graceful-restart {
      type empty;
      description "BGP unconfigured peer graceful restart options";
    }
    container graceful-restart {
      description "BGP graceful restart options";
      presence "enable graceful-restart";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable graceful restart";
          }
        }
      }
      leaf restart-time {
        type uint32 {
          range "1 .. 1800";
        }
        description "Restart time used when negotiating with a peer";
      }
      leaf stale-routes-time {
        type uint32 {
          range "1 .. 1800";
        }
        description "Maximum time for which stale routes are kept";
      }
      container long-lived {
        description "Long-lived graceful restart options";
        uses apply-advanced;
        container receiver {
          description "Long-lived graceful restart receiver (helper) options";
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable receiver (helper) functionality";
              }
            }
          }
        }
        container advertise-to-non-llgr-neighbor {
          description "Advertise stale routes to non-LLGR neighbors";
          presence "enable advertise-to-non-llgr-neighbor";
          uses apply-advanced;
          leaf omit-no-export {
            type empty;
            description "Do not attach no-export community to stale routes";
          }
        }
      }
      leaf disable-notification-extensions {
        type empty;
        description "Disable notification extensions";
      }
      leaf forwarding-state-bit {
        type enumeration {
          enum as-rr-client {
            description "As for a route reflector client";
          }
          enum from-fib {
            description "Always use state of associated FIB(s)";
          }
        }
        description "Control forwarding-state flag negotiation";
      }
      leaf dont-help-shared-fate-bfd-down {
        type empty;
        description "Honor BFD-Down(C=0) if GR-restart not in progress";
      }
    }
    leaf include-mp-next-hop {
      type empty;
      description "Include NEXT-HOP attribute in multiprotocol updates";
    }
    leaf disable-4byte-as {
      type empty;
      description "Disable 4 byte AS capability advertisement";
    }
    container idle-after-switch-over {
      description "Stop peer session from coming up after nonstop-routing switch-over";
      choice idle-interval {
        case case_1 {
          leaf forever {
            type empty;
            description "Idle the peer until the user intervenes";
          }
        }
        case case_2 {
          leaf timeout {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "Timeout value, in seconds, for starting peer after switch over";
          }
        }
      }
    }
    container outbound-route-filter {
      description "Dynamically negotiated cooperative route filtering";
      uses apply-advanced;
      leaf bgp-orf-cisco-mode {
        type empty;
        description "Using BGP ORF capability code 130 and Prefix ORF type 128";
      }
      container extended-community {
        description "Extended community filtering";
        status deprecated;
        uses apply-advanced;
        choice accept-choice {
          leaf accept {
            type empty;
            description "Honor remote requests for extended community ORF";
          }
          leaf no-accept {
            type empty;
            description "Don't honor remote requests for extended community ORF";
          }
        }
        leaf vrf-filter {
          type empty;
          description "Request remote filtering using locally configured VRF import targets";
        }
      }
      container prefix-based {
        description "Prefix-based outbound route filtering";
        presence "enable prefix-based";
        uses apply-advanced;
        container accept {
          description "Honor Prefix-based ORFs from remote peers";
          presence "enable accept";
          uses apply-advanced;
          leaf inet {
            type empty;
            description "Honor IPv4 prefix filters";
          }
          leaf inet6 {
            type empty;
            description "Honor IPv6 prefix filters";
          }
        }
      }
    }
    container message-batching {
      description "DEPRECATED - Batching of outgoing messages";
      status deprecated;
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf enable {
            type empty;
            description "Enable parameter";
          }
        }
        case case_2 {
          leaf disable {
            type empty;
            description "Disable parameter";
          }
        }
      }
      leaf interval {
        type uint32 {
          range "100 .. 1000";
        }
        default "250";
        description "DEPRECATED - Interval over which to batch messages";
        units milliseconds;
      }
    }
    container multipath {
      description "Allow load sharing among multiple BGP paths";
      presence "enable multipath";
      uses apply-advanced;
      leaf disable {
        type empty;
        description "Disable Multipath";
      }
      leaf multiple-as {
        type empty;
        description "Use paths received from different ASs";
      }
      leaf allow-protection {
        type empty;
        description "Allow protection for multipath legs";
      }
      leaf pause-computation-during-churn {
        type empty;
        description "Pause multipath job to absorb churn";
      }
      leaf list-nexthop {
        type empty;
        description "Use List-NH for homogenous nexthop-set also";
      }
      container allow-external-internal {
        description "Allow multipath to mix EBGP and IBGP routes";
        presence "enable allow-external-internal";
        uses apply-advanced;
        leaf-list prefix-policy {
          type "jt:policy-algebra";
          description "Policy to constrain prefixes that apply";
          ordered-by user;
        }
      }
    }
    leaf tcp-mss {
      type uint32 {
        range "1 .. 4096";
      }
      description "Maximum TCP segment size";
    }
    leaf bgp-identifier {
      type "jt:ipv4addr";
      description "BGP Identifier";
    }
    leaf tcp-aggressive-transmission {
      type empty;
      description "Enable aggressive transmission of pure TCP ACKs and retransmissions";
    }
    container bmp {
      description "Specific settings to override the routing-options settings";
      uses apply-advanced;
      leaf monitor {
        type enumeration {
          enum enable {
            description "Enable monitoring of BGP peer(s)";
          }
          enum disable {
            description "Disable monitoring of BGP peer(s)";
          }
        }
        description "Enable/Disable monitoring";
      }
      container route-monitoring {
        description "Control route monitoring settings";
        uses apply-advanced;
        leaf none {
          type empty;
          description "Do not send route monitoring messages";
        }
        container pre-policy {
          description "Send pre-policy route monitoring messages";
          presence "enable pre-policy";
          leaf exclude-non-feasible {
            type empty;
            description "Exclude looped routes, etc";
          }
        }
        container post-policy {
          description "Send post-policy route monitoring messages";
          presence "enable post-policy";
          leaf exclude-non-eligible {
            type empty;
            description "Exclude unresolved routes, etc.";
          }
        }
        container rib-out {
          description "Send adj-ribs-out route monitoring messages";
          presence "enable rib-out";
          leaf pre-policy {
            type empty;
            description "Send pre-policy adj-ribs-out route monitoring messages";
          }
          leaf post-policy {
            type empty;
            description "Send post-policy adj-ribs-out route monitoring messages";
          }
        }
      }
    }
    container advertise-bgp-static {
      description "Advertise bgp-static routes";
      presence "enable advertise-bgp-static";
      uses apply-advanced;
      leaf-list policy {
        type "jt:policy-algebra";
        description "Static route advertisement policy";
        ordered-by user;
      }
    }
    leaf add-path-display-ipv4-address {
      type empty;
      description "Display add-path path-id in IPv4 address format";
    }
    container domain-path-id {
      description "Domain path id attribute";
      uses apply-advanced;
      leaf send {
        type empty;
        description "Allow sending domain path id attribute";
      }
      leaf receive {
        type empty;
        description "Allow receiving domain path id attribute";
      }
    }
    container bfd-liveness-detection {
      description "Bidirectional Forwarding Detection (BFD) options";
      uses apply-advanced;
      leaf version {
        type enumeration {
          enum 0 {
            description "BFD version 0 (deprecated)";
          }
          enum 1 {
            description "BFD version 1";
          }
          enum automatic {
            description "Choose BFD version automatically";
          }
        }
        default "automatic";
        description "BFD protocol version number";
      }
      leaf minimum-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum transmit and receive interval";
        units milliseconds;
      }
      leaf minimum-transmit-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum transmit interval";
        status deprecated;
        units milliseconds;
      }
      leaf minimum-receive-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum receive interval";
        units milliseconds;
      }
      leaf multiplier {
        type uint32 {
          range "1 .. 255";
        }
        default "3";
        description "Detection time multiplier";
      }
      leaf inline-disable {
        type empty;
        description "Disable inline mode for this BFD session";
      }
      leaf pdu-size {
        type uint32 {
          range "24 .. 9000";
        }
        default "24";
        description "BFD transport protocol payload size";
      }
      choice adaptation-choice {
        case case_1 {
          leaf no-adaptation {
            type empty;
            description "Disable adaptation";
          }
        }
      }
      container transmit-interval {
        description "Transmit-interval options";
        uses apply-advanced;
        leaf minimum-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit interval";
          units milliseconds;
        }
        leaf threshold {
          type uint32;
          description "High transmit interval triggering a trap";
          units milliseconds;
        }
      }
      container detection-time {
        description "Detection-time options";
        uses apply-advanced;
        leaf threshold {
          type uint32;
          description "High detection-time triggering a trap";
          units milliseconds;
        }
      }
      container authentication {
        description "Authentication options";
        uses apply-advanced;
        leaf key-chain {
          type string;
          description "Key chain name";
        }
        leaf algorithm {
          type enumeration {
            enum simple-password {
              description "Simple password";
            }
            enum keyed-md5 {
              description "Keyed message Digest 5";
            }
            enum meticulous-keyed-md5 {
              description "Meticulous keyed message Digest 5";
            }
            enum keyed-sha-1 {
              description "Keyed secure hash algorithm (SHA1) ";
            }
            enum meticulous-keyed-sha-1 {
              description "Meticulous keyed secure hash algorithm (SHA1) ";
            }
          }
          description "Algorithm name";
        }
        leaf loose-check {
          type empty;
          description "Verify authentication only if authentication is negotiated";
        }
      }
      leaf session-mode {
        type enumeration {
          enum automatic {
            description "Choose session-mode automatically";
          }
          enum single-hop {
            description "Use single-hop";
          }
          enum multihop {
            description "Use multihop";
          }
        }
        default "automatic";
        description "BFD single-hop or multihop session-mode";
      }
      container echo {
        description "Echo mode parameters";
        uses apply-advanced;
        leaf minimum-interval {
          type uint32 {
            range "100 .. 255000";
          }
          description "Minimum transmit and receive interval";
          units milliseconds;
        }
      }
      container echo-lite {
        description "Echo-lite more parameters";
        uses apply-advanced;
        leaf minimum-interval {
          type uint32 {
            range "100 .. 255000";
          }
          description "Minimum transmit and receive interval";
          units milliseconds;
        }
      }
      container strict-bfd {
        description "Bgp session waits for bfd";
        presence "enable strict-bfd";
        uses apply-advanced;
        leaf bfd-up-wait-interval {
          type uint32 {
            range "10 .. 255";
          }
          description "Time to wait for bfd to come up";
          units seconds;
        }
      }
      leaf holddown-interval {
        type uint32 {
          range "0 .. 255000";
        }
        description "Time to hold the session-UP notification to the client";
        units milliseconds;
      }
    }
    container output-queue-priority {
      description "BGP output queue priority scheduler for updates";
      uses apply-advanced;
      container expedited {
        description "Expedited queue; highest priority";
        presence "enable expedited";
        leaf update-tokens {
          type uint32 {
            range "1 .. 100";
          }
          description "Number of tokens";
        }
      }
      list priority {
        description "Output queue priority 1..16; higher is better";
        key name;
        leaf name {
          type uint32 {
            range "1 .. 16";
          }
          description "Output queue priority; higher is better";
        }
        leaf update-tokens {
          type uint32 {
            range "1 .. 100";
          }
          description "Number of tokens";
        }
      }
      container defaults {
        description "Map policy's priority class and BGP output-queue";
        uses apply-advanced;
        container low {
          description "Assign the 'low' priority class to this output-queue";
          uses bgp-output-queue-priority-class;
        }
        container medium {
          description "Assign the 'medium' priority class to this output-queue";
          uses bgp-output-queue-priority-class;
        }
        container high {
          description "Assign the 'high' priority class to this output-queue";
          uses bgp-output-queue-priority-class;
        }
      }
    }
    container multipath-build-priority {
      description "Configure the multipath build priority";
      uses apply-advanced;
      choice multipath-priority {
        case case_1 {
          leaf low {
            type empty;
            description "Do multipath build with low priority";
          }
        }
        case case_2 {
          leaf medium {
            type empty;
            description "Do multipath build with medium priority";
          }
        }
      }
    }
    leaf send-addpath-optimization {
      type empty;
      description "Enable BGP addpath advertisement optimization";
    }
    container defaults {
      uses apply-advanced;
      container ebgp {
        description "Options impacting external BGP default behaviors";
        uses apply-advanced;
        container no-policy {
          description "Default ebgp behaviors in the absence of configured policy";
          uses apply-advanced;
          leaf receive {
            type enumeration {
              enum accept {
                description "By default, accept routes from all address families";
              }
              enum reject {
                description "By default, reject routes from IPv4/IPv6 unicast address families";
              }
              enum reject-always {
                description "By default, reject routes from all address families";
              }
            }
            description "Default ebgp receive behavior";
          }
          leaf advertise {
            type enumeration {
              enum accept {
                description "By default, advertise routes for all address families";
              }
              enum reject {
                description "By default, do not advertise routes from IPv4/IPv6 unicast address families";
              }
              enum reject-always {
                description "By default, do not advertise routes from any address families";
              }
            }
            description "Default ebgp advertise behavior";
          }
        }
      }
    }
  }
  grouping bgp-af-gr {
    uses apply-advanced;
    container long-lived {
      description "Long-lived graceful restart options";
      uses apply-advanced;
      container restarter {
        description "Long-lived graceful restart restarter options";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable restarter functionality";
            }
          }
        }
        leaf stale-time {
          type string;
          description "Stale time in seconds or dhms notation (1..16777215)";
        }
      }
      container extended-route-retention {
        description "Extended route retention (LLGR-helper extended) options";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable extended-route-retention (LLGR-helper) functionality";
            }
          }
        }
        leaf retention-time {
          type string;
          description "Retention time in seconds or dhms notation (1..16777215)";
        }
        leaf-list retention-policy {
          type "jt:policy-algebra";
          description "Retention policy for Extended Route Retention";
          ordered-by user;
        }
      }
    }
    leaf forwarding-state-bit {
      type enumeration {
        enum set {
          description "Always set";
        }
        enum from-fib {
          description "Use state of associated FIB(s)";
        }
      }
      description "Control forwarding-state flag negotiation";
    }
  }
  grouping bgp-afi-default {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
  }
  grouping apath-options {
    description "Number of paths to advertise";
    uses apply-advanced;
    leaf receive {
      type empty;
      description "Receive multiple paths from peer";
    }
    container send {
      description "Send multiple paths to peer";
      presence "enable send";
      uses apply-advanced;
      container path-selection-mode {
        description "Configure how to select add-path routes";
        uses apply-advanced;
        choice mode {
          case case_1 {
            leaf all-paths {
              type empty;
              description "Advertise all paths allowed by path count";
            }
          }
          case case_2 {
            leaf equal-cost-paths {
              type empty;
              description "Advertise equal cost paths";
            }
          }
        }
      }
      leaf-list prefix-policy {
        type "jt:policy-algebra";
        description "Perform add-path only for prefixes that match policy";
        ordered-by user;
      }
      leaf path-count {
        type int32 {
          range "2 .. 64";
        }
        description "Number of paths to advertise";
      }
      leaf include-backup-path {
        type int32 {
          range "1 .. 2";
        }
        description "Number of backup paths to advertise";
      }
      leaf multipath {
        type empty;
        description "Include only multipath contributor routes";
      }
    }
  }
  grouping bgp-afi-flow {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    leaf-list no-validate {
      type "jt:policy-algebra";
      description "Bypass validation procedure for routes that match policy";
      ordered-by user;
    }
    leaf strip-nexthop {
      type empty;
      description "Strip the next-hop from the outgoing flow update";
    }
    leaf allow-policy-add-nexthop {
      type empty;
      description "Allow policy to add nexthop to a route without nexthop";
      status deprecated;
    }
  }
  grouping bgp-afi-flow-with-redirect-ip-action {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    leaf-list no-validate {
      type "jt:policy-algebra";
      description "Bypass validation procedure for routes that match policy";
      ordered-by user;
    }
    leaf strip-nexthop {
      type empty;
      description "Strip the next-hop from the outgoing flow update";
    }
    container legacy-redirect-ip-action {
      description "Configure legacy redirect to IP support";
      presence "enable legacy-redirect-ip-action";
      uses apply-advanced;
      leaf receive {
        type empty;
        description "Accept legacy encoded redirect-to-ip action attribute";
      }
      leaf send {
        type empty;
        description "Advertise Redirect action as legacy redirect attribute";
      }
    }
    leaf secondary-independent-resolution {
      type empty;
      description "Resolve FLOW routes in VRF table independent of VPN FLOW route";
    }
  }
  grouping bgp-afi-inet-transport {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container aggregate-label {
      description "Aggregate labels of incoming routes with the same FEC";
      presence "enable aggregate-label";
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify the FEC of incoming routes";
      }
    }
    leaf per-prefix-label {
      type empty;
      description "Allocate a unique label to each advertised prefix";
    }
    leaf per-group-label {
      type empty;
      description "Advertise prefixes with unique labels per group";
    }
    container traffic-statistics {
      description "Collect statistics for BGP label-switched paths";
      presence "enable traffic-statistics";
      uses bgpaf-traffic-statistics;
    }
    container protection {
      description "Compute backup path for active nexthop failure";
      presence "enable protection";
    }
  }
  grouping bgp-afi-inet6-labeled {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container aggregate-label {
      description "Aggregate labels of incoming routes with the same FEC";
      presence "enable aggregate-label";
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify the FEC of incoming routes";
      }
    }
    leaf per-group-label {
      type empty;
      description "Advertise prefixes with unique labels per group";
    }
    container traffic-statistics {
      description "Collect statistics for BGP label-switched paths";
      presence "enable traffic-statistics";
      uses bgpaf-traffic-statistics;
    }
    container rib {
      description "Select table used by labeled unicast routes";
      uses apply-advanced;
      leaf "inet6.3" {
        type empty;
        description "Use inet6.3 to exchange labeled unicast routes";
      }
    }
    container explicit-null {
      description "Advertise explicit null";
      presence "enable explicit-null";
      leaf connected-only {
        type empty;
        description "Advertise explicit null only for connected routes";
      }
    }
    container protection {
      description "Compute backup path for active nexthop failure";
      presence "enable protection";
    }
    list topology {
      description "Multi topology routing tables";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Topology name";
      }
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify multi topology routes";
      }
    }
  }
  grouping bgp-afi-inet6-transport {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container aggregate-label {
      description "Aggregate labels of incoming routes with the same FEC";
      presence "enable aggregate-label";
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify the FEC of incoming routes";
      }
    }
    leaf per-prefix-label {
      type empty;
      description "Allocate a unique label to each advertised prefix";
    }
    leaf per-group-label {
      type empty;
      description "Advertise prefixes with unique labels per group";
    }
    container traffic-statistics {
      description "Collect statistics for BGP label-switched paths";
      presence "enable traffic-statistics";
      uses bgpaf-traffic-statistics;
    }
    container lu-export {
      description "Install Classful Transport routes in inet6.3";
      presence "enable lu-export";
      uses apply-advanced;
    }
    container protection {
      description "Compute backup path for active nexthop failure";
      presence "enable protection";
    }
  }
  grouping bgp-afi-l2vpn {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container egress-protection {
      description "Egress router protection";
      presence "enable egress-protection";
      uses apply-advanced;
      container context-identifier {
        description "Context identifier";
        uses apply-advanced;
        leaf context-id {
          type "jt:ipv4addr";
          description "IP address";
        }
      }
      leaf-list keep-import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
    }
  }
  grouping bgp-afi-l3vpn {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container aggregate-label {
      description "Aggregate labels of incoming routes with the same FEC";
      presence "enable aggregate-label";
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify the FEC of incoming routes";
      }
    }
    container egress-protection {
      description "Egress router protection";
      presence "enable egress-protection";
      uses apply-advanced;
      container context-identifier {
        description "Context identifier";
        uses apply-advanced;
        leaf context-id {
          type "jt:ipv4addr";
          description "IP address";
        }
      }
      leaf-list keep-import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
    }
    leaf accept-local-nexthop {
      type empty;
      description "Enable processing of routes with own nexthop";
    }
    leaf accept-own {
      type empty;
      description "Enable processing of routes with own originator-id or nexthop";
    }
  }
  grouping bgp-afi-labeled {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container aggregate-label {
      description "Aggregate labels of incoming routes with the same FEC";
      presence "enable aggregate-label";
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify the FEC of incoming routes";
      }
    }
    leaf per-prefix-label {
      type empty;
      description "Allocate a unique label to each advertised prefix";
    }
    leaf per-group-label {
      type empty;
      description "Advertise prefixes with unique labels per group";
    }
    container traffic-statistics {
      description "Collect statistics for BGP label-switched paths";
      presence "enable traffic-statistics";
      uses bgpaf-traffic-statistics;
    }
    list topology {
      description "Multi topology routing tables";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Topology name";
      }
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify multi topology routes";
      }
    }
    container rib {
      description "Select table used by labeled unicast routes";
      uses rib-inet3;
    }
    container explicit-null {
      description "Advertise explicit null";
      presence "enable explicit-null";
      leaf connected-only {
        type empty;
        description "Advertise explicit null only for connected routes";
      }
    }
    container protection {
      description "Compute backup path for active nexthop failure";
      presence "enable protection";
      uses apply-advanced;
    }
    container egress-protection {
      description "Egress router protection";
      presence "enable egress-protection";
      uses apply-advanced;
      container context-identifier {
        description "Context identifier";
        uses apply-advanced;
        leaf context-id {
          type "jt:ipv4addr";
          description "IP address";
        }
      }
      leaf-list keep-import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
    }
    leaf resolve-vpn {
      type empty;
      description "Install received NLRI in inet.3 also";
    }
    container entropy-label {
      description "Use entropy label for entropy label capable BGP LSPs";
      presence "enable entropy-label";
      uses apply-advanced;
      leaf-list import {
        type "jt:policy-algebra";
        description "Policy to select BGP LSPs to use entropy label";
        ordered-by user;
      }
      leaf no-next-hop-validation {
        type empty;
        description "Don't validate next hop field against route next hop";
      }
      leaf elc-v2-compatible {
        type empty;
        description "Send and accept ELCv2 in addition to ELCv3";
      }
    }
  }
  grouping bgp-afi-srte {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
  }
  grouping bgp-afi-topo {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container protection {
      description "Compute backup path for active nexthop failure";
      presence "enable protection";
    }
    list topology {
      description "Multi topology routing tables";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Topology name";
      }
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify multi topology routes";
      }
    }
  }
  grouping bgp-afi-vpn {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container aggregate-label {
      description "Aggregate labels of incoming routes with the same FEC";
      presence "enable aggregate-label";
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify the FEC of incoming routes";
      }
    }
  }
  grouping bgp-afi-vpn-protection {
    uses apply-advanced;
    container prefix-limit {
      description "Limit maximum number of prefixes from a peer";
      uses bgpaf-prefix-limit;
    }
    container accepted-prefix-limit {
      description "Limit maximum number of prefixes accepted from a peer";
      uses bgpaf-accepted-prefix-limit;
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container add-path {
      description "Advertise multiple paths to peer";
      uses apath-options;
    }
    container aigp {
      description "Allow sending and receiving of AIGP attribute";
      presence "enable aigp";
      uses bgpaf-aigp-options;
    }
    leaf damping {
      type empty;
      description "Enable route flap damping";
    }
    leaf local-ipv4-address {
      type "jt:ipv4addr";
      description "Local IPv4 address";
    }
    container loops {
      description "Allow local AS in received AS paths";
      uses bgpaf-loops;
    }
    container delay-route-advertisements {
      description "Delay route updates for this family until FIB-sync";
      presence "enable delay-route-advertisements";
      uses apply-advanced;
      leaf always-wait-for-krt-drain {
        type empty;
        description "Wait for KRT-queue drain for more-specific prefixes";
      }
      container minimum-delay {
        description "Minimum-delay to ensure KRT sees the route flash";
        uses apply-advanced;
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after RPD start";
        }
        leaf inbound-convergence {
          type uint32 {
            range "1 .. 36000";
          }
          description "Min delay(sec) advertisement after source-peer sent all routes";
        }
      }
      container maximum-delay {
        description "Maximum delay deferring routes";
        uses apply-advanced;
        leaf route-age {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement route age";
        }
        leaf routing-uptime {
          type uint32 {
            range "1 .. 36000";
          }
          description "Max delay(sec) advertisement after RPD start";
        }
      }
    }
    container nexthop-resolution {
      description "Configure nexthop resolution properties";
      uses apply-advanced;
      leaf no-resolution {
        type empty;
        description "Consider nexthop good without resolution attempt";
      }
      leaf preserve-nexthop-hierarchy {
        type empty;
        description "Attempt preserving resolved nexthop chain in forwarding";
      }
    }
    container defer-initial-multipath-build {
      description "Defer initial multipath build until EOR is received";
      presence "enable defer-initial-multipath-build";
      uses apply-advanced;
      leaf maximum-delay {
        type uint32 {
          range "1 .. 3600";
        }
        description "Max delay(sec) multipath build after peer is up";
      }
    }
    container graceful-restart {
      description "BGP graceful restart options";
      uses bgp-af-gr;
    }
    leaf extended-nexthop {
      type empty;
      description "Extended nexthop encoding";
    }
    leaf extended-nexthop-color {
      type empty;
      description "Resolve using extended color nexthop";
    }
    leaf extended-nexthop-tunnel {
      type empty;
      description "Use BGP tunnel attribute";
    }
    leaf no-install {
      type empty;
      description "Dont install received routes in forwarding";
    }
    leaf route-age-bgp-view {
      type empty;
      description "Maintain BGP route's age based on Update messages only";
    }
    container output-queue-priority {
      description "Default output-queue to assign updates to";
      uses bgp-output-queue-priority-class;
    }
    container route-refresh-priority {
      description "Default output-queue to assign route refreshes to";
      uses bgp-output-queue-priority-class;
    }
    container withdraw-priority {
      description "Default output-queue to assign withdrawn routes to";
      uses bgp-output-queue-priority-class;
    }
    leaf advertise-srv6-service {
      type empty;
      description "Advertise SRv6 service";
    }
    leaf accept-srv6-service {
      type empty;
      description "Accept SRv6 service";
    }
    container aggregate-label {
      description "Aggregate labels of incoming routes with the same FEC";
      presence "enable aggregate-label";
      uses apply-advanced;
      leaf community {
        type string;
        description "Community to identify the FEC of incoming routes";
      }
    }
    container egress-protection {
      description "Egress router protection";
      presence "enable egress-protection";
      uses apply-advanced;
      container context-identifier {
        description "Context identifier";
        uses apply-advanced;
        leaf context-id {
          type "jt:ipv4addr";
          description "IP address";
        }
      }
      leaf-list keep-import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
    }
  }
  grouping bgp-output-queue-priority-class {
    choice class {
      case case_1 {
        leaf priority {
          type uint32 {
            range "1 .. 16";
          }
          description "Output queue priority; higher is better";
        }
      }
      case case_2 {
        leaf expedited {
          type empty;
          description "Expedited queue; highest priority";
        }
      }
    }
  }
  grouping bgp_filter_obj {
    description "Filter to apply to tracing";
    leaf match-on {
      type enumeration {
        enum prefix {
          description "Filter based on prefix";
        }
      }
      description "Argument on which to match";
    }
    leaf-list policy {
      type "jt:policy-algebra";
      description "Filter policy";
      ordered-by user;
    }
  }
  grouping bgpaf-accepted-prefix-limit {
    uses apply-advanced;
    leaf maximum {
      type uint32 {
        range "1 .. 4294967295";
      }
      description "Maximum number of prefixes accepted from a peer";
    }
    container teardown {
      description "Clear peer connection on reaching limit";
      presence "enable teardown";
      uses apply-advanced;
      leaf limit-threshold {
        type uint32 {
          range "1 .. 100";
        }
        description "Percentage of prefix-limit to start warnings";
      }
      container idle-timeout {
        description "Timeout before attempting to restart peer";
        presence "enable idle-timeout";
        choice idle-parm {
          case case_1 {
            leaf forever {
              type empty;
              description "Idle the peer until the user intervenes";
            }
          }
          case case_2 {
            leaf timeout {
              type uint32 {
                range "1 .. 2400";
              }
              description "Timeout value, in minutes, for restarting peer";
            }
          }
        }
      }
    }
    container drop-excess {
      description "Drop routes from peer on reaching limit";
      presence "enable drop-excess";
      uses apply-advanced;
      leaf limit-threshold {
        type uint32 {
          range "1 .. 100";
        }
        description "Percentage of prefix-limit to start warnings";
      }
    }
    container hide-excess {
      description "Hide routes from peer on reaching limit";
      presence "enable hide-excess";
      uses apply-advanced;
      leaf limit-threshold {
        type uint32 {
          range "1 .. 100";
        }
        description "Percentage of prefix-limit to start warnings";
      }
    }
  }
  grouping bgpaf-aigp-options {
    uses apply-advanced;
    leaf disable {
      type empty;
      description "Disable sending and receiving of AIGP attribute";
    }
  }
  grouping bgpaf-loops {
    uses apply-advanced;
    leaf loops {
      type int32 {
        range "1 .. 10";
      }
      description "AS-Path loop count";
    }
  }
  grouping bgpaf-prefix-limit {
    uses apply-advanced;
    leaf maximum {
      type uint32 {
        range "1 .. 4294967295";
      }
      description "Maximum number of prefixes from a peer";
    }
    container teardown {
      description "Clear peer connection on reaching limit";
      presence "enable teardown";
      uses apply-advanced;
      leaf limit-threshold {
        type uint32 {
          range "1 .. 100";
        }
        description "Percentage of prefix-limit to start warnings";
      }
      container idle-timeout {
        description "Timeout before attempting to restart peer";
        presence "enable idle-timeout";
        choice idle-parm {
          case case_1 {
            leaf forever {
              type empty;
              description "Idle the peer until the user intervenes";
            }
          }
          case case_2 {
            leaf timeout {
              type uint32 {
                range "1 .. 2400";
              }
              description "Timeout value, in minutes, for restarting peer";
            }
          }
        }
      }
    }
    container drop-excess {
      description "Drop routes from peer on reaching limit";
      presence "enable drop-excess";
      uses apply-advanced;
      leaf limit-threshold {
        type uint32 {
          range "1 .. 100";
        }
        description "Percentage of prefix-limit to start warnings";
      }
    }
    container hide-excess {
      description "Hide routes from peer on reaching limit";
      presence "enable hide-excess";
      uses apply-advanced;
      leaf limit-threshold {
        type uint32 {
          range "1 .. 100";
        }
        description "Percentage of prefix-limit to start warnings";
      }
    }
  }
  grouping bgpaf-traffic-statistics {
    uses apply-advanced;
    leaf labeled-path {
      type empty;
      description "Ingress labeled path statistics";
    }
    container file {
      description "Statistics file options";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf replace {
        type empty;
        description "Replace trace file rather than appending to it";
        status deprecated;
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "10";
        description "Maximum number of trace files";
      }
      leaf no-stamp {
        type empty;
        description "Do not timestamp trace file";
        status deprecated;
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
    }
    leaf interval {
      type int32 {
        range "60 .. 65535";
      }
      description "Time to collect statistics (seconds)";
    }
  }
  grouping juniper-protocols-bgpmcast {
    description "BGP Multicast configuration";
    uses apply-advanced;
    container traceoptions {
      description "Trace options for BGP Multicast";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
  }
  grouping juniper-protocols-bridge {
    uses apply-advanced;
    container traceoptions {
      description "Trace options for Layer 2 address service";
      uses apply-advanced;
      leaf no-remote-trace {
        type empty;
        description "Disable remote tracing";
      }
      container file {
        description "Trace file information";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "3";
          description "Maximum number of trace files";
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
        leaf match {
          type "jt:regular-expression";
          description "Regular expression for lines to be logged";
        }
      }
      leaf level {
        type enumeration {
          enum error {
            description "Match error conditions";
          }
          enum warning {
            description "Match warning messages";
          }
          enum notice {
            description "Match conditions that should be handled specially";
          }
          enum info {
            description "Match informational messages";
          }
          enum verbose {
            description "Match verbose messages";
          }
          enum all {
            description "Match all levels";
          }
        }
        default "error";
        description "Level of debugging output";
      }
      list flag {
        description "Type of operation or event to include in trace";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum configuration {
              description "Configuration operations";
            }
            enum routing-socket {
              description "Routing socket operations";
            }
            enum interface-device {
              description "Interface device operations";
            }
            enum interface-logical {
              description "Logical interface operations";
            }
            enum interface-family {
              description "Interface family operations";
            }
            enum bridging-domain {
              description "Bridging domain operations";
            }
            enum routing-instance {
              description "Routing instance operations";
            }
            enum bridge-interface {
              description "Interface bridge operations";
            }
            enum learning-domain {
              description "Learning domain operations";
            }
            enum ipc {
              description "Inter-process communications operations";
            }
            enum mac-learning {
              description "MAC address learning operations";
            }
            enum initialization {
              description "Initialization operations";
            }
            enum flood-next-hop {
              description "Flood next hop operations";
            }
            enum irb {
              description "Integrated routing and bridging operations";
            }
            enum vpls-ping {
              description "VPLS ping operations";
            }
            enum vpls-loop-prev {
              description "VPLS loop prevention";
            }
            enum logical-system {
              description "Logical system operations";
            }
            enum bmac-next-hop {
              description "Backbone Mac Next hop operations ";
            }
            enum bridge-bmac-next-hop {
              description "Bmac Next hop bridge operations";
            }
            enum isid {
              description "I-Tagged Service ID";
            }
            enum mc-ae {
              description "Multi-chassis AE";
            }
            enum kack {
              description "Kernel-acknowledgment";
            }
            enum storm-control {
              description "Storm-control";
            }
            enum redundant-trunk-group {
              description "Redundant trunk group";
            }
            enum unknown-unicast-forwarding {
              description "Trace unknown unicast forwarding events";
            }
            enum vxlan {
              description "VXLAN";
            }
            enum l2-license {
              description "L2 license trace";
            }
            enum telemetry {
              description "Telemetry";
            }
            enum network-isolation {
              description "Network isolation detection";
            }
            enum all {
              description "All operations";
            }
          }
        }
      }
      container kernel {
        description "Trace options for kernel";
        presence "enable kernel";
        uses apply-advanced;
        container irb {
          description "Trace options for irb";
          presence "enable irb";
        }
      }
      container in-memory-debug {
        description "Enable trace parameters in the memory";
        presence "enable in-memory-debug";
      }
    }
    container global-mac-move {
      description "Enable mac move related options at global level";
      presence "enable global-mac-move";
      uses apply-advanced;
      leaf notification-time {
        type uint32;
        description "Periodical time interval in secs during which MAC move notification occurs";
        units seconds;
      }
      leaf threshold-time {
        type uint32;
        description "Time during which if certain number of MAC moves happen warrant recording";
        units seconds;
      }
      leaf reopen-time {
        type uint32;
        description "Time after which a blocked interface is reopened";
        units seconds;
      }
      leaf threshold-count {
        type uint32;
        description "Count of MAC moves which warrant recording when happen in certain time";
        units seconds;
      }
      container traceoptions {
        description "Enable logging for the MAC moves";
        uses apply-advanced;
        leaf no-remote-trace {
          type empty;
          description "Disable remote tracing";
        }
        container file {
          description "Trace file information";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "3";
            description "Maximum number of trace files";
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
          leaf match {
            type "jt:regular-expression";
            description "Regular expression for lines to be logged";
          }
        }
      }
      leaf log {
        type empty;
        description "Syslog all the MAC moves as stored in the mac-move-buffer";
      }
      leaf disable-action {
        type empty;
        description "Disable mac move action globally";
      }
      leaf cooloff-time {
        type uint32;
        description "Time interval in secs during which no further actions are taken";
        units seconds;
      }
      leaf statistical-approach-wait-time {
        type uint32;
        description "Time during which MAC moves are monitored to collect statistics";
        units seconds;
      }
      leaf interface-recovery-time {
        type uint32;
        description "Time interval after which interface is made operationally up";
        units seconds;
      }
      list exclusive-mac {
        description "MAC addresses to be excluded in mac-move-limit or in VPLS loop prevention algorithm";
        key name;
        ordered-by user;
        leaf name {
          type "jt:mac-addr-prefix";
          description "Source MAC address";
        }
        uses apply-advanced;
      }
    }
    leaf global-mac-table-aging-time {
      type uint32;
      description "System level MAC table aging time";
      units seconds;
    }
    leaf global-mac-ip-table-aging-time {
      type uint32 {
        range "60 .. 1000000";
      }
      description "System level MAC+IP table aging time";
      units seconds;
    }
    leaf global-le-aging-time {
      type uint32 {
        range "120 .. 1000000";
      }
      description "Set LE aging time";
      units seconds;
    }
    leaf global-le-bridge-domain-aging-time {
      type uint32 {
        range "120 .. 1000000";
      }
      description "Set LE bridge-domain aging time";
      units seconds;
    }
    leaf mclag-arpreq-sync {
      type empty;
      description "Enable syncing ARP REQ packets to peer MCLAG PE";
    }
    leaf global-mac-pinning-discard-notification-interval {
      type uint32 {
        range "2 .. 86400";
      }
      description "Set interval for MAC Pinning discard notification";
      units seconds;
    }
    container global-ctx-limit {
      description "Debug context history limit";
      presence "enable global-ctx-limit";
      uses apply-advanced;
      leaf ctx-limit {
        type uint32 {
          range "0 .. 5000000";
        }
        description "Debug context history limit";
      }
    }
    container global-mac-limit {
      description "System level MAC limit options";
      presence "enable global-mac-limit";
      uses apply-advanced;
      leaf mac-limit {
        type uint64;
        description "System level MAC limit";
      }
      leaf packet-action {
        type enumeration {
          enum drop {
            description "Enable packet-action drop when MAC limit is reached";
          }
        }
      }
    }
    container global-mac-ip-limit {
      description "System level MAC+IP limit options";
      presence "enable global-mac-ip-limit";
      uses apply-advanced;
      leaf mac-ip-limit {
        type uint64 {
          range "20 .. 1048575";
        }
        description "System level MAC+IP limit";
      }
    }
    leaf global-mac-statistics {
      type empty;
      description "Enable MAC address statistics at system level";
    }
    leaf global-static-mac-move-drop-log {
      type empty;
      description "Set global static mac move drop and log notification.";
    }
    leaf source-udp-port {
      type uint16 {
        range "49152 .. 65535";
      }
      description "VXLAN source UDP port";
    }
    container telemetry {
      description "Streaming Telemetry Data";
      presence "enable telemetry";
      uses apply-advanced;
      leaf enable-remote-entries {
        type empty;
        description "Enable Remote mac and mac-ip entries";
      }
    }
    leaf global-no-mac-learning {
      type empty;
      description "Disable dynamic MAC address learning at system level";
    }
    leaf global-no-hw-mac-learning {
      type empty;
      description "Disable hardware MAC-address learning at system level";
    }
    leaf global-no-control-mac-aging {
      type empty;
      description "Disable control MAC-address aging from software";
    }
    leaf mclag-arp-nd-sync {
      type empty;
      description "Arp and ND entry sync from peer device.";
    }
    leaf no-mclag-ifa-sync {
      type empty;
      description "IFA entry disable sync from/to peer device.";
    }
    container platform-parameters {
      description "Platform Parameters Setting";
      presence "enable platform-parameters";
      uses apply-advanced;
      container no-mac-flush-on-aa-ae-down {
        description "Do not flush MAC & MAC-IP entries when active-active AE interface goes down";
        presence "enable no-mac-flush-on-aa-ae-down";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable no-mac-flush-on-aa-ae-down";
            }
          }
        }
      }
    }
    container crb-proxy-mac {
      description "Configure proxy MAC address to be used in MAC-IP refresh";
      uses apply-advanced;
      container family {
        description "Address family";
        uses apply-advanced;
        container inet {
          description "Inet version 4 family";
          uses apply-advanced;
          leaf mac-address {
            type "jt:mac-unicast";
            description "Proxy MAC address";
          }
        }
        container inet6 {
          description "Inet version 6 family";
          uses apply-advanced;
          leaf mac-address {
            type "jt:mac-unicast";
            description "Proxy MAC address";
          }
        }
      }
    }
    leaf arp-nd-probe-disable {
      type empty;
      description "Disable probing for ip address";
    }
    leaf arp-nd-probe-failed-log {
      type empty;
      description "Enable syslog when probing for ip address fails";
    }
    leaf garp-na-enable {
      type empty;
      description "Send GARP or unsolicited NA to all connected access devices";
    }
  }
  grouping juniper-protocols-dot1x {
    uses apply-advanced;
    container traceoptions {
      description "Trace options for 802.1X";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum dot1x-debug {
              description "Trace dot1x events";
            }
            enum parse {
              description "Trace configuration parsing";
            }
            enum esw-if {
              description "Trace ESW Interactions";
            }
            enum eapol {
              description "Trace EAPOL Transmit/Receive";
            }
            enum config-internal {
              description "Trace configuration internals";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol task timer processing";
            }
            enum vlan {
              description "Trace VLAN transactions";
            }
            enum all {
              description "Trace everything";
            }
            enum dot1x-ipc {
              description "Trace dot1x IPC interactions";
            }
            enum dot1x-event {
              description "Trace dot1x events";
            }
            enum iccp {
              description "Trace iccp events";
            }
          }
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf ssl-certificate-path {
      type string;
      default "/var/tmp/";
      description "Load SSL certificates for authentication";
    }
    container authenticator {
      description "802.1X authenticator options";
      presence "enable authenticator";
      uses apply-advanced;
      leaf authentication-profile-name {
        type string {
          length "1 .. 63";
        }
        description "Access profile name to use for authentication";
      }
      leaf no-mac-table-binding {
        type empty;
        description "Disable association between mac table and dot1x";
      }
      leaf ip-mac-session-binding {
        type empty;
        description "DHCP or DHCPv6 or SLAAC snooping checking for mac ageout";
      }
      leaf dynamic-vlan-cleanup-interval {
        type uint32 {
          range "60 .. 86400";
        }
        description "Dynamic vlan cleanup interval";
        units seconds;
      }
      container radius-reachability {
        description "Enable radius-rechability feature";
        presence "enable radius-reachability";
        uses apply-advanced;
        leaf query-period {
          type uint32 {
            range "20 .. 65535";
          }
          default "120";
          description "Query period interval";
          units seconds;
        }
      }
      container radius-options {
        description "Info sent to radius server";
        presence "enable radius-options";
        uses apply-advanced;
        leaf add-interface-text-description {
          type empty;
          description "Appends interface text description to NAS-Port-Id";
        }
        choice vlan {
          case case_1 {
            leaf use-vlan-name {
              type empty;
              description "Vlan name";
            }
          }
          case case_2 {
            leaf use-vlan-id {
              type empty;
              description "Vlan id";
            }
          }
        }
      }
      list static {
        description "Static MAC configuration needed to bypass 802.1X";
        key name;
        ordered-by user;
        leaf name {
          type "jt:mac-addr-prefix";
          description "MAC addresses to bypass authentication";
        }
        uses apply-advanced;
        leaf vlan-assignment {
          type string;
          description "VLAN name or 802.1q tag for the MAC address";
        }
        leaf bridge-domain-assignment {
          type string;
          description "Bridge-domain name or 802.1q tag for the MAC address";
        }
        leaf interface {
          type "jt:interface-name";
          description "Interface on which authentication is bypassed";
        }
      }
      list interface {
        description "802.1X  interface specific options";
        key name;
        leaf name {
          type string;
        }
        uses apply-advanced;
        leaf ignore-port-bounce {
          type empty;
          description "To ignore the port-bounce request received from RADIUS server";
        }
        leaf-list authentication-order {
          type enumeration {
            enum dot1x {
              description "Dot1x mode";
            }
            enum mac-radius {
              description "Mac radius mode";
            }
            enum captive-portal {
              description "Captive portal mode";
            }
          }
          description "Flexible authentication order";
          ordered-by user;
        }
        leaf disable {
          type empty;
          description "Disable 802.1X on this interface";
        }
        leaf supplicant {
          type enumeration {
            enum single {
              description "Allow multiple clients; authenticate first client only";
            }
            enum single-secure {
              description "Allow and authenticate only a single client";
            }
            enum multiple {
              description "Allow multiple clients; authenticate each individually";
            }
          }
          default "single";
          description "Set supplicant mode for this interface";
        }
        leaf retries {
          type uint32 {
            range "0 .. 10";
          }
          description "Number of retries after which port is placed into wait state";
        }
        leaf quiet-period {
          type uint32 {
            range "0 .. 65535";
          }
          description "Time to wait after an authentication failure";
          units seconds;
        }
        leaf transmit-period {
          type uint32 {
            range "1 .. 65535";
          }
          description "Interval before retransmitting initial EAPOL PDUs";
          units seconds;
        }
        container multi-domain {
          description "Enable multi domain authentication";
          presence "enable multi-domain";
          uses apply-advanced;
          leaf packet-action {
            type enumeration {
              enum drop-and-log {
                description " Drop the client and generate the log message";
              }
              enum shutdown {
                description "Disable port for excessive client authentication";
              }
            }
            default "drop-and-log";
            description "Set packet action for this interface";
          }
          leaf max-data-session {
            type uint32 {
              range "1 .. 1000";
            }
            description "Data session limit in multi domain authentication";
          }
          leaf recovery-timeout {
            type uint32 {
              range "60 .. 3600";
            }
            description "Multi domain recovery timeout";
            units seconds;
          }
        }
        container mac-radius {
          description "Enable MAC-RADIUS";
          presence "enable mac-radius";
          uses apply-advanced;
          leaf restrict {
            type empty;
            description "Bypass dot1x authentication, use MAC RADIUS only";
          }
          leaf flap-on-disconnect {
            type empty;
            description "Reset an interface on receiving a disconnect request";
          }
          container authentication-protocol {
            description "Set mac-radius authentication method";
            uses apply-advanced;
            choice protocols {
              case case_1 {
                leaf eap-md5 {
                  type empty;
                  description "Authentication protocol EAP-MD5";
                }
              }
              case case_2 {
                leaf pap {
                  type empty;
                  description "Authentication protocol PAP";
                }
              }
              case case_3 {
                container eap-peap {
                  description "Authentication protocol EAP-PEAP";
                  presence "enable eap-peap";
                  uses apply-advanced;
                  leaf resume {
                    type empty;
                    description "Enable resume functionality for faster authentication";
                  }
                }
              }
            }
          }
        }
        choice reauthentication-mode {
          case case_1 {
            leaf no-reauthentication {
              type empty;
              description "Disable reauthentication";
            }
          }
          case case_2 {
            leaf reauthentication {
              type uint32 {
                range "1 .. 65535";
              }
              description "Reauthentication interval";
              units seconds;
            }
          }
        }
        leaf supplicant-timeout {
          type uint32 {
            range "1 .. 60";
          }
          description "Time to wait for a client response";
          units seconds;
        }
        leaf server-timeout {
          type uint32 {
            range "1 .. 60";
          }
          description "Authentication server timeout interval";
          units seconds;
        }
        leaf maximum-requests {
          type uint32 {
            range "1 .. 10";
          }
          description "Number of EAPOL RequestIDs to send before timing out";
        }
        leaf request-retry-count {
          type uint32 {
            range "1 .. 10";
          }
          description "Number of requests to send before timing out";
        }
        leaf guest-vlan {
          type string;
          description "VLAN name or 802.1q tag for unauthenticated or non-responsive hosts";
        }
        leaf guest-gbp-tag {
          type uint32 {
            range "1 .. 65535";
          }
          description "GBP tag for unauthenticated or non-responsive hosts";
        }
        leaf guest-bridge-domain {
          type string;
          description "Bridge-domain name or 802.1q tag for unauthenticated or non-responsive hosts";
        }
        container server-reject-vlan {
          description "VLAN name or 802.1q tag for authentication rejected clients";
          leaf vlan-name {
            type string;
            description "VLAN name or VLAN Tag (1..4095)";
          }
          leaf block-interval {
            type uint32 {
              range "120 .. 65535";
            }
            description "Interval for authenticator to ignore the EAP-Start packets.";
            units seconds;
          }
          leaf eapol-block {
            type empty;
            description "Force the authenticator to ignore EAPOL-Start packets.";
          }
          leaf gbp-tag {
            type uint32 {
              range "1 .. 65535";
            }
            description "GBP tag for authentication rejected clients";
          }
        }
        container server-reject-bridge-domain {
          description "VLAN name or 802.1q tag for authentication rejected clients";
          leaf bridge-domain {
            type string;
            description "Bridge-domain name or VLAN Tag (1..4095)";
          }
          leaf block-interval {
            type uint32 {
              range "120 .. 65535";
            }
            description "Interval for authenticator to ignore the EAP-Start packets.";
            units seconds;
          }
          leaf eapol-block {
            type empty;
            description "Force the authenticator to ignore EAPOL-Start packets.";
          }
        }
        container eapol-block {
          description "Force the authenticator to ignore EAPOL-Start packets";
          uses apply-advanced;
          container server-fail {
            description "Block EAPOL-Start during RADIUS Timeout";
            presence "enable server-fail";
            uses apply-advanced;
            leaf block-interval {
              type uint32 {
                range "120 .. 65535";
              }
              description "Interval for authenticator to ignore the EAP-Start packets.";
              units seconds;
            }
          }
          container mac-radius {
            description "Block EAPOL-Start when client is authenticated in mac-radius mode";
            presence "enable mac-radius";
          }
          container captive-portal {
            description "Block EAPOL-Start when client is authenticated in captive-portal mode";
            presence "enable captive-portal";
          }
        }
        leaf lldp-med-bypass {
          type empty;
          description "Bypass dot1x authentication, use lldp-med based authentication";
        }
        container server-fail {
          description "Action to be taken when server is inaccessible";
          leaf gbp-tag {
            type uint32 {
              range "1 .. 65535";
            }
            description "GBP tag to be assigned when server is inaccessible";
          }
          choice server-fail-options {
            case case_1 {
              leaf deny {
                type empty;
                description "Force client authentication to fail";
              }
            }
            case case_2 {
              leaf permit {
                type empty;
                description "Force client authentication to succeed";
              }
            }
            case case_3 {
              leaf vlan-name {
                type string;
                description "VLAN name or 802.1q tag for unreachable servers";
              }
            }
            case case_4 {
              leaf bridge-domain {
                type string;
                description "Bridge-domain name or 802.1q tag for unreachable servers";
              }
            }
            case case_5 {
              leaf use-cache {
                type empty;
                description "Use the previous state of the client";
              }
            }
          }
        }
        container server-fail-voip {
          description "Action to be taken for VOIP client when server is inaccessible";
          choice server-fail-options {
            case case_1 {
              leaf deny {
                type empty;
                description "Force VoIP client authentication to fail";
              }
            }
            case case_2 {
              leaf permit {
                type empty;
                description "Force VoIP client authentication to succeed";
              }
            }
            case case_3 {
              leaf vlan-name {
                type string;
                description "Configured VoIP VLAN name or 802.1q tag for unreachable servers";
              }
            }
            case case_4 {
              leaf use-cache {
                type empty;
                description "Use the previous state of the VoIP client";
              }
            }
          }
        }
        leaf redirect-url {
          type string {
            length "10 .. 247";
          }
          description "CWA redirect URL to be used for unauthenticated users";
        }
        leaf no-tagged-mac-authentication {
          type empty;
          description "Don't allow tagged mac for radius authentication";
        }
        leaf retain-mac-aged-session {
          type empty;
          description "Retain mac aged out session";
        }
      }
      container mac-radius {
        description "User-defined options for mac-radius mode";
        presence "enable mac-radius";
        uses apply-advanced;
        leaf password {
          type string {
            length "1 .. 128";
          }
          description "Specify the user-defined password to be used for mac authentication";
        }
      }
    }
    container supplicant {
      description "802.1X supplicant options";
      uses apply-advanced;
      list interface {
        description "802.1X supplicant interface specific options";
        key name;
        leaf name {
          type string;
        }
        uses apply-advanced;
        leaf authentication-method {
          type enumeration {
            enum eap-tls {
              description "Supplicant authentication protocol EAP-TLS";
            }
          }
          default "eap-tls";
          description "802.1X supplicant authentication protocol for this interface";
        }
        leaf local-certificate {
          type string;
          description "Local certificate identifier to be presented for authentication";
        }
        leaf user-id {
          type string {
            length "1 .. 63";
          }
          description "User id, to be presented for authentication";
        }
        leaf password {
          type string {
            length "1 .. 63";
          }
          description "Password, to be presented for authentication";
        }
      }
    }
  }
  grouping juniper-protocols-esis {
    uses apply-advanced;
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable ES-IS";
        }
      }
    }
    container traceoptions {
      description "Trace options for ES-IS";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum error {
              description "Trace errored packets";
            }
            enum esh {
              description "Trace end system hello packets";
            }
            enum ish {
              description "Trace intermediate system hello packets";
            }
            enum graceful-restart {
              description "Trace graceful restart events";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf preference {
      type uint32;
      description "Preference of routes";
    }
    container graceful-restart {
      description "ES-IS graceful restart options";
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable graceful restart";
          }
        }
      }
      leaf restart-duration {
        type uint32 {
          range "30 .. 300";
        }
        description "Maximum time for graceful restart to finish";
        units seconds;
      }
    }
    list interface {
      description "Interface configuration";
      key name;
      leaf name {
        type "jt:interface-name";
        description "Interface name";
      }
      uses apply-advanced;
      leaf hold-time {
        type uint32 {
          range "1 .. 65535";
        }
        description "Time after which neighbors think the interface is down";
        units seconds;
      }
      leaf end-system-configuration-timer {
        type uint32 {
          range "1 .. 65535";
        }
        description "Suggested end system configuration timer";
        units seconds;
      }
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable ES-IS on this interface";
          }
        }
      }
    }
  }
  grouping juniper-protocols-evpn-interconnect {
    description "Interconnect configuration for the routing instance";
    uses apply-advanced;
    leaf-list vrf-import {
      type "jt:policy-algebra";
      description "Import policy for Interconnect";
      ordered-by user;
    }
    leaf-list vrf-export {
      type "jt:policy-algebra";
      description "Export policy for Interconnect";
      ordered-by user;
    }
    container vrf-target {
      description "Interconnect target community configuration";
      uses apply-advanced;
      leaf community {
        type string;
        description "Target community to use in import and export";
      }
      leaf import {
        type string;
        description "Target community to use when filtering on import";
      }
      leaf export {
        type string;
        description "Target community to use when marking routes on export";
      }
    }
    container route-distinguisher {
      description "Route distinguisher for this interconnect";
      leaf rd-type {
        type string;
        description "Number in (16 bit:32 bit) or (32 bit 'L':16 bit) or (IP address:16 bit) format";
      }
    }
    list domain-path-id {
      description "DCI VRF domain path id configuration";
      key name;
      max-elements 1;
      ordered-by user;
      uses domain-id-type;
    }
    container esi {
      description "ESI configuration of interconnect";
      uses apply-advanced;
      leaf identifier {
        type "jt:esi";
        description "ESI value for interconnect";
      }
      choice mode {
        case case_1 {
          leaf all-active {
            type empty;
            description "All-active mode";
          }
        }
      }
      container df-election-type {
        description "DF Election Type";
        presence "enable df-election-type";
        uses apply-advanced;
        choice pref_choice {
          case case_1 {
            container preference {
              description "Preference based DF election";
              presence "enable preference";
              uses apply-advanced;
              leaf value {
                type uint32 {
                  range "0 .. 65535";
                }
                default "32767";
                description "Preference value for EVPN Multihoming DF election";
              }
            }
          }
        }
        choice mod_choice {
          case case_1 {
            container mod {
              description "MOD based DF election";
              presence "enable mod";
            }
          }
        }
      }
    }
    leaf-list interconnected-vni-list {
      type string;
      description "List of translated VNIs (1..16777214) or all, that are to be EVPN interconnected";
    }
    leaf-list interconnected-vlan-list {
      type string;
      description "List of VLAN identifiers that are to be EVPN interconnected";
      ordered-by user;
    }
    container irb-symmetric-routing {
      description "Enable EVPN T-2 symmetric DCI routing";
      uses apply-advanced;
      leaf vni {
        type uint32 {
          range "1 .. 16777214";
        }
        description "VXLAN network identifier used for T-2 symmetric routing IP prefixes";
      }
    }
    leaf encapsulation {
      type enumeration {
        enum mpls {
          description "MPLS encapsulation";
        }
        enum vxlan {
          description "VXLAN encapsulation";
        }
      }
    }
  }
  grouping domain-id-type {
    leaf name {
      type string;
      description "Domain id for type 5 evpn DCI";
    }
    uses apply-advanced;
  }
  grouping juniper-protocols-isis {
    uses apply-advanced;
    list interface {
      description "Interface configuration";
      key name;
      leaf name {
        type "jt:interface-name";
        description "Interface name";
      }
      uses apply-advanced;
      container ldp-synchronization {
        description "Advertise maximum metric until LDP is operational";
        presence "enable ldp-synchronization";
        uses ldp-sync-obj;
      }
      list level {
        description "Configure levels on this interface";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "1 .. 2";
          }
          description "IS-IS level number";
        }
        uses apply-advanced;
        leaf te-metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "Traffic engineering metric";
        }
        leaf no-advertise-adjacency-segment {
          type empty;
          description "Do not advertise an adjacency segment for this level";
        }
        container ipv4-adjacency-segment {
          description "Configure ipv4 adjacency segment";
          uses apply-advanced;
          container protected {
            description "Adjacency SID is eligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
          container unprotected {
            description "Adjacency SID uneligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
        }
        container ipv6-adjacency-segment {
          description "Configure ipv6 adjacency segment";
          uses apply-advanced;
          container protected {
            description "Adjacency SID is eligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
          container unprotected {
            description "Adjacency SID uneligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
        }
        container srm6-adjacency-segment {
          description "Configure srm6 adjacency segment";
          uses apply-advanced;
          container unprotected {
            description "Adjacency SID uneligible for protection";
            leaf sid {
              type uint32 {
                range "1 .. 65535";
              }
              description "Set Adjacency SID Value";
            }
          }
        }
        container srv6-adjacency-segment {
          description "Configure srv6 adjacency segment";
          uses apply-advanced;
          container protected {
            description "SRv6 Adjacency segment is eligible for protection";
            presence "enable protected";
            uses apply-advanced;
            list locator {
              description "Locator to bind SRv6 adjacency segment";
              key name;
              ordered-by user;
              leaf name {
                type string;
                description "Locator name";
              }
              uses apply-advanced;
              list end-x-sid {
                description "Endpoint 128 bit address";
                key name;
                ordered-by user;
                leaf name {
                  type "jt:ipv6addr";
                }
                uses apply-advanced;
                container flavor {
                  description "Configure end-x-SID flavor";
                  presence "enable flavor";
                  uses apply-advanced;
                  leaf psp {
                    type empty;
                    description "Penultimate segment pop of the SRH";
                  }
                  leaf usp {
                    type empty;
                    description "Ultimate segment pop of the SRH";
                  }
                  leaf usd {
                    type empty;
                    description "Ultimate segment decapsulation";
                  }
                }
              }
              container micro-adjacency-sid {
                description "Micro-adjacency-SID";
                presence "enable micro-adjacency-sid";
                uses apply-advanced;
                leaf static-sid {
                  type uint32;
                  description "Static micro-adjacency-SID";
                }
              }
              container dynamic-end-x-sid {
                description "Allocate end-x-SID dynamically";
                presence "enable dynamic-end-x-sid";
                uses apply-advanced;
                container flavor {
                  description "Configure end-x-SID flavor";
                  presence "enable flavor";
                  uses apply-advanced;
                  leaf psp {
                    type empty;
                    description "Penultimate segment pop of the SRH";
                  }
                  leaf usp {
                    type empty;
                    description "Ultimate segment pop of the SRH";
                  }
                  leaf usd {
                    type empty;
                    description "Ultimate segment decapsulation";
                  }
                }
              }
            }
          }
          container unprotected {
            description "SRv6 Adjacency segment is uneligible for protection";
            presence "enable unprotected";
            uses apply-advanced;
            list locator {
              description "Locator to bind SRv6 adjacency segment";
              key name;
              ordered-by user;
              leaf name {
                type string;
                description "Locator name";
              }
              uses apply-advanced;
              list end-x-sid {
                description "Endpoint 128 bit address";
                key name;
                ordered-by user;
                leaf name {
                  type "jt:ipv6addr";
                }
                uses apply-advanced;
                container flavor {
                  description "Configure end-x-SID flavor";
                  presence "enable flavor";
                  uses apply-advanced;
                  leaf psp {
                    type empty;
                    description "Penultimate segment pop of the SRH";
                  }
                  leaf usp {
                    type empty;
                    description "Ultimate segment pop of the SRH";
                  }
                  leaf usd {
                    type empty;
                    description "Ultimate segment decapsulation";
                  }
                }
              }
              container micro-adjacency-sid {
                description "Micro-adjacency-SID";
                presence "enable micro-adjacency-sid";
                uses apply-advanced;
                leaf static-sid {
                  type uint32;
                  description "Static micro-adjacency-SID";
                }
              }
              container dynamic-end-x-sid {
                description "Allocate end-x-SID dynamically";
                presence "enable dynamic-end-x-sid";
                uses apply-advanced;
                container flavor {
                  description "Configure end-x-SID flavor";
                  presence "enable flavor";
                  uses apply-advanced;
                  leaf psp {
                    type empty;
                    description "Penultimate segment pop of the SRH";
                  }
                  leaf usp {
                    type empty;
                    description "Ultimate segment pop of the SRH";
                  }
                  leaf usd {
                    type empty;
                    description "Ultimate segment decapsulation";
                  }
                }
              }
            }
          }
        }
        list lan-neighbor {
          description "Configuration specific to a LAN neighbor";
          key name;
          ordered-by user;
          leaf name {
            type "jt:sysid";
            description "Neighbor's sysid";
          }
          uses apply-advanced;
          container ipv4-adjacency-segment {
            description "Configure ipv4 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
          container ipv6-adjacency-segment {
            description "Configure ipv6 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
          container srm6-adjacency-segment {
            description "Configure srm6 adjacency segment";
            uses apply-advanced;
            container unprotected {
              description "Adjacency SID uneligible for protection";
              leaf sid {
                type uint32 {
                  range "1 .. 65535";
                }
                description "Set Adjacency SID Value";
              }
            }
          }
          container srv6-adjacency-segment {
            description "Configure srv6 adjacency segment";
            uses apply-advanced;
            container protected {
              description "SRv6 Adjacency segment is eligible for protection";
              presence "enable protected";
              uses apply-advanced;
              list locator {
                description "Locator to bind SRv6 adjacency segment";
                key name;
                ordered-by user;
                leaf name {
                  type string;
                  description "Locator name";
                }
                uses apply-advanced;
                list end-x-sid {
                  description "Endpoint 128 bit address";
                  key name;
                  ordered-by user;
                  leaf name {
                    type "jt:ipv6addr";
                  }
                  uses apply-advanced;
                  container flavor {
                    description "Configure end-x-SID flavor";
                    presence "enable flavor";
                    uses apply-advanced;
                    leaf psp {
                      type empty;
                      description "Penultimate segment pop of the SRH";
                    }
                    leaf usp {
                      type empty;
                      description "Ultimate segment pop of the SRH";
                    }
                    leaf usd {
                      type empty;
                      description "Ultimate segment decapsulation";
                    }
                  }
                }
                container micro-adjacency-sid {
                  description "Micro-adjacency-SID";
                  presence "enable micro-adjacency-sid";
                  uses apply-advanced;
                  leaf static-sid {
                    type uint32;
                    description "Static micro-adjacency-SID";
                  }
                }
                container dynamic-end-x-sid {
                  description "Allocate end-x-SID dynamically";
                  presence "enable dynamic-end-x-sid";
                  uses apply-advanced;
                  container flavor {
                    description "Configure end-x-SID flavor";
                    presence "enable flavor";
                    uses apply-advanced;
                    leaf psp {
                      type empty;
                      description "Penultimate segment pop of the SRH";
                    }
                    leaf usp {
                      type empty;
                      description "Ultimate segment pop of the SRH";
                    }
                    leaf usd {
                      type empty;
                      description "Ultimate segment decapsulation";
                    }
                  }
                }
              }
            }
            container unprotected {
              description "SRv6 Adjacency segment is uneligible for protection";
              presence "enable unprotected";
              uses apply-advanced;
              list locator {
                description "Locator to bind SRv6 adjacency segment";
                key name;
                ordered-by user;
                leaf name {
                  type string;
                  description "Locator name";
                }
                uses apply-advanced;
                list end-x-sid {
                  description "Endpoint 128 bit address";
                  key name;
                  ordered-by user;
                  leaf name {
                    type "jt:ipv6addr";
                  }
                  uses apply-advanced;
                  container flavor {
                    description "Configure end-x-SID flavor";
                    presence "enable flavor";
                    uses apply-advanced;
                    leaf psp {
                      type empty;
                      description "Penultimate segment pop of the SRH";
                    }
                    leaf usp {
                      type empty;
                      description "Ultimate segment pop of the SRH";
                    }
                    leaf usd {
                      type empty;
                      description "Ultimate segment decapsulation";
                    }
                  }
                }
                container micro-adjacency-sid {
                  description "Micro-adjacency-SID";
                  presence "enable micro-adjacency-sid";
                  uses apply-advanced;
                  leaf static-sid {
                    type uint32;
                    description "Static micro-adjacency-SID";
                  }
                }
                container dynamic-end-x-sid {
                  description "Allocate end-x-SID dynamically";
                  presence "enable dynamic-end-x-sid";
                  uses apply-advanced;
                  container flavor {
                    description "Configure end-x-SID flavor";
                    presence "enable flavor";
                    uses apply-advanced;
                    leaf psp {
                      type empty;
                      description "Penultimate segment pop of the SRH";
                    }
                    leaf usp {
                      type empty;
                      description "Ultimate segment pop of the SRH";
                    }
                    leaf usd {
                      type empty;
                      description "Ultimate segment decapsulation";
                    }
                  }
                }
              }
            }
          }
        }
        container post-convergence-lfa {
          description "Configure backup along post convergence on this interface";
          presence "enable post-convergence-lfa";
          uses apply-advanced;
          container node-protection {
            description "Enable node protection";
            presence "enable node-protection";
            uses apply-advanced;
            leaf cost {
              type uint32 {
                range "0 .. 16777215";
              }
              description "Cost for node protection";
            }
          }
          leaf srlg-protection {
            type empty;
            description "Enable srlg protection";
          }
          leaf fate-sharing-protection {
            type empty;
            description "Enable fate-sharing protection";
          }
        }
        container application-specific {
          description "Advertise application-specific TE attributes";
          uses apply-advanced;
          list attribute-group {
            description "Link attribute group name";
            key name;
            max-elements 1;
            ordered-by user;
            leaf name {
              type string;
              description "Link attribute group name";
            }
            uses apply-advanced;
            leaf advertise-delay-metric {
              type empty;
              description "Advertise delay metric as per interface config";
            }
            leaf te-metric {
              type uint32 {
                range "0 .. 16777215";
              }
              description "Traffic engineering metric for this attribute group";
            }
            leaf-list admin-group {
              type string;
              description "Administrative groups for this attribute-group";
              max-elements 16;
              ordered-by user;
            }
            container application {
              description "Standard Applications part of this attribute-group";
              uses apply-advanced;
              leaf flex-algorithm {
                type empty;
                description "Set X flag in standard application bit mask";
              }
            }
          }
        }
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable IS-IS for this level";
            }
          }
        }
        leaf metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "Metric for this level";
        }
        leaf ipv4-multicast-metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "IPv4 multicast metric for this level";
        }
        leaf ipv6-unicast-metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "IPv6 unicast metric for this level";
        }
        leaf ipv6-multicast-metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "IPv6 multicast metric for this level";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum default {
                description "Default topology";
              }
              enum ipv4-multicast {
                description "IPv4 multicast topology";
              }
              enum ipv6-unicast {
                description "IPv6 unicast topology";
              }
              enum ipv6-multicast {
                description "IPv6 multicast topology";
              }
            }
            description "Topology name";
          }
          uses apply-advanced;
          leaf metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint32 {
                  range "0 .. 16777215";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
        leaf authentication-key {
          type "jt:unreadable";
          description "Authentication key (password)";
          status deprecated;
        }
        leaf authentication-type {
          type enumeration {
            enum md5 {
              description "MD5 authentication";
              status deprecated;
            }
            enum simple {
              description "Simple password authentication";
              status deprecated;
            }
          }
          description "Authentication type";
          status deprecated;
        }
        leaf hello-authentication-key {
          type "jt:unreadable";
          description "Authentication key (password) for hello packets";
        }
        leaf hello-authentication-type {
          type enumeration {
            enum md5 {
              description "MD5 authentication";
            }
            enum simple {
              description "Simple password authentication";
            }
          }
          description "Authentication type for hello packets";
        }
        leaf hello-authentication-key-chain {
          type string {
            length "1 .. 128";
          }
          description "Key chain name";
        }
        leaf hello-interval {
          type uint32 {
            range "1 .. 21845";
          }
          description "Interval between hello packet transmissions";
          units seconds;
        }
        leaf hold-time {
          type uint32 {
            range "1 .. 65535";
          }
          description "Time after which neighbors think the interface is down";
          units seconds;
        }
        leaf priority {
          type uint32 {
            range "0 .. 127";
          }
          description "Designated router election priority";
        }
        container flood-reflector {
          description "Configure interface as flood-reflector";
          presence "enable flood-reflector";
          uses apply-advanced;
          leaf cluster-id {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "Cluster-ID";
          }
        }
        container passive {
          description "Do not run IS-IS at this level, but advertise it";
          presence "enable passive";
          uses apply-advanced;
          leaf remote-node-iso {
            type "jt:sysid";
            description "ISO System-ID of the remote node";
          }
          leaf remote-node-id {
            type "jt:ipv4addr";
            description "Remote address of the link";
          }
        }
        leaf strict-bfd-old {
          type empty;
          description "Enable strict bfd over this interface";
        }
      }
      leaf delay-metric {
        type uint32 {
          range "0 .. 16777215";
        }
        description "Delay metric";
        units microseconds;
      }
      container delay-measurement {
        description "Enable delay measurement";
        presence "enable delay-measurement";
        uses apply-advanced;
        leaf probe-interval {
          type uint32 {
            range "1 .. 255";
          }
          description "Probe interval";
          units seconds;
        }
        leaf probe-count {
          type uint32 {
            range "1 .. 15";
          }
          description "Probe count";
          units seconds;
        }
        container advertisement {
          description "Delay advertisement";
          uses apply-advanced;
          container periodic {
            description "Periodic advertisement parameters";
            uses apply-advanced;
            leaf threshold {
              type uint32 {
                range "0 .. 100";
              }
              description "Threshold";
              units percentage;
            }
            leaf interval {
              type uint32 {
                range "30 .. 3600";
              }
              description "Interval";
              units seconds;
            }
          }
          container accelerated {
            description "Accelerated advertisement parameters";
            presence "enable accelerated";
            uses apply-advanced;
            leaf threshold {
              type uint32 {
                range "0 .. 100";
              }
              description "Threshold";
              units percentage;
            }
          }
        }
      }
      leaf no-advertise-adjacency-segment {
        type empty;
        description "Do not advertise an adjacency segment for this interface";
      }
      container auto-bandwidth {
        description "Auto bandwidth configuration";
        uses apply-advanced;
        leaf template-name {
          type string;
          description "Auto bandwidth template name";
        }
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable Auto bandwidth on this interface";
            }
          }
        }
      }
      choice protection-type {
        case case_1 {
          leaf link-protection {
            type empty;
            description "Protect interface from link faults only";
          }
        }
        case case_2 {
          leaf node-link-protection {
            type empty;
            description "Protect interface from both link and node faults";
          }
        }
      }
      leaf no-eligible-backup {
        type empty;
        description "Not eligible for backup traffic from protected interfaces";
      }
      leaf no-eligible-remote-backup {
        type empty;
        description "Not eligible for Remote-LFA backup traffic from protected interfaces";
      }
      container link-degradation-threshold {
        description "Link up and down thresholds (in %) for proactive link protection";
        presence "enable link-degradation-threshold";
        leaf link-down {
          type uint32 {
            range "0 .. 100";
          }
          description "Signal degradation threshold above which link marked down";
        }
        leaf link-up {
          type uint32 {
            range "0 .. 100";
          }
          description "Signal degradation threshold below which link is marked up.";
        }
      }
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable IS-IS on this interface";
          }
        }
      }
      leaf authentication-key {
        type "jt:unreadable";
        description "Authentication key (password)";
        status deprecated;
      }
      leaf authentication-type {
        type enumeration {
          enum md5 {
            description "MD5 authentication";
            status deprecated;
          }
          enum simple {
            description "Simple password authentication";
            status deprecated;
          }
        }
        description "Authentication type";
        status deprecated;
      }
      leaf flood-group {
        type string;
        description "ISO Area that this interface should send LSPs to";
      }
      leaf hello-authentication-key {
        type "jt:unreadable";
        description "Authentication key (password) for hello packets";
        status deprecated;
      }
      leaf hello-authentication-type {
        type enumeration {
          enum md5 {
            description "MD5 authentication";
            status deprecated;
          }
          enum simple {
            description "Simple password authentication";
            status deprecated;
          }
        }
        description "Authentication type for hello packets";
        status deprecated;
      }
      leaf hello-padding-type {
        type enumeration {
          enum strict {
            description "Padding for all adjacency states";
          }
          enum adaptive {
            description "Padding until state of neighbor adjacency is 'up'";
          }
          enum loose {
            description "Padding until state of adjacency is 'initializing'";
          }
          enum disable {
            description "Do not add any padding for hello packets";
          }
        }
        default "loose";
        description "Type of padding for hello packets";
      }
      leaf interface-group-holddown-delay {
        type uint32 {
          range "0 .. 60";
        }
        description "Time to wait before including in BBM calculation";
        units seconds;
      }
      choice layer2-map-choice {
        leaf layer2-map {
          type empty;
          description "Kernel ARP/ND creation for nexthops";
        }
        leaf no-layer2-map {
          type empty;
          description "Don't kernel ARP/ND creation for nexthops";
        }
      }
      leaf max-hello-size {
        type uint32 {
          range "512 .. 16000";
        }
        description "Maximum size allowed for ISIS Hello PDUs";
      }
      leaf lsp-interval {
        type uint32 {
          range "1 .. 1000";
        }
        default "100";
        description "Interval between LSP transmissions";
        units milliseconds;
      }
      container csnp-interval {
        description "Rate of CSN packets (for LAN interfaces only)";
        choice csnp_interval_option {
          case case_1 {
            leaf csnp-interval-number {
              type uint32 {
                range "1 .. 65535";
              }
              description "Interval between CSN packets";
              units seconds;
            }
          }
          case case_2 {
            leaf disable {
              type empty;
              description "Do not send CSN packets on this interface";
            }
          }
        }
      }
      container strict-dual-isis {
        description "Enable dual isis if spf computation is required for both ipv4 and ipv6 family";
        presence "enable strict-dual-isis";
        uses apply-advanced;
        leaf holdown {
          type uint32 {
            range "1 .. 65535";
          }
          default "12";
          description "Time to wait for ipv4 and ipv6 connectivity";
          status deprecated;
        }
        leaf holddown {
          type uint32 {
            range "1 .. 65535";
          }
          default "12";
          description "Time to wait for ipv4 and ipv6 connectivity";
        }
      }
      container mesh-group {
        description "Add the interface to a mesh group";
        choice mesh_group_option {
          case case_1 {
            leaf mesh-group-number {
              type uint32;
              description "Mesh group number for this interface";
            }
          }
          case case_2 {
            leaf blocked {
              type empty;
              description "Do not flood new LSPs on this interface";
            }
          }
        }
      }
      leaf point-to-point {
        type empty;
        description "Treat interface as point to point";
      }
      container passive {
        description "Do not run IS-IS, but advertise it";
        presence "enable passive";
        uses apply-advanced;
        leaf remote-node-iso {
          type "jt:sysid";
          description "ISO System-ID of the remote node";
        }
        leaf remote-node-id {
          type "jt:ipv4addr";
          description "Remote address of the link";
        }
      }
      leaf checksum {
        type empty;
        description "Enable checksum for packets on this interface";
      }
      leaf no-unicast-topology {
        type empty;
        description "Do not include this interface in the unicast topology";
      }
      leaf no-ipv4-multicast {
        type empty;
        description "Do not include this interface in the IPv4 multicast topology";
      }
      leaf no-ipv6-unicast {
        type empty;
        description "Do not include this interface in the IPv6 unicast topology";
      }
      leaf no-ipv6-multicast {
        type empty;
        description "Do not include this interface in the IPv6 multicast topology";
      }
      leaf no-adjacency-down-notification {
        type empty;
        description "Do not inform other protocols about adjacency down events";
      }
      container bfd-liveness-detection {
        description "Bidirectional Forwarding Detection options";
        status deprecated;
        uses apply-advanced;
        leaf version {
          type enumeration {
            enum 0 {
              description "BFD version 0 (deprecated)";
            }
            enum 1 {
              description "BFD version 1";
            }
            enum automatic {
              description "Choose BFD version automatically";
            }
          }
          default "automatic";
          description "BFD protocol version number";
        }
        leaf minimum-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit and receive interval";
          units milliseconds;
        }
        leaf minimum-transmit-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit interval";
          status deprecated;
          units milliseconds;
        }
        leaf minimum-receive-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum receive interval";
          units milliseconds;
        }
        leaf multiplier {
          type uint32 {
            range "1 .. 255";
          }
          default "3";
          description "Detection time multiplier";
        }
        leaf inline-disable {
          type empty;
          description "Disable inline mode for this BFD session";
        }
        leaf pdu-size {
          type uint32 {
            range "24 .. 9000";
          }
          default "24";
          description "BFD transport protocol payload size";
        }
        choice adaptation-choice {
          case case_1 {
            leaf no-adaptation {
              type empty;
              description "Disable adaptation";
            }
          }
        }
        container transmit-interval {
          description "Transmit-interval options";
          uses apply-advanced;
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            units milliseconds;
          }
          leaf threshold {
            type uint32;
            description "High transmit interval triggering a trap";
            units milliseconds;
          }
        }
        container detection-time {
          description "Detection-time options";
          uses apply-advanced;
          leaf threshold {
            type uint32;
            description "High detection-time triggering a trap";
            units milliseconds;
          }
        }
        container authentication {
          description "Authentication options";
          uses apply-advanced;
          leaf key-chain {
            type string;
            description "Key chain name";
          }
          leaf algorithm {
            type enumeration {
              enum simple-password {
                description "Simple password";
              }
              enum keyed-md5 {
                description "Keyed message Digest 5";
              }
              enum meticulous-keyed-md5 {
                description "Meticulous keyed message Digest 5";
              }
              enum keyed-sha-1 {
                description "Keyed secure hash algorithm (SHA1) ";
              }
              enum meticulous-keyed-sha-1 {
                description "Meticulous keyed secure hash algorithm (SHA1) ";
              }
            }
            description "Algorithm name";
          }
          leaf loose-check {
            type empty;
            description "Verify authentication only if authentication is negotiated";
          }
        }
      }
      list family {
        description "Address family specific interface attributes";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum inet {
              description "IPv4 family";
            }
            enum inet6 {
              description "IPv6 family";
            }
          }
        }
        uses apply-advanced;
        container bfd-liveness-detection {
          description "Bidirectional Forwarding Detection options";
          uses apply-advanced;
          leaf version {
            type enumeration {
              enum 0 {
                description "BFD version 0 (deprecated)";
              }
              enum 1 {
                description "BFD version 1";
              }
              enum automatic {
                description "Choose BFD version automatically";
              }
            }
            default "automatic";
            description "BFD protocol version number";
          }
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
          leaf minimum-transmit-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            status deprecated;
            units milliseconds;
          }
          leaf minimum-receive-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum receive interval";
            units milliseconds;
          }
          leaf multiplier {
            type uint32 {
              range "1 .. 255";
            }
            default "3";
            description "Detection time multiplier";
          }
          leaf inline-disable {
            type empty;
            description "Disable inline mode for this BFD session";
          }
          leaf pdu-size {
            type uint32 {
              range "24 .. 9000";
            }
            default "24";
            description "BFD transport protocol payload size";
          }
          choice adaptation-choice {
            case case_1 {
              leaf no-adaptation {
                type empty;
                description "Disable adaptation";
              }
            }
          }
          container transmit-interval {
            description "Transmit-interval options";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf threshold {
              type uint32;
              description "High transmit interval triggering a trap";
              units milliseconds;
            }
          }
          container detection-time {
            description "Detection-time options";
            uses apply-advanced;
            leaf threshold {
              type uint32;
              description "High detection-time triggering a trap";
              units milliseconds;
            }
          }
          container authentication {
            description "Authentication options";
            uses apply-advanced;
            leaf key-chain {
              type string;
              description "Key chain name";
            }
            leaf algorithm {
              type enumeration {
                enum simple-password {
                  description "Simple password";
                }
                enum keyed-md5 {
                  description "Keyed message Digest 5";
                }
                enum meticulous-keyed-md5 {
                  description "Meticulous keyed message Digest 5";
                }
                enum keyed-sha-1 {
                  description "Keyed secure hash algorithm (SHA1) ";
                }
                enum meticulous-keyed-sha-1 {
                  description "Meticulous keyed secure hash algorithm (SHA1) ";
                }
              }
              description "Algorithm name";
            }
            leaf loose-check {
              type empty;
              description "Verify authentication only if authentication is negotiated";
            }
          }
          container echo {
            description "Echo mode parameters";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "100 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
          }
          container echo-lite {
            description "Echo-lite more parameters";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "100 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
          }
          leaf holddown-interval {
            type uint32 {
              range "0 .. 255000";
            }
            description "Time to hold the session-UP notification to the client";
            units milliseconds;
          }
        }
      }
      leaf strict-bfd {
        type empty;
        description "Enable strict bfd over this interface";
      }
    }
    list bier-sub-domain {
      description "Configuration of bier subdomain";
      key name;
      leaf name {
        type uint8;
        description "Enable bier subdomain id";
      }
    }
    container source-packet-routing {
      description "Enable Source Packet Routing (SPRING)";
      presence "enable source-packet-routing";
      uses apply-advanced;
      container adjacency-segment {
        description "Configure attributes for Adjacency Segments in SPRING";
        uses apply-advanced;
        leaf hold-time {
          type uint32 {
            range "180000 .. 900000";
          }
          description "Duration(ms) for which adjacency segments will be retained after isolating from an interface";
        }
      }
      container udp-tunneling {
        description "Enable SR over UDP feature";
        uses apply-advanced;
        leaf encapsulation {
          type empty;
          description "Enable UDP Tunnel Encapsulation";
        }
        leaf decapsulation {
          type empty;
          description "Enable UDP Tunnel decapsulation";
        }
      }
      container srgb {
        description "Set the SRGB global block in SPRING";
        leaf start-label {
          type uint32;
          description "Start range for SRGB label block";
        }
        leaf index-range {
          type uint32;
          description "Index to the SRGB start label block";
        }
      }
      container node-segment {
        description "Enable support for Node segments in SPRING";
        uses apply-advanced;
        leaf ipv4-index {
          type uint32 {
            range "0 .. 199999";
          }
          description "Set IPv4 Node Segment index";
        }
        leaf ipv6-index {
          type uint32 {
            range "0 .. 199999";
          }
          description "Set IPv6 Node Segment index";
        }
        leaf index-range {
          type uint32 {
            range "32 .. 16385";
          }
          description "Set Range of Node Segment indices allowed";
        }
      }
      leaf-list flex-algorithm {
        type uint32 {
          range "128 .. 255";
        }
        description "Flex-algorithms we would like to participate in";
        max-elements 16;
      }
      leaf use-flex-algorithm-metric-always {
        type empty;
        description "Use flex-algo prefix metric whenever available";
      }
      leaf strict-asla-based-flex-algorithm {
        type empty;
        description "Flex-Algorithm to ignore links not having ASLA sub-TLVs";
      }
      leaf new-capability-subtlv {
        type empty;
        description "Advertise all ranges in single spring capability subtlv";
      }
      leaf explicit-null {
        type empty;
        description "Set E and P bits in all Prefix SID advertisements";
      }
      leaf mapping-server {
        type string;
        description "Mapping server name";
      }
      leaf no-strict-spf {
        type empty;
        description " Disable strict spf algo 1 advertisement";
      }
      leaf no-binding-sid-leaking {
        type empty;
        description " Disable SRMS binding sid leaking";
      }
      leaf ldp-stitching {
        type empty;
        description "Enable SR to LDP stitching";
      }
      container srv6 {
        description "Enable IPv6 Segment Routing (SRv6)";
        presence "enable srv6";
        uses apply-advanced;
        list locator {
          description "SRv6 Locator";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Locator name";
          }
          uses apply-advanced;
          leaf anycast {
            type empty;
            description "Set A flag in the Prefix-Attribute sub-TLV";
          }
          list end-sid {
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv6addr";
            }
            uses apply-advanced;
            container flavor {
              description "Configure end-SID flavor";
              presence "enable flavor";
              uses apply-advanced;
              leaf psp {
                type empty;
                description "Penultimate segment pop of the SRH";
              }
              leaf usp {
                type empty;
                description "Ultimate segment pop of the SRH";
              }
              leaf usd {
                type empty;
                description "Ultimate segment decapsulation";
              }
            }
          }
          container dynamic-end-sid {
            description "Allocate end SID dynamically";
            presence "enable dynamic-end-sid";
            uses apply-advanced;
            container flavor {
              description "Configure end-SID flavor";
              presence "enable flavor";
              uses apply-advanced;
              leaf psp {
                type empty;
                description "Penultimate segment pop of the SRH";
              }
              leaf usp {
                type empty;
                description "Ultimate segment pop of the SRH";
              }
              leaf usd {
                type empty;
                description "Ultimate segment decapsulation";
              }
            }
          }
          leaf micro-node-sid {
            type empty;
            description "Program and advertise micro-node-SID";
          }
        }
      }
      container sensor-based-stats {
        description "Configure sensor based stats in SPRING";
        uses apply-advanced;
        container per-interface-per-member-link {
          description "Configure sensor based stats per nexthop";
          leaf ingress {
            type empty;
            description "Enable sensor based stats on ingress interface";
          }
          leaf egress {
            type empty;
            description "Enable sensor based stats on egress interface";
          }
        }
        container per-sid {
          description "Configure sensor based stats per spring route";
          leaf ingress {
            type empty;
            description "Enable sensor based stats for per-sid ingress accounting";
          }
          leaf egress {
            type empty;
            description "Enable sensor based stats for IP-MPLS egress accounting";
          }
        }
        container subscribe {
          description "Enable on-box sensor-based statistics collection";
          presence "enable subscribe";
          uses apply-advanced;
          leaf interval {
            type uint32 {
              range "30 .. 86400";
            }
            description "Statistics collection interval (seconds)";
          }
        }
      }
      container traffic-statistics {
        description "Enable support for traffic statistics in SPRING";
        uses apply-advanced;
        container statistics-granularity {
          description "Granularity for traffic statistics in SPRING";
          uses apply-advanced;
          leaf per-interface {
            type empty;
            description "Interface Based traffic statistics in SPRING";
          }
        }
        leaf congestion-protection {
          type empty;
          description "Enable tactical traffic engineering";
        }
        leaf auto-bandwidth {
          type string;
          description "Auto bandwidth name";
        }
      }
    }
    container srm6 {
      description "Enable SRm6";
      presence "enable srm6";
      uses apply-advanced;
      container sid {
        description "Configure attributes for SID in srm6";
        uses apply-advanced;
        leaf node-sid {
          type uint32 {
            range "1 .. 65535";
          }
          description "Set Node SID Value";
        }
        leaf address {
          type "jt:ipv6addr";
          description "IPv6 address corresponding to SID";
        }
      }
    }
    list level {
      description "Configure global level attributes";
      key name;
      ordered-by user;
      leaf name {
        type uint32 {
          range "1 .. 2";
        }
        description "IS-IS level number";
      }
      uses apply-advanced;
      leaf labeled-preference {
        type uint32;
        description "Preference of labeled IS-IS routes";
      }
      leaf srv6-preference {
        type uint32;
        description "Preference of SRV6 IS-IS routes";
      }
      leaf flex-algorithm-preference {
        type uint32;
        description "Preference of flex-algorithm L-ISIS routes";
      }
      container source-packet-routing {
        description "Enable Source Packet Routing (SPRING)";
        presence "enable source-packet-routing";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable Source Packet Routing on this level";
            }
          }
        }
        leaf srms-preference {
          type uint32 {
            range "0 .. 255";
          }
          description "Set SRMS preference value";
        }
      }
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable IS-IS on this level";
          }
        }
      }
      leaf authentication-key {
        type "jt:unreadable";
        description "Authentication key (password)";
      }
      leaf authentication-type {
        type enumeration {
          enum md5 {
            description "MD5 authentication";
          }
          enum simple {
            description "Simple password authentication";
          }
        }
        description "Authentication type";
      }
      leaf purge-originator {
        type enumeration {
          enum self {
            description "Add POI only for self-originated purge LSPs";
          }
          enum empty {
            description "Add POI for purge LSPs who do not have POI information";
          }
        }
        description "Add Purge Originator information";
      }
      leaf no-hello-authentication {
        type empty;
        description "Disable authentication for hello packets";
      }
      leaf no-csnp-authentication {
        type empty;
        description "Disable authentication for CSN packets";
      }
      leaf no-psnp-authentication {
        type empty;
        description "Disable authentication for PSN packets";
      }
      leaf no-lsp-authentication {
        type empty;
        description "Disable authentication for LSP packets";
      }
      leaf authentication-key-chain {
        type string {
          length "1 .. 128";
        }
        description "Key chain name";
      }
      leaf wide-metrics-only {
        type empty;
        description "Generate wide metrics only";
      }
      leaf preference {
        type uint32;
        description "Preference of internal routes";
      }
      leaf external-preference {
        type uint32;
        description "Preference of external routes";
      }
      leaf prefix-export-limit {
        type uint32 {
          range "0 .. 4294967295";
        }
        description "Maximum number of external prefixes that can be exported";
      }
      leaf max-lsp-size {
        type uint32 {
          range "512 .. 9192";
        }
        description "Maximum size allowed for LSPs";
      }
      container flood-reflector {
        description "Enable flood-reflector";
        uses apply-advanced;
        choice flood-reflector-choice {
          case case_1 {
            container reflector {
              description "Configure this as a flood-reflector";
              uses apply-advanced;
              leaf cluster-id {
                type uint32 {
                  range "1 .. 4294967295";
                }
                description "Cluster-ID";
              }
            }
          }
          case case_2 {
            leaf client {
              type empty;
              description "Configure interface as flood-reflector client";
            }
          }
        }
      }
    }
    list interface-group {
      description "Interface grouping configuration";
      key name;
      leaf name {
        type string;
        description "Interface group name";
      }
      uses apply-advanced;
      list level {
        description "Configure levels on this interface-group";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "1 .. 2";
          }
          description "IS-IS level number";
        }
        uses apply-advanced;
        container ipv4-adjacency-segment {
          description "Configure ipv4 adjacency segment";
          uses apply-advanced;
          container protected {
            description "Adjacency SID is eligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
          container unprotected {
            description "Adjacency SID uneligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
        }
        container ipv6-adjacency-segment {
          description "Configure ipv6 adjacency segment";
          uses apply-advanced;
          container protected {
            description "Adjacency SID is eligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
          container unprotected {
            description "Adjacency SID uneligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
        }
        container srm6-adjacency-segment {
          description "Configure srm6 adjacency segment";
          uses apply-advanced;
          container unprotected {
            description "Adjacency SID uneligible for protection";
            leaf sid {
              type uint32 {
                range "1 .. 65535";
              }
              description "Set Adjacency SID Value";
            }
          }
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum default {
                description "Default topology";
              }
              enum ipv4-multicast {
                description "IPv4 multicast topology";
              }
              enum ipv6-unicast {
                description "IPv6 unicast topology";
              }
              enum ipv6-multicast {
                description "IPv6 multicast topology";
              }
            }
            description "Topology name";
          }
          uses apply-advanced;
          leaf metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint32 {
                  range "0 .. 16777215";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
      }
      container link-group-protection {
        description "Configure link group protection";
        uses apply-advanced;
        leaf minimum-bandwidth {
          type string;
          description "Minimum bandwidth to carry traffic";
        }
        leaf revert-bandwidth {
          type string;
          description "Revert bandwidth to carry traffic";
        }
      }
      list interface {
        description "List interfaces for this group";
        key name;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        uses apply-advanced;
        leaf weight {
          type uint32 {
            range "1 .. 255";
          }
          description "Interface weight for adjacency set";
        }
      }
    }
    container spf-options {
      description "Configure SPF attributes";
      uses apply-advanced;
      container microloop-avoidance {
        description "Configure microloop avoidance mechanisms";
        uses apply-advanced;
        container post-convergence-path {
          description "Temporarily install post-convergence path for routes potentially affected by microloops";
          presence "enable post-convergence-path";
          uses apply-advanced;
          leaf delay {
            type uint32 {
              range "500 .. 60000";
            }
            description "Time after which temporary post-convergence paths are removed";
            units milliseconds;
          }
          leaf maximum-labels {
            type uint32 {
              range "2 .. 8";
            }
            description "Set maximum number of label supported for Micro-Loop-Avoidance calculations";
          }
          leaf maximum-srv6-sids {
            type uint32 {
              range "2 .. 12";
            }
            description "Set maximum number of SRV6 SIDs supported for Micro-Loop-Avoidance calculations";
          }
        }
      }
      leaf delay {
        type uint32 {
          range "50 .. 1000";
        }
        description "Time to wait before running an SPF";
        units milliseconds;
      }
      leaf holddown {
        type uint32 {
          range "2000 .. 10000";
        }
        description "Time to hold down before running an SPF";
        units milliseconds;
      }
      leaf rapid-runs {
        type uint32 {
          range "1 .. 5";
        }
        description "Number of rapid SPF runs before SPF holddown";
      }
      container multipath {
        description "Configure multipath options";
        uses apply-advanced;
        container weighted {
          description "Weighted multipath options";
          uses apply-advanced;
          leaf one-hop {
            type empty;
            description "Enable load balancing on onehop multipath based on interface bandwidth";
          }
        }
      }
    }
    container traceoptions {
      description "Trace options for IS-IS";
      uses apply-advanced;
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum traffic-statistics {
              description "Trace traffic-statistics related events";
            }
            enum post-convergence-lfa {
              description "Trace post-convergence-lfa related events";
            }
            enum error {
              description "Trace errored packets";
            }
            enum spf {
              description "Trace SPF events";
            }
            enum packets {
              description "Trace IS-IS packets";
            }
            enum hello {
              description "Trace hello packets";
            }
            enum lsp {
              description "Trace link-state packets";
            }
            enum psn {
              description "Trace partial sequence number (PSN) packets";
            }
            enum csn {
              description "Trace complete sequence number (CSN) packets";
            }
            enum layer2-map {
              description "Trace ARP/ND kernel state manipulation";
            }
            enum lsp-generation {
              description "Trace LSP generation";
            }
            enum graceful-restart {
              description "Trace graceful restart events";
            }
            enum ldp-synchronization {
              description "Trace synchronization between IS-IS and LDP";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum spring {
              description "Trace source packet routing";
            }
            enum prefix-sid {
              description "Trace source packet routing, prefix-sids";
            }
            enum flex-algorithm {
              description "Trace flex-algorithm related events";
            }
            enum adj-sid {
              description "Trace adj-sid related events";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum srv6 {
              description "Trace srv6 related events";
            }
            enum rmopd {
              description "Trace rmopd interactions";
            }
            enum mapping-server {
              description "Trace mapping server related events";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
    }
    container backup-spf-options {
      description "Configure backup SPF attributes";
      uses apply-advanced;
      container remote-backup-calculation {
        description "Calculate Remote LFA backup nexthops";
        presence "enable remote-backup-calculation";
        uses apply-advanced;
      }
      container use-post-convergence-lfa {
        description "Calculate Post Convergence Backup Nexthops";
        presence "enable use-post-convergence-lfa";
        uses apply-advanced;
        leaf maximum-labels {
          type uint32 {
            range "2 .. 8";
          }
          description "Set maximum number of label supported for post convergence path calculations";
        }
        leaf maximum-srv6-sids {
          type uint32 {
            range "2 .. 12";
          }
          description "Set maximum number of SRV6 SIDs for post convergence path calculations";
        }
        leaf maximum-backup-paths {
          type uint32 {
            range "1 .. 8";
          }
          description "Set maximum equal cost backup post convergence paths";
        }
      }
      container use-source-packet-routing {
        description "Use SPRING routed paths for protection";
        presence "enable use-source-packet-routing";
        uses apply-advanced;
      }
      leaf per-prefix-calculation {
        type empty;
        description "Calculate backup nexthops for non-best prefix originators";
      }
      leaf node-link-degradation {
        type empty;
        description "Degrade to link protection when nodelink protection not available";
      }
    }
    list context-identifier {
      description "Configuration for advertisement of a context-identifier ";
      key name;
      ordered-by user;
      leaf name {
        type "jt:ipprefix";
        description "Context identifier range";
      }
      uses apply-advanced;
      list level {
        description "Configure global level attributes";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "1 .. 2";
          }
          description "IS-IS level number";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable advertisements to this level";
            }
          }
        }
      }
    }
    container traffic-engineering {
      description "Configure traffic engineering attributes";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable traffic engineering";
          }
        }
      }
      leaf l3-unicast-topology {
        type empty;
        description "Download IGP topology into TED";
      }
      leaf ipv6 {
        type empty;
        description "Enable TEDv6";
      }
      leaf credibility-protocol-preference {
        type empty;
        description "Follow IGP protocol preference for TED protocol credibility";
      }
      leaf ipv4-multicast-rpf-routes {
        type empty;
        description "Install IPv4 routes for multicast RPF checks into inet.2";
        status deprecated;
      }
      leaf ignore-lsp-metrics {
        type empty;
        description "Ignore label-switched path metrics when doing shortcuts";
      }
      container tunnel-source-protocol {
        description "Protocols from which to pick label-switched paths";
        uses apply-advanced;
        container rsvp {
          description "Pick label-switched paths from rsvp";
          presence "enable rsvp";
          uses apply-advanced;
          leaf preference {
            type uint32 {
              range "1 .. 255";
            }
            description "Preference for label-switched paths from this protocol";
          }
        }
        container spring-te {
          description "Pick label-switched paths from spring-te";
          presence "enable spring-te";
          uses apply-advanced;
          leaf preference {
            type uint32 {
              range "1 .. 255";
            }
            description "Preference for label-switched paths from this protocol";
          }
        }
      }
      list family {
        description "Address family specific traffic-engineering attributes";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum inet {
              description "IPv4 family";
            }
            enum inet6 {
              description "IPv6 family";
            }
            enum inet-mpls {
              description "IPv4-MPLS family";
            }
            enum inet6-mpls {
              description "IPv6-MPLS family";
            }
          }
        }
        uses apply-advanced;
        container shortcuts {
          description "Use label-switched paths as next hops, if possible";
          presence "enable shortcuts";
          uses apply-advanced;
          leaf multicast-rpf-routes {
            type empty;
            description "Install routes for multicast RPF checks into multicast RIB";
          }
          leaf-list import {
            type "jt:policy-algebra";
            description "Import policy for shortcut";
            ordered-by user;
          }
        }
      }
      container shortcuts {
        description "Use label-switched paths as next hops, if possible";
        presence "enable shortcuts";
        status deprecated;
        uses apply-advanced;
        leaf ignore-lsp-metrics {
          type empty;
          description "Ignore label-switched path metrics when doing shortcuts";
          status deprecated;
        }
      }
      container multipath {
        description "Configure label-switched-path multipath behavior";
        uses apply-advanced;
        leaf lsp-equal-cost {
          type empty;
          description "Include equal cost label-switched-paths";
        }
      }
      container advertisement {
        description "Configure traffic engineering attribute advertisements";
        uses apply-advanced;
        leaf always {
          type empty;
          description "Advertise applicable legacy TE attributes always";
        }
        container application-specific {
          description "Advertise application-specific TE attributes";
          uses apply-advanced;
          container all-applications {
            description "Advertise common application-specific link attributes";
            presence "enable all-applications";
            uses apply-advanced;
            leaf legacy {
              type empty;
              description "Use legacy TE attributes for this application";
            }
          }
        }
      }
    }
    list label-switched-path {
      description "Configuration for advertisement of a label-switched path";
      key name;
      ordered-by user;
      leaf name {
        type string {
          length "1 .. 64";
        }
        description "Name of label-switched path to be advertised";
      }
      uses apply-advanced;
      list level {
        description "Configure global level attributes";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "1 .. 2";
          }
          description "IS-IS level number";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable advertisements to this level";
            }
          }
        }
        leaf metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "SPF metric for this level";
        }
      }
    }
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable IS-IS";
        }
      }
    }
    leaf-list export {
      type "jt:policy-algebra";
      description "Export policy";
      ordered-by user;
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Import policy";
      ordered-by user;
    }
    leaf reference-bandwidth {
      type string;
      description "Bandwidth for calculating metric defaults";
    }
    choice layer2-map-choice {
      leaf layer2-map {
        type empty;
        description "Kernel ARP/ND creation for nexthops";
      }
      leaf no-layer2-map {
        type empty;
        description "Don't kernel ARP/ND creation for nexthops";
      }
    }
    leaf job-stats {
      type empty;
      description "Collect job statistics";
    }
    leaf lsp-lifetime {
      type uint32 {
        range "350 .. 65535";
      }
      description "Lifetime of LSPs";
      units seconds;
    }
    leaf max-lsp-size {
      type uint32 {
        range "512 .. 9192";
      }
      default "1492";
      description "Maximum size allowed for LSPs";
    }
    leaf max-hello-size {
      type uint32 {
        range "512 .. 16000";
      }
      default "1492";
      description "Maximum size allowed for ISIS Hello PDUs";
    }
    leaf max-snp-size {
      type uint32 {
        range "512 .. 1400";
      }
      default "1400";
      description "Maximum size allowed for Sequence Number (Complete/Partial) PDUs";
    }
    leaf spf-delay {
      type uint32 {
        range "50 .. 120000";
      }
      description "Time to wait before running an SPF";
      status deprecated;
      units milliseconds;
    }
    leaf authentication-key {
      type "jt:unreadable";
      description "Authentication key (password)";
      status deprecated;
    }
    leaf authentication-type {
      type enumeration {
        enum md5 {
          description "MD5 authentication";
          status deprecated;
        }
        enum simple {
          description "Simple password authentication";
          status deprecated;
        }
      }
      description "Authentication type";
      status deprecated;
    }
    leaf loose-authentication-check {
      type empty;
      description "Verify authentication only if PDU has authentication TLV";
    }
    leaf max-areas {
      type uint32 {
        range "3 .. 64";
      }
      default "3";
      description "Maximum number of advertised Areas";
    }
    leaf no-authentication-check {
      type empty;
      description "Disable authentication checking";
    }
    leaf no-ipv4-routing {
      type empty;
      description "Disable IPv4 routing";
    }
    leaf no-ipv6-routing {
      type empty;
      description "Disable IPv6 routing";
    }
    leaf clns-routing {
      type empty;
      description "Enable CLNS routing";
    }
    leaf clns-updown-compatibility {
      type empty;
      description "Set the Up/Down Bit in place of the I/E bit in CLNS TLVs";
    }
    leaf no-adjacency-holddown {
      type empty;
      description "Disable adjacency hold down";
    }
    leaf multicast-topology {
      type empty;
      description "Enable multicast topology";
      status deprecated;
    }
    leaf ignore-attached-bit {
      type empty;
      description "Ignore the attached bit in Level 1 LSPs";
    }
    container rib-group {
      description "Routing table group for importing IS-IS routes";
      uses rib_group_type;
    }
    container no-external-export {
      description "No external export";
      uses apply-advanced;
      list protocol {
        description "Protocol parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum bgp {
              description "BGP";
            }
            enum ospf {
              description "OSPF";
            }
            enum isis {
              description "ISIS";
            }
            enum l-isis {
              description "Labelled ISIS";
            }
            enum l-ospf {
              description "Labelled OSPF";
            }
            enum static {
              description "Static";
            }
          }
        }
      }
    }
    container strict-dual-isis {
      description "Enable dual isis if spf computation is required for both ipv4 and ipv6 family";
      presence "enable strict-dual-isis";
      uses apply-advanced;
      leaf holdown {
        type uint32 {
          range "1 .. 65535";
        }
        default "12";
        description "Time to wait for ipv4 and ipv6 connectivity";
        status deprecated;
      }
      leaf holddown {
        type uint32 {
          range "1 .. 65535";
        }
        default "12";
        description "Time to wait for ipv4 and ipv6 connectivity";
      }
    }
    container topologies {
      description "Enable topologies";
      uses apply-advanced;
      leaf ipv4-multicast {
        type empty;
        description "Enable IPv4-multicast topology";
      }
      leaf ipv6-unicast {
        type empty;
        description "Enable IPv6-unicast topology";
      }
      leaf ipv6-multicast {
        type empty;
        description "Enable IPv6-multicast topology";
      }
    }
    container overload {
      description "Set the overload bit (no transit traffic)";
      presence "enable overload";
      uses apply-advanced;
      leaf timeout {
        type uint32 {
          range "60 .. 3600";
        }
        description "Time after which overload bit is reset";
        units seconds;
      }
      leaf advertise-high-metrics {
        type empty;
        description "Advertise high metrics instead of setting the overload bit";
      }
      leaf allow-route-leaking {
        type empty;
        description "Allow routes to be leaked when overload is configured";
      }
      leaf internal-prefixes {
        type empty;
        description "Allow internal prefixes to be advertised with high metric";
      }
      leaf external-prefixes {
        type empty;
        description "Allow external prefixes to be advertised with high metric";
      }
    }
    container dynamic-overload {
      description "Set the dynamic overload options";
      uses apply-advanced;
      leaf no-overload-on-prefix-export-limit {
        type empty;
        description "Do not set overload bit when prefix export limit is reached";
      }
      leaf auto-recovery {
        type empty;
        description "Enable Auto recovery to recover from dynamic overload state";
      }
    }
    container graceful-restart {
      description "IS-IS graceful restart options";
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable graceful restart";
          }
        }
      }
      leaf helper-disable {
        type empty;
        description "Disable graceful restart helper capability";
      }
      leaf restart-duration {
        type uint32 {
          range "30 .. 300";
        }
        description "Maximum time for graceful restart to finish";
        units seconds;
      }
    }
    list net {
      description "Assign Network Entity Title (NET) configuration";
      key name;
      leaf name {
        type "jt:isoaddr";
        description "Assign Network Entity Title (NET) address to an IS-IS router";
      }
    }
  }
  grouping juniper-protocols-l2control {
    uses apply-advanced;
    container traceoptions {
      description "Global tracing options for STP";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum parse {
              description "Trace configuration parsing";
            }
            enum regex-parse {
              description "Trace regular-expression parsing";
            }
            enum config-internal {
              description "Trace configuration internals";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol task timer processing";
            }
            enum ppmlite {
              description "Trace libppmlite processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf nonstop-bridging {
      type empty;
      description "Enable nonstop operation";
    }
    container options {
      description "Layer2 control options";
      uses apply-advanced;
      container nsb-extended-timers {
        description "Extend expiration of timers during switchover";
        presence "enable nsb-extended-timers";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable timer extension during switchover";
            }
          }
        }
      }
      container nsb-optimized-config-read {
        description "Optimize config re-prasing during switchover";
        presence "enable nsb-optimized-config-read";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable optimized re-parsing of config during switchover";
            }
          }
        }
      }
    }
    choice ephemeral-db-support-choice {
      leaf ephemeral-db-support {
        type empty;
        description "Enable ephemeral DB supoort for STP";
      }
      leaf no-ephemeral-db-support {
        type empty;
        description "Don't enable ephemeral DB supoort for STP";
      }
    }
    container bpdu-block {
      description "Block BPDU on interface (BPDU Protect)";
      presence "enable bpdu-block";
      uses apply-advanced;
      list interface {
        description "Interface name to block BPDU on";
        key name;
        ordered-by user;
        leaf name {
          type string;
        }
        uses apply-advanced;
        leaf disable {
          type empty;
          description "Disable bpdu-block on a port";
        }
        leaf drop {
          type empty;
          description "Drop xSTP BPDUs";
        }
      }
      leaf disable-timeout {
        type int32 {
          range "10 .. 3600";
        }
        description "Disable timeout for BPDU Protect";
        units seconds;
      }
    }
    container l2pt {
      description "L2 protocol tunneling functionality";
      uses apply-advanced;
      list interface {
        key name;
        ordered-by user;
        leaf name {
          type "jt:interface-device";
        }
        uses apply-advanced;
        leaf enable-all-ifl {
          type empty;
          description "Enable tunneling for all the IFLs under the interface";
        }
        container protocol {
          description "Protocols for which L2 protocol tunneling need to be enabled";
          uses apply-advanced;
          container stp {
            description "Enable L2 protocol tunneling for STP";
            presence "enable stp";
          }
          container vtp {
            description "Enable L2 protocol tunneling for VTP";
            presence "enable vtp";
          }
          container cdp {
            description "Enable L2 protocol tunneling for CDP";
            presence "enable cdp";
          }
          container ieee8021x {
            description "Enable L2 protocol tunneling for 8021X";
            presence "enable ieee8021x";
          }
          container ieee8023ah {
            description "Enable L2 protocol tunneling for 8023AH";
            presence "enable ieee8023ah";
          }
          container elmi {
            description "Enable L2 protocol tunneling for ELMI";
            presence "enable elmi";
          }
          container lacp {
            description "Enable L2 protocol tunneling for LACP";
            presence "enable lacp";
          }
          container lldp {
            description "Enable L2 protocol tunneling for LLDP";
            presence "enable lldp";
          }
          container mmrp {
            description "Enable L2 protocol tunneling for MMRP";
            presence "enable mmrp";
          }
          container mvrp {
            description "Enable L2 protocol tunneling for MVRP";
            presence "enable mvrp";
          }
          container pvstp {
            description "Enable L2 protocol tunneling for PVSTP+";
            presence "enable pvstp";
          }
          container gvrp {
            description "Enable L2 protocol tunneling for GVRP";
            presence "enable gvrp";
          }
          container vstp {
            description "Enable L2 protocol tunneling for VSTP";
            presence "enable vstp";
          }
          container udld {
            description "Enable L2 protocol tunneling for UDLD";
            presence "enable udld";
          }
          container all {
            description "Enable L2 protocol tunneling for all protocols";
            presence "enable all";
            uses apply-advanced;
          }
        }
        container destination {
          description "Destination tunnel for which L2 protocol tunneling need to be enabled";
          uses apply-advanced;
          leaf vxlan-tunnel {
            type empty;
            description "Enable L2 protocol tunneling in vxlan-tunnel";
          }
        }
      }
    }
    container mac-rewrite {
      description "Mac rewrite functionality";
      uses apply-advanced;
      list interface {
        key name;
        ordered-by user;
        leaf name {
          type "jt:interface-device";
        }
        uses apply-advanced;
        leaf enable-all-ifl {
          type empty;
          description "Enable tunneling for all the IFLs under the interface";
        }
        container protocol {
          description "Protocols for which L2 protocol tunneling need to be enabled";
          uses apply-advanced;
          container stp {
            description "Enable L2 protocol tunneling for STP";
            presence "enable stp";
          }
          container vtp {
            description "Enable L2 protocol tunneling for VTP";
            presence "enable vtp";
          }
          container cdp {
            description "Enable L2 protocol tunneling for CDP";
            presence "enable cdp";
          }
          container ieee8021x {
            description "Enable L2 protocol tunneling for 8021X";
            presence "enable ieee8021x";
          }
          container ieee8023ah {
            description "Enable L2 protocol tunneling for 8023AH";
            presence "enable ieee8023ah";
          }
          container elmi {
            description "Enable L2 protocol tunneling for ELMI";
            presence "enable elmi";
          }
          container lacp {
            description "Enable L2 protocol tunneling for LACP";
            presence "enable lacp";
          }
          container lldp {
            description "Enable L2 protocol tunneling for LLDP";
            presence "enable lldp";
          }
          container mmrp {
            description "Enable L2 protocol tunneling for MMRP";
            presence "enable mmrp";
          }
          container mvrp {
            description "Enable L2 protocol tunneling for MVRP";
            presence "enable mvrp";
          }
          container pvstp {
            description "Enable L2 protocol tunneling for PVSTP+";
            presence "enable pvstp";
          }
          container gvrp {
            description "Enable L2 protocol tunneling for GVRP";
            presence "enable gvrp";
          }
          container vstp {
            description "Enable L2 protocol tunneling for VSTP";
            presence "enable vstp";
          }
          container udld {
            description "Enable L2 protocol tunneling for UDLD";
            presence "enable udld";
          }
          container all {
            description "Enable L2 protocol tunneling for all protocols";
            presence "enable all";
            uses apply-advanced;
          }
        }
      }
      container tunnel-destination-mac {
        description "Tunnel destination mac to be used in L2PT packets";
        presence "enable tunnel-destination-mac";
        uses apply-advanced;
        leaf source {
          type "jt:mac-multicast";
          description "L2 multicast mac to be used as tunnel destination mac";
        }
      }
    }
  }
  grouping juniper-protocols-ldp {
    uses apply-advanced;
    container traceoptions {
      description "Trace options for LDP";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum error {
              description "Trace errored packets";
            }
            enum event {
              description "Trace LDP state machine events";
            }
            enum packet-dump {
              description "Dump the contents of selected packet types";
            }
            enum packets {
              description "Trace all LDP packets";
            }
            enum periodic {
              description "Trace periodic (hello and keepalive) packets";
            }
            enum initialization {
              description "Trace initialization packets";
            }
            enum notification {
              description "Trace notification packets";
            }
            enum address {
              description "Trace address packets";
            }
            enum label {
              description "Trace label packets";
            }
            enum binding {
              description "Trace label binding state";
            }
            enum path {
              description "Trace label path state";
            }
            enum ppmd {
              description "Trace state and events for ppmd process";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum link-protection {
              description "Trace link protection events";
            }
            enum p2mp-nsr-synchronization {
              description "Trace p2mp NSR synchronization events";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
        container filter {
          description "Filter to apply to this flag";
          presence "enable filter";
          uses ldp_filter_obj;
        }
      }
    }
    container traffic-statistics {
      description "Collect statistics for LDP label-switched paths";
      uses apply-advanced;
      container file {
        description "Statistics file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      leaf interval {
        type int32 {
          range "60 .. 65535";
        }
        description "Time to collect statistics (seconds)";
      }
      leaf sensor-based-stats {
        type empty;
        description "Enable sensor based statistics collection";
      }
      leaf no-penultimate-hop {
        type empty;
        description "No penultimate hop statistics collection";
      }
    }
    container graceful-restart {
      description "Configure graceful restart attributes";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable graceful restart";
          }
        }
      }
      leaf helper-disable {
        type empty;
        description "Disable the graceful restart helper capability";
      }
      leaf recovery-time {
        type uint32 {
          range "120 .. 1800";
        }
        description "Time required for recovery";
        units seconds;
      }
      leaf maximum-neighbor-recovery-time {
        type uint32 {
          range "140 .. 1900";
        }
        description "Maximum time stale mappings are maintained";
        units seconds;
      }
      leaf reconnect-time {
        type uint32 {
          range "30 .. 300";
        }
        description "Time required to reestablish session after graceful restart";
        units seconds;
      }
      leaf maximum-neighbor-reconnect-time {
        type uint32 {
          range "30 .. 300";
        }
        description "Maximum reconnect time allowed from a restarting neighbor";
        units seconds;
      }
    }
    container auto-targeted-session {
      description "Configure auto targeted session parameters";
      presence "enable auto-targeted-session";
      uses apply-advanced;
      leaf teardown-delay {
        type uint32 {
          range "1 .. 300";
        }
        default "90";
        description "Auto targeted session tear down delay";
        units seconds;
      }
      leaf maximum-sessions {
        type uint32 {
          range "1 .. 1000";
        }
        default "100";
        description "Auto targeted maximum sessions";
      }
      leaf no-rlfa {
        type empty;
        description "Do not allow RLFA in auto targeted sessions";
      }
      leaf no-dynamic-tunnels {
        type empty;
        description "Do not allow dynamic tunnels in auto targeted sessions";
      }
    }
    leaf preference {
      type uint32;
      description "Route preference";
    }
    leaf no-forwarding {
      type empty;
      description "Do not use LDP ingress routes for forwarding";
    }
    leaf rib-group {
      type string;
      description "Routing table group for importing ingress routes";
    }
    leaf rib-group6 {
      type string;
      description "Routing table group for importing ingress v6 routes";
    }
    leaf l2-smart-policy {
      type empty;
      description "Do not export or import Layer 3 FECs for Layer 2 sessions";
    }
    leaf track-igp-metric {
      type empty;
      description "Track the IGP metric";
    }
    leaf strict-targeted-hellos {
      type empty;
      description "Do not send targeted hellos to unconfigured neighbors";
    }
    container longest-match {
      description "Configure longest match";
      presence "enable longest-match";
      uses apply-advanced;
      leaf-list policy {
        type "jt:policy-algebra";
        description "Longest match import policy";
        ordered-by user;
      }
    }
    leaf-list color-import-policy {
      type "jt:policy-algebra";
      description "Import color policy";
      ordered-by user;
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Import policy";
      ordered-by user;
    }
    leaf-list export {
      type "jt:policy-algebra";
      description "Export policy";
      ordered-by user;
    }
    leaf-list egress-policy {
      type "jt:policy-algebra";
      description "Configure LSP egress policy";
      ordered-by user;
    }
    leaf-list dod-request-policy {
      type "jt:policy-algebra";
      description "Configure DoD label request policy";
      ordered-by user;
    }
    container next-hop {
      description "LDP next-hop control";
      uses apply-advanced;
      container merged {
        description "Merged next hop";
        uses apply-advanced;
        leaf-list policy {
          type "jt:policy-algebra";
          description "Merged next-hop policy";
          ordered-by user;
        }
      }
      container no-rsvp-tunneling {
        description "No rsvp tunneling";
        uses apply-advanced;
        leaf-list policy {
          type "jt:policy-algebra";
          description "No rsvp tunneling next-hop policy";
          ordered-by user;
        }
      }
    }
    choice mtu-discovery-choice {
      leaf mtu-discovery {
        type empty;
        description "Enable TCP path MTU discovery";
      }
      leaf no-mtu-discovery {
        type empty;
        description "Don't enable TCP path MTU discovery";
      }
    }
    choice deaggregate-choice {
      leaf deaggregate {
        type empty;
        description "Deaggregate FECs into separate labels";
      }
      leaf no-deaggregate {
        type empty;
        description "Don't deaggregate FECs into separate labels";
      }
    }
    leaf explicit-null {
      type empty;
      description "Advertise the EXPLICIT_NULL label for egress FECs";
    }
    leaf label-withdrawal-delay {
      type uint32 {
        range "0 .. 120";
      }
      default "60";
      description "Delay label withdrawal for FECs to avoid label churn";
      units seconds;
    }
    container make-before-break {
      description "Configure make before break";
      presence "enable make-before-break";
      uses apply-advanced;
      leaf timeout {
        type uint32 {
          range "1 .. 300";
        }
        default "30";
        description "Make before break timeout";
        units seconds;
      }
      leaf switchover-delay {
        type uint32 {
          range "1 .. 300";
        }
        default "3";
        description "Make before break switchover delay";
        units seconds;
      }
    }
    container transport-address {
      description "Address used for TCP sessions";
      choice address-choice {
        case case_1 {
          leaf router-id {
            type empty;
            description "Use router ID for TCP connections";
          }
        }
        case case_2 {
          leaf interface {
            type empty;
            description "Use interface address for TCP connections";
          }
        }
        case case_3 {
          leaf address {
            type "jt:ipaddr";
            description "Use specified address for TCP connections";
          }
        }
      }
    }
    leaf keepalive-interval {
      type uint32 {
        range "1 .. 65535";
      }
      description "Keepalive interval (seconds)";
    }
    leaf keepalive-timeout {
      type uint32 {
        range "1 .. 65535";
      }
      description "Keepalive timeout (seconds)";
    }
    list interface {
      description "Enable LDP on this interface";
      key name;
      leaf name {
        type "jt:interface-name";
        description "Interface name";
      }
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable LDP on this interface";
          }
        }
      }
      leaf hello-interval {
        type uint32 {
          range "1 .. 65535";
        }
        description "Hello interval (seconds)";
      }
      leaf hold-time {
        type uint32 {
          range "1 .. 65535";
        }
        description "Hello hold time (seconds)";
      }
      container link-protection {
        description "Enable link protection to protect interface for link faults only";
        presence "enable link-protection";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable link-protection";
            }
          }
        }
        leaf dynamic-rsvp-lsp {
          type empty;
          description "Enable setup of dynamic rsvp lsp for link protection";
        }
      }
      container transport-address {
        description "Address used for TCP sessions";
        choice address-choice {
          case case_1 {
            leaf router-id {
              type empty;
              description "Use router ID for TCP connections";
            }
          }
          case case_2 {
            leaf interface {
              type empty;
              description "Use interface address for TCP connections";
            }
          }
          case case_3 {
            leaf address {
              type "jt:ipaddr";
              description "Use specified address for TCP connections";
            }
          }
        }
      }
      choice allow-subnet-mismatch-choice {
        leaf allow-subnet-mismatch {
          type empty;
          description "Allow subnet mismatch for source address in hello packet";
        }
        leaf no-allow-subnet-mismatch {
          type empty;
          description "Don't allow subnet mismatch for source address in hello packet";
        }
      }
    }
    list neighbor {
      description "Configure a remote LDP neighbor";
      key name;
      leaf name {
        type "jt:ipaddr";
        description "Neighbor address";
      }
      uses apply-advanced;
    }
    list session {
      description "Configure session parameters";
      key name;
      leaf name {
        type "jt:ipaddr";
        description "Session destination address";
      }
      uses apply-advanced;
      leaf authentication-key {
        type string {
          length "1 .. 126";
        }
        description "MD5 authentication key";
      }
      leaf authentication-algorithm {
        type enumeration {
          enum md5 {
            description "Message Digest 5";
          }
          enum hmac-sha-1-96 {
            description "Hash-based Message Authentication Code (SHA1) (96 bits)";
          }
          enum aes-128-cmac-96 {
            description "Cipher-based Message Authentication Code (AES128) (96 bits)";
          }
          enum ao {
            description "TCP Authentication Option";
          }
        }
        default "hmac-sha-1-96";
        description "Authentication algorithm name";
      }
      leaf tcpao-auth-mismatch {
        type enumeration {
          enum allow-without-tcpao {
            description "Allow the connection establishment without TCP-AO";
          }
        }
        description "Continue without TCP-AO if any one TCP endpoint does not have TCP-AO configured";
      }
      leaf authentication-key-chain {
        type string {
          length "1 .. 128";
        }
        description "Key chain name";
      }
      leaf downstream-on-demand {
        type empty;
        description "Configure downstream on demand label distribution mode";
      }
      leaf transport-address {
        type "jt:ipaddr";
        description "Address used for TCP sessions to the neighbor";
      }
      choice mtu-discovery-choice {
        leaf mtu-discovery {
          type empty;
          description "Enable TCP path MTU discovery";
        }
        leaf no-mtu-discovery {
          type empty;
          description "Don't enable TCP path MTU discovery";
        }
      }
    }
    list session-group {
      description "Configure session group parameters";
      key name;
      leaf name {
        type "jt:ipprefix";
        description "Session destination address/prefix length";
      }
      uses apply-advanced;
      leaf authentication-key {
        type string {
          length "1 .. 126";
        }
        description "MD5 authentication key";
      }
      leaf authentication-algorithm {
        type enumeration {
          enum md5 {
            description "Message Digest 5";
          }
          enum hmac-sha-1-96 {
            description "Hash-based Message Authentication Code (SHA1) (96 bits)";
          }
          enum aes-128-cmac-96 {
            description "Cipher-based Message Authentication Code (AES128) (96 bits)";
          }
          enum ao {
            description "TCP Authentication Option";
          }
        }
        default "hmac-sha-1-96";
        description "Authentication algorithm name";
      }
      leaf tcpao-auth-mismatch {
        type enumeration {
          enum allow-without-tcpao {
            description "Allow the connection establishment without TCP-AO";
          }
        }
        description "Continue without TCP-AO if any one TCP endpoint does not have TCP-AO configured";
      }
      leaf authentication-key-chain {
        type string {
          length "1 .. 128";
        }
        description "Key chain name";
      }
      leaf downstream-on-demand {
        type empty;
        description "Configure downstream on demand label distribution mode";
      }
      leaf transport-address {
        type "jt:ipaddr";
        description "Address used for TCP sessions to the neighbor";
      }
      choice mtu-discovery-choice {
        leaf mtu-discovery {
          type empty;
          description "Enable TCP path MTU discovery";
        }
        leaf no-mtu-discovery {
          type empty;
          description "Don't enable TCP path MTU discovery";
        }
      }
    }
    container session-protection {
      description "Configure session protection";
      presence "enable session-protection";
      leaf timeout {
        type uint16 {
          range "1 .. 65535";
        }
        description "Session protection timeout";
        units seconds;
      }
    }
    container igp-synchronization {
      description "Configure IGP synchronization parameters";
      uses apply-advanced;
      leaf holddown-interval {
        type uint32 {
          range "10 .. 300";
        }
        description "Time to hold the up notification to the IGPs";
        units seconds;
      }
    }
    container log-updown {
      description "Logging actions for LSP up/down events";
      uses apply-advanced;
      container trap {
        description "SNMP traps options";
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable LDP LSP up/down trap";
            }
          }
        }
      }
    }
    container policing {
      description "Configure policing for an LDP FEC";
      uses apply-advanced;
      list fec {
        description "Forwarding equivalence class";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4prefix";
          description "Forwarding equivalence class address";
        }
        uses apply-advanced;
        leaf ingress-traffic {
          type string;
          description "Name of filter to use for policing ingress LDP traffic";
        }
        leaf transit-traffic {
          type string;
          description "Name of filter to use for policing transit LDP traffic";
        }
      }
    }
    container entropy-label {
      description "Insert entropy label for  a LDP FEC";
      uses apply-advanced;
      leaf-list ingress-policy {
        type "jt:policy-algebra";
        description "Entropy label ingress policy";
        ordered-by user;
      }
    }
    container oam {
      description "Configure periodic OAM for a LDP FEC";
      uses apply-advanced;
      leaf-list ingress-policy {
        type "jt:policy-algebra";
        description "OAM ingress policy";
        ordered-by user;
      }
      leaf-list bfd-port-egress-policy {
        type "jt:policy-algebra";
        description "OAM egress policy";
        ordered-by user;
      }
      list fec {
        description "Forwarding equivalence class";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4prefix";
          description "Forwarding equivalence class address";
        }
        uses apply-advanced;
        choice bfd_liveness_detection_type {
          case case_1 {
            container bfd-liveness-detection {
              description "Bidirectional Forwarding Detection (BFD) options";
              uses apply-advanced;
              leaf version {
                type enumeration {
                  enum 0 {
                    description "BFD version 0 (deprecated)";
                  }
                  enum 1 {
                    description "BFD version 1";
                  }
                  enum automatic {
                    description "Choose BFD version automatically";
                  }
                }
                default "automatic";
                description "BFD protocol version number";
              }
              leaf minimum-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum transmit and receive interval";
                units milliseconds;
              }
              leaf minimum-transmit-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum transmit interval";
                status deprecated;
                units milliseconds;
              }
              leaf minimum-receive-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum receive interval";
                units milliseconds;
              }
              leaf multiplier {
                type uint32 {
                  range "1 .. 255";
                }
                default "3";
                description "Detection time multiplier";
              }
              leaf inline-disable {
                type empty;
                description "Disable inline mode for this BFD session";
              }
              leaf pdu-size {
                type uint32 {
                  range "24 .. 9000";
                }
                default "24";
                description "BFD transport protocol payload size";
              }
              choice adaptation-choice {
                case case_1 {
                  leaf no-adaptation {
                    type empty;
                    description "Disable adaptation";
                  }
                }
              }
              container transmit-interval {
                description "Transmit-interval options";
                uses apply-advanced;
                leaf minimum-interval {
                  type uint32 {
                    range "1 .. 255000";
                  }
                  description "Minimum transmit interval";
                  units milliseconds;
                }
                leaf threshold {
                  type uint32;
                  description "High transmit interval triggering a trap";
                  units milliseconds;
                }
              }
              container detection-time {
                description "Detection-time options";
                uses apply-advanced;
                leaf threshold {
                  type uint32;
                  description "High detection-time triggering a trap";
                  units milliseconds;
                }
              }
              leaf ecmp {
                type empty;
                description "Enable equal cost multipath (ECMP) support for BFD";
              }
              container failure-action {
                description "Action to take when BFD session goes down";
                choice action-choice {
                  case case_1 {
                    leaf remove-route {
                      type empty;
                      description "Remove LDP route from the ribs";
                    }
                  }
                  case case_2 {
                    leaf remove-nexthop {
                      type empty;
                      description "Remove LDP nexthop from the route";
                    }
                  }
                }
              }
              leaf holddown-interval {
                type uint32 {
                  range "0 .. 255000";
                }
                default "0";
                description "Time to hold the session-UP notification to the client";
                units milliseconds;
              }
              leaf no-router-alert-option {
                type empty;
                description "Do not set Router-Alert options in IP header for MPLS-BFD";
              }
              leaf use-ip-ttl-1 {
                type empty;
                description "Set TTL value to 1 in IP header for MPLS-BFD";
              }
            }
          }
          case case_2 {
            leaf no-bfd-liveness-detection {
              type empty;
              description "Disable BFD liveness detection";
            }
          }
        }
        container periodic-traceroute {
          description "Configure periodic traceroute";
          presence "enable periodic-traceroute";
          uses apply-advanced;
          leaf frequency {
            type uint16 {
              range "15 .. 120";
            }
            description "Time between traceroute attempts";
            units minutes;
          }
          leaf ttl {
            type uint16 {
              range "1 .. 255";
            }
            description "Maximum time-to-live value";
          }
          leaf retries {
            type uint16 {
              range "1 .. 9";
            }
            description "Number of times to resend probe";
          }
          leaf wait {
            type uint16 {
              range "5 .. 15";
            }
            description "Time to wait before resending probe";
            units seconds;
          }
          leaf paths {
            type uint16 {
              range "1 .. 255";
            }
            description "Maximum number of paths to traverse";
          }
          leaf source {
            type "jt:ipv4addr";
            description "Source address to use when sending probes";
          }
          leaf exp {
            type uint16 {
              range "0 .. 7";
            }
            description "Class-of-service value to use when sending probes";
          }
          leaf fanout {
            type uint16 {
              range "1 .. 64";
            }
            description "Maximum number of nexthops to search per node";
          }
          leaf disable {
            type empty;
            description "Disable periodic traceroute for a FEC";
          }
        }
      }
      container bfd-liveness-detection {
        description "Bidirectional Forwarding Detection (BFD) options";
        uses apply-advanced;
        leaf version {
          type enumeration {
            enum 0 {
              description "BFD version 0 (deprecated)";
            }
            enum 1 {
              description "BFD version 1";
            }
            enum automatic {
              description "Choose BFD version automatically";
            }
          }
          default "automatic";
          description "BFD protocol version number";
        }
        leaf minimum-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit and receive interval";
          units milliseconds;
        }
        leaf minimum-transmit-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit interval";
          status deprecated;
          units milliseconds;
        }
        leaf minimum-receive-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum receive interval";
          units milliseconds;
        }
        leaf multiplier {
          type uint32 {
            range "1 .. 255";
          }
          default "3";
          description "Detection time multiplier";
        }
        leaf inline-disable {
          type empty;
          description "Disable inline mode for this BFD session";
        }
        leaf pdu-size {
          type uint32 {
            range "24 .. 9000";
          }
          default "24";
          description "BFD transport protocol payload size";
        }
        choice adaptation-choice {
          case case_1 {
            leaf no-adaptation {
              type empty;
              description "Disable adaptation";
            }
          }
        }
        container transmit-interval {
          description "Transmit-interval options";
          uses apply-advanced;
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            units milliseconds;
          }
          leaf threshold {
            type uint32;
            description "High transmit interval triggering a trap";
            units milliseconds;
          }
        }
        container detection-time {
          description "Detection-time options";
          uses apply-advanced;
          leaf threshold {
            type uint32;
            description "High detection-time triggering a trap";
            units milliseconds;
          }
        }
        leaf ecmp {
          type empty;
          description "Enable equal cost multipath (ECMP) support for BFD";
        }
        container failure-action {
          description "Action to take when BFD session goes down";
          choice action-choice {
            case case_1 {
              leaf remove-route {
                type empty;
                description "Remove LDP route from the ribs";
              }
            }
            case case_2 {
              leaf remove-nexthop {
                type empty;
                description "Remove LDP nexthop from the route";
              }
            }
          }
        }
        leaf holddown-interval {
          type uint32 {
            range "0 .. 255000";
          }
          default "0";
          description "Time to hold the session-UP notification to the client";
          units milliseconds;
        }
        leaf no-router-alert-option {
          type empty;
          description "Do not set Router-Alert options in IP header for MPLS-BFD";
        }
        leaf use-ip-ttl-1 {
          type empty;
          description "Set TTL value to 1 in IP header for MPLS-BFD";
        }
      }
      container periodic-traceroute {
        description "Configure periodic traceroute";
        presence "enable periodic-traceroute";
        uses apply-advanced;
        leaf frequency {
          type uint16 {
            range "15 .. 120";
          }
          description "Time between traceroute attempts";
          units minutes;
        }
        leaf ttl {
          type uint16 {
            range "1 .. 255";
          }
          description "Maximum time-to-live value";
        }
        leaf retries {
          type uint16 {
            range "1 .. 9";
          }
          description "Number of times to resend probe";
        }
        leaf wait {
          type uint16 {
            range "5 .. 15";
          }
          description "Time to wait before resending probe";
          units seconds;
        }
        leaf paths {
          type uint16 {
            range "1 .. 255";
          }
          description "Maximum number of paths to traverse";
        }
        leaf source {
          type "jt:ipv4addr";
          description "Source address to use when sending probes";
        }
        leaf exp {
          type uint16 {
            range "0 .. 7";
          }
          description "Class-of-service value to use when sending probes";
        }
        leaf fanout {
          type uint16 {
            range "1 .. 64";
          }
          description "Maximum number of nexthops to search per node";
        }
      }
      leaf lsp-ping-interval {
        type uint16 {
          range "30 .. 3600";
        }
        default "60";
        description "Time interval between LSP ping messages";
        units seconds;
      }
      leaf lsp-ping-multiplier {
        type uint8 {
          range "1 .. 5";
        }
        description "Number of ping reply missed before declaring BFD down";
      }
    }
    container targeted-hello {
      description "Configure targeted hello parameters";
      uses apply-advanced;
      leaf hello-interval {
        type uint32 {
          range "1 .. 65535";
        }
        description "Hello interval (seconds)";
      }
      leaf hold-time {
        type uint32 {
          range "1 .. 65535";
        }
        description "Hold interval (seconds)";
      }
    }
    container p2mp {
      description "Advertise P2MP capability to peers";
      presence "enable p2mp";
      uses apply-advanced;
      container recursive {
        description "Configure P2MP recursive parameters";
        uses apply-advanced;
        leaf route {
          type empty;
          description "Allow recursive route resolution to signal P2MP FEC";
        }
        leaf fec {
          type empty;
          description "Allow recursive fec to signal P2MP FEC";
        }
      }
      list root-address {
        description "Configure the root address of P2MP LSP";
        key name;
        leaf name {
          type "jt:ipaddr";
          description "Root address of the P2MP LSP";
        }
        uses apply-advanced;
        list lsp-id {
          description "Configure the generic LSP identifier";
          key name;
          leaf name {
            type uint32 {
              range "1 .. 65535";
            }
            description "Generic LSP identifier value";
          }
          uses apply-advanced;
        }
        list group-address {
          description "IPv4/Ipv6 group address for mLDP LSP";
          key name;
          leaf name {
            type "jt:ipaddr";
            description "IPv4/Ipv6 group address";
          }
          uses apply-advanced;
          list source-address {
            description "IPv4/Ipv6 source address";
            key name;
            leaf name {
              type "jt:ipaddr";
              description "IPv4/Ipv6 source address for mLDP LSP";
            }
            uses apply-advanced;
          }
        }
      }
      leaf no-rsvp-tunneling {
        type empty;
        description "Do not allow LDP P2MP to use RSVP-TE LSPs for tunneling";
      }
    }
    container sr-mapping-client {
      description "Enable LDP to SR mapping-client functionality";
      presence "enable sr-mapping-client";
      uses apply-advanced;
      leaf-list policy {
        type "jt:policy-algebra";
        description "SR mapping-client policy";
        ordered-by user;
      }
    }
    leaf upstream-label-assignment {
      type empty;
      description "Allow Upstream Label Assignment capability";
    }
    list family {
      description "Address family";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum inet {
            description "IPv4 family";
          }
          enum inet6 {
            description "IPv6 family";
          }
        }
      }
      uses apply-advanced;
    }
    leaf transport-preference {
      type enumeration {
        enum ipv4 {
          description "Use IPv4 for TCP connections";
        }
        enum ipv6 {
          description "Use IPv6 for TCP connections";
        }
      }
      description "TCP transport preference";
    }
    container dual-transport {
      description "Use separate IPv4 and IPv6 TCP transport";
      presence "enable dual-transport";
      uses apply-advanced;
      leaf inet-lsr-id {
        type "jt:ipv4addr";
        description "LSR identifier for address family inet";
      }
      leaf inet6-lsr-id {
        type "jt:ipv4addr";
        description "LSR identifier for address family inet6";
      }
    }
    leaf no-propagate-ttl {
      type empty;
      description "Disable TTL propagation from IP to MPLS (on push) and MPLS to IP (on pop)";
    }
  }
  grouping juniper-protocols-lmp {
    uses apply-advanced;
    list te-link {
      description "Traffic engineering link";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Name of TE link";
      }
      uses apply-advanced;
      leaf local-address {
        type "jt:ipaddr";
        description "Address of the local end of the link";
      }
      leaf remote-address {
        type "jt:ipaddr";
        description "Address of the remote end of the link";
      }
      leaf remote-id {
        type uint32 {
          range "1 .. 4294967295";
        }
        description "Link ID for the remote end of the link";
      }
      leaf te-metric {
        type uint32 {
          range "1 .. 65535";
        }
        description "Traffic engineering metric of the link";
      }
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable TE link";
          }
        }
      }
      container ethernet-vlan {
        description "TE link used for setup of  L2 VLAN LSP";
        presence "enable ethernet-vlan";
        uses apply-advanced;
        leaf-list vlan-id-range {
          type "jt:vlan-range";
          description "VLAN id";
          max-elements 1;
        }
      }
      choice resource-option {
        case case_1 {
          list interface {
            description "Member interface of TE link";
            key name;
            ordered-by user;
            leaf name {
              type "jt:interface-device";
              description "Interface name";
            }
            uses apply-advanced;
            leaf local-address {
              type "jt:ipaddr";
              description "Local address of the resource";
            }
            leaf remote-address {
              type "jt:ipaddr";
              description "Remote address of the resource";
            }
            leaf remote-id {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Interface ID for the remote end of the resource";
            }
            choice enable-disable {
              case case_1 {
                leaf disable {
                  type empty;
                  description "Disable resource on this TE link";
                }
              }
            }
          }
        }
        case case_2 {
          list label-switched-path {
            description "Member forwarding adjacency LSP of TE link";
            key name;
            max-elements 1;
            ordered-by user;
            leaf name {
              type string;
              description "Name of label-switched path";
            }
            uses apply-advanced;
            leaf local-address {
              type "jt:ipaddr";
              description "Local address of the resource";
            }
            leaf remote-address {
              type "jt:ipaddr";
              description "Remote address of the resource";
            }
            leaf remote-id {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Interface ID for the remote end of the resource";
            }
            choice enable-disable {
              case case_1 {
                leaf disable {
                  type empty;
                  description "Disable resource on this TE link";
                }
              }
            }
          }
        }
      }
    }
    list peer {
      description "Define a network or LMP peer";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Name of peer";
      }
      uses apply-advanced;
      leaf address {
        type "jt:ipaddr";
        description "Address of peer";
      }
      container lmp-protocol {
        description "LMP protocol attributes";
        presence "enable lmp-protocol";
        uses apply-advanced;
        leaf hello-interval {
          type uint32 {
            range "150 .. 21845";
          }
          description "Interval between Hello messages";
          units milliseconds;
        }
        leaf hello-dead-interval {
          type uint32 {
            range "500 .. 65535";
          }
          description "Delay for control channel shutdown when no Hello received";
          units milliseconds;
        }
        leaf retransmission-interval {
          type uint32 {
            range "500 .. 300000";
          }
          description "Minimum time before retransmitting a message";
          units milliseconds;
        }
        leaf retry-limit {
          type uint32 {
            range "3 .. 1000";
          }
          description "Number of times to retransmit a message";
        }
        leaf passive {
          type empty;
          description "Do not send Config messages to peer";
        }
      }
      leaf-list control-channel {
        type "jt:interface-name";
        description "Control channel interfaces by priority";
        ordered-by user;
      }
      list lmp-control-channel {
        description "Control channel IDs";
        key name;
        ordered-by user;
        uses lmp_control_channel_type;
      }
      leaf-list te-link {
        type string;
        description "List of TE links managed by this peer";
        ordered-by user;
      }
    }
    container traceoptions {
      description "LMP trace options";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum init {
              description "Trace initialization events";
            }
            enum show {
              description "Trace show command servicing";
            }
            enum route-socket {
              description "Trace route-socket events";
            }
            enum parse {
              description "Trace parser processing";
            }
            enum process {
              description "Trace general configuration processing";
            }
            enum server {
              description "Trace server processing";
            }
            enum routing {
              description "Trace routing protocols interworking";
            }
            enum packets {
              description "Trace packet processing";
            }
            enum hello-packets {
              description "Trace hello packet processing";
            }
            enum state {
              description "Trace state transitions";
            }
            enum nsr-synchronization {
              description "Trace mirror and nsr transitions";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
          status deprecated;
        }
        leaf receive {
          type empty;
          description "Trace received packets";
          status deprecated;
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
          status deprecated;
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
          status deprecated;
        }
      }
    }
  }
  grouping juniper-protocols-mpls {
    description "Multiprotocol Label Switching options";
    uses apply-advanced;
    list lsp-external-controller {
      description "External path computing entity";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Name of the external path computing entity";
      }
      uses apply-advanced;
      container label-switched-path-template {
        description "Template for externally provisioned LSP parameters";
        uses apply-advanced;
        choice dynamic-template {
          case case_1 {
            leaf template-name {
              type string {
                length "1 .. 32";
              }
              description "Name of point-to-point LSP template";
            }
          }
          case case_2 {
            leaf default-template {
              type empty;
              description "Use default parameters";
            }
          }
        }
      }
      container label-switched-path-p2mp-template {
        description "Template for externally provisioned P2MP LSP parameters";
        uses apply-advanced;
        choice dynamic-template {
          case case_1 {
            leaf template-name {
              type string {
                length "1 .. 32";
              }
              description "Name of point-to-multipoint LSP template";
            }
          }
          case case_2 {
            leaf default-template {
              type empty;
              description "Use default parameters";
            }
          }
        }
      }
      list pce-controlled-lsp {
        description "Template for externally provisioned LSP using regular expression";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Template regular expression";
        }
        uses apply-advanced;
        container label-switched-path-template {
          description "Template for externally provisioned LSP parameters";
          uses apply-advanced;
          leaf template-name {
            type string {
              length "1 .. 64";
            }
            description "Name of point-to-point LSP template";
          }
        }
        container label-switched-path-p2mp-template {
          description "Template for externally provisioned P2MP LSP parameters";
          uses apply-advanced;
          leaf template-name {
            type string {
              length "1 .. 64";
            }
            description "Name of point-to-multipoint LSP template";
          }
        }
      }
    }
    container path-mtu {
      description "Path MTU configuration";
      presence "enable path-mtu";
      uses apply-advanced;
      leaf allow-fragmentation {
        type empty;
        description "If needed, fragment IP before encapsulating in MPLS";
      }
      container rsvp {
        description "RSVP-specific path MTU options";
        presence "enable rsvp";
        uses apply-advanced;
        leaf mtu-signaling {
          type empty;
          description "Enable RSVP path MTU signaling";
        }
      }
    }
    container diffserv-te {
      description "Global diffserv-traffic-engineering options";
      uses apply-advanced;
      leaf bandwidth-model {
        type enumeration {
          enum extended-mam {
            description "Maximum allocation model with support for E-LSPs";
          }
          enum mam {
            description "Maximum allocation model";
          }
          enum rdm {
            description "Russian dolls model";
          }
        }
        description "Bandwidth constraint model supported";
      }
      container te-class-matrix {
        description "Supported combinations of traffic-class and preemption";
        uses apply-advanced;
        container te0 {
          description "Definition for traffic-engineering class te0";
          uses te-class-object;
        }
        container te1 {
          description "Definition for traffic-engineering class te1";
          uses te-class-object;
        }
        container te2 {
          description "Definition for traffic-engineering class te2";
          uses te-class-object;
        }
        container te3 {
          description "Definition for traffic-engineering class te3";
          uses te-class-object;
        }
        container te4 {
          description "Definition for traffic-engineering class te4";
          uses te-class-object;
        }
        container te5 {
          description "Definition for traffic-engineering class te5";
          uses te-class-object;
        }
        container te6 {
          description "Definition for traffic-engineering class te6";
          uses te-class-object;
        }
        container te7 {
          description "Definition for traffic-engineering class te7";
          uses te-class-object;
        }
      }
    }
    container auto-policing {
      description "Automatic policing of LSPs";
      uses apply-advanced;
      list class {
        description "Forwarding class";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum all {
              description "All forwarding classes";
            }
            enum ct0 {
              description "Forwarding class 0";
            }
            enum ct1 {
              description "Forwarding class 1";
            }
            enum ct2 {
              description "Forwarding class 2";
            }
            enum ct3 {
              description "Forwarding class 3";
            }
          }
        }
        uses apply-advanced;
        choice policing-action {
          case case_1 {
            leaf drop {
              type empty;
              description "Drop packets if bandwidth is exceeded";
            }
          }
          case case_2 {
            leaf loss-priority-high {
              type empty;
              description "Set loss priority to high if bandwidth is exceeded";
            }
          }
          case case_3 {
            leaf loss-priority-low {
              type empty;
              description "Set loss priority to low if bandwidth is exceeded";
            }
          }
        }
      }
    }
    container statistics {
      description "Collect statistics for signaled label-switched paths";
      uses apply-advanced;
      container file {
        description "Statistics file options";
        presence "enable file";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      leaf interval {
        type int32 {
          range "1 .. 65535";
        }
        description "Time to collect statistics (seconds)";
      }
      leaf auto-bandwidth {
        type empty;
        description "Enable auto bandwidth allocation";
      }
      leaf no-transit-statistics {
        type empty;
        description "Disable transit LSP statistics collection";
      }
      choice transit-polling-type {
        case case_1 {
          leaf no-transit-statistics-polling {
            type empty;
            description "Disable polling and display of transit lsp statistics";
            status deprecated;
          }
        }
        case case_2 {
          leaf transit-statistics-polling {
            type empty;
            description "Enable polling and display of transit lsp statistics";
          }
        }
      }
      leaf no-bypass-statistics-polling {
        type empty;
        description "Disable polling and display of bypass lsp statistics";
      }
      leaf statistics-query-batch-size {
        type int32 {
          range "1 .. 25";
        }
        description "Number of LSPs for which statistics will be queried together";
      }
      leaf traffic-class-statistics {
        type empty;
        description "Create per traffic class statistics sensors for LSPs";
      }
    }
    container p2mp-lsp {
      description "P2MP LSP control configuration";
      uses apply-advanced;
      leaf single-abr {
        type empty;
        description "Try to use same exit node for all inter-domain sub LSPs";
      }
      leaf no-re-merge {
        type empty;
        description "Avoid LSP CSPF creating remerge";
      }
    }
    container log-updown {
      description "Logging actions for LSP up/down events";
      uses apply-advanced;
      choice syslog-choice {
        leaf syslog {
          type empty;
          description "Send syslog messages";
        }
        leaf no-syslog {
          type empty;
          description "Don't send syslog messages";
        }
      }
      choice trap-choice {
        case case_1 {
          leaf trap {
            type empty;
            description "Send SNMP traps";
          }
        }
        case case_2 {
          container no-trap {
            description "Don't send SNMP traps";
            presence "enable no-trap";
            uses apply-advanced;
            leaf mpls-lsp-traps {
              type empty;
              description "Dont send mpls lsp up/down traps";
            }
            leaf rfc3812-traps {
              type empty;
              description "Dont send rfc3812 traps";
            }
          }
        }
      }
      leaf trap-path-down {
        type empty;
        description "Send SNMP traps when a path goes down";
      }
      leaf trap-path-up {
        type empty;
        description "Send SNMP traps when a path goes up";
      }
    }
    container optimize-adaptive-teardown {
      description "Post make before break adaptive teardown";
      uses apply-advanced;
      leaf p2p {
        type empty;
        description "Turn on post make before break adaptive teardown for p2p";
      }
      leaf timeout {
        type int32 {
          range "1 .. 65535";
        }
        description "Timeout for adaptive teardown to clean up LSP";
        units seconds;
      }
      container delay {
        description "Delay tearing down old optimized path after adaptive-teardown kicks in";
        uses apply-advanced;
        leaf delay-value {
          type int32 {
            range "3 .. 65535";
          }
          description "Delay tearing down old optimized path after adaptive-teardown kicks in";
          units seconds;
        }
      }
    }
    container traffic-engineering {
      description "Traffic-engineering control";
      presence "enable traffic-engineering";
      uses apply-advanced;
      choice protocols {
        case case_1 {
          leaf bgp {
            type empty;
            description "BGP destinations only";
          }
        }
        case case_2 {
          leaf bgp-igp {
            type empty;
            description "BGP and IGP destinations";
          }
        }
        case case_3 {
          leaf bgp-igp-both-ribs {
            type empty;
            description "BGP and IGP destinations with routes in both routing tables";
          }
        }
        case case_4 {
          leaf mpls-forwarding {
            type empty;
            description "Use MPLS routes for forwarding, not routing";
          }
        }
      }
      container database {
        description "Traffic engineering database";
        uses apply-advanced;
        container import {
          description "Configure TED import parameters";
          uses apply-advanced;
          container l3-unicast-topology {
            description "Download L3-Unicast topology into RIB";
            presence "enable l3-unicast-topology";
            uses apply-advanced;
            leaf bgp-link-state {
              type empty;
              description "Export L3-Unicast topology, instead of TE topology, into BGP-LS";
            }
          }
          leaf-list policy {
            type "jt:policy-algebra";
            description "Configure import policy";
            ordered-by user;
          }
          leaf identifier {
            type uint64 {
              range "2 .. 18446744073709551615";
            }
            description "BGP-TE identifier";
          }
          leaf bgp-ls-identifier {
            type uint32;
            description "BGP-TE domain identifier";
          }
          leaf ipv6 {
            type empty;
            description "Import ipv6 addresses";
          }
        }
        container export {
          description "Configure TED export related parameters";
          uses apply-advanced;
          leaf-list policy {
            type "jt:policy-algebra";
            description "Export policy";
            ordered-by user;
          }
          container credibility {
            description "TED credibility value for entries from BGP-TE";
            uses apply-advanced;
            leaf unknown {
              type uint32 {
                range "0 .. 512";
              }
              description "Entries sourced from unknown entities";
            }
            leaf direct {
              type uint32 {
                range "0 .. 512";
              }
              description "Entries sourced from directly connected links";
            }
            leaf static {
              type uint32 {
                range "0 .. 512";
              }
              description "Entries sourced from static configuration";
            }
            leaf ospf {
              type uint32 {
                range "0 .. 512";
              }
              description "Entries sourced from ospf";
            }
            leaf isis-level-1 {
              type uint32 {
                range "0 .. 512";
              }
              description "Entries sourced from ISIS Level 1";
            }
            leaf isis-level-2 {
              type uint32 {
                range "0 .. 512";
              }
              description "Entries sourced from ISIS Level 2";
            }
            leaf bgp {
              type uint32 {
                range "0 .. 512";
              }
              description "Entries sourced from BGP";
            }
          }
          leaf l3-unicast-topology {
            type empty;
            description "Download RIB entries into L3-Unicast topology";
          }
        }
      }
    }
    list admin-groups {
      description "Administrative groups";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Group name";
      }
      uses apply-advanced;
      leaf group-value {
        type uint32 {
          range "0 .. 31";
        }
        description "Group bit position";
      }
    }
    leaf advertisement-hold-time {
      type uint32 {
        range "0 .. 65535";
      }
      default "5";
      description "Time that an 'LSP down' advertisement will be delayed";
      units seconds;
    }
    leaf rsvp-error-hold-time {
      type uint32 {
        range "0 .. 240";
      }
      default "25";
      description "Time that RSVP PathErr events will be remembered";
      units seconds;
    }
    leaf optimize-aggressive {
      type empty;
      description "Run aggressive optimization algorithm based on IGP metric only";
    }
    leaf smart-optimize-timer {
      type int32 {
        range "0 .. 65535";
      }
      description "Path optimization interval after a link traversed by the path goes down";
      units seconds;
    }
    leaf optimize-switchover-delay {
      type int32 {
        range "1 .. 900";
      }
      description "Delay before switching LSP to newly optimized path";
      units seconds;
    }
    leaf no-propagate-ttl {
      type empty;
      description "Disable TTL propagation from IP to MPLS (on push) and MPLS to IP (on pop)";
    }
    leaf sensor-based-stats {
      type empty;
      description "Enable sensor based statistics collection";
    }
    leaf explicit-null {
      type empty;
      description "Advertise the EXPLICIT_NULL label when the router is the egress";
    }
    leaf icmp-tunneling {
      type empty;
      description "Allow MPLS LSPs to be used for tunneling ICMP error packets";
    }
    leaf revert-timer {
      type int32 {
        range "0 .. 65535";
      }
      description "Hold-down window before reverting back to primary path, 0 means disable";
      units seconds;
    }
    leaf optimize-hold-dead-delay {
      type int32 {
        range "0 .. 65535";
      }
      description "Delay before tearing down the old optimized path";
      units seconds;
    }
    leaf cspf-backoff-time {
      type int32 {
        range "0 .. 65535";
      }
      description "Delay before CSPF, when there is PathErr on backup path";
      units seconds;
    }
    leaf expand-loose-hop {
      type empty;
      description "Perform CSPF path computation to expand loose hops";
    }
    leaf mib-mpls-show-p2mp {
      type empty;
      description "Show p2mp tunnels entries in mpls mib walk";
    }
    container bandwidth {
      description "Bandwidth to reserve (bps)";
      uses bandwidth-type;
    }
    container admin-group {
      description "Administrative group policy";
      uses admin_group_include_exclude;
    }
    container admin-group-extended {
      description "Extended administrative group policy";
      uses admin_group_include_exclude;
    }
    container priority {
      description "Preemption priorities";
      presence "enable priority";
    }
    leaf setup-priority {
      type uint32 {
        range "0 .. 7";
      }
      description "Set-up priority";
    }
    leaf reservation-priority {
      type uint32 {
        range "0 .. 7";
      }
      description "Reservation priority";
    }
    container oam {
      description "Periodic OAM";
      uses periodic_oam;
    }
    leaf class-of-service {
      type int32 {
        range "0 .. 7";
      }
      description "Class-of-service value";
    }
    leaf no-decrement-ttl {
      type empty;
      description "Do not decrement the TTL within an LSP";
    }
    leaf hop-limit {
      type int32 {
        range "2 .. 255";
      }
      description "Maximum allowed router hops";
    }
    leaf no-cspf {
      type empty;
      description "Disable automatic path computation";
    }
    leaf admin-down {
      type empty;
      description "Set GMPLS LSP to administrative down state";
    }
    leaf optimize-timer {
      type int32 {
        range "0 .. 65535";
      }
      description "Periodical path reoptimizations";
      units seconds;
    }
    leaf preference {
      type uint32;
      description "Preference value";
    }
    choice record-choice {
      leaf record {
        type empty;
        description "Record transit routers";
      }
      leaf no-record {
        type empty;
        description "Don't record transit routers";
      }
    }
    leaf standby {
      type empty;
      description "Keep backup paths in continuous standby";
    }
    leaf exclude-srlg {
      type empty;
      description "Exclude SRLG links for secondary path";
    }
    leaf ultimate-hop-popping {
      type empty;
      description "Request ultimate hop popping from egress";
    }
    leaf sync-active-path-bandwidth {
      type empty;
      description "Signal standby path with bandwidth obtained from active path";
    }
    leaf cross-credibility-cspf {
      type empty;
      description "Compute paths across multi-protocol links and nodes";
    }
    leaf top-credibility-only-cspf {
      type empty;
      description "Compute paths only using highest credibility links and nodes";
    }
    list label-switched-path {
      description "Label-switched path";
      key name;
      ordered-by user;
      leaf name {
        type string {
          length "1 .. 64";
        }
        description "Name of path";
      }
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable MPLS label-switched path";
          }
        }
      }
      container traceoptions {
        description "Trace options for MPLS label-switched path";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum cspf {
                description "Trace CSPF computation";
              }
              enum cspf-node {
                description "Trace nodes visited during CSPF";
              }
              enum cspf-link {
                description "Trace links visited during CSPF";
              }
              enum cspf-abstract {
                description "Trace abstract hop based CSPF details";
              }
              enum state {
                description "Trace state transitions";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
        }
      }
      leaf no-install-to-address {
        type empty;
        description "Don't install host route 'to' address into routing tables";
      }
      leaf backup {
        type empty;
        description "Use LSP for IGP backup";
      }
      leaf from {
        type "jt:ipv4addr";
        description "Address of ingress router";
      }
      container pop-and-forward {
        description "Enable LSP as pop-and-forward with auto-delegation";
        presence "enable pop-and-forward";
      }
      choice label-switched-path-or-template {
        case case_1 {
          leaf to {
            type "jt:ipv4addr";
            description "Address of egress router";
          }
        }
        case case_2 {
          leaf template {
            type empty;
            description "Template for dynamic lsp paramaters";
          }
        }
      }
      leaf corouted-bidirectional {
        type empty;
        description "Setup the LSP as a corouted bidirectional LSP";
      }
      leaf corouted-bidirectional-passive {
        type empty;
        description "Associate LSP with incoming corouted bidirectional LSP";
      }
      leaf metric {
        type uint32 {
          range "1 .. 16777215";
        }
        description "Metric value";
      }
      container conditional-metric {
        description "Set a conditional metric value for the LSP";
        uses apply-advanced;
        list igp-metric-threshold {
          description "Set conditional LSP metric based on IGP metric, up to 4 conditions";
          key name;
          max-elements 4;
          leaf name {
            type uint32 {
              range "1 .. 16777215";
            }
            description "Conditional IGP metric threshold";
          }
          leaf conditional-metric-value {
            type uint32 {
              range "1 .. 16777215";
            }
            description "Conditional LSP metric value";
          }
        }
      }
      container metric-type {
        description "Metric type used for computaion";
        uses apply-advanced;
        choice metric-type-choice {
          case case_1 {
            leaf te {
              type empty;
              description "TE metric";
            }
          }
          case case_2 {
            leaf igp {
              type empty;
              description "IGP metric";
            }
          }
          case case_3 {
            container delay {
              description "Delay metric";
              presence "enable delay";
              uses apply-advanced;
              choice metric-choice {
                case case_1 {
                  leaf minimum {
                    type empty;
                    description "Minimum delay metric type";
                  }
                }
                case case_2 {
                  leaf maximum {
                    type empty;
                    description "Maximum delay metric type";
                  }
                }
                case case_3 {
                  leaf average {
                    type empty;
                    description "Average delay metric type";
                  }
                }
              }
              leaf delay-variation-threshold {
                type uint32 {
                  range "1 .. 16777215";
                }
                description "Link delay variation threshold";
              }
            }
          }
        }
      }
      leaf ldp-tunneling {
        type empty;
        description "Allow LDP to use this LSP for tunneling";
      }
      leaf soft-preemption {
        type empty;
        description "Attempt make-before-break service while preempting this LSP";
      }
      list install {
        description "Install prefix";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipprefix";
          description "Destination prefix";
        }
        leaf active {
          type empty;
          description "Install prefix into forwarding table";
        }
      }
      leaf retry-timer {
        type uint32 {
          range "1 .. 600";
        }
        description "Time before retrying the primary path";
        units seconds;
      }
      leaf retry-limit {
        type uint32 {
          range "0 .. 10000";
        }
        description "Maximum number of times to retry primary path";
      }
      container lsp-attributes {
        description "Attributes for generalized LSP";
        uses apply-advanced;
        leaf signal-bandwidth {
          type enumeration {
            enum ds1 {
              description "1.544 Mbps";
            }
            enum vt1-5 {
              description "1.728 Mbps";
            }
            enum e1 {
              description "2.048 Mbps";
            }
            enum vt2 {
              description "2.304 Mbps";
            }
            enum ethernet {
              description "10 Mbps";
            }
            enum e3 {
              description "34.368 Mbps";
            }
            enum ds3 {
              description "44.736 Mbps";
            }
            enum sts-1 {
              description "51.84 Mbps";
            }
            enum fastether {
              description "100.00 Mbps";
            }
            enum stm-1 {
              description "155.52 Mbps";
            }
            enum stm-4 {
              description "622.08 Mbps";
            }
            enum gigether {
              description "1000.00 Mbps";
            }
            enum stm-16 {
              description "2488.32 Mbps";
            }
            enum stm-64 {
              description "9953.28 Mbps";
            }
            enum 10gigether {
              description "10000.00 Mbps";
            }
            enum stm-256 {
              description "39813.12 Mbps";
            }
            enum 100gige {
              description "100000.00 Mbps";
            }
          }
          description "Signal bandwidth for the LSP";
        }
        leaf switching-type {
          type enumeration {
            enum psc-1 {
              description "Packet switching";
            }
            enum lambda {
              description "Lambda switching";
            }
            enum fiber {
              description "Fiber switching";
            }
            enum tdm {
              description "TDM switching";
            }
            enum ethernet-vlan {
              description "Ethernet VLAN switching";
            }
          }
          description "LSP switching type desired";
        }
        leaf encoding-type {
          type enumeration {
            enum packet {
              description "Packet encoding";
            }
            enum ethernet {
              description "Ethernet encoding";
            }
            enum pdh {
              description "PDH encoding";
            }
            enum sonet-sdh {
              description "SONET-SDH encoding";
            }
          }
          description "LSP encoding type desired";
        }
        leaf gpid {
          type enumeration {
            enum ipv4;
            enum ethernet;
            enum ppp;
            enum hdlc;
            enum pos-no-scrambling-crc-16;
            enum pos-no-scrambling-crc-32;
            enum pos-scrambling-crc-16;
            enum pos-scrambling-crc-32;
          }
          description "Generalized PID";
        }
        container upstream-label {
          description "Upstream Label for the bidirectional label-switched path";
          uses apply-advanced;
          leaf vlan-id {
            type uint32 {
              range "1 .. 4094";
            }
            description "VLAN ID label for the label-switched path";
          }
        }
      }
      leaf revert-timer {
        type int32 {
          range "0 .. 65535";
        }
        description "Hold-down window before reverting back to primary path, 0 means disable";
        units seconds;
      }
      leaf optimize-hold-dead-delay {
        type int32 {
          range "0 .. 65535";
        }
        description "Delay before tearing down the old optimized path";
        units seconds;
      }
      leaf cspf-backoff-time {
        type int32 {
          range "0 .. 65535";
        }
        description "Delay before CSPF, when there is PathErr on backup path";
        units seconds;
      }
      container bandwidth {
        description "Bandwidth to reserve (bps)";
        uses bandwidth-type;
      }
      container admin-group {
        description "Administrative group policy";
        uses admin_group_include_exclude;
      }
      container admin-group-extended {
        description "Extended administrative group policy";
        uses admin_group_include_exclude;
      }
      container priority {
        description "Preemption priorities";
        presence "enable priority";
      }
      leaf setup-priority {
        type uint32 {
          range "0 .. 7";
        }
        description "Set-up priority";
      }
      leaf reservation-priority {
        type uint32 {
          range "0 .. 7";
        }
        description "Reservation priority";
      }
      container oam {
        description "Periodic OAM";
        uses periodic_oam;
      }
      leaf class-of-service {
        type int32 {
          range "0 .. 7";
        }
        description "Class-of-service value";
      }
      leaf no-decrement-ttl {
        type empty;
        description "Do not decrement the TTL within an LSP";
      }
      leaf hop-limit {
        type int32 {
          range "2 .. 255";
        }
        description "Maximum allowed router hops";
      }
      leaf no-cspf {
        type empty;
        description "Disable automatic path computation";
      }
      leaf admin-down {
        type empty;
        description "Set GMPLS LSP to administrative down state";
      }
      leaf optimize-timer {
        type int32 {
          range "0 .. 65535";
        }
        description "Periodical path reoptimizations";
        units seconds;
      }
      leaf preference {
        type uint32;
        description "Preference value";
      }
      choice record-choice {
        leaf record {
          type empty;
          description "Record transit routers";
        }
        leaf no-record {
          type empty;
          description "Don't record transit routers";
        }
      }
      leaf standby {
        type empty;
        description "Keep backup paths in continuous standby";
      }
      leaf exclude-srlg {
        type empty;
        description "Exclude SRLG links for secondary path";
      }
      leaf ultimate-hop-popping {
        type empty;
        description "Request ultimate hop popping from egress";
      }
      leaf sync-active-path-bandwidth {
        type empty;
        description "Signal standby path with bandwidth obtained from active path";
      }
      leaf cross-credibility-cspf {
        type empty;
        description "Compute paths across multi-protocol links and nodes";
      }
      leaf top-credibility-only-cspf {
        type empty;
        description "Compute paths only using highest credibility links and nodes";
      }
      leaf entropy-label {
        type empty;
        description "Enable entropy label";
      }
      leaf self-ping-duration {
        type int32 {
          range "1 .. 65535";
        }
        description "Duration over which to run self-ping (65535 = until success). Default = 1800s";
        units seconds;
      }
      leaf no-self-ping {
        type empty;
        description "Do not run self-ping for this LSP";
      }
      choice cspf-attribute {
        case case_1 {
          leaf random {
            type empty;
            description "Randomly select among equal-cost paths";
          }
        }
        case case_2 {
          leaf least-fill {
            type empty;
            description "Select the least filled among equal-cost paths";
          }
        }
        case case_3 {
          leaf most-fill {
            type empty;
            description "Select the most filled among equal-cost paths";
          }
        }
      }
      leaf description {
        type string {
          length "1 .. 80";
        }
        description "Text description of label-switched path";
      }
      choice lp-type {
        case case_1 {
          leaf link-protection {
            type empty;
            description "Protect LSP from link faults only";
          }
        }
        case case_2 {
          leaf node-link-protection {
            type empty;
            description "Protect LSP from both link and node faults";
          }
        }
      }
      leaf intra-domain {
        type empty;
        description "Intra-domain LSP";
        status deprecated;
      }
      leaf inter-domain {
        type empty;
        description "Inter-domain LSP";
      }
      leaf adaptive {
        type empty;
        description "Have the LSP smoothly cut over to new routes";
      }
      container in-place-lsp-bandwidth-update {
        description "Update LSP in-place re-using the same LSP identifier";
        presence "enable in-place-lsp-bandwidth-update";
      }
      container fast-reroute {
        description "Fast reroute";
        presence "enable fast-reroute";
        uses apply-advanced;
        leaf hop-limit {
          type int32 {
            range "0 .. 255";
          }
          description "Maximum allowed router hops";
        }
        choice bw-attribute {
          case case_1 {
            leaf bandwidth {
              type string;
              description "Bandwidth to reserve (bps)";
            }
          }
          case case_2 {
            leaf bandwidth-percent {
              type int32 {
                range "1 .. 100";
              }
              description "Percentage of main path bandwidth to reserve";
            }
          }
        }
        choice include_any_or_no_include_any {
          case case_1 {
            leaf no-include-any {
              type empty;
              description "Disable include-any checking";
            }
          }
          case case_2 {
            leaf-list include-any {
              type string;
              description "Groups, one or more of which must be present";
              ordered-by user;
            }
          }
        }
        choice include_all_or_no_include_all {
          case case_1 {
            leaf no-include-all {
              type empty;
              description "Disable include-all checking";
            }
          }
          case case_2 {
            leaf-list include-all {
              type string;
              description "Groups, all of which must be present";
              ordered-by user;
            }
          }
        }
        choice exclude_or_no_exclude {
          case case_1 {
            leaf no-exclude {
              type empty;
              description "Disable exclude checking";
            }
          }
          case case_2 {
            leaf-list exclude {
              type string;
              description "Groups, all of which must be absent";
              ordered-by user;
            }
          }
        }
      }
      container p2mp {
        description "Point-to-multipoint label-switched path";
        presence "enable p2mp";
        leaf path_name {
          type string;
          description "Name of point-to-multipoint LSP";
        }
      }
      container auto-bandwidth {
        description "Do auto bandwidth allocation for this LSP";
        presence "enable auto-bandwidth";
        uses apply-advanced;
        leaf adjust-interval {
          type uint32 {
            range "300 .. 315360000";
          }
          default "86400";
          description "Time to adjust LSP bandwidth";
          units seconds;
        }
        leaf adjust-threshold {
          type uint32 {
            range "0 .. 50";
          }
          default "0";
          description "Percentage change in average LSP utilization to trigger auto-adjustment";
          units percent;
        }
        leaf adjust-threshold-absolute {
          type string;
          default "0";
          description "Change in average LSP utilization to trigger auto-adjustment";
          units bps;
        }
        leaf adjust-threshold-activate-bandwidth {
          type string;
          description "Adjusts signaled bw if greater than this value";
          units bps;
        }
        leaf minimum-bandwidth {
          type string;
          description "Minimum LSP bandwidth";
          units bps;
        }
        leaf maximum-bandwidth {
          type string;
          description "Maximum LSP bandwidth";
          units bps;
        }
        leaf minimum-bandwidth-adjust-interval {
          type uint32 {
            range "300 .. 31536000";
          }
          description "Duration for which minimum bandwidth will be frozen";
          units seconds;
        }
        leaf minimum-bandwidth-adjust-threshold-change {
          type uint32 {
            range "0 .. 100";
          }
          description "Change in max average bandwidth to freeze min bandwidth";
          units percent;
        }
        leaf minimum-bandwidth-adjust-threshold-value {
          type string;
          description "Freeze min bandwidth if max average bandwidth falls below this bw";
          status deprecated;
          units bps;
        }
        leaf monitor-bandwidth {
          type empty;
          description "Monitor LSP bandwidth without adjustments";
        }
        leaf adjust-threshold-overflow-limit {
          type uint32 {
            range "1 .. 65535";
          }
          description "Number of consecutive overflow samples to trigger auto-adjustment";
        }
        leaf adjust-threshold-underflow-limit {
          type uint32 {
            range "1 .. 65535";
          }
          description "Number of consecutive underflow samples to trigger auto-adjustment";
        }
        leaf resignal-minimum-bandwidth {
          type empty;
          description "Resignal the LSP using minimum-bandwidth";
        }
        leaf sync-active-path-bandwidth {
          type empty;
          description "Signal standby path with bandwidth obtained from active path";
        }
      }
      container optimize-on-change {
        description "Specify additional re-optimization triggers for this LSP";
        uses apply-advanced;
        leaf link-congestion {
          type empty;
          description "Optimize when a link becomes congested";
        }
      }
      container deselect-on-bandwidth-failure {
        description "Deselect active path if it cannot meet the bandwidth constraint";
        presence "enable deselect-on-bandwidth-failure";
        uses apply-advanced;
        leaf tear-lsp {
          type empty;
          description "Bring down active path when all paths fail to reserve required bandwidth";
        }
      }
      container track-igp-metric {
        description "Track IGP metric for LSP install prefixes";
        uses apply-advanced;
        leaf install-v4-prefixes {
          type empty;
          description "Track IGP metric for IPV4 prefixes";
        }
        leaf install-v6-prefixes {
          type empty;
          description "Track IGP metric for IPV6 prefixes";
        }
      }
      container associate-lsp {
        description "Associate the LSP for OAM";
        uses apply-advanced;
        leaf lsp-name {
          type string;
          description "Name of assocation LSP";
        }
        leaf from {
          type "jt:ipv4addr";
          description "Address of ingress router of associated LSP";
        }
      }
      list primary {
        description "Preferred path";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of path";
        }
        uses apply-advanced;
        container bandwidth {
          description "Bandwidth to reserve (bps)";
          uses bandwidth-type;
        }
        container admin-group {
          description "Administrative group policy";
          uses admin_group_include_exclude;
        }
        container admin-group-extended {
          description "Extended administrative group policy";
          uses admin_group_include_exclude;
        }
        container priority {
          description "Preemption priorities";
          presence "enable priority";
        }
        leaf setup-priority {
          type uint32 {
            range "0 .. 7";
          }
          description "Set-up priority";
        }
        leaf reservation-priority {
          type uint32 {
            range "0 .. 7";
          }
          description "Reservation priority";
        }
        container oam {
          description "Periodic OAM";
          uses periodic_oam;
        }
        leaf class-of-service {
          type int32 {
            range "0 .. 7";
          }
          description "Class-of-service value";
        }
        leaf no-decrement-ttl {
          type empty;
          description "Do not decrement the TTL within an LSP";
        }
        leaf hop-limit {
          type int32 {
            range "2 .. 255";
          }
          description "Maximum allowed router hops";
        }
        leaf no-cspf {
          type empty;
          description "Disable automatic path computation";
        }
        leaf admin-down {
          type empty;
          description "Set GMPLS LSP to administrative down state";
        }
        leaf optimize-timer {
          type int32 {
            range "0 .. 65535";
          }
          description "Periodical path reoptimizations";
          units seconds;
        }
        leaf preference {
          type uint32;
          description "Preference value";
        }
        choice record-choice {
          leaf record {
            type empty;
            description "Record transit routers";
          }
          leaf no-record {
            type empty;
            description "Don't record transit routers";
          }
        }
        leaf standby {
          type empty;
          description "Keep backup paths in continuous standby";
        }
        leaf exclude-srlg {
          type empty;
          description "Exclude SRLG links for secondary path";
        }
        leaf ultimate-hop-popping {
          type empty;
          description "Request ultimate hop popping from egress";
        }
        leaf sync-active-path-bandwidth {
          type empty;
          description "Signal standby path with bandwidth obtained from active path";
        }
        leaf cross-credibility-cspf {
          type empty;
          description "Compute paths across multi-protocol links and nodes";
        }
        leaf top-credibility-only-cspf {
          type empty;
          description "Compute paths only using highest credibility links and nodes";
        }
        leaf adaptive {
          type empty;
          description "Have the LSP smoothly cut over to new routes";
        }
        leaf select {
          type enumeration {
            enum manual {
              description "Manual override as preferred active path, if up and stable";
            }
            enum unconditional {
              description "Unconditional override as preferred active path, regardless of up/down status";
            }
          }
        }
        container upstream-label {
          description "Upstream Label for the bidirectional label-switched path";
          uses apply-advanced;
          leaf vlan-id {
            type uint32 {
              range "1 .. 4094";
            }
            description "VLAN ID label for the label-switched path";
          }
        }
        container optimize-on-change {
          description "Specify additional re-optimization triggers for this path";
          uses apply-advanced;
          leaf link-congestion {
            type empty;
            description "Optimize when a link becomes congested";
          }
        }
      }
      list secondary {
        description "Backup path";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of path";
        }
        uses apply-advanced;
        container bandwidth {
          description "Bandwidth to reserve (bps)";
          uses bandwidth-type;
        }
        container admin-group {
          description "Administrative group policy";
          uses admin_group_include_exclude;
        }
        container admin-group-extended {
          description "Extended administrative group policy";
          uses admin_group_include_exclude;
        }
        container priority {
          description "Preemption priorities";
          presence "enable priority";
        }
        leaf setup-priority {
          type uint32 {
            range "0 .. 7";
          }
          description "Set-up priority";
        }
        leaf reservation-priority {
          type uint32 {
            range "0 .. 7";
          }
          description "Reservation priority";
        }
        container oam {
          description "Periodic OAM";
          uses periodic_oam;
        }
        leaf class-of-service {
          type int32 {
            range "0 .. 7";
          }
          description "Class-of-service value";
        }
        leaf no-decrement-ttl {
          type empty;
          description "Do not decrement the TTL within an LSP";
        }
        leaf hop-limit {
          type int32 {
            range "2 .. 255";
          }
          description "Maximum allowed router hops";
        }
        leaf no-cspf {
          type empty;
          description "Disable automatic path computation";
        }
        leaf admin-down {
          type empty;
          description "Set GMPLS LSP to administrative down state";
        }
        leaf optimize-timer {
          type int32 {
            range "0 .. 65535";
          }
          description "Periodical path reoptimizations";
          units seconds;
        }
        leaf preference {
          type uint32;
          description "Preference value";
        }
        choice record-choice {
          leaf record {
            type empty;
            description "Record transit routers";
          }
          leaf no-record {
            type empty;
            description "Don't record transit routers";
          }
        }
        leaf standby {
          type empty;
          description "Keep backup paths in continuous standby";
        }
        leaf exclude-srlg {
          type empty;
          description "Exclude SRLG links for secondary path";
        }
        leaf ultimate-hop-popping {
          type empty;
          description "Request ultimate hop popping from egress";
        }
        leaf sync-active-path-bandwidth {
          type empty;
          description "Signal standby path with bandwidth obtained from active path";
        }
        leaf cross-credibility-cspf {
          type empty;
          description "Compute paths across multi-protocol links and nodes";
        }
        leaf top-credibility-only-cspf {
          type empty;
          description "Compute paths only using highest credibility links and nodes";
        }
        leaf adaptive {
          type empty;
          description "Have the LSP smoothly cut over to new routes";
        }
        leaf select {
          type enumeration {
            enum manual {
              description "Manual override as preferred active path, if up and stable";
            }
            enum unconditional {
              description "Unconditional override as preferred active path, regardless of up/down status";
            }
          }
        }
        container upstream-label {
          description "Upstream Label for the bidirectional label-switched path";
          uses apply-advanced;
          leaf vlan-id {
            type uint32 {
              range "1 .. 4094";
            }
            description "VLAN ID label for the label-switched path";
          }
        }
        container optimize-on-change {
          description "Specify additional re-optimization triggers for this path";
          uses apply-advanced;
          leaf link-congestion {
            type empty;
            description "Optimize when a link becomes congested";
          }
        }
        container non-active-hold-priority {
          description "Non-active hold priority";
          leaf non-active-hold-prio-value {
            type uint32 {
              range "0 .. 7";
            }
            description "Non-active hold priority value";
          }
        }
      }
      container policing {
        description "Traffic policing for this LSP";
        leaf filter {
          type string;
          description "Name of filter to use for policing LSP traffic";
        }
        leaf no-auto-policing {
          type empty;
          description "Turn off automatic policing for this LSP";
        }
      }
      container lsp-external-controller {
        description "External path computing entity";
        uses apply-advanced;
        leaf ctrler_name {
          type string;
          description "Name of the external path computing entity";
        }
        leaf te-metric-bound {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "Maximum metric value, a path can have, for the metric-type TE";
        }
        leaf igp-metric-bound {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "Maximum metric value, a path can have, for the metric-type IGP";
        }
        leaf delay-metric-bound {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "Maximum metric value, a path can have, for the metric-type delay variation";
        }
        container diversity-association {
          description "Configure diversity association for LSP";
          uses apply-advanced;
          leaf-list group {
            type string;
            description "Configure diversity association group";
            max-elements 8;
            ordered-by user;
          }
          leaf shortest-path-first {
            type empty;
            description "Enable priority computation";
          }
        }
        container te-policy-association {
          description "Configure te policy association for LSP";
          uses apply-advanced;
          leaf-list group {
            type string;
            description "Configure te policy association group";
            max-elements 8;
            ordered-by user;
          }
        }
      }
      leaf associate-backup-pe-groups {
        type empty;
        description "Associate this LSP with backup-pe groups";
      }
      leaf egress-protection {
        type empty;
        description "Use this LSP for egress protection data transport";
      }
      leaf transport-class {
        type string;
        description "Transport class this LSP belongs to";
      }
    }
    container deselect-on-bandwidth-failure {
      description "Deselect active path if it cannot meet the bandwidth constraint";
      presence "enable deselect-on-bandwidth-failure";
      uses apply-advanced;
      leaf tear-lsp {
        type empty;
        description "Bring down active path when all paths fail to reserve required bandwidth";
      }
    }
    container track-igp-metric {
      description "Track IGP metric for LSP install prefixes";
      uses apply-advanced;
      leaf install-v4-prefixes {
        type empty;
        description "Track IGP metric for IPV4 prefixes";
      }
      leaf install-v6-prefixes {
        type empty;
        description "Track IGP metric for IPV6 prefixes";
      }
    }
    list container-label-switched-path {
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Name of container-lsp";
      }
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable MPLS container-label-switched path";
          }
        }
      }
      leaf description {
        type string {
          length "1 .. 80";
        }
        description "Text description of label-switched path";
      }
      container label-switched-path-template {
        description "Template for dynamic point-to-point LSP parameters";
        uses apply-advanced;
        choice dynamic-template {
          case case_1 {
            leaf template-name {
              type string {
                length "1 .. 64";
              }
              description "Name of point-to-point LSP template";
            }
          }
          case case_2 {
            leaf default-template {
              type empty;
              description "Use default parameters";
            }
          }
        }
      }
      leaf to {
        type "jt:ipv4addr";
        description "Address of egress router";
      }
      leaf suffix {
        type string {
          length "1 .. 64";
        }
        description "Suffix to generate names of members of container LSP";
      }
      container splitting-merging {
        description "Do splitting and merging";
        uses apply-advanced;
        leaf maximum-member-lsps {
          type int32 {
            range "1 .. 64";
          }
          description "Maximum number of LSPs";
        }
        leaf minimum-member-lsps {
          type int32 {
            range "1 .. 64";
          }
          description "Minimum number of LSPs";
        }
        leaf splitting-bandwidth {
          type string;
          description "Maximum bandwidth threshold for splitting";
          units bps;
        }
        leaf merging-bandwidth {
          type string;
          description "Minimum bandwidth threshold for merging";
          units bps;
        }
        leaf maximum-signaling-bandwidth {
          type string;
          description "Maximum bandwidth for signaling during normalization";
          units bps;
        }
        leaf minimum-signaling-bandwidth {
          type string;
          description "Minimum bandwidth for signaling during normalization";
          units bps;
        }
        leaf splitting-merging-threshold {
          type uint32 {
            range "0 .. 100";
          }
          default "10";
          description "Change in aggregate LSP utilization to trigger splitting or merging";
          units percent;
        }
        container normalization {
          description "Do normalization";
          uses apply-advanced;
          leaf normalize-interval {
            type uint32 {
              range "300 .. 315360000";
            }
            default "86400";
            description "Time to normalize container LSP";
            units seconds;
          }
          leaf failover-normalization {
            type empty;
            description "Do pre-mature normalization in case some LSPs go down before next normalization";
          }
          leaf no-incremental-normalize {
            type empty;
            description "Do not normalize unless all LSPs are successfully signaled";
          }
          leaf normalization-retry-duration {
            type uint32 {
              range "1 .. 86400";
            }
            description "Time before retrying the container LSP normalization";
            units seconds;
          }
          leaf normalization-retry-limits {
            type uint32 {
              range "1 .. 1000";
            }
            description "Maximum number of times to retry container LSP normalization";
          }
          leaf no-normalize-same-members {
            type empty;
            description "Do not normalize when we are not splitting or merging member LSPs";
          }
        }
        container sampling {
          description "Sampling information";
          uses apply-advanced;
          leaf cut-off-threshold {
            type uint32 {
              range "0 .. 100";
            }
            default "0";
            description "Cut-off percentile to remove outliers from aggregate samples";
          }
          choice sampling-mode {
            case case_1 {
              leaf use-average-aggregate {
                type empty;
                description "Use average of the samples";
              }
            }
            case case_2 {
              leaf use-percentile {
                type uint32 {
                  range "0 .. 100";
                }
                default "100";
                description "Use a percentile of the samples";
              }
            }
          }
        }
      }
      container lsp-external-controller {
        description "External path computing entity";
        uses apply-advanced;
        leaf ctrler_name {
          type string;
          description "Name of the external path computing entity";
        }
        leaf te-metric-bound {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "Maximum metric value, a path can have, for the metric-type TE";
        }
        leaf igp-metric-bound {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "Maximum metric value, a path can have, for the metric-type IGP";
        }
        leaf delay-metric-bound {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "Maximum metric value, a path can have, for the metric-type delay variation";
        }
        container diversity-association {
          description "Configure diversity association for LSP";
          uses apply-advanced;
          leaf-list group {
            type string;
            description "Configure diversity association group";
            max-elements 8;
            ordered-by user;
          }
          leaf shortest-path-first {
            type empty;
            description "Enable priority computation";
          }
        }
        container te-policy-association {
          description "Configure te policy association for LSP";
          uses apply-advanced;
          leaf-list group {
            type string;
            description "Configure te policy association group";
            max-elements 8;
            ordered-by user;
          }
        }
      }
    }
    list transit-lsp-association {
      description "Transit label switch path assoication";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Name of transit assocation LSP group";
      }
      uses apply-advanced;
      leaf lsp-name-1 {
        type string;
        description "Name of assocation LSP 1";
      }
      leaf from-1 {
        type "jt:ipv4addr";
        description "Address of associated LSP 1";
      }
      leaf lsp-name-2 {
        type string;
        description "Name of assocation LSP 2";
      }
      leaf from-2 {
        type "jt:ipv4addr";
        description "Address of associated LSP 2";
      }
    }
    list path {
      description "Route of a label-switched path";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Name of label-switched path";
      }
      uses apply-advanced;
      list path-list {
        description "List of routers in the label-switched path";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Address of next system in path";
        }
        leaf abstract {
          type empty;
          description "Next system in path is abstract";
        }
        choice loose_strict_none {
          case case_1 {
            leaf loose {
              type empty;
              description "Next hop might not be adjacent";
            }
          }
          case case_2 {
            leaf loose-link {
              type empty;
              description "Next hop link might not be adjacent";
            }
          }
          case case_3 {
            leaf strict {
              type empty;
              description "Next hop must be adjacent";
            }
          }
        }
      }
    }
    list constituent-list {
      description "MPLS constituent list for abstract hops";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Constituent list name";
      }
      uses apply-advanced;
      leaf-list srlg {
        type string;
        description "SRLG Name";
        max-elements 16;
        ordered-by user;
      }
      leaf-list admin-group {
        type string;
        description "Administrative groups";
        max-elements 16;
        ordered-by user;
      }
      leaf-list admin-group-extended {
        type string;
        description "Extended administrative groups";
        max-elements 16;
        ordered-by user;
      }
    }
    list abstract-hop {
      description "MPLS abstract hop";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Abstract hop name";
      }
      uses apply-advanced;
      leaf operator {
        type enumeration {
          enum AND {
            description "AND";
          }
          enum OR {
            description "OR";
          }
        }
        description "Operation among constituent lists";
      }
      list constituent-list {
        description "Building abstract hop using constituent lists";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Constituent list name";
        }
        uses apply-advanced;
        choice list-type {
          case case_1 {
            leaf include-any-list {
              type empty;
              description "Include any";
            }
          }
          case case_2 {
            leaf include-all-list {
              type empty;
              description "Include all";
            }
          }
          case case_3 {
            leaf exclude-any-list {
              type empty;
              description "Exclude any";
            }
          }
          case case_4 {
            leaf exclude-all-list {
              type empty;
              description "Exclude all";
            }
          }
        }
      }
    }
    container egress-protection {
      description "Egress router protection";
      uses apply-advanced;
      list context-identifier {
        description "Context identifier";
        key name;
        leaf name {
          type "jt:ipv4addr";
          description "IP address";
        }
        uses apply-advanced;
        choice context-type {
          case case_1 {
            leaf primary {
              type empty;
              description "Primary";
            }
          }
          case case_2 {
            leaf protector {
              type empty;
              description "Protector";
            }
          }
        }
        leaf metric {
          type uint32 {
            range "2 .. 16777215";
          }
          description "IGP metric";
        }
        leaf advertise-mode {
          type enumeration {
            enum stub-proxy {
              description "Proxy";
            }
            enum stub-alias {
              description "Alias";
            }
          }
          description "Advertise mode";
        }
        leaf-list admin-group {
          type string;
          description "Administrative groups";
          ordered-by user;
        }
      }
      container traceoptions {
        description "Trace options for egress-protection";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum state {
                description "Trace state transitions";
              }
              enum route {
                description "Trace route transitions";
              }
              enum error {
                description "Trace error conditions";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
        }
      }
    }
    container label-range {
      description "MPLS labels ranges";
      uses apply-advanced;
      list lsi-label-range {
        description "LSI-label-range";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_start";
        }
        leaf range-end {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_end";
        }
      }
      list dynamic-label-range {
        description "Dynamic-label-range";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_start";
        }
        leaf range-end {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_end";
        }
      }
      list block-label-range {
        description "Block-label-range";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_start";
        }
        leaf range-end {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_end";
        }
      }
      list srgb-label-range {
        description "SRGB-label-range";
        key name;
        max-elements 1;
        ordered-by user;
        leaf name {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_start";
        }
        leaf range-end {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_end";
        }
      }
      leaf label-limit {
        type uint32;
        description "Limit for the number of concurrent active labels";
      }
      list static-label-range {
        description "Static-label-range";
        key name;
        ordered-by user;
        leaf name {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_start";
        }
        leaf range-end {
          type uint32 {
            range "16 .. 1048575";
          }
          description "Label_range_end";
        }
      }
    }
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable MPLS";
        }
      }
    }
    container label-history {
      description "MPLS label history recording";
      presence "enable label-history";
      uses apply-advanced;
      leaf max-entries {
        type uint32;
        description "Limit for the number of history entry per label";
      }
    }
    container traceoptions {
      description "Trace options for MPLS";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum connection {
              description "Trace CCC activity";
            }
            enum connection-detail {
              description "Trace CCC activity in detail";
            }
            enum cspf {
              description "Trace CSPF computation";
            }
            enum cspf-node {
              description "Trace nodes visited during CSPF";
            }
            enum cspf-link {
              description "Trace links visited during CSPF";
            }
            enum cspf-abstract {
              description "Trace abstract hop based CSPF details";
            }
            enum state {
              description "Trace state transitions";
            }
            enum error {
              description "Trace error conditions";
            }
            enum lsping {
              description "Trace LSP ping packets received";
            }
            enum graceful-restart {
              description "Trace graceful-restart-related events";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum nsr-synchronization-detail {
              description "Trace NSR synchronization events in detail";
            }
            enum static {
              description "Trace static label-switched path";
            }
            enum egress-protection {
              description "Trace egress protection events";
            }
            enum all {
              description "Trace everything";
            }
            enum autobw-state {
              description "Trace autobandwidth events in mpls trace";
            }
            enum externally-controlled-lsp {
              description "Trace externally controlled LSP events in mpls trace";
            }
            enum ted-import {
              description "Trace leaking TED entries into lsdist.0 table";
            }
            enum ted-export {
              description "Trace leaking of entries from lsdist.0 table into TED";
            }
            enum lsp-history {
              description "Trace LSP history events";
            }
            enum abstract-hop {
              description "Trace abstract hop related events";
            }
            enum remote-pce {
              description "Trace cPCE events in mpls trace";
            }
          }
        }
      }
    }
    leaf ipv6-tunneling {
      type empty;
      description "Allow MPLS LSPs to be used for tunneling IPv6 traffic";
    }
    list interface {
      description "MPLS interface options";
      key name;
      ordered-by user;
      uses juniper-protocols-mpls-interface;
    }
    list static-label-switched-path {
      description "Static label-switched path";
      key name;
      ordered-by user;
      leaf name {
        type string {
          length "1 .. 64";
        }
        description "Name of path";
      }
      uses apply-advanced;
      choice lsp-type {
        case case_1 {
          container bypass {
            description "Bypass ingress label-switched path";
            uses apply-advanced;
            leaf bandwidth {
              type string;
              description "Bandwidth to reserve";
              units bps;
            }
            leaf description {
              type string {
                length "1 .. 80";
              }
              description "Text description of label-switched path";
            }
            leaf next-hop {
              type "jt:ipaddr-or-interface";
              description "IPv4 or IPv6 address or interface of next-hop router";
            }
            leaf next-table {
              type string;
              description "Next-table for lookup";
            }
            leaf push {
              type uint32 {
                range "0 .. 1048575";
              }
              description "Label to push";
            }
            leaf to {
              type "jt:ipaddr";
              description "Address of egress router";
            }
          }
        }
        case case_2 {
          list transit {
            description "Transit label-switched path";
            key name;
            ordered-by user;
            leaf name {
              type uint32 {
                range "16 .. 1048575";
              }
              description "Incoming label value";
            }
            uses apply-advanced;
            leaf bandwidth {
              type string;
              description "Bandwidth to reserve";
              units bps;
            }
            leaf description {
              type string {
                length "1 .. 80";
              }
              description "Text description of label-switched path";
            }
            container link-protection {
              description "Bypass link protection";
              leaf bypass-name {
                type string {
                  length "1 .. 64";
                }
                description "Bypass label-switched path name";
              }
            }
            leaf next-hop {
              type "jt:ipaddr-or-interface";
              description "IPv4 or IPv6 address or interface of next-hop router";
            }
            leaf member-interface {
              type "jt:interface-unit";
              description "AE member interface name";
            }
            container node-protection {
              description "Bypass node protection";
              leaf bypass-name {
                type string {
                  length "1 .. 64";
                }
                description "Bypass label-switched path name";
              }
              leaf next-next-label {
                type uint32 {
                  range "0 .. 1048575";
                }
                description "Label expected by next-next-hop";
              }
            }
            choice label-action {
              case case_1 {
                leaf swap {
                  type uint32 {
                    range "0 .. 1048575";
                  }
                  description "Swap top label with this label";
                }
              }
              case case_2 {
                leaf pop {
                  type empty;
                  description "Pop the top label";
                }
              }
              case case_3 {
                leaf stitch {
                  type empty;
                  description "Swap top label with the resolved LSP";
                }
              }
            }
          }
        }
        case case_3 {
          container ingress {
            description "Ingress LSR configuration for a static LSP";
            uses apply-advanced;
            leaf bandwidth {
              type string;
              description "Bandwidth to reserve";
              units bps;
            }
            leaf class-of-service {
              type int32 {
                range "0 .. 7";
              }
              description "Class-of-service value";
            }
            leaf description {
              type string {
                length "1 .. 80";
              }
              description "Text description of label-switched path";
            }
            list install {
              description "Install prefix";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv4prefix";
                description "Destination prefix";
              }
              leaf active {
                type empty;
                description "Install prefix into forwarding table";
              }
            }
            leaf metric {
              type uint32 {
                range "1 .. 16777215";
              }
              description "Metric value";
            }
            leaf next-hop {
              type "jt:ipv4addr-or-interface";
              description "IPv4 address or interface of next-hop router";
            }
            container link-protection {
              description "Bypass link protection";
              leaf bypass-name {
                type string {
                  length "1 .. 64";
                }
                description "Bypass label-switched path name";
              }
            }
            container node-protection {
              description "Bypass node protection";
              leaf bypass-name {
                type string {
                  length "1 .. 64";
                }
                description "Bypass label-switched path name";
              }
              leaf next-next-label {
                type uint32 {
                  range "0 .. 1048575";
                }
                description "Label expected by next-next-hop";
              }
            }
            leaf no-install-to-address {
              type empty;
              description "Don't install host route 'to' address into routing tables";
            }
            container policing {
              description "Traffic policing for this LSP";
              leaf filter {
                type string;
                description "Name of filter to use for policing LSP traffic";
              }
              leaf no-auto-policing {
                type empty;
                description "Turn off automatic policing for this LSP";
              }
            }
            leaf preference {
              type uint32;
              description "Preference value";
            }
            leaf to {
              type "jt:ipv4addr";
              description "Address of egress router";
            }
            leaf push {
              type uint32 {
                range "0 .. 1048575";
              }
              description "Label to push";
            }
            leaf entropy-label {
              type empty;
              description "Enable entropy label";
            }
          }
        }
        case case_4 {
          container segment {
            description "Segment for segment routing";
            uses apply-advanced;
            leaf sid-label {
              type uint32 {
                range "16 .. 1048575";
              }
              description "Segment identifier (SID) label";
            }
            leaf description {
              type string {
                length "1 .. 80";
              }
              description "Text description of label-switched path";
            }
            leaf next-hop {
              type "jt:ipv4addr-or-interface";
              description "IPv4 address or interface of next-hop router";
            }
            choice label-action {
              case case_1 {
                leaf swap {
                  type uint32 {
                    range "0 .. 1048575";
                  }
                  description "Swap the SID label to this label";
                }
              }
              case case_2 {
                leaf pop {
                  type empty;
                  description "Pop the SID label";
                }
              }
            }
          }
        }
      }
    }
  }
  grouping juniper-protocols-mpls-interface {
    leaf name {
      type "jt:interface-name";
      description "Interface name";
    }
    uses apply-advanced;
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable MPLS on this interface";
        }
      }
    }
    leaf-list srlg {
      type string;
      description "SRLG Name";
      max-elements 64;
      ordered-by user;
    }
    leaf always-mark-connection-protection-tlv {
      type empty;
      description "Mark connection protection tlv on this interface";
    }
    leaf switch-away-lsps {
      type empty;
      description "Switch away protected LSPs to their bypass LSPs";
    }
    leaf-list admin-group {
      type string;
      description "Administrative groups";
      ordered-by user;
    }
    leaf-list admin-group-extended {
      type string;
      description "Extended administrative groups";
      ordered-by user;
    }
    container static {
      description "Static label-switch path related configurations";
      uses apply-advanced;
      leaf protection-revert-time {
        type uint32 {
          range "0 .. 65535";
        }
        description "FRR revert wait time, 0 means disable";
        units seconds;
      }
    }
  }
  grouping juniper-protocols-msdp {
    uses apply-advanced;
    leaf data-encapsulation {
      type enumeration {
        enum disable {
          description "Disable data encapsulation";
        }
        enum enable {
          description "Enable data encapsulation";
        }
      }
      description "Set encapsulation of data packets";
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_inet_type;
    }
    container active-source-limit {
      description "Limit the number of active sources accepted";
      uses apply-advanced;
      leaf maximum {
        type uint32 {
          range "1 .. 1000000";
        }
        default "25000";
        description "Maximum number of active sources accepted";
      }
      leaf threshold {
        type uint32 {
          range "1 .. 1000000";
        }
        default "24000";
        description "RED threshold for active source acceptance";
      }
      leaf log-warning {
        type uint32 {
          range "1 .. 100";
        }
        default "100";
        description "Percentage of maximum at which to start generating warnings";
      }
      leaf log-interval {
        type uint32 {
          range "6 .. 32767";
        }
        description "Time between log messages";
      }
    }
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable MSDP";
        }
      }
    }
    leaf-list export {
      type "jt:policy-algebra";
      description "Export policy";
      ordered-by user;
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Import policy";
      ordered-by user;
    }
    leaf local-address {
      type "jt:ipv4addr";
      description "Local address";
    }
    container traceoptions {
      description "Trace options for MSDP";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum packets {
              description "Trace all MSDP packets";
            }
            enum route {
              description "Trace routing information";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum source-active {
              description "Trace source-active messages";
            }
            enum source-active-request {
              description "Trace source-active request messages";
            }
            enum source-active-response {
              description "Trace source-active response messages";
            }
            enum keepalive {
              description "Trace keepalive messages";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    list peer {
      description "Configure an MSDP peer";
      key name;
      ordered-by user;
      leaf name {
        type "jt:ipv4addr";
        description "Peer address";
      }
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable MSDP";
          }
        }
      }
      leaf-list export {
        type "jt:policy-algebra";
        description "Export policy";
        ordered-by user;
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
      leaf local-address {
        type "jt:ipv4addr";
        description "Local address";
      }
      container traceoptions {
        description "Trace options for MSDP";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum packets {
                description "Trace all MSDP packets";
              }
              enum route {
                description "Trace routing information";
              }
              enum nsr-synchronization {
                description "Trace NSR synchronization events";
              }
              enum source-active {
                description "Trace source-active messages";
              }
              enum source-active-request {
                description "Trace source-active request messages";
              }
              enum source-active-response {
                description "Trace source-active response messages";
              }
              enum keepalive {
                description "Trace keepalive messages";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      container active-source-limit {
        description "Limit the number of active sources accepted";
        uses apply-advanced;
        leaf maximum {
          type uint32 {
            range "1 .. 1000000";
          }
          default "25000";
          description "Maximum number of active sources accepted";
        }
        leaf threshold {
          type uint32 {
            range "1 .. 1000000";
          }
          default "24000";
          description "RED threshold for active source acceptance";
        }
        leaf log-warning {
          type uint32 {
            range "1 .. 100";
          }
          default "100";
          description "Percentage of maximum at which to start generating warnings";
        }
        leaf log-interval {
          type uint32 {
            range "6 .. 32767";
          }
          description "Time between log messages";
        }
      }
      leaf keep-alive {
        type uint32 {
          range "10 .. 60";
        }
        description "Time limit for sending out periodic keep alive to peer";
        units seconds;
      }
      leaf hold-time {
        type uint32 {
          range "15 .. 150";
        }
        description "Max time to terminating a peer for having not received any message from ";
        units seconds;
      }
      leaf sa-hold-time {
        type uint32 {
          range "75 .. 300";
        }
        description "Max time for holding a sa message before timing out";
        units seconds;
      }
      leaf default-peer {
        type empty;
        description "Default RPF peer";
      }
      leaf authentication-key {
        type string {
          length "1 .. 126";
        }
        description "MD5 authentication key";
      }
    }
    leaf keep-alive {
      type uint32 {
        range "10 .. 60";
      }
      description "Time limit for sending out periodic keep alive to peer";
      units seconds;
    }
    leaf hold-time {
      type uint32 {
        range "15 .. 150";
      }
      description "Max time to terminating a peer for having not received any message from ";
      units seconds;
    }
    leaf sa-hold-time {
      type uint32 {
        range "75 .. 300";
      }
      description "Max time for holding a sa message before timing out";
      units seconds;
    }
    list source {
      description "Configure parameters for each source";
      key name;
      ordered-by user;
      leaf name {
        type "jt:ipprefix";
        description "Source address or prefix";
      }
      uses apply-advanced;
      container active-source-limit {
        description "Limit the number of active sources accepted";
        uses apply-advanced;
        leaf maximum {
          type uint32 {
            range "1 .. 1000000";
          }
          default "25000";
          description "Maximum number of active sources accepted";
        }
        leaf threshold {
          type uint32 {
            range "1 .. 1000000";
          }
          default "24000";
          description "RED threshold for active source acceptance";
        }
        leaf log-warning {
          type uint32 {
            range "1 .. 100";
          }
          default "100";
          description "Percentage of maximum at which to start generating warnings";
        }
        leaf log-interval {
          type uint32 {
            range "6 .. 32767";
          }
          description "Time between log messages";
        }
      }
    }
    list group {
      description "Configure MSDP peer groups";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "MSDP peer group name";
      }
      uses apply-advanced;
      leaf mode {
        type enumeration {
          enum standard {
            description "Use standard MSDP source-active flooding rules";
          }
          enum mesh-group {
            description "Group peers are mesh group members";
          }
        }
        default "standard";
        description "MSDP group source-active flooding mode";
      }
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable MSDP";
          }
        }
      }
      leaf-list export {
        type "jt:policy-algebra";
        description "Export policy";
        ordered-by user;
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
      leaf local-address {
        type "jt:ipv4addr";
        description "Local address";
      }
      container traceoptions {
        description "Trace options for MSDP";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum packets {
                description "Trace all MSDP packets";
              }
              enum route {
                description "Trace routing information";
              }
              enum nsr-synchronization {
                description "Trace NSR synchronization events";
              }
              enum source-active {
                description "Trace source-active messages";
              }
              enum source-active-request {
                description "Trace source-active request messages";
              }
              enum source-active-response {
                description "Trace source-active response messages";
              }
              enum keepalive {
                description "Trace keepalive messages";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      list peer {
        description "Configure an MSDP peer";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4addr";
          description "Peer address";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable MSDP";
            }
          }
        }
        leaf-list export {
          type "jt:policy-algebra";
          description "Export policy";
          ordered-by user;
        }
        leaf-list import {
          type "jt:policy-algebra";
          description "Import policy";
          ordered-by user;
        }
        leaf local-address {
          type "jt:ipv4addr";
          description "Local address";
        }
        container traceoptions {
          description "Trace options for MSDP";
          uses apply-advanced;
          container file {
            description "Trace file options";
            leaf filename {
              type string {
                length "1 .. 1024";
              }
              description "Name of file in which to write trace information";
            }
            leaf replace {
              type empty;
              description "Replace trace file rather than appending to it";
              status deprecated;
            }
            leaf size {
              type string;
              description "Maximum trace file size";
            }
            leaf files {
              type uint32 {
                range "2 .. 1000";
              }
              default "10";
              description "Maximum number of trace files";
            }
            leaf no-stamp {
              type empty;
              description "Do not timestamp trace file";
              status deprecated;
            }
            choice world-readable-choice {
              leaf world-readable {
                type empty;
                description "Allow any user to read the log file";
              }
              leaf no-world-readable {
                type empty;
                description "Don't allow any user to read the log file";
              }
            }
          }
          list flag {
            description "Tracing parameters";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum packets {
                  description "Trace all MSDP packets";
                }
                enum route {
                  description "Trace routing information";
                }
                enum nsr-synchronization {
                  description "Trace NSR synchronization events";
                }
                enum source-active {
                  description "Trace source-active messages";
                }
                enum source-active-request {
                  description "Trace source-active request messages";
                }
                enum source-active-response {
                  description "Trace source-active response messages";
                }
                enum keepalive {
                  description "Trace keepalive messages";
                }
                enum normal {
                  description "Trace normal events";
                }
                enum general {
                  description "Trace general events";
                }
                enum state {
                  description "Trace state transitions";
                }
                enum policy {
                  description "Trace policy processing";
                }
                enum task {
                  description "Trace routing protocol task processing";
                }
                enum timer {
                  description "Trace routing protocol timer processing";
                }
                enum all {
                  description "Trace everything";
                }
              }
            }
            leaf send {
              type empty;
              description "Trace transmitted packets";
            }
            leaf receive {
              type empty;
              description "Trace received packets";
            }
            leaf detail {
              type empty;
              description "Trace detailed information";
            }
            leaf disable {
              type empty;
              description "Disable this trace flag";
            }
          }
        }
        container active-source-limit {
          description "Limit the number of active sources accepted";
          uses apply-advanced;
          leaf maximum {
            type uint32 {
              range "1 .. 1000000";
            }
            default "25000";
            description "Maximum number of active sources accepted";
          }
          leaf threshold {
            type uint32 {
              range "1 .. 1000000";
            }
            default "24000";
            description "RED threshold for active source acceptance";
          }
          leaf log-warning {
            type uint32 {
              range "1 .. 100";
            }
            default "100";
            description "Percentage of maximum at which to start generating warnings";
          }
          leaf log-interval {
            type uint32 {
              range "6 .. 32767";
            }
            description "Time between log messages";
          }
        }
        leaf keep-alive {
          type uint32 {
            range "10 .. 60";
          }
          description "Time limit for sending out periodic keep alive to peer";
          units seconds;
        }
        leaf hold-time {
          type uint32 {
            range "15 .. 150";
          }
          description "Max time to terminating a peer for having not received any message from ";
          units seconds;
        }
        leaf sa-hold-time {
          type uint32 {
            range "75 .. 300";
          }
          description "Max time for holding a sa message before timing out";
          units seconds;
        }
        leaf default-peer {
          type empty;
          description "Default RPF peer";
        }
        leaf authentication-key {
          type string {
            length "1 .. 126";
          }
          description "MD5 authentication key";
        }
      }
    }
  }
  grouping juniper-protocols-mstp {
    uses apply-advanced;
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable MSTP";
        }
      }
    }
    leaf bpdu-destination-mac-address {
      type enumeration {
        enum provider-bridge-group {
          description "802.1ad provider bridge group address";
        }
      }
      description "Destination MAC address in the spanning tree BPDUs";
    }
    leaf configuration-name {
      type string {
        length "1 .. 32";
      }
      description "Configuration name (part of MST configuration identifier)";
    }
    leaf revision-level {
      type uint16;
      description "Revision level (part of MST configuration identifier)";
    }
    leaf max-hops {
      type uint16 {
        range "1 .. 255";
      }
      description "Maximum number of hops";
    }
    leaf max-age {
      type uint16 {
        range "6 .. 40";
      }
      description "Maximum age of received protocol bpdu";
      units seconds;
    }
    leaf hello-time {
      type uint16 {
        range "1 .. 10";
      }
      description "Time interval between configuration BPDUs";
      units seconds;
    }
    leaf forward-delay {
      type uint16 {
        range "4 .. 30";
      }
      description "Time spent in listening or learning state";
      units seconds;
    }
    leaf system-identifier {
      type "jt:mac-unicast";
      description "Sytem identifier to represent this node";
    }
    container traceoptions {
      description "Tracing options for debugging protocol operation";
      uses stp-trace-options;
    }
    leaf bridge-priority {
      type string;
      description "Priority of the bridge (in increments of 4k - 0,4k,8k,..60k)";
    }
    leaf backup-bridge-priority {
      type string;
      description "Priority of the bridge (in increments of 4k - 4k,8k,..60k)";
    }
    leaf bpdu-block-on-edge {
      type empty;
      description "Block BPDU on all interfaces configured as edge (BPDU Protect)";
    }
    leaf vpls-flush-on-topology-change {
      type empty;
      description "Enable VPLS MAC flush on root protected CE interface receving topology change";
    }
    leaf priority-hold-time {
      type uint16 {
        range "1 .. 255";
      }
      description "Hold time before switching to primary priority when core domain becomes up";
      units seconds;
    }
    list system-id {
      description "System ID to IP mapping";
      key name;
      ordered-by user;
      uses system-id-ip-map;
    }
    list interface {
      description "Interface options";
      key name;
      uses mstp-interface;
    }
    list msti {
      description "Per-MSTI options";
      key name;
      leaf name {
        type int32 {
          range "1 .. 64";
        }
      }
      uses apply-advanced;
      leaf bridge-priority {
        type string;
        description "Priority of the bridge (in increments of 4k - 0,4k,8k,..60k)";
      }
      leaf backup-bridge-priority {
        type string;
        description "Priority of the bridge (in increments of 4k - 4k,8k,..60k)";
      }
      leaf-list vlan {
        type string;
        description "VLAN ID or VLAN ID range [1..4094]";
        ordered-by user;
      }
      list interface {
        description "Interface options";
        key name;
        uses mstp-interface;
      }
    }
  }
  grouping juniper-protocols-mvpn {
    description "BGP-MVPN configuration";
    uses apply-advanced;
    container traceoptions {
      description "Trace options for BGP-MVPN";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum error {
              description "Trace errors";
            }
            enum nlri {
              description "Trace MVPN advertisements";
            }
            enum topology {
              description "Trace MVPN topology changes";
            }
            enum tunnel {
              description "Trace provider tunnel events";
            }
            enum umh {
              description "Trace Upstream Multicast Hop (UMH) events";
            }
            enum intra-as-ad {
              description "Trace MVPN intra-AS auto discovery routes";
            }
            enum inter-as-ad {
              description "Trace MVPN inter-AS auto discovery routes";
            }
            enum spmsi-ad {
              description "Trace MVPN SPMSI auto discovery routes";
            }
            enum leaf-ad {
              description "Trace MVPN leaf auto discovery routes";
            }
            enum source-active {
              description "Trace MVPN source active routes";
            }
            enum cmcast-join {
              description "Trace MVPN c-multicast join routes";
            }
            enum mdt-safi-ad {
              description "Trace MVPN MDT SAFI auto discovery routes";
            }
            enum mvpn-limit {
              description "Trace MVPN spmsi and cmcast limit events";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    container autodiscovery-only {
      description "Use MVPN exclusively for PE router autodiscovery";
      status deprecated;
      uses apply-advanced;
      container intra-as {
        description "Intra-AS autodiscovery options";
        uses apply-advanced;
        leaf inclusive {
          type empty;
          description "Inclusive provider tunnel autodiscovery";
        }
      }
    }
    container family {
      description "BGP-MVPN address family";
      uses apply-advanced;
      container any {
        description "BGP-MVPN properties for all families";
        presence "enable any";
        uses apply-advanced;
        leaf disable {
          type empty;
          description "Disable all families";
        }
      }
      container inet {
        description "IPv4 BGP-MVPN properties";
        uses apply-advanced;
        container autodiscovery-only {
          description "Use MVPN exclusively for PE router autodiscovery";
          uses apply-advanced;
          container intra-as {
            description "Intra-AS autodiscovery options";
            uses apply-advanced;
            leaf inclusive {
              type empty;
              description "Inclusive provider tunnel autodiscovery";
            }
          }
        }
        leaf disable {
          type empty;
          description "Disable family IPv4";
        }
      }
      container inet6 {
        description "IPv6 BGP-MVPN properties";
        presence "enable inet6";
        uses apply-advanced;
        container autodiscovery-only {
          description "Use MVPN exclusively for PE router autodiscovery";
          uses apply-advanced;
          container intra-as {
            description "Intra-AS autodiscovery options";
            uses apply-advanced;
            leaf inclusive {
              type empty;
              description "Inclusive provider tunnel autodiscovery";
            }
          }
        }
        leaf disable {
          type empty;
          description "Disable family IPv6";
        }
      }
    }
    choice sender-receiver-site-choice {
      case case_1 {
        leaf receiver-site {
          type empty;
          description "MVPN instance has sites only with multicast receivers";
        }
      }
      case case_2 {
        leaf sender-site {
          type empty;
          description "MVPN instance has sites only with multicast sources";
        }
      }
    }
    leaf unicast-umh-election {
      type empty;
      description "Upstream Multicast Hop election based on unicast route preference";
    }
    container static-umh {
      description "Upstream Multicast Hop election based on static configuration";
      uses apply-advanced;
      leaf primary {
        type "jt:ipv4addr";
        description "Primary Upstream Multicast Hop";
      }
      leaf backup {
        type "jt:ipv4addr";
        description "Secondary Upstream Multicast Hop";
      }
      choice source-tree_choice {
        case case_1 {
          leaf source-tree {
            type empty;
            description "Mandatory attribute - static-umh applies only to MVPN source-tree c-multicast joins";
          }
        }
      }
    }
    leaf cmcast-joins-limit-inet {
      type uint32 {
        range "0 .. 15000";
      }
      description "Maximum number of cmcast entries for v4";
    }
    leaf cmcast-joins-limit-inet6 {
      type uint32 {
        range "0 .. 15000";
      }
      description "Maximum number of cmcast entries for v6";
    }
    container mvpn-mode {
      description "MVPN mode of operation";
      uses apply-advanced;
      choice mode {
        case case_1 {
          container rpt-spt {
            description "MVPN works in multicast RPT and SPT mode";
            presence "enable rpt-spt";
            uses apply-advanced;
            leaf spt-switch-timer {
              type uint32 {
                range "0 .. 60";
              }
              description "Timeout before a PE router switches between RPT and SPT";
              units seconds;
            }
          }
        }
        case case_2 {
          container spt-only {
            description "MVPN works in multicast SPT only mode (default mode)";
            presence "enable spt-only";
            uses apply-advanced;
            container source-active-advertisement {
              description "Attributes associated with advertising Source-Active A-D routes";
              uses apply-advanced;
              leaf dampen {
                type uint32 {
                  range "1 .. 30";
                }
                description "Time to wait before re-advertising source-active route";
                units minutes;
              }
              leaf min-rate {
                type string;
                description "Minimum traffic rate required to advertise Source-Active route";
                units "bits per second";
              }
            }
            leaf convert-sa-to-msdp {
              type empty;
              description "Turn on MVPN SA route to MSDP SA conversion";
            }
          }
        }
      }
    }
    container route-target {
      description "Configure route-targets for MVPN routes";
      uses apply-advanced;
      container import-target {
        description "Target communities used when importing routes";
        uses apply-advanced;
        container unicast {
          description "Use the same target community as configured for unicast";
          presence "enable unicast";
          choice receiver-sender-target-choice {
            case case_1 {
              leaf receiver {
                type empty;
                description "Target community used when importing receiver site routes";
              }
            }
            case case_2 {
              leaf sender {
                type empty;
                description "Target community used when importing sender site routes";
              }
            }
          }
        }
        container target {
          description "Target community";
          presence "enable target";
          leaf target-value {
            type string;
          }
          choice receiver-sender-target-choice {
            case case_1 {
              leaf receiver {
                type empty;
                description "Target community used when importing receiver site routes";
              }
            }
            case case_2 {
              leaf sender {
                type empty;
                description "Target community used when importing sender site routes";
              }
            }
          }
        }
      }
      container export-target {
        description "Target communities used when exporting routes";
        uses apply-advanced;
        leaf unicast {
          type empty;
          description "Use the same target community as configured for unicast";
        }
        leaf target {
          type string;
          description "Target community";
        }
      }
    }
    container mvpn-join-load-balance {
      description "MVPN Join Load Balancing Algorithm";
      uses apply-advanced;
      choice algorithm {
        case case_1 {
          container bytewise-xor-hash {
            description "Upstream selection using bytewise XOR hash";
            presence "enable bytewise-xor-hash";
          }
        }
      }
    }
    leaf install-discard {
      type empty;
      description "Install MVPN discard forwarding entries";
    }
    leaf sender-based-rpf {
      type empty;
      description "Forward multicast traffic only from a selected sender PE";
    }
    container hot-root-standby {
      description "MVPN live-live - hot root standby";
      uses apply-advanced;
      choice tree {
        case case_1 {
          container source-tree {
            description "MVPN live-live - hot root standby for source tree";
            presence "enable source-tree";
          }
        }
      }
      container min-rate {
        description "Minimum traffic rate for the provider tunnel below which switchover is initiated (in bps)";
        uses apply-advanced;
        leaf rate {
          type string;
          description "Minium traffic rate for the provider tunnel below which switchover is initiated (in bps)";
          units "bits per second";
        }
        leaf revert-delay {
          type uint32 {
            range "0 .. 20";
          }
          description "Time to delay updating of multicast routes to allow for multicast convergence";
          units seconds;
        }
      }
    }
    leaf hierarchical-nexthop {
      type empty;
      description "Enable hierarchical nexthop usage";
    }
    leaf no-nexthop-sharing-for-selective-tunnel {
      type empty;
      description "Disable Tunnel nexthops from getting shared for selective tunnel";
    }
    container inter-region-template {
      description "MVPN inter-region tunnel mapping template";
      uses apply-advanced;
      list template {
        description "Define a inter-region template";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "MVPN Template Name";
        }
        uses apply-advanced;
        list region {
          description "BGP peer group names used as region";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Region name";
          }
          uses apply-advanced;
          choice tunnel-type {
            case case_1 {
              container rsvp-te {
                description "RSVP-TE point-to-multipoint LSP for flooding";
                uses apply-advanced;
                choice static-or-dynamic {
                  case case_1 {
                    leaf static-lsp {
                      type string;
                      description "Name of point-to-multipoint LSP";
                    }
                  }
                  case case_2 {
                    container label-switched-path-template {
                      description "Template for dynamic point-to-multipoint LSP parameters";
                      uses apply-advanced;
                      choice dynamic-template {
                        case case_1 {
                          leaf template-name {
                            type string;
                            description "Name of point-to-multipoint LSP template";
                          }
                        }
                        case case_2 {
                          leaf default-template {
                            type empty;
                            description "Use default parameters";
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            case case_2 {
              container ldp-p2mp {
                description "LDP point-to-multipoint LSP for flooding";
                presence "enable ldp-p2mp";
              }
            }
            case case_3 {
              container ingress-replication {
                description "Ingress replication tunnel";
                uses apply-advanced;
                leaf create-new-ucast-tunnel {
                  type empty;
                  description "Create new unicast tunnel for ingress replication";
                }
                container label-switched-path {
                  description "Point-to-point LSP unicast tunnel";
                  presence "enable label-switched-path";
                  uses apply-advanced;
                  container label-switched-path-template {
                    description "Template for dynamic point-to-point LSP parameters";
                    uses apply-advanced;
                    choice dynamic-template {
                      case case_1 {
                        leaf template-name {
                          type string;
                          description "Name of point-to-point LSP template";
                        }
                      }
                      case case_2 {
                        leaf default-template {
                          type empty;
                          description "Use default parameters";
                        }
                      }
                    }
                  }
                }
              }
            }
            case case_4 {
              leaf incoming {
                type empty;
                description "Same as incoming provider tunnel";
              }
            }
          }
        }
        container all-regions {
          description "Used for all regions not specified";
          uses apply-advanced;
          choice tunnel-type {
            case case_1 {
              container rsvp-te {
                description "RSVP-TE point-to-multipoint LSP for flooding";
                uses apply-advanced;
                choice static-or-dynamic {
                  case case_1 {
                    leaf static-lsp {
                      type string;
                      description "Name of point-to-multipoint LSP";
                    }
                  }
                  case case_2 {
                    container label-switched-path-template {
                      description "Template for dynamic point-to-multipoint LSP parameters";
                      uses apply-advanced;
                      choice dynamic-template {
                        case case_1 {
                          leaf template-name {
                            type string;
                            description "Name of point-to-multipoint LSP template";
                          }
                        }
                        case case_2 {
                          leaf default-template {
                            type empty;
                            description "Use default parameters";
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            case case_2 {
              container ldp-p2mp {
                description "LDP point-to-multipoint LSP for flooding";
                presence "enable ldp-p2mp";
              }
            }
            case case_3 {
              container ingress-replication {
                description "Ingress replication tunnel";
                uses apply-advanced;
                leaf create-new-ucast-tunnel {
                  type empty;
                  description "Create new unicast tunnel for ingress replication";
                }
                container label-switched-path {
                  description "Point-to-point LSP unicast tunnel";
                  presence "enable label-switched-path";
                  uses apply-advanced;
                  container label-switched-path-template {
                    description "Template for dynamic point-to-point LSP parameters";
                    uses apply-advanced;
                    choice dynamic-template {
                      case case_1 {
                        leaf template-name {
                          type string;
                          description "Name of point-to-point LSP template";
                        }
                      }
                      case case_2 {
                        leaf default-template {
                          type empty;
                          description "Use default parameters";
                        }
                      }
                    }
                  }
                }
              }
            }
            case case_4 {
              leaf incoming {
                type empty;
                description "Same as incoming provider tunnel";
              }
            }
          }
        }
      }
    }
    leaf source-redundancy {
      type empty;
      description "Assume all the sources for a particular group is sending same data";
    }
    container umh-selection-additional-input {
      description "Additional parameters to consider during UMH";
      uses apply-advanced;
      leaf source-active-preference {
        type empty;
        description "Use the preference set in the source active route";
      }
      leaf tunnel-status {
        type empty;
        description "Use the RSVP tunnel status";
      }
    }
  }
  grouping juniper-protocols-mvrp {
    description "MVRP Configuration";
    uses apply-advanced;
    container traceoptions {
      description "Tracing options for MVRP";
      uses mrp-trace-options;
    }
    leaf join-timer {
      type uint16 {
        range "100 .. 500";
      }
      default "200";
      description "Join timer interval";
      units milliseconds;
    }
    leaf leave-timer {
      type uint16 {
        range "300 .. 1000";
      }
      default "800";
      description "Leave timer interval";
      units milliseconds;
    }
    leaf leaveall-timer {
      type uint16 {
        range "10 .. 60";
      }
      default "10";
      description "Leaveall timer interval";
      units seconds;
    }
    leaf no-dynamic-vlan {
      type empty;
      description "Disable dynamic VLAN creation";
    }
    leaf no-attribute-length-in-pdu {
      type empty;
      description "No attribute length while sending pdu ";
    }
    leaf bpdu-destination-mac-address {
      type enumeration {
        enum provider-bridge-group {
          description "802.1ad provider bridge group address";
        }
      }
      description "Destination MAC address in the MVRP BPDUs";
    }
    list interface {
      description "Configure interface options";
      key name;
      ordered-by user;
      leaf name {
        type "jt:interface-device";
        description "Interface name";
      }
      uses apply-advanced;
      leaf join-timer {
        type uint16 {
          range "100 .. 500";
        }
        description "Join timer interval";
        units milliseconds;
      }
      leaf leave-timer {
        type uint16 {
          range "300 .. 1000";
        }
        description "Leave timer interval";
        units milliseconds;
      }
      leaf leaveall-timer {
        type uint16 {
          range "10 .. 60";
        }
        description "Leaveall timer interval";
        units seconds;
      }
      leaf point-to-point {
        type empty;
        description "Port is point to point";
      }
      leaf registration {
        type enumeration {
          enum normal {
            description "Normal registration mode";
          }
          enum restricted {
            description "Restricted registration mode";
          }
          enum forbidden {
            description "Forbidden registration mode";
          }
        }
        default "normal";
        description "Registration mode";
      }
    }
  }
  grouping juniper-protocols-openflow {
    uses apply-advanced;
    list switch {
      description "OpenFlow switch";
      key name;
      max-elements 1;
      ordered-by user;
      leaf name {
        type string {
          length "1 .. 64";
        }
        description "Switch name";
      }
      uses apply-advanced;
      container default-action {
        description "Action for packets that not have a matching flow entry";
        uses apply-advanced;
        choice drop-pktin {
          case case_1 {
            leaf drop {
              type empty;
              description "Drop all packets that do not have a matching flow entry";
            }
          }
          case case_2 {
            leaf packet-in {
              type empty;
              description "Send packets to client if no matching flow entry";
            }
          }
        }
      }
      list interfaces {
        description "Interfaces configured for use with Openflow";
        key name;
        ordered-by user;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        leaf port-id {
          type int32 {
            range "1 .. 32640";
          }
          description "Openflow port ID";
        }
      }
      leaf purge-flow-timer {
        type uint32 {
          range "0 .. 300";
        }
        description "Purge timer value for invalid flows";
        units seconds;
      }
      container controller {
        description "OpenFlow controller's IP address, port and protocol";
        uses apply-advanced;
        container protocol {
          description "Protocol type for controller connection";
          uses apply-advanced;
          container tcp {
            description "Set protocol type to 'TCP' (default)";
            uses apply-advanced;
            leaf port {
              type int32 {
                range "1024 .. 65535";
              }
              description "Controller's port number (default 6633)";
            }
          }
        }
        leaf role {
          type enumeration {
            enum equal {
              description "Set role to 'equal'";
            }
          }
          description "Controller role";
        }
        leaf address {
          type "jt:ipaddr";
          description "Controller's IPv4 address";
        }
        leaf id {
          type uint32;
          description "Controller id";
        }
      }
    }
    container traceoptions {
      description "OpenFlow switch daemon trace options";
      uses apply-advanced;
      leaf no-remote-trace {
        type empty;
        description "Disable remote tracing";
      }
      container file {
        description "Trace file information";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "3";
          description "Maximum number of trace files";
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
        leaf match {
          type "jt:regular-expression";
          description "Regular expression for lines to be logged";
        }
      }
      list flag {
        description "Tracing flag parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum switch {
              description "Trace openflow switch events";
            }
            enum configuration {
              description "Trace openflow configuration events";
            }
            enum flow {
              description "Trace openflow flow events";
            }
            enum filter {
              description "Trace openflow filter events";
            }
            enum function {
              description "Trace openflow function entry/exit events";
            }
            enum packet-io {
              description "Trace openflow packet in/out events";
            }
            enum statistics {
              description "Trace openflow statistics events";
            }
            enum interface {
              description "Trace openflow interface events";
            }
            enum packets {
              description "Trace openflow packets";
            }
            enum barrier {
              description "Trace openflow barrier events";
            }
            enum nh {
              description "Trace openflow next-hop events";
            }
            enum group {
              description "Trace openflow group events";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
      }
    }
  }
  grouping juniper-protocols-ospf {
    uses apply-advanced;
    list topology {
      description "Topology parameters";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Topology name";
      }
      uses apply-advanced;
      leaf disable {
        type empty;
        description "Disable this topology";
      }
      leaf topology-id {
        type uint8 {
          range "32 .. 127";
        }
        description "Topology identifier";
      }
      leaf overload {
        type empty;
        description "Set the overload mode (repel transit traffic)";
      }
      leaf rib-group {
        type string;
        description "Routing table group for importing routes";
      }
      container spf-options {
        description "Configure options for SPF";
        uses apply-advanced;
        container microloop-avoidance {
          description "Configure microloop avoidance mechanism";
          uses apply-advanced;
          container post-convergence-path {
            description "Temporarily install post-convergence path for routes potentially affected by microloops";
            presence "enable post-convergence-path";
            uses apply-advanced;
            leaf delay {
              type uint32 {
                range "500 .. 60000";
              }
              description "Time after which temporary post-convergence paths are removed";
              units milliseconds;
            }
            leaf maximum-labels {
              type uint32 {
                range "2 .. 8";
              }
              description "Maximum number of labels installed for post-convergence paths";
            }
          }
        }
        leaf delay {
          type uint32 {
            range "50 .. 8000";
          }
          description "Time to wait before running an SPF";
          units milliseconds;
        }
        leaf holddown {
          type uint32 {
            range "2000 .. 20000";
          }
          description "Time to hold down before running an SPF";
          units milliseconds;
        }
        leaf rapid-runs {
          type uint32 {
            range "1 .. 10";
          }
          description "Number of maximum rapid SPF runs before holddown";
        }
        leaf no-ignore-our-externals {
          type empty;
          description "Do not ignore self-generated external and NSSA LSAs";
        }
      }
      container backup-spf-options {
        description "Configure options for backup SPF";
        uses apply-advanced;
        container remote-backup-calculation {
          description "Calculate Remote LFA backup nexthops";
          presence "enable remote-backup-calculation";
          uses apply-advanced;
          container pq-nodes-nearest-to-source {
            description "PQ nodes selection based upon nearest to source";
            uses apply-advanced;
            leaf percent {
              type uint32 {
                range "10 .. 100";
              }
              description "Selection percentage for nearest to source";
            }
          }
        }
        container use-post-convergence-lfa {
          description "Calculate post-convergence backup paths";
          presence "enable use-post-convergence-lfa";
          uses apply-advanced;
          leaf maximum-labels {
            type uint32 {
              range "2 .. 8";
            }
            description "Maximum number of labels installed for post-convergence paths";
          }
          leaf maximum-backup-paths {
            type uint32 {
              range "1 .. 8";
            }
            description "Maximum number of equal-cost post-convergence paths installed";
          }
        }
        leaf use-source-packet-routing {
          type empty;
          description "Use spring backup paths for inet.0 routes";
        }
        leaf disable {
          type empty;
          description "Do not run backup SPF";
        }
        leaf no-install {
          type empty;
          description "Do not install backup nexthops into the RIB";
        }
        leaf downstream-paths-only {
          type empty;
          description "Use only downstream backup paths";
        }
        container per-prefix-calculation {
          description "Calculate backup nexthops for non-best prefix originators";
          uses apply-advanced;
          leaf stubs {
            type empty;
            description "Per prefix calculation for stubs only";
          }
          leaf summary {
            type empty;
            description "Per prefix calculation for summary originators only";
          }
          leaf externals {
            type empty;
            description "Per prefix calculation for externals";
          }
          leaf all {
            type empty;
            description "Per prefix calculation for all";
          }
        }
        leaf node-link-degradation {
          type empty;
          description "Degrade to link protection when nodelink protection not available";
        }
      }
      leaf prefix-export-limit {
        type uint32 {
          range "0 .. 4294967295";
        }
        description "Maximum number of prefixes that can be exported";
      }
    }
    container spf-options {
      description "Configure options for SPF";
      uses apply-advanced;
      container microloop-avoidance {
        description "Configure microloop avoidance mechanism";
        uses apply-advanced;
        container post-convergence-path {
          description "Temporarily install post-convergence path for routes potentially affected by microloops";
          presence "enable post-convergence-path";
          uses apply-advanced;
          leaf delay {
            type uint32 {
              range "500 .. 60000";
            }
            description "Time after which temporary post-convergence paths are removed";
            units milliseconds;
          }
          leaf maximum-labels {
            type uint32 {
              range "2 .. 8";
            }
            description "Maximum number of labels installed for post-convergence paths";
          }
        }
      }
      leaf delay {
        type uint32 {
          range "50 .. 8000";
        }
        description "Time to wait before running an SPF";
        units milliseconds;
      }
      leaf holddown {
        type uint32 {
          range "2000 .. 20000";
        }
        description "Time to hold down before running an SPF";
        units milliseconds;
      }
      leaf rapid-runs {
        type uint32 {
          range "1 .. 10";
        }
        description "Number of maximum rapid SPF runs before holddown";
      }
      leaf no-ignore-our-externals {
        type empty;
        description "Do not ignore self-generated external and NSSA LSAs";
      }
    }
    container backup-spf-options {
      description "Configure options for backup SPF";
      uses apply-advanced;
      container remote-backup-calculation {
        description "Calculate Remote LFA backup nexthops";
        presence "enable remote-backup-calculation";
        uses apply-advanced;
        container pq-nodes-nearest-to-source {
          description "PQ nodes selection based upon nearest to source";
          uses apply-advanced;
          leaf percent {
            type uint32 {
              range "10 .. 100";
            }
            description "Selection percentage for nearest to source";
          }
        }
      }
      container use-post-convergence-lfa {
        description "Calculate post-convergence backup paths";
        presence "enable use-post-convergence-lfa";
        uses apply-advanced;
        leaf maximum-labels {
          type uint32 {
            range "2 .. 8";
          }
          description "Maximum number of labels installed for post-convergence paths";
        }
        leaf maximum-backup-paths {
          type uint32 {
            range "1 .. 8";
          }
          description "Maximum number of equal-cost post-convergence paths installed";
        }
      }
      leaf use-source-packet-routing {
        type empty;
        description "Use spring backup paths for inet.0 routes";
      }
      leaf disable {
        type empty;
        description "Do not run backup SPF";
      }
      leaf no-install {
        type empty;
        description "Do not install backup nexthops into the RIB";
      }
      leaf downstream-paths-only {
        type empty;
        description "Use only downstream backup paths";
      }
      container per-prefix-calculation {
        description "Calculate backup nexthops for non-best prefix originators";
        uses apply-advanced;
        leaf stubs {
          type empty;
          description "Per prefix calculation for stubs only";
        }
        leaf summary {
          type empty;
          description "Per prefix calculation for summary originators only";
        }
        leaf externals {
          type empty;
          description "Per prefix calculation for externals";
        }
        leaf all {
          type empty;
          description "Per prefix calculation for all";
        }
      }
      leaf node-link-degradation {
        type empty;
        description "Degrade to link protection when nodelink protection not available";
      }
    }
    container traffic-engineering {
      description "Configure traffic engineering attributes";
      presence "enable traffic-engineering";
      uses apply-advanced;
      leaf no-topology {
        type empty;
        description "Disable dissemination of TE link-state topology information";
      }
      leaf multicast-rpf-routes {
        type empty;
        description "Install routes for multicast RPF checks into inet.2";
      }
      leaf l3-unicast-topology {
        type empty;
        description "Download IGP topology into TED";
      }
      container ignore-lsp-metrics {
        description "Ignore label-switched path metrics when doing shortcuts";
        presence "enable ignore-lsp-metrics";
        uses apply-advanced;
        leaf unconfigured-only {
          type empty;
          description "Ignore lsp metrics for unconfigured only";
        }
      }
      container shortcuts {
        description "Use label-switched paths as next hops, if possible";
        presence "enable shortcuts";
        uses apply-advanced;
        leaf ignore-lsp-metrics {
          type empty;
          description "Ignore label-switched path metrics when doing shortcuts";
          status deprecated;
        }
        leaf lsp-metric-into-summary {
          type empty;
          description "Advertise LSP metric into summary LSAs";
        }
        list family {
          description "Address family specific traffic-engineering attributes";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum inet {
                description "IPv4 family";
              }
              enum inet-mpls {
                description "IPv4-MPLS family";
              }
            }
          }
          uses apply-advanced;
        }
      }
      leaf advertise-unnumbered-interfaces {
        type empty;
        description "Advertise unnumbered interfaces";
      }
      leaf credibility-protocol-preference {
        type empty;
        description "TED protocol credibility follows protocol preference";
      }
      container advertisement {
        description "Advertise TE parameters even if RSVP is not turned on";
        uses apply-advanced;
        leaf always {
          type empty;
          description "Advertise TE parameters in TE LSAs";
        }
      }
      container tunnel-source-protocol {
        description "Protocols from which to pick label-switched paths";
        uses apply-advanced;
        container rsvp {
          description "Pick label-switched paths from rsvp";
          presence "enable rsvp";
          uses apply-advanced;
          leaf preference {
            type uint32 {
              range "1 .. 255";
            }
            description "Preference for label-switched paths from this protocol";
          }
        }
        container spring-te {
          description "Pick label-switched paths from spring-te";
          presence "enable spring-te";
          uses apply-advanced;
          leaf preference {
            type uint32 {
              range "1 .. 255";
            }
            description "Preference for label-switched paths from this protocol";
          }
        }
      }
    }
    container source-packet-routing {
      description "Enable source packet routing (SPRING)";
      presence "enable source-packet-routing";
      uses apply-advanced;
      container adjacency-segment {
        description "Attributes for adjacency segments in spring";
        uses apply-advanced;
        leaf hold-time {
          type uint32 {
            range "180000 .. 900000";
          }
          description "Retain time of Adjacency segment after isolating from an interface";
        }
      }
      leaf-list prefix-segment {
        type "jt:policy-algebra";
        description "Prefix Segment policy";
        ordered-by user;
      }
      leaf explicit-null {
        type empty;
        description "Set E and P bits in all Prefix SID advertisements";
      }
      container node-segment {
        description "Enable support for Node segments in SPRING";
        presence "enable node-segment";
        uses apply-advanced;
        leaf ipv4-index {
          type uint32 {
            range "0 .. 199999";
          }
          description "Set ipv4 node segment index";
        }
        leaf index-range {
          type uint32 {
            range "32 .. 16385";
          }
          description "Set range of node segment indices allowed";
        }
      }
      container srgb {
        description "Set the SRGB global block in SPRING";
        leaf start-label {
          type uint32;
          description "Start range for SRGB label block";
        }
        leaf index-range {
          type uint32;
          description "Index to the SRGB start label block";
        }
      }
      leaf mapping-server {
        type string;
        description "Mapping server name";
      }
      leaf install-prefix-sid-for-best-route {
        type empty;
        description "For best route install a exact prefix sid route";
      }
      leaf ldp-stitching {
        type empty;
        description "Enable SR to LDP stitching";
      }
      leaf-list flex-algorithm {
        type uint32 {
          range "128 .. 255";
        }
        description "Flex-algorithms we would like to participate in";
        max-elements 16;
      }
      leaf strict-asla-based-flex-algorithm {
        type empty;
        description "Flex-Algorithm to ignore links not having ASLA sub-TLVs";
      }
      container sensor-based-stats {
        description "Configure sensor based stats in SPRING";
        uses apply-advanced;
        container per-interface-per-member-link {
          description "Configure sensor based stats per nexthop";
          leaf ingress {
            type empty;
            description "Enable sensor based stats on ingress interface";
          }
          leaf egress {
            type empty;
            description "Enable sensor based stats on egress interface";
          }
        }
        container per-sid {
          description "Configure sensor based stats per spring route";
          leaf ingress {
            type empty;
            description "Enable sensor based stats for per-sid ingress accounting";
          }
          leaf egress {
            type empty;
            description "Enable sensor based stats for IP-MPLS egress accounting";
          }
        }
      }
    }
    list area {
      description "Configure an OSPF area";
      key name;
      ordered-by user;
      leaf name {
        type "jt:areaid";
        description "Area ID";
      }
      uses apply-advanced;
      choice stub-option {
        case case_1 {
          container stub {
            description "Configure a stub area";
            presence "enable stub";
            leaf default-metric {
              type uint32 {
                range "1 .. 16777215";
              }
              description "Metric for the default route in this stub area";
            }
            choice summaries-choice {
              leaf summaries {
                type empty;
                description "Flood summary LSAs into this stub area";
              }
              leaf no-summaries {
                type empty;
                description "Don't flood summary LSAs into this stub area";
              }
            }
          }
        }
        case case_2 {
          container nssa {
            description "Configure a not-so-stubby area";
            presence "enable nssa";
            uses apply-advanced;
            container default-lsa {
              description "Configure a default LSA";
              presence "enable default-lsa";
              uses apply-advanced;
              leaf default-metric {
                type uint32 {
                  range "1 .. 16777215";
                }
                description "Metric for the default route in this area";
              }
              leaf metric-type {
                type uint32 {
                  range "1 .. 2";
                }
                description "External metric type for the default type 7 LSA";
              }
              leaf type-7 {
                type empty;
                description "Flood type 7 default LSA if no-summaries is configured";
              }
            }
            leaf default-metric {
              type uint32 {
                range "1 .. 16777215";
              }
              description "Metric for the default route in this area";
              status deprecated;
            }
            leaf metric-type {
              type uint32 {
                range "1 .. 2";
              }
              description "External metric type for the default type 7 LSA";
              status deprecated;
            }
            choice summaries-choice {
              leaf summaries {
                type empty;
                description "Flood summary LSAs into this NSSA area";
              }
              leaf no-summaries {
                type empty;
                description "Don't flood summary LSAs into this NSSA area";
              }
            }
            list area-range {
              description "Configure NSSA area ranges";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipprefix";
                description "Range to summarize NSSA routes in this area";
              }
              uses apply-advanced;
              leaf restrict {
                type empty;
                description "Restrict advertisement of this area range";
              }
              leaf exact {
                type empty;
                description "Enforce exact match for advertisement of this area range";
              }
              container override-metric {
                description "Override the dynamic metric for this area-range";
                presence "enable override-metric";
                uses apply-advanced;
                leaf metric {
                  type uint32 {
                    range "1 .. 16777215";
                  }
                  description "Metric value";
                }
                leaf metric-type {
                  type uint32 {
                    range "1 .. 2";
                  }
                  default "1";
                  description "Set the metric type for the override metric";
                }
              }
            }
          }
        }
      }
      list area-range {
        description "Configure area ranges";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipprefix";
          description "Range to summarize routes in this area";
        }
        uses apply-advanced;
        leaf restrict {
          type empty;
          description "Restrict advertisement of this area range";
        }
        leaf exact {
          type empty;
          description "Enforce exact match for advertisement of this area range";
        }
        leaf override-metric {
          type uint32 {
            range "1 .. 16777215";
          }
          description "Override the dynamic metric for this area-range";
        }
      }
      leaf-list network-summary-export {
        type "jt:policy-algebra";
        description "Export policy for Type 3 Summary LSAs";
        ordered-by user;
      }
      leaf-list network-summary-import {
        type "jt:policy-algebra";
        description "Import policy for Type 3 Summary LSAs";
        ordered-by user;
      }
      leaf-list inter-area-prefix-export {
        type "jt:policy-algebra";
        description "Export policy for Inter Area Prefix LSAs";
        ordered-by user;
      }
      leaf-list inter-area-prefix-import {
        type "jt:policy-algebra";
        description "Import policy for Inter Area Prefix LSAs";
        ordered-by user;
      }
      leaf authentication-type {
        type enumeration {
          enum none {
            description "No authentication";
            status deprecated;
          }
          enum simple {
            description "Simple password authentication";
            status deprecated;
          }
          enum md5 {
            description "MD5 authentication";
            status deprecated;
          }
        }
        description "Authentication type";
        status deprecated;
      }
      list virtual-link {
        description "Configure virtual links";
        key "neighbor-id transit-area";
        ordered-by user;
        leaf neighbor-id {
          type "jt:ipv4addr";
          description "Router ID of a virtual neighbor";
        }
        leaf transit-area {
          type "jt:areaid";
          description "Transit area in common with virtual neighbor";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable this virtual link";
            }
          }
        }
        leaf retransmit-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Retransmission interval (seconds)";
        }
        leaf transit-delay {
          type uint32 {
            range "1 .. 65535";
          }
          description "Transit delay (seconds)";
        }
        leaf hello-interval {
          type uint32 {
            range "1 .. 255";
          }
          description "Hello interval (seconds)";
        }
        leaf dead-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Dead interval (seconds)";
        }
        leaf mtu {
          type uint32 {
            range "128 .. 65535";
          }
          description "Maximum OSPF packet size";
        }
        choice auth {
          case case_1 {
            container authentication {
              uses juniper-ospf-authentication;
            }
          }
          case case_2 {
            container authentication-key {
              description "Authentication key";
              status deprecated;
              leaf keyname {
                type "jt:unreadable";
                description "Authentication key value";
              }
              leaf key-id {
                type uint32 {
                  range "0 .. 255";
                }
                description "Key ID for MD5 authentication";
              }
            }
          }
        }
        leaf demand-circuit {
          type empty;
          description "Interface functions as a demand circuit";
        }
        leaf flood-reduction {
          type empty;
          description "Enable flood reduction";
        }
        leaf no-neighbor-down-notification {
          type empty;
          description "Don't inform other protocols about neighbor down events";
        }
        leaf ipsec-sa {
          type string {
            length "1 .. 32";
          }
          description "IPSec security association name";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Topology name";
          }
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable this topology";
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
      }
      list sham-link-remote {
        description "Configure parameters for remote sham link endpoint";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipaddr";
          description "Remote sham link endpoint address";
        }
        uses apply-advanced;
        leaf metric {
          type uint16 {
            range "1 .. 65535";
          }
          description "Sham link metric";
        }
        leaf ipsec-sa {
          type string {
            length "1 .. 32";
          }
          description "IPSec security association name";
        }
        leaf demand-circuit {
          type empty;
          description "Interface functions as a demand circuit";
        }
        leaf flood-reduction {
          type empty;
          description "Enable flood reduction";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Topology name";
          }
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable this topology";
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
      }
      list interface {
        description "Include an interface in this area";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4addr-or-interface";
          description "Interface name";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable OSPF on this interface";
            }
          }
        }
        leaf interface-type {
          type enumeration {
            enum nbma {
              description "Nonbroadcast multiaccess";
            }
            enum p2mp {
              description "Point-to-multipoint NBMA";
            }
            enum p2p {
              description "Point-to-point";
            }
            enum p2mp-over-lan {
              description "Point-to-multipoint over LAN mode";
            }
          }
          description "Type of interface";
        }
        choice protection-type {
          case case_1 {
            leaf link-protection {
              type empty;
              description "Protect interface from link faults only";
            }
          }
          case case_2 {
            leaf node-link-protection {
              type empty;
              description "Protect interface from both link and node faults";
            }
          }
        }
        leaf no-eligible-backup {
          type empty;
          description "Not eligible to backup traffic from protected interfaces";
        }
        leaf no-eligible-remote-backup {
          type empty;
          description "Not eligible for Remote-LFA backup traffic from protected interfaces";
        }
        container passive {
          description "Do not run OSPF, but advertise it";
          presence "enable passive";
          uses apply-advanced;
          container traffic-engineering {
            description "Advertise TE link information";
            uses apply-advanced;
            leaf remote-node-id {
              type "jt:ipaddr";
              description "Remote address of the link";
            }
            leaf remote-node-router-id {
              type "jt:ipv4addr";
              description "TE Router-ID of the remote node";
            }
          }
        }
        leaf secondary {
          type empty;
          description "Treat interface as secondary";
        }
        leaf own-router-lsa {
          type empty;
          description "Generate a separate router LSA for this interface";
        }
        container bandwidth-based-metrics {
          description "Configure bandwidth based metrics";
          uses apply-advanced;
          list bandwidth {
            description "Bandwidth threshold";
            key name;
            leaf name {
              type string;
            }
            leaf metric {
              type uint16 {
                range "1 .. 65535";
              }
              description "Metric associated with specified bandwidth";
            }
          }
        }
        leaf metric {
          type uint16 {
            range "1 .. 65535";
          }
          description "Interface metric";
        }
        leaf priority {
          type uint32 {
            range "0 .. 255";
          }
          description "Designated router priority";
        }
        leaf retransmit-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Retransmission interval (seconds)";
        }
        leaf transit-delay {
          type uint32 {
            range "1 .. 65535";
          }
          description "Transit delay (seconds)";
        }
        leaf hello-interval {
          type uint32 {
            range "1 .. 255";
          }
          description "Hello interval (seconds)";
        }
        leaf dead-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Dead interval (seconds)";
        }
        leaf mtu {
          type uint32 {
            range "128 .. 65535";
          }
          description "Maximum OSPF packet size";
        }
        choice auth {
          case case_1 {
            container authentication {
              uses juniper-ospf-authentication;
            }
          }
          case case_2 {
            container authentication-key {
              description "Authentication key";
              status deprecated;
              leaf keyname {
                type "jt:unreadable";
                description "Authentication key value";
              }
              leaf key-id {
                type uint32 {
                  range "0 .. 255";
                }
                description "Key ID for MD5 authentication";
              }
            }
          }
        }
        leaf demand-circuit {
          type empty;
          description "Interface functions as a demand circuit";
        }
        leaf flood-reduction {
          type empty;
          description "Enable flood reduction";
        }
        leaf no-neighbor-down-notification {
          type empty;
          description "Don't inform other protocols about neighbor down events";
        }
        leaf ipsec-sa {
          type string {
            length "1 .. 32";
          }
          description "IPSec security association name";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Topology name";
          }
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable this topology";
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
        leaf transmit-interval {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "OSPF packet transmit interval (milliseconds)";
          status deprecated;
        }
        container bfd-liveness-detection {
          description "Bidirectional Forwarding Detection options";
          uses apply-advanced;
          leaf version {
            type enumeration {
              enum 0 {
                description "BFD version 0 (deprecated)";
              }
              enum 1 {
                description "BFD version 1";
              }
              enum automatic {
                description "Choose BFD version automatically";
              }
            }
            default "automatic";
            description "BFD protocol version number";
          }
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
          leaf minimum-transmit-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            status deprecated;
            units milliseconds;
          }
          leaf minimum-receive-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum receive interval";
            units milliseconds;
          }
          leaf multiplier {
            type uint32 {
              range "1 .. 255";
            }
            default "3";
            description "Detection time multiplier";
          }
          leaf inline-disable {
            type empty;
            description "Disable inline mode for this BFD session";
          }
          leaf pdu-size {
            type uint32 {
              range "24 .. 9000";
            }
            default "24";
            description "BFD transport protocol payload size";
          }
          choice adaptation-choice {
            case case_1 {
              leaf no-adaptation {
                type empty;
                description "Disable adaptation";
              }
            }
          }
          container transmit-interval {
            description "Transmit-interval options";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf threshold {
              type uint32;
              description "High transmit interval triggering a trap";
              units milliseconds;
            }
          }
          container detection-time {
            description "Detection-time options";
            uses apply-advanced;
            leaf threshold {
              type uint32;
              description "High detection-time triggering a trap";
              units milliseconds;
            }
          }
          container authentication {
            description "Authentication options";
            uses apply-advanced;
            leaf key-chain {
              type string;
              description "Key chain name";
            }
            leaf algorithm {
              type enumeration {
                enum simple-password {
                  description "Simple password";
                }
                enum keyed-md5 {
                  description "Keyed message Digest 5";
                }
                enum meticulous-keyed-md5 {
                  description "Meticulous keyed message Digest 5";
                }
                enum keyed-sha-1 {
                  description "Keyed secure hash algorithm (SHA1) ";
                }
                enum meticulous-keyed-sha-1 {
                  description "Meticulous keyed secure hash algorithm (SHA1) ";
                }
              }
              description "Algorithm name";
            }
            leaf loose-check {
              type empty;
              description "Verify authentication only if authentication is negotiated";
            }
          }
          container echo {
            description "Echo mode parameters";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "100 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
          }
          container echo-lite {
            description "Echo-lite more parameters";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "100 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
          }
          leaf full-neighbors-only {
            type empty;
            description "Setup BFD sessions only to Full neighbors";
          }
          leaf holddown-interval {
            type uint32 {
              range "0 .. 255000";
            }
            description "Time to hold the session-UP notification to the client";
            units milliseconds;
          }
        }
        leaf dynamic-neighbors {
          type empty;
          description "Learn neighbors dynamically on a p2mp interface";
        }
        leaf no-advertise-adjacency-segment {
          type empty;
          description "Do not advertise an adjacency segment for this interface";
        }
        list neighbor {
          description "NBMA neighbor";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "Address of neighbor";
          }
          leaf eligible {
            type empty;
            description "Eligible to be DR on an NBMA network";
          }
        }
        leaf poll-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Poll interval for NBMA interfaces";
        }
        leaf no-interface-state-traps {
          type empty;
          description "Do not send interface state change traps";
        }
        leaf strict-bfd {
          type empty;
          description "Enable strict bfd over this interface";
        }
        container post-convergence-lfa {
          description "Protect interface using post-convergence backup path";
          presence "enable post-convergence-lfa";
          uses apply-advanced;
          container node-protection {
            description "Compute backup path assuming node failure";
            presence "enable node-protection";
            uses apply-advanced;
            leaf cost {
              type uint16 {
                range "1 .. 65535";
              }
              description "Cost for node protection";
            }
          }
          leaf srlg-protection {
            type empty;
            description "Compute backup path assuming SRLG failure";
          }
          leaf fate-sharing-protection {
            type empty;
            description "Compute backup path assuming fate-sharing group failure";
          }
        }
        leaf te-metric {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "Traffic engineering metric";
        }
        container ldp-synchronization {
          description "Advertise maximum metric until LDP is operational";
          presence "enable ldp-synchronization";
          uses ldp-sync-obj;
        }
        container ipv4-adjacency-segment {
          description "Configure ipv4 adjacency segment";
          uses apply-advanced;
          container protected {
            description "Adjacency SID is eligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
          container unprotected {
            description "Adjacency SID uneligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
        }
        list lan-neighbor {
          description "Configuration specific to a LAN neighbor";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "Address of neighbor";
          }
          uses apply-advanced;
          container ipv4-adjacency-segment {
            description "Configure ipv4 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
        }
        leaf delay-metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "Delay metric";
          units microseconds;
        }
        container delay-measurement {
          description "Enable delay measurement";
          presence "enable delay-measurement";
          uses apply-advanced;
          leaf probe-interval {
            type uint32 {
              range "1 .. 255";
            }
            description "Probe interval";
            units seconds;
          }
          leaf probe-count {
            type uint32 {
              range "1 .. 15";
            }
            description "Probe count";
          }
          container advertisement {
            description "Delay advertisement";
            uses apply-advanced;
            container periodic {
              description "Periodic advertisement parameters";
              uses apply-advanced;
              leaf threshold {
                type uint32 {
                  range "0 .. 100";
                }
                description "Threshold";
                units percentage;
              }
              leaf interval {
                type uint32 {
                  range "30 .. 3600";
                }
                description "Interval";
                units seconds;
              }
            }
            container accelerated {
              description "Accelerated advertisement parameters";
              presence "enable accelerated";
              uses apply-advanced;
              leaf threshold {
                type uint32 {
                  range "0 .. 100";
                }
                description "Threshold";
                units percentage;
              }
            }
          }
        }
        container application-specific {
          description "Advertise application-specific TE attributes";
          uses apply-advanced;
          list attribute-group {
            description "Link attribute group name";
            key name;
            max-elements 1;
            ordered-by user;
            leaf name {
              type string;
              description "Link attribute group name";
            }
            uses apply-advanced;
            leaf te-metric {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Traffic engineering metric for this attribute group";
            }
            leaf-list admin-group {
              type string;
              description "Administrative groups for this attribute-group";
              max-elements 16;
              ordered-by user;
            }
            leaf delay-metric {
              type uint32 {
                range "0 .. 16777215";
              }
              description "Delay metric for this attribute-group";
              units microseconds;
            }
            leaf advertise-interface-delay {
              type empty;
              description "Use interface specific static/dynamic delay values as applicable in ASLA Sub-TLVs";
            }
            container application {
              description "Standard Applications part of this attribute-group";
              uses apply-advanced;
              leaf flex-algorithm {
                type empty;
                description "Set X flag in standard application bit mask";
              }
            }
          }
        }
      }
      leaf no-context-identifier-advertisement {
        type empty;
        description "Disable context identifier advertisments in this area";
      }
      list peer-interface {
        description "Configuration for peer interface";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Name of peer interface";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable OSPF on this control peer";
            }
          }
        }
        leaf retransmit-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Retransmission interval (seconds)";
        }
        leaf transit-delay {
          type uint32 {
            range "1 .. 65535";
          }
          description "Transit delay (seconds)";
        }
        leaf hello-interval {
          type uint32 {
            range "1 .. 255";
          }
          description "Hello interval (seconds)";
        }
        leaf dead-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Dead interval (seconds)";
        }
        leaf mtu {
          type uint32 {
            range "128 .. 65535";
          }
          description "Maximum OSPF packet size";
        }
        choice auth {
          case case_1 {
            container authentication {
              uses juniper-ospf-authentication;
            }
          }
          case case_2 {
            container authentication-key {
              description "Authentication key";
              status deprecated;
              leaf keyname {
                type "jt:unreadable";
                description "Authentication key value";
              }
              leaf key-id {
                type uint32 {
                  range "0 .. 255";
                }
                description "Key ID for MD5 authentication";
              }
            }
          }
        }
        leaf demand-circuit {
          type empty;
          description "Interface functions as a demand circuit";
        }
        leaf flood-reduction {
          type empty;
          description "Enable flood reduction";
        }
        leaf no-neighbor-down-notification {
          type empty;
          description "Don't inform other protocols about neighbor down events";
        }
      }
      leaf no-source-packet-routing {
        type empty;
        description "Disable SPRING in this area";
      }
      list context-identifier {
        description "Configure context identifier in support of edge protection";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4addr";
          description "Context identifier";
        }
        uses apply-advanced;
      }
      list label-switched-path {
        description "Configuration for advertisement of a label-switched path";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of label-switched path to be advertised";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable OSPF on this label-switched path";
            }
          }
        }
        leaf metric {
          type uint16 {
            range "1 .. 65535";
          }
          description "Interface metric";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Topology name";
          }
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable this topology";
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
      }
    }
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable OSPF";
        }
      }
    }
    container traceoptions {
      description "Trace options for OSPF";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum spf {
              description "Trace SPF calculations";
            }
            enum error {
              description "Trace errored packets";
            }
            enum event {
              description "Trace OSPF state machine events";
            }
            enum packet-dump {
              description "Dump the contents of selected packet types";
            }
            enum flooding {
              description "Trace LSA flooding";
            }
            enum lsa-analysis {
              description "Trace LSA analysis";
            }
            enum packets {
              description "Trace all OSPF packets";
            }
            enum hello {
              description "Trace hello packets";
            }
            enum database-description {
              description "Trace database description packets";
            }
            enum lsa-request {
              description "Trace LSA request packets";
            }
            enum lsa-update {
              description "Trace LSA update packets";
            }
            enum lsa-ack {
              description "Trace LSA acknowledgment packets";
            }
            enum ldp-synchronization {
              description "Trace synchronization between OSPF and LDP";
            }
            enum on-demand {
              description "Trace demand circuit extensions";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum graceful-restart {
              description "Trace graceful restart";
            }
            enum restart-signaling {
              description "Trace restart signaling";
            }
            enum traffic-statistics {
              description "Trace Segment Routing Traffic Statistics";
            }
            enum backup-spf {
              description "Trace backup SPF (LFA) specific events";
            }
            enum source-packet-routing {
              description "Trace source packet routing (SPRING) events";
            }
            enum post-convergence-lfa {
              description "Trace post-convergence-lfa related events";
            }
            enum flex-algorithm {
              description "Trace flex-algorithm related events";
            }
            enum rmopd {
              description "Trace rmopd interactions";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf prefix-export-limit {
      type uint32 {
        range "0 .. 4294967295";
      }
      description "Maximum number of prefixes that can be exported";
    }
    container rib-groups {
      description "Routing table groups for importing OSPF routes";
      uses apply-advanced;
      leaf inet {
        type string;
        description "Name of the IPv4/v6 routing table group";
      }
      leaf inet3 {
        type string;
        description "Name of the IPv4/v6 inet.3 routing table group";
      }
    }
    leaf job-stats {
      type empty;
      description "Collect job statistics";
    }
    container overload {
      description "Set the overload mode (repel transit traffic)";
      presence "enable overload";
      uses apply-advanced;
      leaf timeout {
        type uint32 {
          range "60 .. 3600";
        }
        description "Time after which overload mode is reset";
        units seconds;
      }
      leaf allow-route-leaking {
        type empty;
        description "Allow routes to be leaked when overload is configured";
      }
      leaf stub-network {
        type empty;
        description "Advertise Stub Network with maximum metric";
      }
      leaf intra-area-prefix {
        type empty;
        description "Advertise Intra Area Prefix with maximum metric";
      }
      leaf as-external {
        type empty;
        description "Advertise As External with maximum usable metric";
      }
    }
    container database-protection {
      description "Configure database protection attributes";
      presence "enable database-protection";
      uses apply-advanced;
      leaf maximum-lsa {
        type uint32 {
          range "1 .. 1000000";
        }
        description "Maximum allowed non self-generated LSAs";
      }
      leaf warning-only {
        type empty;
        description "Emit only a warning when LSA maximum limit is exceeded";
      }
      leaf warning-threshold {
        type uint8 {
          range "30 .. 100";
        }
        description "Percentage of LSA maximum above which to trigger warning";
        units percent;
      }
      leaf ignore-count {
        type uint8 {
          range "1 .. 32";
        }
        description "Maximum number of times to go into ignore state";
      }
      leaf ignore-time {
        type uint16 {
          range "30 .. 3600";
        }
        description "Time to stay in ignore state and ignore all neighbors";
        units seconds;
      }
      leaf reset-time {
        type uint32 {
          range "60 .. 86400";
        }
        description "Time after which the ignore count gets reset to zero";
        units seconds;
      }
    }
    container graceful-restart {
      description "Configure graceful restart attributes";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable OSPF graceful restart capability";
          }
        }
      }
      leaf restart-duration {
        type uint32 {
          range "1 .. 3600";
        }
        description "Time for all neighbors to become full";
        units seconds;
      }
      leaf notify-duration {
        type uint32 {
          range "1 .. 3600";
        }
        description "Time to send all max-aged grace LSAs";
        units seconds;
      }
      container helper-disable {
        description "Disable graceful restart helper capability";
        presence "enable helper-disable";
        uses apply-advanced;
        choice disable-choices {
          case case_1 {
            leaf standard {
              type empty;
              description "Disable helper-mode for rfc3623 based GR";
            }
          }
          case case_2 {
            leaf restart-signaling {
              type empty;
              description "Disable helper mode for restart-signaling ";
            }
          }
          case case_3 {
            leaf both {
              type empty;
              description "Disable helper mode for both the types of GR";
            }
          }
        }
      }
      leaf no-strict-lsa-checking {
        type empty;
        description "Do not abort graceful helper mode upon LSA changes";
      }
    }
    leaf route-type-community {
      type enumeration {
        enum iana {
          description "BGP extended community value used is 0x0306";
        }
        enum vendor {
          description "Vendor BGP extended community value used is 0x8000";
        }
      }
      description "Specify BGP extended community value to encode OSPF route type";
    }
    container domain-id {
      description "Configure domain ID";
      choice domain_id_or_disable {
        case case_1 {
          leaf domain-id {
            type string;
            description "Domain ID";
          }
        }
        case case_2 {
          leaf disable {
            type empty;
            description "Disable domain ID";
          }
        }
      }
    }
    choice domain_vpn_tag_or_disable {
      case case_1 {
        leaf domain-vpn-tag {
          type uint32 {
            range "0 .. 4294967295";
          }
          description "Domain VPN tag for external LSA";
        }
      }
      case case_2 {
        leaf no-domain-vpn-tag {
          type empty;
          description "Disable domain VPN tag";
        }
      }
    }
    leaf preference {
      type uint32;
      description "Preference of internal routes";
    }
    leaf external-preference {
      type uint32;
      description "Preference of external routes";
    }
    leaf labeled-preference {
      type uint32;
      description "Preference of labeled routes";
    }
    leaf-list export {
      type "jt:policy-algebra";
      description "Export policy";
      ordered-by user;
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Import policy (for external routes or setting priority)";
      ordered-by user;
    }
    leaf reference-bandwidth {
      type string;
      description "Bandwidth for calculating metric defaults";
    }
    leaf lsa-refresh-interval {
      type uint32 {
        range "25 .. 50";
      }
      default "50";
      description "LSA refresh interval (minutes)";
    }
    leaf spf-delay {
      type uint32 {
        range "50 .. 8000";
      }
      description "Time to wait before running an SPF";
      status deprecated;
      units milliseconds;
    }
    leaf no-rfc-1583 {
      type empty;
      description "Disable RFC1583 compatibility";
    }
    leaf forwarding-address-to-broadcast {
      type empty;
      description "Set forwarding address in Type 5 LSA in broadcast network";
    }
    choice nssa-abr-option {
      case case_1 {
        leaf no-nssa-abr {
          type empty;
          description "Disable full NSSA functionality at ABR";
        }
      }
    }
    container sham-link {
      description "Configure parameters for sham links";
      presence "enable sham-link";
      uses apply-advanced;
      leaf local {
        type "jt:ipaddr";
        description "Local sham link endpoint address";
      }
      leaf no-advertise-local {
        type empty;
        description "Don't advertise local sham link endpoint as stub in router LSA";
        status deprecated;
      }
    }
  }
  grouping juniper-ospf-authentication {
    description "Authentication information";
    uses apply-advanced;
    choice authentication-type {
      case case_1 {
        leaf simple-password {
          type "jt:unreadable";
          description "Authentication key";
        }
      }
      case case_2 {
        list md5 {
          description "MD5 authentication key";
          key name;
          ordered-by user;
          leaf name {
            type uint32 {
              range "0 .. 255";
            }
            description "Key ID for MD5 authentication";
          }
          leaf key {
            type "jt:unreadable";
            description "MD5 authentication key value";
          }
          leaf start-time {
            type "jt:time";
            description "Start time for key transmission (YYYY-MM-DD.HH:MM)";
          }
        }
      }
      case case_3 {
        list multi-active-md5 {
          description "Authentication Multiple active MD5 keys";
          key name;
          ordered-by user;
          leaf name {
            type uint32 {
              range "0 .. 255";
            }
            description "Key ID for MD5 authentication";
          }
          leaf key {
            type "jt:unreadable";
            description "MD5 authentication key value";
          }
          leaf delete-if-not-inuse {
            type empty;
            description "Delete this key if not in use";
          }
        }
      }
      case case_4 {
        leaf keychain {
          type string {
            length "1 .. 128";
          }
          description "Key chain name";
        }
      }
    }
  }
  grouping juniper-protocols-ospf3 {
    list realm {
      description "OSPFv3 realm configuration";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum ipv6-unicast {
            description "IPv6 unicast realm";
          }
          enum ipv6-multicast {
            description "IPv6 multicast realm";
          }
          enum ipv4-unicast {
            description "IPv4 unicast realm";
          }
          enum ipv4-multicast {
            description "IPv4 multicast realm";
          }
        }
        description "OSPFv3 realm name";
      }
      uses apply-advanced;
      list topology {
        description "Topology parameters";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Topology name";
        }
        uses apply-advanced;
        leaf disable {
          type empty;
          description "Disable this topology";
        }
        leaf topology-id {
          type uint8 {
            range "32 .. 127";
          }
          description "Topology identifier";
        }
        leaf overload {
          type empty;
          description "Set the overload mode (repel transit traffic)";
        }
        leaf rib-group {
          type string;
          description "Routing table group for importing routes";
        }
        container spf-options {
          description "Configure options for SPF";
          uses apply-advanced;
          container microloop-avoidance {
            description "Configure microloop avoidance mechanism";
            uses apply-advanced;
            container post-convergence-path {
              description "Temporarily install post-convergence path for routes potentially affected by microloops";
              presence "enable post-convergence-path";
              uses apply-advanced;
              leaf delay {
                type uint32 {
                  range "500 .. 60000";
                }
                description "Time after which temporary post-convergence paths are removed";
                units milliseconds;
              }
              leaf maximum-labels {
                type uint32 {
                  range "2 .. 8";
                }
                description "Maximum number of labels installed for post-convergence paths";
              }
            }
          }
          leaf delay {
            type uint32 {
              range "50 .. 8000";
            }
            description "Time to wait before running an SPF";
            units milliseconds;
          }
          leaf holddown {
            type uint32 {
              range "2000 .. 20000";
            }
            description "Time to hold down before running an SPF";
            units milliseconds;
          }
          leaf rapid-runs {
            type uint32 {
              range "1 .. 10";
            }
            description "Number of maximum rapid SPF runs before holddown";
          }
          leaf no-ignore-our-externals {
            type empty;
            description "Do not ignore self-generated external and NSSA LSAs";
          }
        }
        container backup-spf-options {
          description "Configure options for backup SPF";
          uses apply-advanced;
          container remote-backup-calculation {
            description "Calculate Remote LFA backup nexthops";
            presence "enable remote-backup-calculation";
            uses apply-advanced;
            container pq-nodes-nearest-to-source {
              description "PQ nodes selection based upon nearest to source";
              uses apply-advanced;
              leaf percent {
                type uint32 {
                  range "10 .. 100";
                }
                description "Selection percentage for nearest to source";
              }
            }
          }
          container use-post-convergence-lfa {
            description "Calculate post-convergence backup paths";
            presence "enable use-post-convergence-lfa";
            uses apply-advanced;
            leaf maximum-labels {
              type uint32 {
                range "2 .. 8";
              }
              description "Maximum number of labels installed for post-convergence paths";
            }
            leaf maximum-backup-paths {
              type uint32 {
                range "1 .. 8";
              }
              description "Maximum number of equal-cost post-convergence paths installed";
            }
          }
          leaf use-source-packet-routing {
            type empty;
            description "Use spring backup paths for inet.0 routes";
          }
          leaf disable {
            type empty;
            description "Do not run backup SPF";
          }
          leaf no-install {
            type empty;
            description "Do not install backup nexthops into the RIB";
          }
          leaf downstream-paths-only {
            type empty;
            description "Use only downstream backup paths";
          }
          container per-prefix-calculation {
            description "Calculate backup nexthops for non-best prefix originators";
            uses apply-advanced;
            leaf stubs {
              type empty;
              description "Per prefix calculation for stubs only";
            }
            leaf summary {
              type empty;
              description "Per prefix calculation for summary originators only";
            }
            leaf externals {
              type empty;
              description "Per prefix calculation for externals";
            }
            leaf all {
              type empty;
              description "Per prefix calculation for all";
            }
          }
          leaf node-link-degradation {
            type empty;
            description "Degrade to link protection when nodelink protection not available";
          }
        }
        leaf prefix-export-limit {
          type uint32 {
            range "0 .. 4294967295";
          }
          description "Maximum number of prefixes that can be exported";
        }
      }
      container spf-options {
        description "Configure options for SPF";
        uses apply-advanced;
        container microloop-avoidance {
          description "Configure microloop avoidance mechanism";
          uses apply-advanced;
          container post-convergence-path {
            description "Temporarily install post-convergence path for routes potentially affected by microloops";
            presence "enable post-convergence-path";
            uses apply-advanced;
            leaf delay {
              type uint32 {
                range "500 .. 60000";
              }
              description "Time after which temporary post-convergence paths are removed";
              units milliseconds;
            }
            leaf maximum-labels {
              type uint32 {
                range "2 .. 8";
              }
              description "Maximum number of labels installed for post-convergence paths";
            }
          }
        }
        leaf delay {
          type uint32 {
            range "50 .. 8000";
          }
          description "Time to wait before running an SPF";
          units milliseconds;
        }
        leaf holddown {
          type uint32 {
            range "2000 .. 20000";
          }
          description "Time to hold down before running an SPF";
          units milliseconds;
        }
        leaf rapid-runs {
          type uint32 {
            range "1 .. 10";
          }
          description "Number of maximum rapid SPF runs before holddown";
        }
        leaf no-ignore-our-externals {
          type empty;
          description "Do not ignore self-generated external and NSSA LSAs";
        }
      }
      container backup-spf-options {
        description "Configure options for backup SPF";
        uses apply-advanced;
        container remote-backup-calculation {
          description "Calculate Remote LFA backup nexthops";
          presence "enable remote-backup-calculation";
          uses apply-advanced;
          container pq-nodes-nearest-to-source {
            description "PQ nodes selection based upon nearest to source";
            uses apply-advanced;
            leaf percent {
              type uint32 {
                range "10 .. 100";
              }
              description "Selection percentage for nearest to source";
            }
          }
        }
        container use-post-convergence-lfa {
          description "Calculate post-convergence backup paths";
          presence "enable use-post-convergence-lfa";
          uses apply-advanced;
          leaf maximum-labels {
            type uint32 {
              range "2 .. 8";
            }
            description "Maximum number of labels installed for post-convergence paths";
          }
          leaf maximum-backup-paths {
            type uint32 {
              range "1 .. 8";
            }
            description "Maximum number of equal-cost post-convergence paths installed";
          }
        }
        leaf use-source-packet-routing {
          type empty;
          description "Use spring backup paths for inet.0 routes";
        }
        leaf disable {
          type empty;
          description "Do not run backup SPF";
        }
        leaf no-install {
          type empty;
          description "Do not install backup nexthops into the RIB";
        }
        leaf downstream-paths-only {
          type empty;
          description "Use only downstream backup paths";
        }
        container per-prefix-calculation {
          description "Calculate backup nexthops for non-best prefix originators";
          uses apply-advanced;
          leaf stubs {
            type empty;
            description "Per prefix calculation for stubs only";
          }
          leaf summary {
            type empty;
            description "Per prefix calculation for summary originators only";
          }
          leaf externals {
            type empty;
            description "Per prefix calculation for externals";
          }
          leaf all {
            type empty;
            description "Per prefix calculation for all";
          }
        }
        leaf node-link-degradation {
          type empty;
          description "Degrade to link protection when nodelink protection not available";
        }
      }
      container traffic-engineering {
        description "Configure traffic engineering attributes";
        presence "enable traffic-engineering";
        uses apply-advanced;
        leaf no-topology {
          type empty;
          description "Disable dissemination of TE link-state topology information";
        }
        leaf multicast-rpf-routes {
          type empty;
          description "Install routes for multicast RPF checks into inet.2";
        }
        leaf l3-unicast-topology {
          type empty;
          description "Download IGP topology into TED";
        }
        container ignore-lsp-metrics {
          description "Ignore label-switched path metrics when doing shortcuts";
          presence "enable ignore-lsp-metrics";
          uses apply-advanced;
          leaf unconfigured-only {
            type empty;
            description "Ignore lsp metrics for unconfigured only";
          }
        }
        container shortcuts {
          description "Use label-switched paths as next hops, if possible";
          presence "enable shortcuts";
          uses apply-advanced;
          leaf ignore-lsp-metrics {
            type empty;
            description "Ignore label-switched path metrics when doing shortcuts";
            status deprecated;
          }
          leaf lsp-metric-into-summary {
            type empty;
            description "Advertise LSP metric into summary LSAs";
          }
          list family {
            description "Address family specific traffic-engineering attributes";
            key name;
            ordered-by user;
            leaf name {
              type enumeration {
                enum inet {
                  description "IPv4 family";
                }
                enum inet-mpls {
                  description "IPv4-MPLS family";
                }
              }
            }
            uses apply-advanced;
          }
        }
        leaf advertise-unnumbered-interfaces {
          type empty;
          description "Advertise unnumbered interfaces";
        }
        leaf credibility-protocol-preference {
          type empty;
          description "TED protocol credibility follows protocol preference";
        }
        container advertisement {
          description "Advertise TE parameters even if RSVP is not turned on";
          uses apply-advanced;
          leaf always {
            type empty;
            description "Advertise TE parameters in TE LSAs";
          }
        }
        container tunnel-source-protocol {
          description "Protocols from which to pick label-switched paths";
          uses apply-advanced;
          container rsvp {
            description "Pick label-switched paths from rsvp";
            presence "enable rsvp";
            uses apply-advanced;
            leaf preference {
              type uint32 {
                range "1 .. 255";
              }
              description "Preference for label-switched paths from this protocol";
            }
          }
          container spring-te {
            description "Pick label-switched paths from spring-te";
            presence "enable spring-te";
            uses apply-advanced;
            leaf preference {
              type uint32 {
                range "1 .. 255";
              }
              description "Preference for label-switched paths from this protocol";
            }
          }
        }
      }
      container source-packet-routing {
        description "Enable source packet routing (SPRING)";
        presence "enable source-packet-routing";
        uses apply-advanced;
        container adjacency-segment {
          description "Attributes for adjacency segments in spring";
          uses apply-advanced;
          leaf hold-time {
            type uint32 {
              range "180000 .. 900000";
            }
            description "Retain time of Adjacency segment after isolating from an interface";
          }
        }
        leaf-list prefix-segment {
          type "jt:policy-algebra";
          description "Prefix Segment policy";
          ordered-by user;
        }
        leaf explicit-null {
          type empty;
          description "Set E and P bits in all Prefix SID advertisements";
        }
        container node-segment {
          description "Enable support for Node segments in SPRING";
          presence "enable node-segment";
          uses apply-advanced;
          leaf ipv4-index {
            type uint32 {
              range "0 .. 199999";
            }
            description "Set ipv4 node segment index";
          }
          leaf index-range {
            type uint32 {
              range "32 .. 16385";
            }
            description "Set range of node segment indices allowed";
          }
        }
        container srgb {
          description "Set the SRGB global block in SPRING";
          leaf start-label {
            type uint32;
            description "Start range for SRGB label block";
          }
          leaf index-range {
            type uint32;
            description "Index to the SRGB start label block";
          }
        }
        leaf mapping-server {
          type string;
          description "Mapping server name";
        }
        leaf install-prefix-sid-for-best-route {
          type empty;
          description "For best route install a exact prefix sid route";
        }
        leaf ldp-stitching {
          type empty;
          description "Enable SR to LDP stitching";
        }
        leaf-list flex-algorithm {
          type uint32 {
            range "128 .. 255";
          }
          description "Flex-algorithms we would like to participate in";
          max-elements 16;
        }
        leaf strict-asla-based-flex-algorithm {
          type empty;
          description "Flex-Algorithm to ignore links not having ASLA sub-TLVs";
        }
        container sensor-based-stats {
          description "Configure sensor based stats in SPRING";
          uses apply-advanced;
          container per-interface-per-member-link {
            description "Configure sensor based stats per nexthop";
            leaf ingress {
              type empty;
              description "Enable sensor based stats on ingress interface";
            }
            leaf egress {
              type empty;
              description "Enable sensor based stats on egress interface";
            }
          }
          container per-sid {
            description "Configure sensor based stats per spring route";
            leaf ingress {
              type empty;
              description "Enable sensor based stats for per-sid ingress accounting";
            }
            leaf egress {
              type empty;
              description "Enable sensor based stats for IP-MPLS egress accounting";
            }
          }
        }
      }
      list area {
        description "Configure an OSPF area";
        key name;
        ordered-by user;
        leaf name {
          type "jt:areaid";
          description "Area ID";
        }
        uses apply-advanced;
        choice stub-option {
          case case_1 {
            container stub {
              description "Configure a stub area";
              presence "enable stub";
              leaf default-metric {
                type uint32 {
                  range "1 .. 16777215";
                }
                description "Metric for the default route in this stub area";
              }
              choice summaries-choice {
                leaf summaries {
                  type empty;
                  description "Flood summary LSAs into this stub area";
                }
                leaf no-summaries {
                  type empty;
                  description "Don't flood summary LSAs into this stub area";
                }
              }
            }
          }
          case case_2 {
            container nssa {
              description "Configure a not-so-stubby area";
              presence "enable nssa";
              uses apply-advanced;
              container default-lsa {
                description "Configure a default LSA";
                presence "enable default-lsa";
                uses apply-advanced;
                leaf default-metric {
                  type uint32 {
                    range "1 .. 16777215";
                  }
                  description "Metric for the default route in this area";
                }
                leaf metric-type {
                  type uint32 {
                    range "1 .. 2";
                  }
                  description "External metric type for the default type 7 LSA";
                }
                leaf type-7 {
                  type empty;
                  description "Flood type 7 default LSA if no-summaries is configured";
                }
              }
              leaf default-metric {
                type uint32 {
                  range "1 .. 16777215";
                }
                description "Metric for the default route in this area";
                status deprecated;
              }
              leaf metric-type {
                type uint32 {
                  range "1 .. 2";
                }
                description "External metric type for the default type 7 LSA";
                status deprecated;
              }
              choice summaries-choice {
                leaf summaries {
                  type empty;
                  description "Flood summary LSAs into this NSSA area";
                }
                leaf no-summaries {
                  type empty;
                  description "Don't flood summary LSAs into this NSSA area";
                }
              }
              list area-range {
                description "Configure NSSA area ranges";
                key name;
                ordered-by user;
                leaf name {
                  type "jt:ipprefix";
                  description "Range to summarize NSSA routes in this area";
                }
                uses apply-advanced;
                leaf restrict {
                  type empty;
                  description "Restrict advertisement of this area range";
                }
                leaf exact {
                  type empty;
                  description "Enforce exact match for advertisement of this area range";
                }
                container override-metric {
                  description "Override the dynamic metric for this area-range";
                  presence "enable override-metric";
                  uses apply-advanced;
                  leaf metric {
                    type uint32 {
                      range "1 .. 16777215";
                    }
                    description "Metric value";
                  }
                  leaf metric-type {
                    type uint32 {
                      range "1 .. 2";
                    }
                    default "1";
                    description "Set the metric type for the override metric";
                  }
                }
              }
            }
          }
        }
        list area-range {
          description "Configure area ranges";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipprefix";
            description "Range to summarize routes in this area";
          }
          uses apply-advanced;
          leaf restrict {
            type empty;
            description "Restrict advertisement of this area range";
          }
          leaf exact {
            type empty;
            description "Enforce exact match for advertisement of this area range";
          }
          leaf override-metric {
            type uint32 {
              range "1 .. 16777215";
            }
            description "Override the dynamic metric for this area-range";
          }
        }
        leaf-list network-summary-export {
          type "jt:policy-algebra";
          description "Export policy for Type 3 Summary LSAs";
          ordered-by user;
        }
        leaf-list network-summary-import {
          type "jt:policy-algebra";
          description "Import policy for Type 3 Summary LSAs";
          ordered-by user;
        }
        leaf-list inter-area-prefix-export {
          type "jt:policy-algebra";
          description "Export policy for Inter Area Prefix LSAs";
          ordered-by user;
        }
        leaf-list inter-area-prefix-import {
          type "jt:policy-algebra";
          description "Import policy for Inter Area Prefix LSAs";
          ordered-by user;
        }
        leaf authentication-type {
          type enumeration {
            enum none {
              description "No authentication";
              status deprecated;
            }
            enum simple {
              description "Simple password authentication";
              status deprecated;
            }
            enum md5 {
              description "MD5 authentication";
              status deprecated;
            }
          }
          description "Authentication type";
          status deprecated;
        }
        list virtual-link {
          description "Configure virtual links";
          key "neighbor-id transit-area";
          ordered-by user;
          leaf neighbor-id {
            type "jt:ipv4addr";
            description "Router ID of a virtual neighbor";
          }
          leaf transit-area {
            type "jt:areaid";
            description "Transit area in common with virtual neighbor";
          }
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable this virtual link";
              }
            }
          }
          leaf retransmit-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Retransmission interval (seconds)";
          }
          leaf transit-delay {
            type uint32 {
              range "1 .. 65535";
            }
            description "Transit delay (seconds)";
          }
          leaf hello-interval {
            type uint32 {
              range "1 .. 255";
            }
            description "Hello interval (seconds)";
          }
          leaf dead-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Dead interval (seconds)";
          }
          leaf mtu {
            type uint32 {
              range "128 .. 65535";
            }
            description "Maximum OSPF packet size";
          }
          choice auth {
            case case_1 {
              container authentication {
                uses juniper-ospf-authentication;
              }
            }
            case case_2 {
              container authentication-key {
                description "Authentication key";
                status deprecated;
                leaf keyname {
                  type "jt:unreadable";
                  description "Authentication key value";
                }
                leaf key-id {
                  type uint32 {
                    range "0 .. 255";
                  }
                  description "Key ID for MD5 authentication";
                }
              }
            }
          }
          leaf demand-circuit {
            type empty;
            description "Interface functions as a demand circuit";
          }
          leaf flood-reduction {
            type empty;
            description "Enable flood reduction";
          }
          leaf no-neighbor-down-notification {
            type empty;
            description "Don't inform other protocols about neighbor down events";
          }
          leaf ipsec-sa {
            type string {
              length "1 .. 32";
            }
            description "IPSec security association name";
          }
          list topology {
            description "Topology specific attributes";
            key name;
            ordered-by user;
            leaf name {
              type string;
              description "Topology name";
            }
            uses apply-advanced;
            leaf disable {
              type empty;
              description "Disable this topology";
            }
            leaf metric {
              type uint16 {
                range "1 .. 65535";
              }
              description "Topology metric";
            }
            container bandwidth-based-metrics {
              description "Configure bandwidth based metrics";
              uses apply-advanced;
              list bandwidth {
                description "Bandwidth threshold";
                key name;
                leaf name {
                  type string;
                }
                leaf metric {
                  type uint16 {
                    range "1 .. 65535";
                  }
                  description "Metric associated with specified bandwidth";
                }
              }
            }
          }
        }
        list sham-link-remote {
          description "Configure parameters for remote sham link endpoint";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "Remote sham link endpoint address";
          }
          uses apply-advanced;
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Sham link metric";
          }
          leaf ipsec-sa {
            type string {
              length "1 .. 32";
            }
            description "IPSec security association name";
          }
          leaf demand-circuit {
            type empty;
            description "Interface functions as a demand circuit";
          }
          leaf flood-reduction {
            type empty;
            description "Enable flood reduction";
          }
          list topology {
            description "Topology specific attributes";
            key name;
            ordered-by user;
            leaf name {
              type string;
              description "Topology name";
            }
            uses apply-advanced;
            leaf disable {
              type empty;
              description "Disable this topology";
            }
            leaf metric {
              type uint16 {
                range "1 .. 65535";
              }
              description "Topology metric";
            }
            container bandwidth-based-metrics {
              description "Configure bandwidth based metrics";
              uses apply-advanced;
              list bandwidth {
                description "Bandwidth threshold";
                key name;
                leaf name {
                  type string;
                }
                leaf metric {
                  type uint16 {
                    range "1 .. 65535";
                  }
                  description "Metric associated with specified bandwidth";
                }
              }
            }
          }
        }
        list interface {
          description "Include an interface in this area";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv4addr-or-interface";
            description "Interface name";
          }
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable OSPF on this interface";
              }
            }
          }
          leaf interface-type {
            type enumeration {
              enum nbma {
                description "Nonbroadcast multiaccess";
              }
              enum p2mp {
                description "Point-to-multipoint NBMA";
              }
              enum p2p {
                description "Point-to-point";
              }
              enum p2mp-over-lan {
                description "Point-to-multipoint over LAN mode";
              }
            }
            description "Type of interface";
          }
          choice protection-type {
            case case_1 {
              leaf link-protection {
                type empty;
                description "Protect interface from link faults only";
              }
            }
            case case_2 {
              leaf node-link-protection {
                type empty;
                description "Protect interface from both link and node faults";
              }
            }
          }
          leaf no-eligible-backup {
            type empty;
            description "Not eligible to backup traffic from protected interfaces";
          }
          leaf no-eligible-remote-backup {
            type empty;
            description "Not eligible for Remote-LFA backup traffic from protected interfaces";
          }
          container passive {
            description "Do not run OSPF, but advertise it";
            presence "enable passive";
            uses apply-advanced;
            container traffic-engineering {
              description "Advertise TE link information";
              uses apply-advanced;
              leaf remote-node-id {
                type "jt:ipaddr";
                description "Remote address of the link";
              }
              leaf remote-node-router-id {
                type "jt:ipv4addr";
                description "TE Router-ID of the remote node";
              }
            }
          }
          leaf secondary {
            type empty;
            description "Treat interface as secondary";
          }
          leaf own-router-lsa {
            type empty;
            description "Generate a separate router LSA for this interface";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Interface metric";
          }
          leaf priority {
            type uint32 {
              range "0 .. 255";
            }
            description "Designated router priority";
          }
          leaf retransmit-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Retransmission interval (seconds)";
          }
          leaf transit-delay {
            type uint32 {
              range "1 .. 65535";
            }
            description "Transit delay (seconds)";
          }
          leaf hello-interval {
            type uint32 {
              range "1 .. 255";
            }
            description "Hello interval (seconds)";
          }
          leaf dead-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Dead interval (seconds)";
          }
          leaf mtu {
            type uint32 {
              range "128 .. 65535";
            }
            description "Maximum OSPF packet size";
          }
          choice auth {
            case case_1 {
              container authentication {
                uses juniper-ospf-authentication;
              }
            }
            case case_2 {
              container authentication-key {
                description "Authentication key";
                status deprecated;
                leaf keyname {
                  type "jt:unreadable";
                  description "Authentication key value";
                }
                leaf key-id {
                  type uint32 {
                    range "0 .. 255";
                  }
                  description "Key ID for MD5 authentication";
                }
              }
            }
          }
          leaf demand-circuit {
            type empty;
            description "Interface functions as a demand circuit";
          }
          leaf flood-reduction {
            type empty;
            description "Enable flood reduction";
          }
          leaf no-neighbor-down-notification {
            type empty;
            description "Don't inform other protocols about neighbor down events";
          }
          leaf ipsec-sa {
            type string {
              length "1 .. 32";
            }
            description "IPSec security association name";
          }
          list topology {
            description "Topology specific attributes";
            key name;
            ordered-by user;
            leaf name {
              type string;
              description "Topology name";
            }
            uses apply-advanced;
            leaf disable {
              type empty;
              description "Disable this topology";
            }
            leaf metric {
              type uint16 {
                range "1 .. 65535";
              }
              description "Topology metric";
            }
            container bandwidth-based-metrics {
              description "Configure bandwidth based metrics";
              uses apply-advanced;
              list bandwidth {
                description "Bandwidth threshold";
                key name;
                leaf name {
                  type string;
                }
                leaf metric {
                  type uint16 {
                    range "1 .. 65535";
                  }
                  description "Metric associated with specified bandwidth";
                }
              }
            }
          }
          leaf transmit-interval {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "OSPF packet transmit interval (milliseconds)";
            status deprecated;
          }
          container bfd-liveness-detection {
            description "Bidirectional Forwarding Detection options";
            uses apply-advanced;
            leaf version {
              type enumeration {
                enum 0 {
                  description "BFD version 0 (deprecated)";
                }
                enum 1 {
                  description "BFD version 1";
                }
                enum automatic {
                  description "Choose BFD version automatically";
                }
              }
              default "automatic";
              description "BFD protocol version number";
            }
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
            leaf minimum-transmit-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              status deprecated;
              units milliseconds;
            }
            leaf minimum-receive-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum receive interval";
              units milliseconds;
            }
            leaf multiplier {
              type uint32 {
                range "1 .. 255";
              }
              default "3";
              description "Detection time multiplier";
            }
            leaf inline-disable {
              type empty;
              description "Disable inline mode for this BFD session";
            }
            leaf pdu-size {
              type uint32 {
                range "24 .. 9000";
              }
              default "24";
              description "BFD transport protocol payload size";
            }
            choice adaptation-choice {
              case case_1 {
                leaf no-adaptation {
                  type empty;
                  description "Disable adaptation";
                }
              }
            }
            container transmit-interval {
              description "Transmit-interval options";
              uses apply-advanced;
              leaf minimum-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum transmit interval";
                units milliseconds;
              }
              leaf threshold {
                type uint32;
                description "High transmit interval triggering a trap";
                units milliseconds;
              }
            }
            container detection-time {
              description "Detection-time options";
              uses apply-advanced;
              leaf threshold {
                type uint32;
                description "High detection-time triggering a trap";
                units milliseconds;
              }
            }
            container authentication {
              description "Authentication options";
              uses apply-advanced;
              leaf key-chain {
                type string;
                description "Key chain name";
              }
              leaf algorithm {
                type enumeration {
                  enum simple-password {
                    description "Simple password";
                  }
                  enum keyed-md5 {
                    description "Keyed message Digest 5";
                  }
                  enum meticulous-keyed-md5 {
                    description "Meticulous keyed message Digest 5";
                  }
                  enum keyed-sha-1 {
                    description "Keyed secure hash algorithm (SHA1) ";
                  }
                  enum meticulous-keyed-sha-1 {
                    description "Meticulous keyed secure hash algorithm (SHA1) ";
                  }
                }
                description "Algorithm name";
              }
              leaf loose-check {
                type empty;
                description "Verify authentication only if authentication is negotiated";
              }
            }
            container echo {
              description "Echo mode parameters";
              uses apply-advanced;
              leaf minimum-interval {
                type uint32 {
                  range "100 .. 255000";
                }
                description "Minimum transmit and receive interval";
                units milliseconds;
              }
            }
            container echo-lite {
              description "Echo-lite more parameters";
              uses apply-advanced;
              leaf minimum-interval {
                type uint32 {
                  range "100 .. 255000";
                }
                description "Minimum transmit and receive interval";
                units milliseconds;
              }
            }
            leaf full-neighbors-only {
              type empty;
              description "Setup BFD sessions only to Full neighbors";
            }
            leaf holddown-interval {
              type uint32 {
                range "0 .. 255000";
              }
              description "Time to hold the session-UP notification to the client";
              units milliseconds;
            }
          }
          leaf dynamic-neighbors {
            type empty;
            description "Learn neighbors dynamically on a p2mp interface";
          }
          leaf no-advertise-adjacency-segment {
            type empty;
            description "Do not advertise an adjacency segment for this interface";
          }
          list neighbor {
            description "NBMA neighbor";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipaddr";
              description "Address of neighbor";
            }
            leaf eligible {
              type empty;
              description "Eligible to be DR on an NBMA network";
            }
          }
          leaf poll-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Poll interval for NBMA interfaces";
          }
          leaf no-interface-state-traps {
            type empty;
            description "Do not send interface state change traps";
          }
          leaf strict-bfd {
            type empty;
            description "Enable strict bfd over this interface";
          }
          container post-convergence-lfa {
            description "Protect interface using post-convergence backup path";
            presence "enable post-convergence-lfa";
            uses apply-advanced;
            container node-protection {
              description "Compute backup path assuming node failure";
              presence "enable node-protection";
              uses apply-advanced;
              leaf cost {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Cost for node protection";
              }
            }
            leaf srlg-protection {
              type empty;
              description "Compute backup path assuming SRLG failure";
            }
            leaf fate-sharing-protection {
              type empty;
              description "Compute backup path assuming fate-sharing group failure";
            }
          }
          leaf te-metric {
            type uint32 {
              range "1 .. 4294967295";
            }
            description "Traffic engineering metric";
          }
          container ldp-synchronization {
            description "Advertise maximum metric until LDP is operational";
            presence "enable ldp-synchronization";
            uses ldp-sync-obj;
          }
          container ipv4-adjacency-segment {
            description "Configure ipv4 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
          list lan-neighbor {
            description "Configuration specific to a LAN neighbor";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipaddr";
              description "Address of neighbor";
            }
            uses apply-advanced;
            container ipv4-adjacency-segment {
              description "Configure ipv4 adjacency segment";
              uses apply-advanced;
              container protected {
                description "Adjacency SID is eligible for protection";
                choice adjsid-type {
                  case case_1 {
                    container index {
                      description "Adjacency SID indexed from SRGB";
                      leaf index-number {
                        type uint32 {
                          range "0 .. 199999";
                        }
                      }
                    }
                  }
                  case case_2 {
                    leaf label {
                      type uint32 {
                        range "16 .. 1048575";
                      }
                      description "Adjacency SID from static label pool";
                    }
                  }
                  case case_3 {
                    leaf dynamic {
                      type empty;
                      description "Dynamically allocate an adjacency segment";
                    }
                  }
                }
              }
              container unprotected {
                description "Adjacency SID uneligible for protection";
                choice adjsid-type {
                  case case_1 {
                    container index {
                      description "Adjacency SID indexed from SRGB";
                      leaf index-number {
                        type uint32 {
                          range "0 .. 199999";
                        }
                      }
                    }
                  }
                  case case_2 {
                    leaf label {
                      type uint32 {
                        range "16 .. 1048575";
                      }
                      description "Adjacency SID from static label pool";
                    }
                  }
                  case case_3 {
                    leaf dynamic {
                      type empty;
                      description "Dynamically allocate an adjacency segment";
                    }
                  }
                }
              }
            }
          }
          leaf delay-metric {
            type uint32 {
              range "0 .. 16777215";
            }
            description "Delay metric";
            units microseconds;
          }
          container delay-measurement {
            description "Enable delay measurement";
            presence "enable delay-measurement";
            uses apply-advanced;
            leaf probe-interval {
              type uint32 {
                range "1 .. 255";
              }
              description "Probe interval";
              units seconds;
            }
            leaf probe-count {
              type uint32 {
                range "1 .. 15";
              }
              description "Probe count";
            }
            container advertisement {
              description "Delay advertisement";
              uses apply-advanced;
              container periodic {
                description "Periodic advertisement parameters";
                uses apply-advanced;
                leaf threshold {
                  type uint32 {
                    range "0 .. 100";
                  }
                  description "Threshold";
                  units percentage;
                }
                leaf interval {
                  type uint32 {
                    range "30 .. 3600";
                  }
                  description "Interval";
                  units seconds;
                }
              }
              container accelerated {
                description "Accelerated advertisement parameters";
                presence "enable accelerated";
                uses apply-advanced;
                leaf threshold {
                  type uint32 {
                    range "0 .. 100";
                  }
                  description "Threshold";
                  units percentage;
                }
              }
            }
          }
          container application-specific {
            description "Advertise application-specific TE attributes";
            uses apply-advanced;
            list attribute-group {
              description "Link attribute group name";
              key name;
              max-elements 1;
              ordered-by user;
              leaf name {
                type string;
                description "Link attribute group name";
              }
              uses apply-advanced;
              leaf te-metric {
                type uint32 {
                  range "1 .. 4294967295";
                }
                description "Traffic engineering metric for this attribute group";
              }
              leaf-list admin-group {
                type string;
                description "Administrative groups for this attribute-group";
                max-elements 16;
                ordered-by user;
              }
              leaf delay-metric {
                type uint32 {
                  range "0 .. 16777215";
                }
                description "Delay metric for this attribute-group";
                units microseconds;
              }
              leaf advertise-interface-delay {
                type empty;
                description "Use interface specific static/dynamic delay values as applicable in ASLA Sub-TLVs";
              }
              container application {
                description "Standard Applications part of this attribute-group";
                uses apply-advanced;
                leaf flex-algorithm {
                  type empty;
                  description "Set X flag in standard application bit mask";
                }
              }
            }
          }
        }
        leaf no-context-identifier-advertisement {
          type empty;
          description "Disable context identifier advertisments in this area";
        }
        list peer-interface {
          description "Configuration for peer interface";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Name of peer interface";
          }
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable OSPF on this control peer";
              }
            }
          }
          leaf retransmit-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Retransmission interval (seconds)";
          }
          leaf transit-delay {
            type uint32 {
              range "1 .. 65535";
            }
            description "Transit delay (seconds)";
          }
          leaf hello-interval {
            type uint32 {
              range "1 .. 255";
            }
            description "Hello interval (seconds)";
          }
          leaf dead-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Dead interval (seconds)";
          }
          leaf mtu {
            type uint32 {
              range "128 .. 65535";
            }
            description "Maximum OSPF packet size";
          }
          choice auth {
            case case_1 {
              container authentication {
                uses juniper-ospf-authentication;
              }
            }
            case case_2 {
              container authentication-key {
                description "Authentication key";
                status deprecated;
                leaf keyname {
                  type "jt:unreadable";
                  description "Authentication key value";
                }
                leaf key-id {
                  type uint32 {
                    range "0 .. 255";
                  }
                  description "Key ID for MD5 authentication";
                }
              }
            }
          }
          leaf demand-circuit {
            type empty;
            description "Interface functions as a demand circuit";
          }
          leaf flood-reduction {
            type empty;
            description "Enable flood reduction";
          }
          leaf no-neighbor-down-notification {
            type empty;
            description "Don't inform other protocols about neighbor down events";
          }
        }
        leaf no-source-packet-routing {
          type empty;
          description "Disable SPRING in this area";
        }
        list context-identifier {
          description "Configure context identifier in support of edge protection";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv4addr";
            description "Context identifier";
          }
          uses apply-advanced;
        }
        list label-switched-path {
          description "Configuration for advertisement of a label-switched path";
          key name;
          ordered-by user;
          leaf name {
            type string {
              length "1 .. 64";
            }
            description "Name of label-switched path to be advertised";
          }
          uses apply-advanced;
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable OSPF on this label-switched path";
              }
            }
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Interface metric";
          }
          list topology {
            description "Topology specific attributes";
            key name;
            ordered-by user;
            leaf name {
              type string;
              description "Topology name";
            }
            uses apply-advanced;
            leaf disable {
              type empty;
              description "Disable this topology";
            }
            leaf metric {
              type uint16 {
                range "1 .. 65535";
              }
              description "Topology metric";
            }
            container bandwidth-based-metrics {
              description "Configure bandwidth based metrics";
              uses apply-advanced;
              list bandwidth {
                description "Bandwidth threshold";
                key name;
                leaf name {
                  type string;
                }
                leaf metric {
                  type uint16 {
                    range "1 .. 65535";
                  }
                  description "Metric associated with specified bandwidth";
                }
              }
            }
          }
        }
      }
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable OSPF";
          }
        }
      }
      container traceoptions {
        description "Trace options for OSPF";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum spf {
                description "Trace SPF calculations";
              }
              enum error {
                description "Trace errored packets";
              }
              enum event {
                description "Trace OSPF state machine events";
              }
              enum packet-dump {
                description "Dump the contents of selected packet types";
              }
              enum flooding {
                description "Trace LSA flooding";
              }
              enum lsa-analysis {
                description "Trace LSA analysis";
              }
              enum packets {
                description "Trace all OSPF packets";
              }
              enum hello {
                description "Trace hello packets";
              }
              enum database-description {
                description "Trace database description packets";
              }
              enum lsa-request {
                description "Trace LSA request packets";
              }
              enum lsa-update {
                description "Trace LSA update packets";
              }
              enum lsa-ack {
                description "Trace LSA acknowledgment packets";
              }
              enum ldp-synchronization {
                description "Trace synchronization between OSPF and LDP";
              }
              enum on-demand {
                description "Trace demand circuit extensions";
              }
              enum nsr-synchronization {
                description "Trace NSR synchronization events";
              }
              enum graceful-restart {
                description "Trace graceful restart";
              }
              enum restart-signaling {
                description "Trace restart signaling";
              }
              enum traffic-statistics {
                description "Trace Segment Routing Traffic Statistics";
              }
              enum backup-spf {
                description "Trace backup SPF (LFA) specific events";
              }
              enum source-packet-routing {
                description "Trace source packet routing (SPRING) events";
              }
              enum post-convergence-lfa {
                description "Trace post-convergence-lfa related events";
              }
              enum flex-algorithm {
                description "Trace flex-algorithm related events";
              }
              enum rmopd {
                description "Trace rmopd interactions";
              }
              enum route {
                description "Trace routing information";
              }
              enum normal {
                description "Trace normal events";
              }
              enum general {
                description "Trace general events";
              }
              enum state {
                description "Trace state transitions";
              }
              enum policy {
                description "Trace policy processing";
              }
              enum task {
                description "Trace routing protocol task processing";
              }
              enum timer {
                description "Trace routing protocol timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
      leaf prefix-export-limit {
        type uint32 {
          range "0 .. 4294967295";
        }
        description "Maximum number of prefixes that can be exported";
      }
      container rib-groups {
        description "Routing table groups for importing OSPF routes";
        uses apply-advanced;
        leaf inet {
          type string;
          description "Name of the IPv4/v6 routing table group";
        }
        leaf inet3 {
          type string;
          description "Name of the IPv4/v6 inet.3 routing table group";
        }
      }
      leaf job-stats {
        type empty;
        description "Collect job statistics";
      }
      container overload {
        description "Set the overload mode (repel transit traffic)";
        presence "enable overload";
        uses apply-advanced;
        leaf timeout {
          type uint32 {
            range "60 .. 3600";
          }
          description "Time after which overload mode is reset";
          units seconds;
        }
        leaf allow-route-leaking {
          type empty;
          description "Allow routes to be leaked when overload is configured";
        }
        leaf stub-network {
          type empty;
          description "Advertise Stub Network with maximum metric";
        }
        leaf intra-area-prefix {
          type empty;
          description "Advertise Intra Area Prefix with maximum metric";
        }
        leaf as-external {
          type empty;
          description "Advertise As External with maximum usable metric";
        }
      }
      container database-protection {
        description "Configure database protection attributes";
        presence "enable database-protection";
        uses apply-advanced;
        leaf maximum-lsa {
          type uint32 {
            range "1 .. 1000000";
          }
          description "Maximum allowed non self-generated LSAs";
        }
        leaf warning-only {
          type empty;
          description "Emit only a warning when LSA maximum limit is exceeded";
        }
        leaf warning-threshold {
          type uint8 {
            range "30 .. 100";
          }
          description "Percentage of LSA maximum above which to trigger warning";
          units percent;
        }
        leaf ignore-count {
          type uint8 {
            range "1 .. 32";
          }
          description "Maximum number of times to go into ignore state";
        }
        leaf ignore-time {
          type uint16 {
            range "30 .. 3600";
          }
          description "Time to stay in ignore state and ignore all neighbors";
          units seconds;
        }
        leaf reset-time {
          type uint32 {
            range "60 .. 86400";
          }
          description "Time after which the ignore count gets reset to zero";
          units seconds;
        }
      }
      container graceful-restart {
        description "Configure graceful restart attributes";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable OSPF graceful restart capability";
            }
          }
        }
        leaf restart-duration {
          type uint32 {
            range "1 .. 3600";
          }
          description "Time for all neighbors to become full";
          units seconds;
        }
        leaf notify-duration {
          type uint32 {
            range "1 .. 3600";
          }
          description "Time to send all max-aged grace LSAs";
          units seconds;
        }
        container helper-disable {
          description "Disable graceful restart helper capability";
          presence "enable helper-disable";
          uses apply-advanced;
          choice disable-choices {
            case case_1 {
              leaf standard {
                type empty;
                description "Disable helper-mode for rfc3623 based GR";
              }
            }
            case case_2 {
              leaf restart-signaling {
                type empty;
                description "Disable helper mode for restart-signaling ";
              }
            }
            case case_3 {
              leaf both {
                type empty;
                description "Disable helper mode for both the types of GR";
              }
            }
          }
        }
        leaf no-strict-lsa-checking {
          type empty;
          description "Do not abort graceful helper mode upon LSA changes";
        }
      }
      leaf route-type-community {
        type enumeration {
          enum iana {
            description "BGP extended community value used is 0x0306";
          }
          enum vendor {
            description "Vendor BGP extended community value used is 0x8000";
          }
        }
        description "Specify BGP extended community value to encode OSPF route type";
      }
      container domain-id {
        description "Configure domain ID";
        choice domain_id_or_disable {
          case case_1 {
            leaf domain-id {
              type string;
              description "Domain ID";
            }
          }
          case case_2 {
            leaf disable {
              type empty;
              description "Disable domain ID";
            }
          }
        }
      }
      choice domain_vpn_tag_or_disable {
        case case_1 {
          leaf domain-vpn-tag {
            type uint32 {
              range "0 .. 4294967295";
            }
            description "Domain VPN tag for external LSA";
          }
        }
        case case_2 {
          leaf no-domain-vpn-tag {
            type empty;
            description "Disable domain VPN tag";
          }
        }
      }
      leaf preference {
        type uint32;
        description "Preference of internal routes";
      }
      leaf external-preference {
        type uint32;
        description "Preference of external routes";
      }
      leaf labeled-preference {
        type uint32;
        description "Preference of labeled routes";
      }
      leaf-list export {
        type "jt:policy-algebra";
        description "Export policy";
        ordered-by user;
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy (for external routes or setting priority)";
        ordered-by user;
      }
      leaf reference-bandwidth {
        type string;
        description "Bandwidth for calculating metric defaults";
      }
      leaf lsa-refresh-interval {
        type uint32 {
          range "25 .. 50";
        }
        default "50";
        description "LSA refresh interval (minutes)";
      }
      leaf spf-delay {
        type uint32 {
          range "50 .. 8000";
        }
        description "Time to wait before running an SPF";
        status deprecated;
        units milliseconds;
      }
      leaf no-rfc-1583 {
        type empty;
        description "Disable RFC1583 compatibility";
      }
      leaf forwarding-address-to-broadcast {
        type empty;
        description "Set forwarding address in Type 5 LSA in broadcast network";
      }
      choice nssa-abr-option {
        case case_1 {
          leaf no-nssa-abr {
            type empty;
            description "Disable full NSSA functionality at ABR";
          }
        }
      }
      container sham-link {
        description "Configure parameters for sham links";
        presence "enable sham-link";
        uses apply-advanced;
        leaf local {
          type "jt:ipaddr";
          description "Local sham link endpoint address";
        }
        leaf no-advertise-local {
          type empty;
          description "Don't advertise local sham link endpoint as stub in router LSA";
          status deprecated;
        }
      }
    }
    uses apply-advanced;
    list topology {
      description "Topology parameters";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Topology name";
      }
      uses apply-advanced;
      leaf disable {
        type empty;
        description "Disable this topology";
      }
      leaf topology-id {
        type uint8 {
          range "32 .. 127";
        }
        description "Topology identifier";
      }
      leaf overload {
        type empty;
        description "Set the overload mode (repel transit traffic)";
      }
      leaf rib-group {
        type string;
        description "Routing table group for importing routes";
      }
      container spf-options {
        description "Configure options for SPF";
        uses apply-advanced;
        container microloop-avoidance {
          description "Configure microloop avoidance mechanism";
          uses apply-advanced;
          container post-convergence-path {
            description "Temporarily install post-convergence path for routes potentially affected by microloops";
            presence "enable post-convergence-path";
            uses apply-advanced;
            leaf delay {
              type uint32 {
                range "500 .. 60000";
              }
              description "Time after which temporary post-convergence paths are removed";
              units milliseconds;
            }
            leaf maximum-labels {
              type uint32 {
                range "2 .. 8";
              }
              description "Maximum number of labels installed for post-convergence paths";
            }
          }
        }
        leaf delay {
          type uint32 {
            range "50 .. 8000";
          }
          description "Time to wait before running an SPF";
          units milliseconds;
        }
        leaf holddown {
          type uint32 {
            range "2000 .. 20000";
          }
          description "Time to hold down before running an SPF";
          units milliseconds;
        }
        leaf rapid-runs {
          type uint32 {
            range "1 .. 10";
          }
          description "Number of maximum rapid SPF runs before holddown";
        }
        leaf no-ignore-our-externals {
          type empty;
          description "Do not ignore self-generated external and NSSA LSAs";
        }
      }
      container backup-spf-options {
        description "Configure options for backup SPF";
        uses apply-advanced;
        container remote-backup-calculation {
          description "Calculate Remote LFA backup nexthops";
          presence "enable remote-backup-calculation";
          uses apply-advanced;
          container pq-nodes-nearest-to-source {
            description "PQ nodes selection based upon nearest to source";
            uses apply-advanced;
            leaf percent {
              type uint32 {
                range "10 .. 100";
              }
              description "Selection percentage for nearest to source";
            }
          }
        }
        container use-post-convergence-lfa {
          description "Calculate post-convergence backup paths";
          presence "enable use-post-convergence-lfa";
          uses apply-advanced;
          leaf maximum-labels {
            type uint32 {
              range "2 .. 8";
            }
            description "Maximum number of labels installed for post-convergence paths";
          }
          leaf maximum-backup-paths {
            type uint32 {
              range "1 .. 8";
            }
            description "Maximum number of equal-cost post-convergence paths installed";
          }
        }
        leaf use-source-packet-routing {
          type empty;
          description "Use spring backup paths for inet.0 routes";
        }
        leaf disable {
          type empty;
          description "Do not run backup SPF";
        }
        leaf no-install {
          type empty;
          description "Do not install backup nexthops into the RIB";
        }
        leaf downstream-paths-only {
          type empty;
          description "Use only downstream backup paths";
        }
        container per-prefix-calculation {
          description "Calculate backup nexthops for non-best prefix originators";
          uses apply-advanced;
          leaf stubs {
            type empty;
            description "Per prefix calculation for stubs only";
          }
          leaf summary {
            type empty;
            description "Per prefix calculation for summary originators only";
          }
          leaf externals {
            type empty;
            description "Per prefix calculation for externals";
          }
          leaf all {
            type empty;
            description "Per prefix calculation for all";
          }
        }
        leaf node-link-degradation {
          type empty;
          description "Degrade to link protection when nodelink protection not available";
        }
      }
      leaf prefix-export-limit {
        type uint32 {
          range "0 .. 4294967295";
        }
        description "Maximum number of prefixes that can be exported";
      }
    }
    container spf-options {
      description "Configure options for SPF";
      uses apply-advanced;
      container microloop-avoidance {
        description "Configure microloop avoidance mechanism";
        uses apply-advanced;
        container post-convergence-path {
          description "Temporarily install post-convergence path for routes potentially affected by microloops";
          presence "enable post-convergence-path";
          uses apply-advanced;
          leaf delay {
            type uint32 {
              range "500 .. 60000";
            }
            description "Time after which temporary post-convergence paths are removed";
            units milliseconds;
          }
          leaf maximum-labels {
            type uint32 {
              range "2 .. 8";
            }
            description "Maximum number of labels installed for post-convergence paths";
          }
        }
      }
      leaf delay {
        type uint32 {
          range "50 .. 8000";
        }
        description "Time to wait before running an SPF";
        units milliseconds;
      }
      leaf holddown {
        type uint32 {
          range "2000 .. 20000";
        }
        description "Time to hold down before running an SPF";
        units milliseconds;
      }
      leaf rapid-runs {
        type uint32 {
          range "1 .. 10";
        }
        description "Number of maximum rapid SPF runs before holddown";
      }
      leaf no-ignore-our-externals {
        type empty;
        description "Do not ignore self-generated external and NSSA LSAs";
      }
    }
    container backup-spf-options {
      description "Configure options for backup SPF";
      uses apply-advanced;
      container remote-backup-calculation {
        description "Calculate Remote LFA backup nexthops";
        presence "enable remote-backup-calculation";
        uses apply-advanced;
        container pq-nodes-nearest-to-source {
          description "PQ nodes selection based upon nearest to source";
          uses apply-advanced;
          leaf percent {
            type uint32 {
              range "10 .. 100";
            }
            description "Selection percentage for nearest to source";
          }
        }
      }
      container use-post-convergence-lfa {
        description "Calculate post-convergence backup paths";
        presence "enable use-post-convergence-lfa";
        uses apply-advanced;
        leaf maximum-labels {
          type uint32 {
            range "2 .. 8";
          }
          description "Maximum number of labels installed for post-convergence paths";
        }
        leaf maximum-backup-paths {
          type uint32 {
            range "1 .. 8";
          }
          description "Maximum number of equal-cost post-convergence paths installed";
        }
      }
      leaf use-source-packet-routing {
        type empty;
        description "Use spring backup paths for inet.0 routes";
      }
      leaf disable {
        type empty;
        description "Do not run backup SPF";
      }
      leaf no-install {
        type empty;
        description "Do not install backup nexthops into the RIB";
      }
      leaf downstream-paths-only {
        type empty;
        description "Use only downstream backup paths";
      }
      container per-prefix-calculation {
        description "Calculate backup nexthops for non-best prefix originators";
        uses apply-advanced;
        leaf stubs {
          type empty;
          description "Per prefix calculation for stubs only";
        }
        leaf summary {
          type empty;
          description "Per prefix calculation for summary originators only";
        }
        leaf externals {
          type empty;
          description "Per prefix calculation for externals";
        }
        leaf all {
          type empty;
          description "Per prefix calculation for all";
        }
      }
      leaf node-link-degradation {
        type empty;
        description "Degrade to link protection when nodelink protection not available";
      }
    }
    container traffic-engineering {
      description "Configure traffic engineering attributes";
      presence "enable traffic-engineering";
      uses apply-advanced;
      leaf no-topology {
        type empty;
        description "Disable dissemination of TE link-state topology information";
      }
      leaf multicast-rpf-routes {
        type empty;
        description "Install routes for multicast RPF checks into inet.2";
      }
      leaf l3-unicast-topology {
        type empty;
        description "Download IGP topology into TED";
      }
      container ignore-lsp-metrics {
        description "Ignore label-switched path metrics when doing shortcuts";
        presence "enable ignore-lsp-metrics";
        uses apply-advanced;
        leaf unconfigured-only {
          type empty;
          description "Ignore lsp metrics for unconfigured only";
        }
      }
      container shortcuts {
        description "Use label-switched paths as next hops, if possible";
        presence "enable shortcuts";
        uses apply-advanced;
        leaf ignore-lsp-metrics {
          type empty;
          description "Ignore label-switched path metrics when doing shortcuts";
          status deprecated;
        }
        leaf lsp-metric-into-summary {
          type empty;
          description "Advertise LSP metric into summary LSAs";
        }
        list family {
          description "Address family specific traffic-engineering attributes";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum inet {
                description "IPv4 family";
              }
              enum inet-mpls {
                description "IPv4-MPLS family";
              }
            }
          }
          uses apply-advanced;
        }
      }
      leaf advertise-unnumbered-interfaces {
        type empty;
        description "Advertise unnumbered interfaces";
      }
      leaf credibility-protocol-preference {
        type empty;
        description "TED protocol credibility follows protocol preference";
      }
      container advertisement {
        description "Advertise TE parameters even if RSVP is not turned on";
        uses apply-advanced;
        leaf always {
          type empty;
          description "Advertise TE parameters in TE LSAs";
        }
      }
      container tunnel-source-protocol {
        description "Protocols from which to pick label-switched paths";
        uses apply-advanced;
        container rsvp {
          description "Pick label-switched paths from rsvp";
          presence "enable rsvp";
          uses apply-advanced;
          leaf preference {
            type uint32 {
              range "1 .. 255";
            }
            description "Preference for label-switched paths from this protocol";
          }
        }
        container spring-te {
          description "Pick label-switched paths from spring-te";
          presence "enable spring-te";
          uses apply-advanced;
          leaf preference {
            type uint32 {
              range "1 .. 255";
            }
            description "Preference for label-switched paths from this protocol";
          }
        }
      }
    }
    container source-packet-routing {
      description "Enable source packet routing (SPRING)";
      presence "enable source-packet-routing";
      uses apply-advanced;
      container adjacency-segment {
        description "Attributes for adjacency segments in spring";
        uses apply-advanced;
        leaf hold-time {
          type uint32 {
            range "180000 .. 900000";
          }
          description "Retain time of Adjacency segment after isolating from an interface";
        }
      }
      leaf-list prefix-segment {
        type "jt:policy-algebra";
        description "Prefix Segment policy";
        ordered-by user;
      }
      leaf explicit-null {
        type empty;
        description "Set E and P bits in all Prefix SID advertisements";
      }
      container node-segment {
        description "Enable support for Node segments in SPRING";
        presence "enable node-segment";
        uses apply-advanced;
        leaf ipv4-index {
          type uint32 {
            range "0 .. 199999";
          }
          description "Set ipv4 node segment index";
        }
        leaf index-range {
          type uint32 {
            range "32 .. 16385";
          }
          description "Set range of node segment indices allowed";
        }
      }
      container srgb {
        description "Set the SRGB global block in SPRING";
        leaf start-label {
          type uint32;
          description "Start range for SRGB label block";
        }
        leaf index-range {
          type uint32;
          description "Index to the SRGB start label block";
        }
      }
      leaf mapping-server {
        type string;
        description "Mapping server name";
      }
      leaf install-prefix-sid-for-best-route {
        type empty;
        description "For best route install a exact prefix sid route";
      }
      leaf ldp-stitching {
        type empty;
        description "Enable SR to LDP stitching";
      }
      leaf-list flex-algorithm {
        type uint32 {
          range "128 .. 255";
        }
        description "Flex-algorithms we would like to participate in";
        max-elements 16;
      }
      leaf strict-asla-based-flex-algorithm {
        type empty;
        description "Flex-Algorithm to ignore links not having ASLA sub-TLVs";
      }
      container sensor-based-stats {
        description "Configure sensor based stats in SPRING";
        uses apply-advanced;
        container per-interface-per-member-link {
          description "Configure sensor based stats per nexthop";
          leaf ingress {
            type empty;
            description "Enable sensor based stats on ingress interface";
          }
          leaf egress {
            type empty;
            description "Enable sensor based stats on egress interface";
          }
        }
        container per-sid {
          description "Configure sensor based stats per spring route";
          leaf ingress {
            type empty;
            description "Enable sensor based stats for per-sid ingress accounting";
          }
          leaf egress {
            type empty;
            description "Enable sensor based stats for IP-MPLS egress accounting";
          }
        }
      }
    }
    list area {
      description "Configure an OSPF area";
      key name;
      ordered-by user;
      leaf name {
        type "jt:areaid";
        description "Area ID";
      }
      uses apply-advanced;
      choice stub-option {
        case case_1 {
          container stub {
            description "Configure a stub area";
            presence "enable stub";
            leaf default-metric {
              type uint32 {
                range "1 .. 16777215";
              }
              description "Metric for the default route in this stub area";
            }
            choice summaries-choice {
              leaf summaries {
                type empty;
                description "Flood summary LSAs into this stub area";
              }
              leaf no-summaries {
                type empty;
                description "Don't flood summary LSAs into this stub area";
              }
            }
          }
        }
        case case_2 {
          container nssa {
            description "Configure a not-so-stubby area";
            presence "enable nssa";
            uses apply-advanced;
            container default-lsa {
              description "Configure a default LSA";
              presence "enable default-lsa";
              uses apply-advanced;
              leaf default-metric {
                type uint32 {
                  range "1 .. 16777215";
                }
                description "Metric for the default route in this area";
              }
              leaf metric-type {
                type uint32 {
                  range "1 .. 2";
                }
                description "External metric type for the default type 7 LSA";
              }
              leaf type-7 {
                type empty;
                description "Flood type 7 default LSA if no-summaries is configured";
              }
            }
            leaf default-metric {
              type uint32 {
                range "1 .. 16777215";
              }
              description "Metric for the default route in this area";
              status deprecated;
            }
            leaf metric-type {
              type uint32 {
                range "1 .. 2";
              }
              description "External metric type for the default type 7 LSA";
              status deprecated;
            }
            choice summaries-choice {
              leaf summaries {
                type empty;
                description "Flood summary LSAs into this NSSA area";
              }
              leaf no-summaries {
                type empty;
                description "Don't flood summary LSAs into this NSSA area";
              }
            }
            list area-range {
              description "Configure NSSA area ranges";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipprefix";
                description "Range to summarize NSSA routes in this area";
              }
              uses apply-advanced;
              leaf restrict {
                type empty;
                description "Restrict advertisement of this area range";
              }
              leaf exact {
                type empty;
                description "Enforce exact match for advertisement of this area range";
              }
              container override-metric {
                description "Override the dynamic metric for this area-range";
                presence "enable override-metric";
                uses apply-advanced;
                leaf metric {
                  type uint32 {
                    range "1 .. 16777215";
                  }
                  description "Metric value";
                }
                leaf metric-type {
                  type uint32 {
                    range "1 .. 2";
                  }
                  default "1";
                  description "Set the metric type for the override metric";
                }
              }
            }
          }
        }
      }
      list area-range {
        description "Configure area ranges";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipprefix";
          description "Range to summarize routes in this area";
        }
        uses apply-advanced;
        leaf restrict {
          type empty;
          description "Restrict advertisement of this area range";
        }
        leaf exact {
          type empty;
          description "Enforce exact match for advertisement of this area range";
        }
        leaf override-metric {
          type uint32 {
            range "1 .. 16777215";
          }
          description "Override the dynamic metric for this area-range";
        }
      }
      leaf-list network-summary-export {
        type "jt:policy-algebra";
        description "Export policy for Type 3 Summary LSAs";
        ordered-by user;
      }
      leaf-list network-summary-import {
        type "jt:policy-algebra";
        description "Import policy for Type 3 Summary LSAs";
        ordered-by user;
      }
      leaf-list inter-area-prefix-export {
        type "jt:policy-algebra";
        description "Export policy for Inter Area Prefix LSAs";
        ordered-by user;
      }
      leaf-list inter-area-prefix-import {
        type "jt:policy-algebra";
        description "Import policy for Inter Area Prefix LSAs";
        ordered-by user;
      }
      leaf authentication-type {
        type enumeration {
          enum none {
            description "No authentication";
            status deprecated;
          }
          enum simple {
            description "Simple password authentication";
            status deprecated;
          }
          enum md5 {
            description "MD5 authentication";
            status deprecated;
          }
        }
        description "Authentication type";
        status deprecated;
      }
      list virtual-link {
        description "Configure virtual links";
        key "neighbor-id transit-area";
        ordered-by user;
        leaf neighbor-id {
          type "jt:ipv4addr";
          description "Router ID of a virtual neighbor";
        }
        leaf transit-area {
          type "jt:areaid";
          description "Transit area in common with virtual neighbor";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable this virtual link";
            }
          }
        }
        leaf retransmit-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Retransmission interval (seconds)";
        }
        leaf transit-delay {
          type uint32 {
            range "1 .. 65535";
          }
          description "Transit delay (seconds)";
        }
        leaf hello-interval {
          type uint32 {
            range "1 .. 255";
          }
          description "Hello interval (seconds)";
        }
        leaf dead-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Dead interval (seconds)";
        }
        leaf mtu {
          type uint32 {
            range "128 .. 65535";
          }
          description "Maximum OSPF packet size";
        }
        choice auth {
          case case_1 {
            container authentication {
              uses juniper-ospf-authentication;
            }
          }
          case case_2 {
            container authentication-key {
              description "Authentication key";
              status deprecated;
              leaf keyname {
                type "jt:unreadable";
                description "Authentication key value";
              }
              leaf key-id {
                type uint32 {
                  range "0 .. 255";
                }
                description "Key ID for MD5 authentication";
              }
            }
          }
        }
        leaf demand-circuit {
          type empty;
          description "Interface functions as a demand circuit";
        }
        leaf flood-reduction {
          type empty;
          description "Enable flood reduction";
        }
        leaf no-neighbor-down-notification {
          type empty;
          description "Don't inform other protocols about neighbor down events";
        }
        leaf ipsec-sa {
          type string {
            length "1 .. 32";
          }
          description "IPSec security association name";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Topology name";
          }
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable this topology";
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
      }
      list sham-link-remote {
        description "Configure parameters for remote sham link endpoint";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipaddr";
          description "Remote sham link endpoint address";
        }
        uses apply-advanced;
        leaf metric {
          type uint16 {
            range "1 .. 65535";
          }
          description "Sham link metric";
        }
        leaf ipsec-sa {
          type string {
            length "1 .. 32";
          }
          description "IPSec security association name";
        }
        leaf demand-circuit {
          type empty;
          description "Interface functions as a demand circuit";
        }
        leaf flood-reduction {
          type empty;
          description "Enable flood reduction";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Topology name";
          }
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable this topology";
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
      }
      list interface {
        description "Include an interface in this area";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4addr-or-interface";
          description "Interface name";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable OSPF on this interface";
            }
          }
        }
        leaf interface-type {
          type enumeration {
            enum nbma {
              description "Nonbroadcast multiaccess";
            }
            enum p2mp {
              description "Point-to-multipoint NBMA";
            }
            enum p2p {
              description "Point-to-point";
            }
            enum p2mp-over-lan {
              description "Point-to-multipoint over LAN mode";
            }
          }
          description "Type of interface";
        }
        choice protection-type {
          case case_1 {
            leaf link-protection {
              type empty;
              description "Protect interface from link faults only";
            }
          }
          case case_2 {
            leaf node-link-protection {
              type empty;
              description "Protect interface from both link and node faults";
            }
          }
        }
        leaf no-eligible-backup {
          type empty;
          description "Not eligible to backup traffic from protected interfaces";
        }
        leaf no-eligible-remote-backup {
          type empty;
          description "Not eligible for Remote-LFA backup traffic from protected interfaces";
        }
        container passive {
          description "Do not run OSPF, but advertise it";
          presence "enable passive";
          uses apply-advanced;
          container traffic-engineering {
            description "Advertise TE link information";
            uses apply-advanced;
            leaf remote-node-id {
              type "jt:ipaddr";
              description "Remote address of the link";
            }
            leaf remote-node-router-id {
              type "jt:ipv4addr";
              description "TE Router-ID of the remote node";
            }
          }
        }
        leaf secondary {
          type empty;
          description "Treat interface as secondary";
        }
        leaf own-router-lsa {
          type empty;
          description "Generate a separate router LSA for this interface";
        }
        container bandwidth-based-metrics {
          description "Configure bandwidth based metrics";
          uses apply-advanced;
          list bandwidth {
            description "Bandwidth threshold";
            key name;
            leaf name {
              type string;
            }
            leaf metric {
              type uint16 {
                range "1 .. 65535";
              }
              description "Metric associated with specified bandwidth";
            }
          }
        }
        leaf metric {
          type uint16 {
            range "1 .. 65535";
          }
          description "Interface metric";
        }
        leaf priority {
          type uint32 {
            range "0 .. 255";
          }
          description "Designated router priority";
        }
        leaf retransmit-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Retransmission interval (seconds)";
        }
        leaf transit-delay {
          type uint32 {
            range "1 .. 65535";
          }
          description "Transit delay (seconds)";
        }
        leaf hello-interval {
          type uint32 {
            range "1 .. 255";
          }
          description "Hello interval (seconds)";
        }
        leaf dead-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Dead interval (seconds)";
        }
        leaf mtu {
          type uint32 {
            range "128 .. 65535";
          }
          description "Maximum OSPF packet size";
        }
        choice auth {
          case case_1 {
            container authentication {
              uses juniper-ospf-authentication;
            }
          }
          case case_2 {
            container authentication-key {
              description "Authentication key";
              status deprecated;
              leaf keyname {
                type "jt:unreadable";
                description "Authentication key value";
              }
              leaf key-id {
                type uint32 {
                  range "0 .. 255";
                }
                description "Key ID for MD5 authentication";
              }
            }
          }
        }
        leaf demand-circuit {
          type empty;
          description "Interface functions as a demand circuit";
        }
        leaf flood-reduction {
          type empty;
          description "Enable flood reduction";
        }
        leaf no-neighbor-down-notification {
          type empty;
          description "Don't inform other protocols about neighbor down events";
        }
        leaf ipsec-sa {
          type string {
            length "1 .. 32";
          }
          description "IPSec security association name";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Topology name";
          }
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable this topology";
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
        leaf transmit-interval {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "OSPF packet transmit interval (milliseconds)";
          status deprecated;
        }
        container bfd-liveness-detection {
          description "Bidirectional Forwarding Detection options";
          uses apply-advanced;
          leaf version {
            type enumeration {
              enum 0 {
                description "BFD version 0 (deprecated)";
              }
              enum 1 {
                description "BFD version 1";
              }
              enum automatic {
                description "Choose BFD version automatically";
              }
            }
            default "automatic";
            description "BFD protocol version number";
          }
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
          leaf minimum-transmit-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            status deprecated;
            units milliseconds;
          }
          leaf minimum-receive-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum receive interval";
            units milliseconds;
          }
          leaf multiplier {
            type uint32 {
              range "1 .. 255";
            }
            default "3";
            description "Detection time multiplier";
          }
          leaf inline-disable {
            type empty;
            description "Disable inline mode for this BFD session";
          }
          leaf pdu-size {
            type uint32 {
              range "24 .. 9000";
            }
            default "24";
            description "BFD transport protocol payload size";
          }
          choice adaptation-choice {
            case case_1 {
              leaf no-adaptation {
                type empty;
                description "Disable adaptation";
              }
            }
          }
          container transmit-interval {
            description "Transmit-interval options";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf threshold {
              type uint32;
              description "High transmit interval triggering a trap";
              units milliseconds;
            }
          }
          container detection-time {
            description "Detection-time options";
            uses apply-advanced;
            leaf threshold {
              type uint32;
              description "High detection-time triggering a trap";
              units milliseconds;
            }
          }
          container authentication {
            description "Authentication options";
            uses apply-advanced;
            leaf key-chain {
              type string;
              description "Key chain name";
            }
            leaf algorithm {
              type enumeration {
                enum simple-password {
                  description "Simple password";
                }
                enum keyed-md5 {
                  description "Keyed message Digest 5";
                }
                enum meticulous-keyed-md5 {
                  description "Meticulous keyed message Digest 5";
                }
                enum keyed-sha-1 {
                  description "Keyed secure hash algorithm (SHA1) ";
                }
                enum meticulous-keyed-sha-1 {
                  description "Meticulous keyed secure hash algorithm (SHA1) ";
                }
              }
              description "Algorithm name";
            }
            leaf loose-check {
              type empty;
              description "Verify authentication only if authentication is negotiated";
            }
          }
          container echo {
            description "Echo mode parameters";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "100 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
          }
          container echo-lite {
            description "Echo-lite more parameters";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "100 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
          }
          leaf full-neighbors-only {
            type empty;
            description "Setup BFD sessions only to Full neighbors";
          }
          leaf holddown-interval {
            type uint32 {
              range "0 .. 255000";
            }
            description "Time to hold the session-UP notification to the client";
            units milliseconds;
          }
        }
        leaf dynamic-neighbors {
          type empty;
          description "Learn neighbors dynamically on a p2mp interface";
        }
        leaf no-advertise-adjacency-segment {
          type empty;
          description "Do not advertise an adjacency segment for this interface";
        }
        list neighbor {
          description "NBMA neighbor";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "Address of neighbor";
          }
          leaf eligible {
            type empty;
            description "Eligible to be DR on an NBMA network";
          }
        }
        leaf poll-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Poll interval for NBMA interfaces";
        }
        leaf no-interface-state-traps {
          type empty;
          description "Do not send interface state change traps";
        }
        leaf strict-bfd {
          type empty;
          description "Enable strict bfd over this interface";
        }
        container post-convergence-lfa {
          description "Protect interface using post-convergence backup path";
          presence "enable post-convergence-lfa";
          uses apply-advanced;
          container node-protection {
            description "Compute backup path assuming node failure";
            presence "enable node-protection";
            uses apply-advanced;
            leaf cost {
              type uint16 {
                range "1 .. 65535";
              }
              description "Cost for node protection";
            }
          }
          leaf srlg-protection {
            type empty;
            description "Compute backup path assuming SRLG failure";
          }
          leaf fate-sharing-protection {
            type empty;
            description "Compute backup path assuming fate-sharing group failure";
          }
        }
        leaf te-metric {
          type uint32 {
            range "1 .. 4294967295";
          }
          description "Traffic engineering metric";
        }
        container ldp-synchronization {
          description "Advertise maximum metric until LDP is operational";
          presence "enable ldp-synchronization";
          uses ldp-sync-obj;
        }
        container ipv4-adjacency-segment {
          description "Configure ipv4 adjacency segment";
          uses apply-advanced;
          container protected {
            description "Adjacency SID is eligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
          container unprotected {
            description "Adjacency SID uneligible for protection";
            choice adjsid-type {
              case case_1 {
                container index {
                  description "Adjacency SID indexed from SRGB";
                  leaf index-number {
                    type uint32 {
                      range "0 .. 199999";
                    }
                  }
                }
              }
              case case_2 {
                leaf label {
                  type uint32 {
                    range "16 .. 1048575";
                  }
                  description "Adjacency SID from static label pool";
                }
              }
              case case_3 {
                leaf dynamic {
                  type empty;
                  description "Dynamically allocate an adjacency segment";
                }
              }
            }
          }
        }
        list lan-neighbor {
          description "Configuration specific to a LAN neighbor";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "Address of neighbor";
          }
          uses apply-advanced;
          container ipv4-adjacency-segment {
            description "Configure ipv4 adjacency segment";
            uses apply-advanced;
            container protected {
              description "Adjacency SID is eligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
            container unprotected {
              description "Adjacency SID uneligible for protection";
              choice adjsid-type {
                case case_1 {
                  container index {
                    description "Adjacency SID indexed from SRGB";
                    leaf index-number {
                      type uint32 {
                        range "0 .. 199999";
                      }
                    }
                  }
                }
                case case_2 {
                  leaf label {
                    type uint32 {
                      range "16 .. 1048575";
                    }
                    description "Adjacency SID from static label pool";
                  }
                }
                case case_3 {
                  leaf dynamic {
                    type empty;
                    description "Dynamically allocate an adjacency segment";
                  }
                }
              }
            }
          }
        }
        leaf delay-metric {
          type uint32 {
            range "0 .. 16777215";
          }
          description "Delay metric";
          units microseconds;
        }
        container delay-measurement {
          description "Enable delay measurement";
          presence "enable delay-measurement";
          uses apply-advanced;
          leaf probe-interval {
            type uint32 {
              range "1 .. 255";
            }
            description "Probe interval";
            units seconds;
          }
          leaf probe-count {
            type uint32 {
              range "1 .. 15";
            }
            description "Probe count";
          }
          container advertisement {
            description "Delay advertisement";
            uses apply-advanced;
            container periodic {
              description "Periodic advertisement parameters";
              uses apply-advanced;
              leaf threshold {
                type uint32 {
                  range "0 .. 100";
                }
                description "Threshold";
                units percentage;
              }
              leaf interval {
                type uint32 {
                  range "30 .. 3600";
                }
                description "Interval";
                units seconds;
              }
            }
            container accelerated {
              description "Accelerated advertisement parameters";
              presence "enable accelerated";
              uses apply-advanced;
              leaf threshold {
                type uint32 {
                  range "0 .. 100";
                }
                description "Threshold";
                units percentage;
              }
            }
          }
        }
        container application-specific {
          description "Advertise application-specific TE attributes";
          uses apply-advanced;
          list attribute-group {
            description "Link attribute group name";
            key name;
            max-elements 1;
            ordered-by user;
            leaf name {
              type string;
              description "Link attribute group name";
            }
            uses apply-advanced;
            leaf te-metric {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Traffic engineering metric for this attribute group";
            }
            leaf-list admin-group {
              type string;
              description "Administrative groups for this attribute-group";
              max-elements 16;
              ordered-by user;
            }
            leaf delay-metric {
              type uint32 {
                range "0 .. 16777215";
              }
              description "Delay metric for this attribute-group";
              units microseconds;
            }
            leaf advertise-interface-delay {
              type empty;
              description "Use interface specific static/dynamic delay values as applicable in ASLA Sub-TLVs";
            }
            container application {
              description "Standard Applications part of this attribute-group";
              uses apply-advanced;
              leaf flex-algorithm {
                type empty;
                description "Set X flag in standard application bit mask";
              }
            }
          }
        }
      }
      leaf no-context-identifier-advertisement {
        type empty;
        description "Disable context identifier advertisments in this area";
      }
      list peer-interface {
        description "Configuration for peer interface";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Name of peer interface";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable OSPF on this control peer";
            }
          }
        }
        leaf retransmit-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Retransmission interval (seconds)";
        }
        leaf transit-delay {
          type uint32 {
            range "1 .. 65535";
          }
          description "Transit delay (seconds)";
        }
        leaf hello-interval {
          type uint32 {
            range "1 .. 255";
          }
          description "Hello interval (seconds)";
        }
        leaf dead-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Dead interval (seconds)";
        }
        leaf mtu {
          type uint32 {
            range "128 .. 65535";
          }
          description "Maximum OSPF packet size";
        }
        choice auth {
          case case_1 {
            container authentication {
              uses juniper-ospf-authentication;
            }
          }
          case case_2 {
            container authentication-key {
              description "Authentication key";
              status deprecated;
              leaf keyname {
                type "jt:unreadable";
                description "Authentication key value";
              }
              leaf key-id {
                type uint32 {
                  range "0 .. 255";
                }
                description "Key ID for MD5 authentication";
              }
            }
          }
        }
        leaf demand-circuit {
          type empty;
          description "Interface functions as a demand circuit";
        }
        leaf flood-reduction {
          type empty;
          description "Enable flood reduction";
        }
        leaf no-neighbor-down-notification {
          type empty;
          description "Don't inform other protocols about neighbor down events";
        }
      }
      leaf no-source-packet-routing {
        type empty;
        description "Disable SPRING in this area";
      }
      list context-identifier {
        description "Configure context identifier in support of edge protection";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipv4addr";
          description "Context identifier";
        }
        uses apply-advanced;
      }
      list label-switched-path {
        description "Configuration for advertisement of a label-switched path";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 64";
          }
          description "Name of label-switched path to be advertised";
        }
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable OSPF on this label-switched path";
            }
          }
        }
        leaf metric {
          type uint16 {
            range "1 .. 65535";
          }
          description "Interface metric";
        }
        list topology {
          description "Topology specific attributes";
          key name;
          ordered-by user;
          leaf name {
            type string;
            description "Topology name";
          }
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable this topology";
          }
          leaf metric {
            type uint16 {
              range "1 .. 65535";
            }
            description "Topology metric";
          }
          container bandwidth-based-metrics {
            description "Configure bandwidth based metrics";
            uses apply-advanced;
            list bandwidth {
              description "Bandwidth threshold";
              key name;
              leaf name {
                type string;
              }
              leaf metric {
                type uint16 {
                  range "1 .. 65535";
                }
                description "Metric associated with specified bandwidth";
              }
            }
          }
        }
      }
    }
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable OSPF";
        }
      }
    }
    container traceoptions {
      description "Trace options for OSPF";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum spf {
              description "Trace SPF calculations";
            }
            enum error {
              description "Trace errored packets";
            }
            enum event {
              description "Trace OSPF state machine events";
            }
            enum packet-dump {
              description "Dump the contents of selected packet types";
            }
            enum flooding {
              description "Trace LSA flooding";
            }
            enum lsa-analysis {
              description "Trace LSA analysis";
            }
            enum packets {
              description "Trace all OSPF packets";
            }
            enum hello {
              description "Trace hello packets";
            }
            enum database-description {
              description "Trace database description packets";
            }
            enum lsa-request {
              description "Trace LSA request packets";
            }
            enum lsa-update {
              description "Trace LSA update packets";
            }
            enum lsa-ack {
              description "Trace LSA acknowledgment packets";
            }
            enum ldp-synchronization {
              description "Trace synchronization between OSPF and LDP";
            }
            enum on-demand {
              description "Trace demand circuit extensions";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum graceful-restart {
              description "Trace graceful restart";
            }
            enum restart-signaling {
              description "Trace restart signaling";
            }
            enum traffic-statistics {
              description "Trace Segment Routing Traffic Statistics";
            }
            enum backup-spf {
              description "Trace backup SPF (LFA) specific events";
            }
            enum source-packet-routing {
              description "Trace source packet routing (SPRING) events";
            }
            enum post-convergence-lfa {
              description "Trace post-convergence-lfa related events";
            }
            enum flex-algorithm {
              description "Trace flex-algorithm related events";
            }
            enum rmopd {
              description "Trace rmopd interactions";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf prefix-export-limit {
      type uint32 {
        range "0 .. 4294967295";
      }
      description "Maximum number of prefixes that can be exported";
    }
    container rib-groups {
      description "Routing table groups for importing OSPF routes";
      uses apply-advanced;
      leaf inet {
        type string;
        description "Name of the IPv4/v6 routing table group";
      }
      leaf inet3 {
        type string;
        description "Name of the IPv4/v6 inet.3 routing table group";
      }
    }
    leaf job-stats {
      type empty;
      description "Collect job statistics";
    }
    container overload {
      description "Set the overload mode (repel transit traffic)";
      presence "enable overload";
      uses apply-advanced;
      leaf timeout {
        type uint32 {
          range "60 .. 3600";
        }
        description "Time after which overload mode is reset";
        units seconds;
      }
      leaf allow-route-leaking {
        type empty;
        description "Allow routes to be leaked when overload is configured";
      }
      leaf stub-network {
        type empty;
        description "Advertise Stub Network with maximum metric";
      }
      leaf intra-area-prefix {
        type empty;
        description "Advertise Intra Area Prefix with maximum metric";
      }
      leaf as-external {
        type empty;
        description "Advertise As External with maximum usable metric";
      }
    }
    container database-protection {
      description "Configure database protection attributes";
      presence "enable database-protection";
      uses apply-advanced;
      leaf maximum-lsa {
        type uint32 {
          range "1 .. 1000000";
        }
        description "Maximum allowed non self-generated LSAs";
      }
      leaf warning-only {
        type empty;
        description "Emit only a warning when LSA maximum limit is exceeded";
      }
      leaf warning-threshold {
        type uint8 {
          range "30 .. 100";
        }
        description "Percentage of LSA maximum above which to trigger warning";
        units percent;
      }
      leaf ignore-count {
        type uint8 {
          range "1 .. 32";
        }
        description "Maximum number of times to go into ignore state";
      }
      leaf ignore-time {
        type uint16 {
          range "30 .. 3600";
        }
        description "Time to stay in ignore state and ignore all neighbors";
        units seconds;
      }
      leaf reset-time {
        type uint32 {
          range "60 .. 86400";
        }
        description "Time after which the ignore count gets reset to zero";
        units seconds;
      }
    }
    container graceful-restart {
      description "Configure graceful restart attributes";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable OSPF graceful restart capability";
          }
        }
      }
      leaf restart-duration {
        type uint32 {
          range "1 .. 3600";
        }
        description "Time for all neighbors to become full";
        units seconds;
      }
      leaf notify-duration {
        type uint32 {
          range "1 .. 3600";
        }
        description "Time to send all max-aged grace LSAs";
        units seconds;
      }
      container helper-disable {
        description "Disable graceful restart helper capability";
        presence "enable helper-disable";
        uses apply-advanced;
        choice disable-choices {
          case case_1 {
            leaf standard {
              type empty;
              description "Disable helper-mode for rfc3623 based GR";
            }
          }
          case case_2 {
            leaf restart-signaling {
              type empty;
              description "Disable helper mode for restart-signaling ";
            }
          }
          case case_3 {
            leaf both {
              type empty;
              description "Disable helper mode for both the types of GR";
            }
          }
        }
      }
      leaf no-strict-lsa-checking {
        type empty;
        description "Do not abort graceful helper mode upon LSA changes";
      }
    }
    leaf route-type-community {
      type enumeration {
        enum iana {
          description "BGP extended community value used is 0x0306";
        }
        enum vendor {
          description "Vendor BGP extended community value used is 0x8000";
        }
      }
      description "Specify BGP extended community value to encode OSPF route type";
    }
    container domain-id {
      description "Configure domain ID";
      choice domain_id_or_disable {
        case case_1 {
          leaf domain-id {
            type string;
            description "Domain ID";
          }
        }
        case case_2 {
          leaf disable {
            type empty;
            description "Disable domain ID";
          }
        }
      }
    }
    choice domain_vpn_tag_or_disable {
      case case_1 {
        leaf domain-vpn-tag {
          type uint32 {
            range "0 .. 4294967295";
          }
          description "Domain VPN tag for external LSA";
        }
      }
      case case_2 {
        leaf no-domain-vpn-tag {
          type empty;
          description "Disable domain VPN tag";
        }
      }
    }
    leaf preference {
      type uint32;
      description "Preference of internal routes";
    }
    leaf external-preference {
      type uint32;
      description "Preference of external routes";
    }
    leaf labeled-preference {
      type uint32;
      description "Preference of labeled routes";
    }
    leaf-list export {
      type "jt:policy-algebra";
      description "Export policy";
      ordered-by user;
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Import policy (for external routes or setting priority)";
      ordered-by user;
    }
    leaf reference-bandwidth {
      type string;
      description "Bandwidth for calculating metric defaults";
    }
    leaf lsa-refresh-interval {
      type uint32 {
        range "25 .. 50";
      }
      default "50";
      description "LSA refresh interval (minutes)";
    }
    leaf spf-delay {
      type uint32 {
        range "50 .. 8000";
      }
      description "Time to wait before running an SPF";
      status deprecated;
      units milliseconds;
    }
    leaf no-rfc-1583 {
      type empty;
      description "Disable RFC1583 compatibility";
    }
    leaf forwarding-address-to-broadcast {
      type empty;
      description "Set forwarding address in Type 5 LSA in broadcast network";
    }
    choice nssa-abr-option {
      case case_1 {
        leaf no-nssa-abr {
          type empty;
          description "Disable full NSSA functionality at ABR";
        }
      }
    }
    container sham-link {
      description "Configure parameters for sham links";
      presence "enable sham-link";
      uses apply-advanced;
      leaf local {
        type "jt:ipaddr";
        description "Local sham link endpoint address";
      }
      leaf no-advertise-local {
        type empty;
        description "Don't advertise local sham link endpoint as stub in router LSA";
        status deprecated;
      }
    }
  }
  grouping juniper-protocols-pgm {
    uses apply-advanced;
    container traceoptions {
      description "PGM trace options";
      uses apply-advanced;
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum init {
              description "Trace initialization events";
            }
            enum show {
              description "Trace show command servicing";
            }
            enum route-socket {
              description "Trace route-socket events";
            }
            enum parse {
              description "Trace parser processing";
            }
            enum state {
              description "Trace state transitions";
            }
            enum packets {
              description "Trace packet processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
  }
  grouping juniper-protocols-pim {
    uses apply-advanced;
    leaf protocol-instance-name {
      type string;
      description "Name of protocol instance under routing instance";
    }
    container family {
      description "Local address family";
      container any {
        description "Default properties for all address families";
        presence "enable any";
        uses apply-advanced;
        leaf disable {
          type empty;
          description "Disable all families";
        }
      }
      container inet {
        description "IPv4 specific properties";
        presence "enable inet";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable PIMv4 on all interfaces";
            }
          }
        }
      }
      container inet6 {
        description "IPv6 specific properties";
        presence "enable inet6";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable PIMv6 on all interfaces";
            }
          }
        }
      }
    }
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable PIM";
        }
      }
    }
    container nonstop-routing {
      description "Configure PIM nonstop-routing attributes";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable non-stop routing for PIM";
          }
        }
      }
    }
    container traceoptions {
      description "Trace options for PIM";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum route {
              description "Trace routing information";
            }
            enum packets {
              description "Trace all PIM packets";
            }
            enum hello {
              description "Trace hello packets";
            }
            enum register {
              description "Trace register/register-stop messages";
            }
            enum join {
              description "Trace join/prune/graft/graft-ack messages";
            }
            enum prune {
              description "Trace join/prune/graft/graft-ack messages";
            }
            enum graft {
              description "Trace join/prune/graft/graft-ack messages";
            }
            enum bootstrap {
              description "Trace bootstrap/RP/auto-RP messages";
            }
            enum rp {
              description "Trace bootstrap/RP/auto-RP messages";
            }
            enum autorp {
              description "Trace bootstrap/RP/auto-RP messages";
            }
            enum assert {
              description "Trace assert messages";
            }
            enum mdt {
              description "Trace messages related to multicast data tunnels";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum bidirectional-df-election {
              description "Trace bidirectional PIM DF election events";
            }
            enum mofrr {
              description "Trace Multicast only Fast Re-Route messages";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
        container filter {
          description "Filter to apply to this flag";
          presence "enable filter";
          uses pim_filter_obj;
        }
      }
    }
    container dense-groups {
      description "Dense mode groups for sparse-dense mode";
      uses apply-advanced;
      leaf dynamic-reject {
        type empty;
        description "Reject dynamic autorp negative dense-mode prefixes learnt from network";
      }
      list pim-dense-group-type {
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipprefix";
          description "Group address or range to forward in dense mode";
        }
        choice dense-group-flags {
          case case_1 {
            leaf reject {
              type empty;
              description "Do not include prefix as dense mode; force sparse mode";
            }
          }
          case case_2 {
            leaf announce {
              type empty;
              description "Advertise as negative prefix in auto-RP announce messages";
            }
          }
        }
      }
    }
    leaf vpn-tunnel-source {
      type "jt:ipv4addr";
      description "Source address for the provider space mGRE tunnel";
      status deprecated;
    }
    leaf vpn-group-address {
      type "jt:ipv4addr";
      description "Group address for the VPN in provider space";
      status deprecated;
    }
    leaf-list tunnel-devices {
      type "jt:interface-device";
      description "Tunnel devices to be used for creating mt interfaces";
      ordered-by user;
    }
    container rpf-selection {
      description "Select RPF neighbor";
      uses apply-advanced;
      list group {
        description "IP prefix of multicast group";
        key name;
        ordered-by user;
        leaf name {
          type "jt:ipprefix";
          description "IP prefix of group";
        }
        uses apply-advanced;
        container wildcard-source {
          description "Select RPF for (*,g) and unspecified (s,g) joins";
          presence "enable wildcard-source";
          uses apply-advanced;
          leaf next-hop {
            type "jt:ipaddr";
            description "Next-hop address";
          }
        }
        list source {
          description "IP prefix of one or more multicast sources";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipprefix";
            description "IP prefix of source";
          }
          uses apply-advanced;
          leaf next-hop {
            type "jt:ipaddr";
            description "Next-hop address";
          }
        }
      }
      list prefix-list {
        description "Multicast group prefix list";
        key name;
        ordered-by user;
        leaf name {
          type string;
          description "Name of prefix list to match against";
        }
        uses apply-advanced;
        container wildcard-source {
          description "Select RPF for (*,g) and unspecified (s,g) joins";
          presence "enable wildcard-source";
          uses apply-advanced;
          leaf next-hop {
            type "jt:ipaddr";
            description "Next-hop address";
          }
        }
        list source {
          description "IP prefix of one or more multicast sources";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipprefix";
            description "IP prefix of source";
          }
          uses apply-advanced;
          leaf next-hop {
            type "jt:ipaddr";
            description "Next-hop address";
          }
        }
      }
    }
    container mvpn {
      description "PIM MVPN control-plane options";
      presence "enable mvpn";
      uses apply-advanced;
      container autodiscovery {
        description "PE router autodiscovery options for SSM MDTs";
        status deprecated;
        uses apply-advanced;
        leaf inet-mdt {
          type empty;
          description "MDT-SAFI PE autodiscovery for SSM MDTs";
        }
      }
      container family {
        description "PIM MVPN address family";
        uses apply-advanced;
        container inet {
          description "IPv4 PIM MVPN specific properties";
          uses apply-advanced;
          leaf rosen-mvpn {
            type empty;
            status deprecated;
          }
          leaf ngen-mvpn {
            type empty;
            status deprecated;
          }
          container autodiscovery {
            description "PE router autodiscovery options for SSM MDTs";
            uses apply-advanced;
            leaf inet-mdt {
              type empty;
              description "MDT-SAFI PE autodiscovery for SSM MDTs";
            }
          }
          leaf disable {
            type empty;
            description "Disable family IPv4";
          }
        }
        container inet6 {
          description "IPv6 PIM MVPN specific properties";
          uses apply-advanced;
          leaf rosen-mvpn {
            type empty;
            status deprecated;
          }
          leaf ngen-mvpn {
            type empty;
            status deprecated;
          }
          container autodiscovery {
            description "PE router autodiscovery options for SSM MDTs";
            uses apply-advanced;
            leaf inet-mdt {
              type empty;
              description "MDT-SAFI PE autodiscovery for SSM MDTs";
            }
          }
          leaf disable {
            type empty;
            description "Disable family IPv6";
          }
        }
      }
    }
    container rib-group {
      description "Routing table group";
      uses rib_group_type;
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "PIM sparse import join policy";
      ordered-by user;
    }
    leaf-list export {
      type "jt:policy-algebra";
      description "PIM sparse export join policy";
      ordered-by user;
    }
    container mldp-inband-signalling {
      presence "enable mldp-inband-signalling";
      uses apply-advanced;
      leaf-list policy {
        type "jt:policy-algebra";
        description "PIM MLDP join translation filter policy";
        ordered-by user;
      }
    }
    container rpf-vector {
      description "RPF vector TLV";
      uses apply-advanced;
      leaf-list policy {
        type "jt:policy-algebra";
        description "RPF vector TLV include policy";
        ordered-by user;
      }
    }
    leaf assert-timeout {
      type uint32 {
        range "5 .. 210";
      }
      default "180";
      description "Set assert timeout";
    }
    leaf assert-robust-count {
      type uint32 {
        range "1 .. 5";
      }
      default "2";
      description "Number of assert messages an assert winner sends in one cycle";
    }
    leaf join-prune-timeout {
      type uint32 {
        range "210 .. 420";
      }
      default "210";
      description "Set join/prune timeout";
    }
    container spt-threshold {
      description "Set shortest-path-tree threshold policy";
      uses apply-advanced;
      leaf-list infinity {
        type "jt:policy-algebra";
        description "Apply policy to always remain on shared tree";
        ordered-by user;
      }
    }
    container sglimit {
      description "Set limit on number of (S,G) states ";
      uses apply-advanced;
      list family {
        description "Protocol family";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum inet {
              description "IPv4 family";
            }
            enum inet6 {
              description "IPv6 family";
            }
          }
        }
        uses apply-advanced;
        leaf maximum {
          type uint32 {
            range "1 .. 65535";
          }
          description "Maximum limit above which additional entries are not accepted";
        }
        leaf threshold {
          type uint32 {
            range "1 .. 100";
          }
          description "Percentage of maximum at which to start generating warnings";
        }
        leaf log-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Time between successive log messages";
        }
      }
      leaf maximum {
        type uint32 {
          range "1 .. 65535";
        }
        description "Maximum limit above which additional entries are not accepted";
      }
      leaf threshold {
        type uint32 {
          range "1 .. 100";
        }
        description "Percentage of maximum at which to start generating warnings";
      }
      leaf log-interval {
        type uint32 {
          range "1 .. 65535";
        }
        description "Time between successive log messages";
      }
    }
    container rp {
      description "Router's rendezvous point properties";
      uses apply-advanced;
      leaf bootstrap-priority {
        type uint32 {
          range "0 .. 255";
        }
        description "Eligibility to be the bootstrap router (IPv4 only)";
      }
      leaf-list bootstrap-import {
        type "jt:policy-algebra";
        description "Bootstrap import policy (IPv4 only)";
        ordered-by user;
      }
      leaf-list bootstrap-export {
        type "jt:policy-algebra";
        description "Bootstrap export policy (IPv4 only)";
        ordered-by user;
      }
      container bootstrap {
        description "Bootstrap properties";
        uses apply-advanced;
        container family {
          description "Bootstrap address family";
          container inet {
            description "IPv4 bootstrap properties";
            uses pim_bootstrap_options_type;
          }
          container inet6 {
            description "IPv6 bootstrap properties";
            uses pim_bootstrap_options_type;
          }
        }
      }
      container register-limit {
        description "Set limit on incoming registers that create (S,G) state";
        uses apply-advanced;
        list family {
          description "Protocol family";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum inet {
                description "IPv4 family";
              }
              enum inet6 {
                description "IPv6 family";
              }
            }
          }
          uses apply-advanced;
          leaf maximum {
            type uint32 {
              range "1 .. 65535";
            }
            description "Maximum limit above which additional entries are not accepted";
          }
          leaf threshold {
            type uint32 {
              range "1 .. 100";
            }
            description "Percentage of maximum at which to start generating warnings";
          }
          leaf log-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Time between successive log messages";
          }
        }
        leaf maximum {
          type uint32 {
            range "1 .. 65535";
          }
          description "Maximum limit above which additional entries are not accepted";
        }
        leaf threshold {
          type uint32 {
            range "1 .. 100";
          }
          description "Percentage of maximum at which to start generating warnings";
        }
        leaf log-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Time between successive log messages";
        }
      }
      container group-rp-mapping {
        description "Group-rp-mapping";
        uses apply-advanced;
        list family {
          description "Protocol family";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum inet {
                description "IPv4 family";
              }
              enum inet6 {
                description "IPv6 family";
              }
            }
          }
          uses apply-advanced;
          leaf maximum {
            type uint32 {
              range "1 .. 65535";
            }
            description "Maximum limit above which additional entries are not accepted";
          }
          leaf threshold {
            type uint32 {
              range "1 .. 100";
            }
            description "Percentage of maximum at which to start generating warnings";
          }
          leaf log-interval {
            type uint32 {
              range "1 .. 65535";
            }
            description "Time between successive log messages";
          }
        }
        leaf maximum {
          type uint32 {
            range "1 .. 65535";
          }
          description "Maximum limit above which additional entries are not accepted";
        }
        leaf threshold {
          type uint32 {
            range "1 .. 100";
          }
          description "Percentage of maximum at which to start generating warnings";
        }
        leaf log-interval {
          type uint32 {
            range "1 .. 65535";
          }
          description "Time between successive log messages";
        }
      }
      leaf-list rp-register-policy {
        type "jt:policy-algebra";
        description "RP policy applied to incoming register messages";
        ordered-by user;
      }
      leaf-list dr-register-policy {
        type "jt:policy-algebra";
        description "DR policy applied to outgoing register messages";
        ordered-by user;
      }
      container local {
        description "Router's local RP properties";
        uses apply-advanced;
        leaf address {
          type "jt:ipv4addr";
          description "Local RP address (IPv4 only)";
        }
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable this RP (IPv4 only)";
            }
          }
        }
        leaf priority {
          type uint32 {
            range "0 .. 255";
          }
          description "Router's priority for becoming an RP (IPv4 only)";
        }
        leaf hold-time {
          type uint32 {
            range "1 .. 65535";
          }
          description "How long neighbor considers this router to be up, in seconds (IPv4 only)";
        }
        list group-ranges {
          description "Group address range for which this router can be an RP (IPv4 only)";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv4prefix";
          }
          uses apply-advanced;
        }
        leaf override {
          type empty;
          description "Static RP mapping will take precedence over dynamic";
        }
        container family {
          description "Local RP address family";
          container inet {
            description "IPv4 local RP properties";
            uses apply-advanced;
            leaf address {
              type "jt:ipv4addr";
              description "Local RP address";
            }
            choice enable-disable {
              case case_1 {
                leaf disable {
                  type empty;
                  description "Disable this RP";
                }
              }
            }
            leaf priority {
              type uint32 {
                range "0 .. 255";
              }
              description "Router's priority for becoming an RP";
            }
            leaf hold-time {
              type uint32 {
                range "1 .. 65535";
              }
              description "How long neighbor considers this router to be up, in seconds";
            }
            list group-ranges {
              description "Group address range for which this router can be an RP";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv4prefix";
              }
              uses apply-advanced;
            }
            leaf override {
              type empty;
              description "Static RP mapping will take precedence over dynamic";
            }
            container anycast-pim {
              description "Attributes for IPv4 anycast PIM";
              uses apply-advanced;
              container rp-set {
                description "Rendezvous points belonging to anycast RP set";
                uses apply-advanced;
                list address {
                  description "IPv4 address of one or more remote anycast RPs";
                  key name;
                  ordered-by user;
                  leaf name {
                    type "jt:ipaddr";
                    description "IPv4 address of remote anycast RP";
                  }
                  uses apply-advanced;
                  leaf forward-msdp-sa {
                    type empty;
                    description "Forward SAs learned from MSDP to this RP";
                  }
                }
              }
              leaf local-address {
                type "jt:ipaddr";
                description "Local address for replicating register messages to other RPs";
              }
            }
          }
          container inet6 {
            description "IPv6 local RP properties";
            uses apply-advanced;
            leaf address {
              type "jt:ipv6addr";
              description "Local RP address";
            }
            choice enable-disable {
              case case_1 {
                leaf disable {
                  type empty;
                  description "Disable this RP";
                }
              }
            }
            leaf priority {
              type uint32 {
                range "0 .. 255";
              }
              description "Router's priority for becoming an RP";
            }
            leaf hold-time {
              type uint32 {
                range "1 .. 65535";
              }
              description "How long neighbor considers this router to be up, in seconds";
            }
            list group-ranges {
              description "Group address range for which this router can be an RP";
              key name;
              ordered-by user;
              leaf name {
                type "jt:ipv6prefix";
              }
              uses apply-advanced;
            }
            leaf override {
              type empty;
              description "Static RP mapping will take precedence over dynamic";
            }
            container anycast-pim {
              description "Attributes for IPv6 anycast PIM";
              uses apply-advanced;
              container rp-set {
                description "Rendezvous points belonging to anycast RP set";
                uses apply-advanced;
                list address {
                  description "IPv6 address of one or more remote anycast RPs";
                  key name;
                  ordered-by user;
                  leaf name {
                    type "jt:ipv6addr";
                    description "IPv6 address of remote anycast RP";
                  }
                  uses apply-advanced;
                }
              }
              leaf local-address {
                type "jt:ipv6addr";
                description "Local address for replicating register messages to other RPs";
              }
            }
          }
        }
      }
      container embedded-rp {
        description "Set embedded-RP mode (IPv6 only)";
        presence "enable embedded-rp";
        uses apply-advanced;
        list group-ranges {
          description "Group address range of RP";
          key name;
          ordered-by user;
          uses pim_rp_group_range_type;
        }
        leaf maximum-rps {
          type uint32 {
            range "1 .. 500";
          }
          default "100";
          description "Maximum number of embedded RPs";
        }
      }
      container auto-rp {
        description "Set auto-RP mode (IPv4 only)";
        uses apply-advanced;
        choice autorp-mode {
          case case_1 {
            leaf discovery {
              type empty;
              description "Listen for auto-RP discovery messages";
            }
          }
          case case_2 {
            leaf announce {
              type empty;
              description "Transmit auto-RP announcement messages";
            }
          }
          case case_3 {
            leaf mapping {
              type empty;
              description "Transmit auto-RP mapping messages";
            }
          }
        }
        choice mapping-agent-election-choice {
          leaf mapping-agent-election {
            type empty;
            description "Consider higher-addressed mapping agents as authoritative";
          }
          leaf no-mapping-agent-election {
            type empty;
            description "Don't consider higher-addressed mapping agents as authoritative";
          }
        }
      }
      container static {
        description "Configure static PIM RPs";
        uses apply-advanced;
        list address {
          description "RP address";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "IP address of RP";
          }
          uses apply-advanced;
          leaf version {
            type uint32 {
              range "1 .. 2";
            }
            description "PIM version of RP";
            status deprecated;
          }
          list group-ranges {
            description "Group address range of RP";
            key name;
            ordered-by user;
            uses pim_rp_group_range_type;
          }
          leaf override {
            type empty;
            description "Static RP mapping will take precedence over dynamic";
          }
        }
      }
      container bidirectional {
        description "Configure PIM bidirectional-mode RPs";
        uses apply-advanced;
        list address {
          description "RP address";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "IP address of RP";
          }
          uses apply-advanced;
          leaf priority {
            type uint32 {
              range "0 .. 255";
            }
            description "Router's priority for becoming an RP";
          }
          leaf hold-time {
            type uint32 {
              range "1 .. 65535";
            }
            description "How long neighbor considers this router to be up";
            units seconds;
          }
          list group-ranges {
            description "Group address range of RP";
            key name;
            ordered-by user;
            uses pim_rp_group_range_type;
          }
        }
      }
    }
    leaf passive {
      type empty;
      description "Configure PIM protocol in passive mode";
    }
    list interface {
      description "PIM interface options";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Interface name";
      }
      uses apply-advanced;
      container family {
        description "Local address family";
        container any {
          description "Default properties for all families";
          presence "enable any";
          uses apply-advanced;
          leaf disable {
            type empty;
            description "Disable all families";
          }
        }
        container inet {
          description "IPv4 specific properties";
          presence "enable inet";
          uses apply-advanced;
          container bfd-liveness-detection {
            description "Bidirectional Forwarding Detection options";
            uses apply-advanced;
            leaf version {
              type enumeration {
                enum 0 {
                  description "BFD version 0 (deprecated)";
                }
                enum 1 {
                  description "BFD version 1";
                }
                enum automatic {
                  description "Choose BFD version automatically";
                }
              }
              default "automatic";
              description "BFD protocol version number";
            }
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
            leaf minimum-transmit-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              status deprecated;
              units milliseconds;
            }
            leaf minimum-receive-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum receive interval";
              units milliseconds;
            }
            leaf multiplier {
              type uint32 {
                range "1 .. 255";
              }
              default "3";
              description "Detection time multiplier";
            }
            leaf inline-disable {
              type empty;
              description "Disable inline mode for this BFD session";
            }
            leaf pdu-size {
              type uint32 {
                range "24 .. 9000";
              }
              default "24";
              description "BFD transport protocol payload size";
            }
            choice adaptation-choice {
              case case_1 {
                leaf no-adaptation {
                  type empty;
                  description "Disable adaptation";
                }
              }
            }
            container transmit-interval {
              description "Transmit-interval options";
              uses apply-advanced;
              leaf minimum-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum transmit interval";
                units milliseconds;
              }
              leaf threshold {
                type uint32;
                description "High transmit interval triggering a trap";
                units milliseconds;
              }
            }
            container detection-time {
              description "Detection-time options";
              uses apply-advanced;
              leaf threshold {
                type uint32;
                description "High detection-time triggering a trap";
                units milliseconds;
              }
            }
            container authentication {
              description "Authentication options";
              uses apply-advanced;
              leaf key-chain {
                type string;
                description "Key chain name";
              }
              leaf algorithm {
                type enumeration {
                  enum simple-password {
                    description "Simple password";
                  }
                  enum keyed-md5 {
                    description "Keyed message Digest 5";
                  }
                  enum meticulous-keyed-md5 {
                    description "Meticulous keyed message Digest 5";
                  }
                  enum keyed-sha-1 {
                    description "Keyed secure hash algorithm (SHA1) ";
                  }
                  enum meticulous-keyed-sha-1 {
                    description "Meticulous keyed secure hash algorithm (SHA1) ";
                  }
                }
                description "Algorithm name";
              }
              leaf loose-check {
                type empty;
                description "Verify authentication only if authentication is negotiated";
              }
            }
          }
          leaf mcae-mac-synchronize {
            type empty;
            description "Mclag mac synchronization";
          }
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable PIMv4 on this interface";
              }
            }
          }
        }
        container inet6 {
          description "IPv6 specific properties";
          presence "enable inet6";
          uses apply-advanced;
          container bfd-liveness-detection {
            description "Bidirectional Forwarding Detection options";
            uses apply-advanced;
            leaf version {
              type enumeration {
                enum 0 {
                  description "BFD version 0 (deprecated)";
                }
                enum 1 {
                  description "BFD version 1";
                }
                enum automatic {
                  description "Choose BFD version automatically";
                }
              }
              default "automatic";
              description "BFD protocol version number";
            }
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit and receive interval";
              units milliseconds;
            }
            leaf minimum-transmit-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              status deprecated;
              units milliseconds;
            }
            leaf minimum-receive-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum receive interval";
              units milliseconds;
            }
            leaf multiplier {
              type uint32 {
                range "1 .. 255";
              }
              default "3";
              description "Detection time multiplier";
            }
            leaf inline-disable {
              type empty;
              description "Disable inline mode for this BFD session";
            }
            leaf pdu-size {
              type uint32 {
                range "24 .. 9000";
              }
              default "24";
              description "BFD transport protocol payload size";
            }
            choice adaptation-choice {
              case case_1 {
                leaf no-adaptation {
                  type empty;
                  description "Disable adaptation";
                }
              }
            }
            container transmit-interval {
              description "Transmit-interval options";
              uses apply-advanced;
              leaf minimum-interval {
                type uint32 {
                  range "1 .. 255000";
                }
                description "Minimum transmit interval";
                units milliseconds;
              }
              leaf threshold {
                type uint32;
                description "High transmit interval triggering a trap";
                units milliseconds;
              }
            }
            container detection-time {
              description "Detection-time options";
              uses apply-advanced;
              leaf threshold {
                type uint32;
                description "High detection-time triggering a trap";
                units milliseconds;
              }
            }
            container authentication {
              description "Authentication options";
              uses apply-advanced;
              leaf key-chain {
                type string;
                description "Key chain name";
              }
              leaf algorithm {
                type enumeration {
                  enum simple-password {
                    description "Simple password";
                  }
                  enum keyed-md5 {
                    description "Keyed message Digest 5";
                  }
                  enum meticulous-keyed-md5 {
                    description "Meticulous keyed message Digest 5";
                  }
                  enum keyed-sha-1 {
                    description "Keyed secure hash algorithm (SHA1) ";
                  }
                  enum meticulous-keyed-sha-1 {
                    description "Meticulous keyed secure hash algorithm (SHA1) ";
                  }
                }
                description "Algorithm name";
              }
              leaf loose-check {
                type empty;
                description "Verify authentication only if authentication is negotiated";
              }
            }
          }
          choice enable-disable {
            case case_1 {
              leaf disable {
                type empty;
                description "Disable PIMv6 on this interface";
              }
            }
          }
        }
      }
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable PIM on this interface";
          }
        }
      }
      container bidirectional {
        description "PIM bidirectional mode properties";
        uses apply-advanced;
        container df-election {
          description "Bidir designated forwarder properties";
          uses apply-advanced;
          leaf robustness-count {
            type uint32 {
              range "1 .. 10";
            }
            description "Election robustness count";
          }
          leaf offer-period {
            type uint32 {
              range "100 .. 10000";
            }
            description "Election offer message period";
            units milliseconds;
          }
          leaf backoff-period {
            type uint32 {
              range "100 .. 65535";
            }
            description "Election backoff period";
            units milliseconds;
          }
        }
      }
      leaf mode {
        type enumeration {
          enum dense {
            description "Dense mode";
          }
          enum sparse {
            description "Sparse mode";
          }
          enum sparse-dense {
            description "Sparse-dense mode";
          }
          enum bidirectional-sparse {
            description "Bidirectional-sparse mode";
          }
          enum bidirectional-sparse-dense {
            description "Bidirectional-sparse-dense mode";
          }
        }
        description "Mode of interface";
      }
      leaf priority {
        type uint32 {
          range "0 .. 4294967295";
        }
        description "Hello option DR priority";
      }
      container stickydr {
        description "Make DR sticky";
        presence "enable stickydr";
        uses apply-advanced;
      }
      container multiple-triggered-joins {
        description "Send multiple pim triggered joins in quick intervals";
        presence "enable multiple-triggered-joins";
        uses apply-advanced;
        leaf count {
          type uint16 {
            range "2 .. 15";
          }
          default "2";
          description "Set number of triggered joins to be sent";
        }
        leaf interval {
          type uint16 {
            range "100 .. 1000";
          }
          default "100";
          description "Set interval between multiple triggered joins to be sent in milliseconds";
        }
      }
      leaf version {
        type uint32 {
          range "1 .. 2";
        }
        description "Force PIM version";
        status deprecated;
      }
      leaf hello-interval {
        type uint32 {
          range "0 .. 255";
        }
        description "Hello interval";
        units seconds;
      }
      leaf-list neighbor-policy {
        type "jt:policy-algebra";
        description "PIM neighbor policy applied to incoming hello messages";
        ordered-by user;
      }
      leaf-list accept-join-always-from {
        type "jt:policy-algebra";
        description "Accept pim join/prune messages based on the policy configured";
        ordered-by user;
      }
      leaf accept-remote-source {
        type empty;
        description "Accept traffic from remote source";
      }
      container dual-dr {
        description "Configure PIM Dual DR";
        presence "enable dual-dr";
        uses apply-advanced;
        leaf enhanced {
          type empty;
          description "Enable enhanced PIM Dual DR";
        }
      }
      leaf distributed-dr {
        type empty;
        description "PIM Distributed DR";
      }
      leaf reset-tracking-bit {
        type empty;
        description "Clear tracking-bit in PIM Hello LAN Prune Delay Option";
      }
      leaf propagation-delay {
        type uint32 {
          range "250 .. 2000";
        }
        default "500";
        description "Propagation delay value";
        units milliseconds;
      }
      leaf override-interval {
        type uint32 {
          range "500 .. 6000";
        }
        default "2000";
        description "Override interval value";
        units milliseconds;
      }
      leaf disable-packet-register {
        type empty;
        description "Disable PIM packet registers on first hop router";
      }
      container bfd-liveness-detection {
        description "Bidirectional Forwarding Detection options (ipv4 only)";
        status deprecated;
        uses apply-advanced;
        leaf version {
          type enumeration {
            enum 0 {
              description "BFD version 0 (deprecated)";
            }
            enum 1 {
              description "BFD version 1";
            }
            enum automatic {
              description "Choose BFD version automatically";
            }
          }
          default "automatic";
          description "BFD protocol version number";
        }
        leaf minimum-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit and receive interval";
          units milliseconds;
        }
        leaf minimum-transmit-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit interval";
          status deprecated;
          units milliseconds;
        }
        leaf minimum-receive-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum receive interval";
          units milliseconds;
        }
        leaf multiplier {
          type uint32 {
            range "1 .. 255";
          }
          default "3";
          description "Detection time multiplier";
        }
        leaf inline-disable {
          type empty;
          description "Disable inline mode for this BFD session";
        }
        leaf pdu-size {
          type uint32 {
            range "24 .. 9000";
          }
          default "24";
          description "BFD transport protocol payload size";
        }
        choice adaptation-choice {
          case case_1 {
            leaf no-adaptation {
              type empty;
              description "Disable adaptation";
            }
          }
        }
        container transmit-interval {
          description "Transmit-interval options";
          uses apply-advanced;
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            units milliseconds;
          }
          leaf threshold {
            type uint32;
            description "High transmit interval triggering a trap";
            units milliseconds;
          }
        }
        container detection-time {
          description "Detection-time options";
          uses apply-advanced;
          leaf threshold {
            type uint32;
            description "High detection-time triggering a trap";
            units milliseconds;
          }
        }
        container authentication {
          description "Authentication options";
          uses apply-advanced;
          leaf key-chain {
            type string;
            description "Key chain name";
          }
          leaf algorithm {
            type enumeration {
              enum simple-password {
                description "Simple password";
              }
              enum keyed-md5 {
                description "Keyed message Digest 5";
              }
              enum meticulous-keyed-md5 {
                description "Meticulous keyed message Digest 5";
              }
              enum keyed-sha-1 {
                description "Keyed secure hash algorithm (SHA1) ";
              }
              enum meticulous-keyed-sha-1 {
                description "Meticulous keyed secure hash algorithm (SHA1) ";
              }
            }
            description "Algorithm name";
          }
          leaf loose-check {
            type empty;
            description "Verify authentication only if authentication is negotiated";
          }
        }
      }
    }
    container mdt {
      description "Configure multicast data tunnel parameters";
      status deprecated;
      uses apply-advanced;
      container threshold {
        description "Threshold for creation of multicast tunnels";
        uses apply-advanced;
        list group {
          description "IP prefix of multicast group";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipprefix";
            description "IP prefix of group";
          }
          uses apply-advanced;
          list source {
            description "IP prefix of one or more multicast sources ";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipprefix";
              description "IP prefix of source";
            }
            uses apply-advanced;
            leaf rate {
              type uint32 {
                range "10 .. 1000000";
              }
              description "Data threshold to create new tunnel";
              units kilobits;
            }
          }
        }
      }
      leaf data-mdt-reuse {
        type empty;
        description "Allow multiple customer streams to be transmitted over one data tunnel ";
      }
      leaf tunnel-limit {
        type uint32 {
          range "0 .. 8192";
        }
        description "Maximum multicast data tunnels";
      }
      leaf group-range {
        type "jt:ipprefix";
        description "Group address range for multicast data tunnels";
      }
    }
    container graceful-restart {
      description "Configure graceful restart attributes";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable PIM graceful restart capability";
          }
        }
      }
      leaf restart-duration {
        type uint32 {
          range "30 .. 300";
        }
        description "Maximum time for graceful restart to finish (seconds)";
        units seconds;
      }
      leaf no-bidirectional-mode {
        type empty;
        description "Disable PIM graceful restart for bidirectional mode";
      }
      leaf restart-complete-duration {
        type uint32 {
          range "5 .. 300";
        }
        description "Maximum time for graceful restart to complete (seconds)";
        units seconds;
      }
    }
    container join-load-balance {
      description "Configure PIM join load balancing";
      presence "enable join-load-balance";
      uses apply-advanced;
      leaf automatic {
        type empty;
        description "Enable automatic PIM join load balancing";
      }
    }
    leaf standby-path-creation-delay {
      type uint32 {
        range "1 .. 300";
      }
      description "Amount of time to wait before creating standby path";
      units seconds;
    }
    leaf idle-standby-path-switchover-delay {
      type uint32 {
        range "1 .. 300";
      }
      description "Amount of time to wait before switching over to idle standby path";
      units seconds;
    }
    leaf dr-election-on-p2p {
      type empty;
      description "Enable DR election on Point-to-Point Interfaces";
    }
    leaf no-wildcard-register-stop {
      type empty;
      description "Disable sending of wildcard register stop message";
    }
    leaf nexthop-hold-time {
      type uint32 {
        range "1 .. 1000";
      }
      description "Nexthop hold time in milliseconds";
      units milliseconds;
    }
    leaf mpls-internet-multicast {
      type empty;
      description "Enable support for Internet Multicast over MPLS";
    }
    container join-make-before-break {
      description "Enable PIM Join Make-Before-Break during RPF neighbor change";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable Make-Before-Break for PIM RPF neighbor change";
          }
        }
      }
    }
    leaf reset-tracking-bit {
      type empty;
      description "Clear tracking-bit in PIM Hello LAN Prune Delay Option";
    }
    leaf propagation-delay {
      type uint32 {
        range "250 .. 2000";
      }
      default "500";
      description "Propagation delay value";
      units milliseconds;
    }
    leaf override-interval {
      type uint32 {
        range "500 .. 6000";
      }
      default "2000";
      description "Override interval value";
      units milliseconds;
    }
    leaf disable-packet-register {
      type empty;
      description "Disable PIM packet registers on first hop router";
    }
    container default-vpn-source {
      description "Let all VRFs use master loopback address for mt interfaces";
      presence "enable default-vpn-source";
      uses apply-advanced;
      leaf interface-name {
        type "jt:interface-unit";
        description "Master loopback interface name";
      }
    }
  }
  grouping juniper-protocols-protection-group {
    uses apply-advanced;
    container ethernet-aps {
      description "Ethernet APS configuration";
      uses juniper-protocols-protection-group-eaps;
    }
    container traceoptions {
      description "Tracing options for debugging protocol operation";
      uses erp-trace-options;
    }
    leaf restore-interval {
      type uint32 {
        range "1 .. 12";
      }
      default "5";
      description "Wait to restore interval";
      units minutes;
    }
    leaf guard-interval {
      type uint32 {
        range "10 .. 2000";
      }
      default "500";
      description "Guard timer interval in 10ms steps";
      units milliseconds;
    }
    leaf hold-interval {
      type uint32 {
        range "0 .. 10000";
      }
      default "0";
      description "Hold off timer interval in 100ms steps";
      units milliseconds;
    }
    list ethernet-ring {
      description "Ethernet ring";
      key name;
      ordered-by user;
      uses juniper-protocols-protection-group-ethernet-ring;
    }
  }
  grouping erp-trace-options {
    description "Trace options for Ethernet Ring Protocol";
    uses apply-advanced;
    list flag {
      description "Tracing parameters";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum events {
            description "Trace events to the protocol state machine";
          }
          enum pdu {
            description "Trace R-APS PDU reception and transmission";
          }
          enum timers {
            description "Trace protocol timers";
          }
          enum state-machine {
            description "Trace R-APS state machine";
          }
          enum periodic-packet-management {
            description "Trace periodic packet management state and events";
          }
          enum config {
            description "Trace protocol configuration";
          }
          enum normal {
            description "Trace protocol general log messages";
          }
          enum debug {
            description "Trace protocol debug log messages";
          }
          enum all {
            description "Trace all";
          }
        }
      }
    }
    container file {
      description "Trace file options";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf replace {
        type empty;
        description "Replace trace file rather than appending to it";
        status deprecated;
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "10";
        description "Maximum number of trace files";
      }
      leaf no-stamp {
        type empty;
        description "Do not timestamp trace file";
        status deprecated;
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
    }
  }
  grouping juniper-protocols-protection-group-eaps {
    uses apply-advanced;
    list profile {
      key name;
      uses juniper-protocols-protection-group-eaps-profile;
    }
  }
  grouping juniper-protocols-protection-group-eaps-profile {
    description "Ethernet APS profile";
    leaf name {
      type string {
        length "1 .. 32";
      }
      description "Profile name";
    }
    uses apply-advanced;
    leaf protocol {
      type enumeration {
        enum ccm {
          description "Use CCM packets for protection.";
        }
        enum "G.8031" {
          description "Use G.8031 packets for protection.";
        }
      }
      description "Protocol value";
    }
    leaf revert-time {
      type uint32 {
        range "0 .. 15";
      }
      default "4";
      description "Reversion time in minutes, 0 would mean no reversion";
      units minutes;
    }
    leaf hold-time {
      type uint32 {
        range "0 .. 10000";
      }
      default "0";
      description "Hold time in seconds";
      units "milli seconds";
    }
    leaf local-request {
      type enumeration {
        enum lockout {
          description "Lockout protection";
        }
      }
      description "Local APS request";
    }
  }
  grouping juniper-protocols-protection-group-ethernet-ring {
    description "Ethernet Ring protection group configuration";
    leaf name {
      type string {
        length "1 .. 32";
      }
      description "Name of Ethernet Ring protection group";
    }
    uses apply-advanced;
    leaf node-id {
      type "jt:mac-unicast";
      description "Node ID of the protection group, by default bridge's MAC";
    }
    leaf ring-protection-link-owner {
      type empty;
      description "Ring protection link owner flag, one ring should have only one node as a ring protection link owner";
    }
    leaf level {
      type uint32 {
        range "0 .. 7";
      }
      description "MPG Level value for R-APS PDU";
    }
    leaf restore-interval {
      type uint32 {
        range "1 .. 12";
      }
      description "Wait to restore interval";
      units minutes;
    }
    leaf guard-interval {
      type uint32 {
        range "10 .. 2000";
      }
      description "Guard timer interval in 10ms";
      units milliseconds;
    }
    leaf hold-interval {
      type uint32 {
        range "0 .. 10000";
      }
      description "Hold off timer interval in 100ms steps";
      units milliseconds;
    }
    leaf non-revertive {
      type empty;
      description "Non-revertive mode of operation";
    }
    leaf wait-to-block-interval {
      type uint32 {
        range "5 .. 10";
      }
      default "5";
      description "Wait to block interval";
      units seconds;
    }
    leaf major-ring-name {
      type string {
        length "1 .. 32";
      }
      description "Name of major-ring to which this sub-ring node attached";
    }
    leaf propagate-tc {
      type empty;
      description "Enable Topology Change Propagation to major-ring from the sub-ring";
    }
    leaf compatibility-version {
      type uint32 {
        range "1 .. 2";
      }
      default "2";
      description "G.8032 compatibility version";
    }
    leaf ring-id {
      type uint32 {
        range "1 .. 239";
      }
      default "1";
      description "Ethernet Ring ID of protection group";
    }
    leaf non-vc-mode {
      type empty;
      description "Node is operating in non virtual channel mode";
    }
    leaf dot1p-priority {
      type uint32 {
        range "0 .. 7";
      }
      default "0";
      description "IEEE 802.1p priority of transmitted R-APS";
    }
    container east-interface {
      description "East interface configuration";
      presence "enable east-interface";
      uses erp-interface;
    }
    container west-interface {
      description "West interface configuration";
      presence "enable west-interface";
      uses erp-interface;
    }
    leaf control-vlan {
      type string;
      description "Dedicated VLAN identifier - VLAN id or VLAN name";
    }
    container data-channel {
      description "Ring instance data channel";
      presence "enable data-channel";
      uses erp-data-channel;
    }
  }
  grouping erp-data-channel {
    uses apply-advanced;
    leaf-list vlan {
      type string;
      description "VLAN ID or VLAN ID range [1..4094]";
      ordered-by user;
    }
  }
  grouping erp-interface {
    uses apply-advanced;
    container control-channel {
      description "Control channel of ring port";
      presence "enable control-channel";
      uses apply-advanced;
      leaf vlan {
        type uint16 {
          range "1 .. 4094";
        }
        description "Dedicated VLAN identifier";
      }
      leaf control-channel-name {
        type "jt:interface-name";
      }
    }
    leaf ring-protection-link-end {
      type empty;
      description "Port is connecting to ring protection link";
    }
    leaf interface-none {
      type empty;
      description "Port is not used";
    }
  }
  grouping juniper-protocols-rip {
    uses apply-advanced;
    container traceoptions {
      description "Trace options for RIP";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum auth {
              description "Trace RIP authentication";
            }
            enum error {
              description "Trace RIP errors";
            }
            enum expiration {
              description "Trace RIP route expiration processing";
            }
            enum holddown {
              description "Trace RIP hold-down processing";
            }
            enum packets {
              description "Trace all RIP packets";
            }
            enum request {
              description "Trace RIP information packets";
            }
            enum trigger {
              description "Trace RIP triggered updates";
            }
            enum update {
              description "Trace RIP update packets";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
        container filter {
          description "Filter to apply to this flag";
          presence "enable filter";
          uses rip_filter_obj;
        }
      }
    }
    container rib-group {
      description "Routing table group for importing RIP routes";
      uses rib_group_inet_type;
    }
    leaf metric-in {
      type uint32 {
        range "1 .. 15";
      }
      description "Metric value to add to incoming routes";
    }
    container send {
      description "Configure RIP send options";
      choice send-opts {
        case case_1 {
          leaf broadcast {
            type empty;
            description "Broadcast RIPv2 packets (RIPv1 compatible)";
          }
        }
        case case_2 {
          leaf multicast {
            type empty;
            description "Multicast RIPv2 packets";
          }
        }
        case case_3 {
          leaf none {
            type empty;
            description "Do not send RIP updates";
          }
        }
        case case_4 {
          leaf version-1 {
            type empty;
            description "Broadcast RIPv1 packets";
          }
        }
      }
    }
    container receive {
      description "Configure RIP receive options";
      choice receive-opts {
        case case_1 {
          leaf both {
            type empty;
            description "Accept both RIPv1 and RIPv2 packets";
          }
        }
        case case_2 {
          leaf none {
            type empty;
            description "Do not receive RIP packets";
          }
        }
        case case_3 {
          leaf version-1 {
            type empty;
            description "Accept RIPv1 packets only";
          }
        }
        case case_4 {
          leaf version-2 {
            type empty;
            description "Accept only RIPv2 packets";
          }
        }
      }
    }
    choice check-zero-choice {
      leaf check-zero {
        type empty;
        description "Check reserved fields on incoming RIPv2 packets";
      }
      leaf no-check-zero {
        type empty;
        description "Don't check reserved fields on incoming RIPv2 packets";
      }
    }
    leaf message-size {
      type uint32 {
        range "25 .. 255";
      }
      description "Number of route entries per update message";
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Import policy";
      ordered-by user;
    }
    leaf holddown {
      type uint32 {
        range "10 .. 180";
      }
      description "Hold-down time";
      units seconds;
    }
    leaf route-timeout {
      type uint32 {
        range "30 .. 360";
      }
      description "Delay before routes time out";
      units seconds;
    }
    leaf update-interval {
      type uint32 {
        range "10 .. 60";
      }
      description "Interval between regular route updates";
      units seconds;
    }
    choice authentication {
      case case_1 {
        leaf authentication-type {
          type enumeration {
            enum none {
              description "No authentication";
            }
            enum simple {
              description "Simple password authentication";
            }
            enum md5 {
              description "MD5 authentication";
            }
          }
        }
      }
      case case_2 {
        list authentication-selective-md5 {
          description "MD5 authentication with one or more keys";
          key name;
          ordered-by user;
          leaf name {
            type uint32 {
              range "0 .. 255";
            }
            description "Key ID for MD5 authentication";
          }
          leaf key {
            type "jt:unreadable";
            description "MD5 authentication key value";
          }
          leaf start-time {
            type "jt:time";
            description "Start time for key transmission (YYYY-MM-DD.HH:MM)";
          }
        }
      }
    }
    leaf authentication-key {
      type "jt:unreadable";
      description "Authentication key (password)";
    }
    list group {
      description "Instance configuration";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Group name";
      }
      uses apply-advanced;
      leaf route-timeout {
        type uint32 {
          range "30 .. 360";
        }
        description "Delay before routes time out";
        units seconds;
      }
      leaf update-interval {
        type uint32 {
          range "10 .. 60";
        }
        description "Interval between regular route updates";
        units seconds;
      }
      leaf preference {
        type uint32;
        description "Preference of routes learned by this group";
      }
      leaf metric-out {
        type uint32 {
          range "1 .. 15";
        }
        description "Default metric of exported routes";
      }
      leaf-list export {
        type "jt:policy-algebra";
        description "Export policy";
        ordered-by user;
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
      leaf demand-circuit {
        type empty;
        description "Enable demand circuit on this interface";
      }
      leaf max-retrans-time {
        type uint32 {
          range "5 .. 180";
        }
        description "Maximum time to re-transmit a message in demand-circuit";
      }
      container bfd-liveness-detection {
        description "Bidirectional Forwarding Detection options";
        uses apply-advanced;
        leaf version {
          type enumeration {
            enum 0 {
              description "BFD version 0 (deprecated)";
            }
            enum 1 {
              description "BFD version 1";
            }
            enum automatic {
              description "Choose BFD version automatically";
            }
          }
          default "automatic";
          description "BFD protocol version number";
        }
        leaf minimum-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit and receive interval";
          units milliseconds;
        }
        leaf minimum-transmit-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit interval";
          status deprecated;
          units milliseconds;
        }
        leaf minimum-receive-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum receive interval";
          units milliseconds;
        }
        leaf multiplier {
          type uint32 {
            range "1 .. 255";
          }
          default "3";
          description "Detection time multiplier";
        }
        leaf inline-disable {
          type empty;
          description "Disable inline mode for this BFD session";
        }
        leaf pdu-size {
          type uint32 {
            range "24 .. 9000";
          }
          default "24";
          description "BFD transport protocol payload size";
        }
        choice adaptation-choice {
          case case_1 {
            leaf no-adaptation {
              type empty;
              description "Disable adaptation";
            }
          }
        }
        container transmit-interval {
          description "Transmit-interval options";
          uses apply-advanced;
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            units milliseconds;
          }
          leaf threshold {
            type uint32;
            description "High transmit interval triggering a trap";
            units milliseconds;
          }
        }
        container detection-time {
          description "Detection-time options";
          uses apply-advanced;
          leaf threshold {
            type uint32;
            description "High detection-time triggering a trap";
            units milliseconds;
          }
        }
        container authentication {
          description "Authentication options";
          uses apply-advanced;
          leaf key-chain {
            type string;
            description "Key chain name";
          }
          leaf algorithm {
            type enumeration {
              enum simple-password {
                description "Simple password";
              }
              enum keyed-md5 {
                description "Keyed message Digest 5";
              }
              enum meticulous-keyed-md5 {
                description "Meticulous keyed message Digest 5";
              }
              enum keyed-sha-1 {
                description "Keyed secure hash algorithm (SHA1) ";
              }
              enum meticulous-keyed-sha-1 {
                description "Meticulous keyed secure hash algorithm (SHA1) ";
              }
            }
            description "Algorithm name";
          }
          leaf loose-check {
            type empty;
            description "Verify authentication only if authentication is negotiated";
          }
        }
      }
      list neighbor {
        description "Neighbor configuration";
        key name;
        ordered-by user;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        uses apply-advanced;
        leaf route-timeout {
          type uint32 {
            range "30 .. 360";
          }
          description "Delay before routes time out";
          units seconds;
        }
        leaf update-interval {
          type uint32 {
            range "10 .. 60";
          }
          description "Interval between regular route updates";
          units seconds;
        }
        leaf interface-type {
          type enumeration {
            enum p2mp {
              description "Point-to-multipoint link";
            }
          }
          description "Interface type for the neighbor";
        }
        leaf dynamic-peers {
          type empty;
          description "Learn peers dynamically on a p2mp interface";
        }
        list peer {
          description "P2MP peer";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipaddr";
            description "Address of peer";
          }
        }
        leaf metric-in {
          type uint32 {
            range "1 .. 15";
          }
          description "Metric value to add to incoming routes";
        }
        container send {
          description "Configure RIP send options";
          choice send-opts {
            case case_1 {
              leaf broadcast {
                type empty;
                description "Broadcast RIPv2 packets (RIPv1 compatible)";
              }
            }
            case case_2 {
              leaf multicast {
                type empty;
                description "Multicast RIPv2 packets";
              }
            }
            case case_3 {
              leaf none {
                type empty;
                description "Do not send RIP updates";
              }
            }
            case case_4 {
              leaf version-1 {
                type empty;
                description "Broadcast RIPv1 packets";
              }
            }
          }
        }
        container receive {
          description "Configure RIP receive options";
          choice receive-opts {
            case case_1 {
              leaf both {
                type empty;
                description "Accept both RIPv1 and RIPv2 packets";
              }
            }
            case case_2 {
              leaf none {
                type empty;
                description "Do not receive RIP packets";
              }
            }
            case case_3 {
              leaf version-1 {
                type empty;
                description "Accept RIPv1 packets only";
              }
            }
            case case_4 {
              leaf version-2 {
                type empty;
                description "Accept only RIPv2 packets";
              }
            }
          }
        }
        leaf demand-circuit {
          type empty;
          description "Enable demand circuit on this interface";
        }
        leaf max-retrans-time {
          type uint32 {
            range "5 .. 180";
          }
          description "Maximum time to re-transmit a msg in demand-circuit";
        }
        choice check-zero-choice {
          leaf check-zero {
            type empty;
            description "Check reserved fields on incoming RIPv1 packets";
          }
          leaf no-check-zero {
            type empty;
            description "Don't check reserved fields on incoming RIPv1 packets";
          }
        }
        leaf any-sender {
          type empty;
          description "Disable strict checks on sender address";
        }
        leaf message-size {
          type uint32 {
            range "25 .. 255";
          }
          description "Number of route entries per update message";
        }
        leaf-list import {
          type "jt:policy-algebra";
          description "Import policy";
          ordered-by user;
        }
        choice authentication {
          case case_1 {
            leaf authentication-type {
              type enumeration {
                enum none {
                  description "No authentication";
                }
                enum simple {
                  description "Simple password authentication";
                }
                enum md5 {
                  description "MD5 authentication";
                }
              }
            }
          }
          case case_2 {
            list authentication-selective-md5 {
              description "MD5 authentication with one or more keys";
              key name;
              ordered-by user;
              leaf name {
                type uint32 {
                  range "0 .. 255";
                }
                description "Key ID for MD5 authentication";
              }
              leaf key {
                type "jt:unreadable";
                description "MD5 authentication key value";
              }
              leaf start-time {
                type "jt:time";
                description "Start time for key transmission (YYYY-MM-DD.HH:MM)";
              }
            }
          }
        }
        leaf authentication-key {
          type "jt:unreadable";
          description "Authentication key (password)";
        }
        container bfd-liveness-detection {
          description "Bidirectional Forwarding Detection options";
          uses apply-advanced;
          leaf version {
            type enumeration {
              enum 0 {
                description "BFD version 0 (deprecated)";
              }
              enum 1 {
                description "BFD version 1";
              }
              enum automatic {
                description "Choose BFD version automatically";
              }
            }
            default "automatic";
            description "BFD protocol version number";
          }
          leaf minimum-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit and receive interval";
            units milliseconds;
          }
          leaf minimum-transmit-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum transmit interval";
            status deprecated;
            units milliseconds;
          }
          leaf minimum-receive-interval {
            type uint32 {
              range "1 .. 255000";
            }
            description "Minimum receive interval";
            units milliseconds;
          }
          leaf multiplier {
            type uint32 {
              range "1 .. 255";
            }
            default "3";
            description "Detection time multiplier";
          }
          leaf inline-disable {
            type empty;
            description "Disable inline mode for this BFD session";
          }
          leaf pdu-size {
            type uint32 {
              range "24 .. 9000";
            }
            default "24";
            description "BFD transport protocol payload size";
          }
          choice adaptation-choice {
            case case_1 {
              leaf no-adaptation {
                type empty;
                description "Disable adaptation";
              }
            }
          }
          container transmit-interval {
            description "Transmit-interval options";
            uses apply-advanced;
            leaf minimum-interval {
              type uint32 {
                range "1 .. 255000";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf threshold {
              type uint32;
              description "High transmit interval triggering a trap";
              units milliseconds;
            }
          }
          container detection-time {
            description "Detection-time options";
            uses apply-advanced;
            leaf threshold {
              type uint32;
              description "High detection-time triggering a trap";
              units milliseconds;
            }
          }
          container authentication {
            description "Authentication options";
            uses apply-advanced;
            leaf key-chain {
              type string;
              description "Key chain name";
            }
            leaf algorithm {
              type enumeration {
                enum simple-password {
                  description "Simple password";
                }
                enum keyed-md5 {
                  description "Keyed message Digest 5";
                }
                enum meticulous-keyed-md5 {
                  description "Meticulous keyed message Digest 5";
                }
                enum keyed-sha-1 {
                  description "Keyed secure hash algorithm (SHA1) ";
                }
                enum meticulous-keyed-sha-1 {
                  description "Meticulous keyed secure hash algorithm (SHA1) ";
                }
              }
              description "Algorithm name";
            }
            leaf loose-check {
              type empty;
              description "Verify authentication only if authentication is negotiated";
            }
          }
        }
      }
    }
    container graceful-restart {
      description "RIP graceful restart options";
      presence "enable graceful-restart";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable graceful restart";
          }
        }
      }
      leaf restart-time {
        type uint32 {
          range "1 .. 600";
        }
        description "Time after which RIP is declared out of restart";
      }
    }
  }
  grouping juniper-protocols-ripng {
    uses apply-advanced;
    container traceoptions {
      description "Trace options for RIPng";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum error {
              description "Trace RIPng errors";
            }
            enum expiration {
              description "Trace RIPng route expiration processing";
            }
            enum holddown {
              description "Trace RIPng hold-down processing";
            }
            enum packets {
              description "Trace all RIPng packets";
            }
            enum request {
              description "Trace RIPng information packets";
            }
            enum trigger {
              description "Trace RIPng triggered updates";
            }
            enum update {
              description "Trace RIPng update packets";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf metric-in {
      type uint32 {
        range "1 .. 15";
      }
      description "Metric value to add to incoming routes";
    }
    container send {
      description "Configure RIPng send options";
      choice send-opts {
        case case_1 {
          leaf none {
            type empty;
            description "Do not send RIPng updates";
          }
        }
      }
    }
    container receive {
      description "Configure RIPng receive options";
      choice receive-opts {
        case case_1 {
          leaf none {
            type empty;
            description "Do not receive RIPng packets";
          }
        }
      }
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Import policy";
      ordered-by user;
    }
    leaf holddown {
      type uint32 {
        range "10 .. 180";
      }
      description "Hold-down time";
      units seconds;
    }
    leaf route-timeout {
      type uint32 {
        range "30 .. 360";
      }
      description "Delay before routes time out";
      units seconds;
    }
    leaf update-interval {
      type uint32 {
        range "10 .. 60";
      }
      description "Interval between regular route updates";
      units seconds;
    }
    list group {
      description "Instance configuration";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Group name";
      }
      uses apply-advanced;
      leaf route-timeout {
        type uint32 {
          range "30 .. 360";
        }
        description "Delay before routes time out";
        units seconds;
      }
      leaf update-interval {
        type uint32 {
          range "10 .. 60";
        }
        description "Interval between regular route updates";
        units seconds;
      }
      leaf preference {
        type uint32;
        description "Preference of routes learned by this group";
      }
      leaf metric-out {
        type uint32 {
          range "1 .. 15";
        }
        description "Default metric of exported routes";
      }
      leaf-list export {
        type "jt:policy-algebra";
        description "Export policy";
        ordered-by user;
      }
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
      list neighbor {
        description "Neighbor configuration";
        key name;
        ordered-by user;
        leaf name {
          type "jt:interface-name";
          description "Interface name";
        }
        uses apply-advanced;
        leaf route-timeout {
          type uint32 {
            range "30 .. 360";
          }
          description "Delay before routes time out";
          units seconds;
        }
        leaf update-interval {
          type uint32 {
            range "10 .. 60";
          }
          description "Interval between regular route updates";
          units seconds;
        }
        leaf metric-in {
          type uint32 {
            range "1 .. 15";
          }
          description "Metric value to add to incoming routes";
        }
        container send {
          description "Configure RIPng send options";
          choice send-opts {
            case case_1 {
              leaf none {
                type empty;
                description "Do not send RIPng updates";
              }
            }
          }
        }
        container receive {
          description "Configure RIPng receive options";
          choice receive-opts {
            case case_1 {
              leaf none {
                type empty;
                description "Do not receive RIPng packets";
              }
            }
          }
        }
        leaf-list import {
          type "jt:policy-algebra";
          description "Import policy";
          ordered-by user;
        }
      }
    }
    container graceful-restart {
      description "RIPng graceful restart options";
      presence "enable graceful-restart";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable graceful restart";
          }
        }
      }
      leaf restart-time {
        type uint32 {
          range "1 .. 600";
        }
        description "Time after which RIPng is declared out of restart";
      }
    }
  }
  grouping juniper-protocols-router-discovery {
    uses apply-advanced;
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable router discovery";
        }
      }
    }
    container traceoptions {
      description "Trace options for router discovery";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum route {
              description "Trace routing information";
            }
            enum normal {
              description "Trace normal events";
            }
            enum general {
              description "Trace general events";
            }
            enum state {
              description "Trace state transitions";
            }
            enum policy {
              description "Trace policy processing";
            }
            enum task {
              description "Trace routing protocol task processing";
            }
            enum timer {
              description "Trace routing protocol timer processing";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
      }
    }
    list interface {
      description "Interfaces on which to configure router discovery";
      key name;
      ordered-by user;
      leaf name {
        type "jt:interface-name";
        description "Interface name";
      }
      uses apply-advanced;
      leaf max-advertisement-interval {
        type uint32 {
          range "4 .. 1800";
        }
        description "Maximum time before sending advertisements";
        units seconds;
      }
      leaf min-advertisement-interval {
        type uint32 {
          range "3 .. 1800";
        }
        description "Minimum time before sending advertisements";
        units seconds;
      }
      leaf lifetime {
        type uint32 {
          range "3 .. 9000";
        }
        description "How long addresses in advertisements are valid";
        units seconds;
      }
    }
    list address {
      description "IP addresses to include in advertisements";
      key name;
      ordered-by user;
      leaf name {
        type "jt:ipv4addr";
        description "IP addresses to include in router advertisements";
      }
      uses apply-advanced;
      leaf advertise {
        type empty;
        description "Advertise the IP address in advertisements";
      }
      leaf ignore {
        type empty;
        description "Do not advertise the IP address in advertisements";
      }
      leaf broadcast {
        type empty;
        description "Include IP address only in broadcast advertisements";
      }
      leaf multicast {
        type empty;
        description "Include IP address only in multicast advertisements";
      }
      leaf ineligible {
        type empty;
        description "IP address can never become a default router";
      }
      leaf priority {
        type int32;
        description "Preference of the address to become a default router";
      }
    }
  }
  grouping juniper-protocols-rsvp {
    description "RSVP options";
    uses apply-advanced;
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable RSVP";
        }
      }
    }
    container graceful-restart {
      description "Configure graceful restart attributes";
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable RSVP graceful restart capability";
          }
        }
      }
      leaf helper-disable {
        type empty;
        description "Disable graceful restart helper capability";
      }
      leaf maximum-helper-restart-time {
        type uint32 {
          range "1 .. 1800";
        }
        default "20";
        description "Maximum wait time from down event to neighbor dead";
        units seconds;
      }
      leaf maximum-helper-recovery-time {
        type uint32 {
          range "1 .. 3600";
        }
        default "180";
        description "Maximum time restarting neighbor states are kept";
        units seconds;
      }
    }
    container tunnel-services {
      description "Use tunnel services for P2MP LSP ultimate-hop popping";
      presence "enable tunnel-services";
      uses apply-advanced;
      leaf-list devices {
        type "jt:interface-device";
        description "Tunnel services devices to use for P2MP LSPs";
        ordered-by user;
      }
    }
    leaf no-p2mp-sublsp {
      type empty;
      description "Disable P2MP sub-LSP object generation";
    }
    leaf no-node-id-subobject {
      type empty;
      description "Do not include the node-id sub-object in the RRO";
    }
    leaf no-interface-hello {
      type empty;
      description "Disble interface Hellos on all RSVP interfaces";
    }
    container pop-and-forward {
      description "RSVP pop-and-forward specific global parameters";
      uses apply-advanced;
      container application-label {
        description "Number of application labels under the RSVP transport";
        uses apply-advanced;
        leaf depth {
          type uint32 {
            range "0 .. 3";
          }
          default "1";
          description "Application label depth";
        }
      }
    }
    leaf hello-acknowledgements {
      type empty;
      description "Acknowledge Hellos on RSVP interfaces not having sessions";
    }
    leaf no-hello-acknowledgements {
      type empty;
      description "Do not ack Hellos on RSVP interfaces not having sessions";
    }
    container node-hello {
      description "Enable node-ID based Hellos on all RSVP interfaces";
      presence "enable node-hello";
      leaf hello-interval {
        type uint32 {
          range "0 .. 60";
        }
        default "9";
        description "Hello interval";
        units seconds;
      }
    }
    leaf no-node-hello {
      type empty;
      description "Disable node-ID based Hellos on the router";
    }
    leaf allow-bidirectional {
      type empty;
      description "Enable bidirectional support in RSVP";
      status deprecated;
    }
    leaf local-reversion {
      type empty;
      description "Enable local reversion at this Point of Local Repair";
    }
    leaf no-local-reversion {
      type empty;
      description "Disable local reversion at this Point of Local Repair";
    }
    leaf rfc6510-lsp-attributes {
      type empty;
      description "Use RFC6510 compliant LSP_ATTRIBUTES";
    }
    container fast-reroute {
      description "One-to-one fast-reroute protection mechanism";
      uses apply-advanced;
      leaf optimize-timer {
        type int32 {
          range "0 .. 65535";
        }
        description "Frequency of reoptimization for fast-reroute detour";
        units seconds;
      }
    }
    container load-balance {
      description "Per-packet load-balancing algorithm";
      uses apply-advanced;
      leaf bandwidth {
        type empty;
        description "Per-packet load balancing proportional to LSP bandwidth";
      }
    }
    container traceoptions {
      description "Trace options for RSVP";
      uses apply-advanced;
      container file {
        description "Trace file options";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf replace {
          type empty;
          description "Replace trace file rather than appending to it";
          status deprecated;
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "10";
          description "Maximum number of trace files";
        }
        leaf no-stamp {
          type empty;
          description "Do not timestamp trace file";
          status deprecated;
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum io-event {
              description "Trace RSVP IO task related events";
            }
            enum io-packets {
              description "Trace all RSVP periodic refresh activity";
            }
            enum packets {
              description "Trace all RSVP trigger packets";
            }
            enum path {
              description "Trace RSVP trigger path messages";
            }
            enum resv {
              description "Trace RSVP trigger Resv messages";
            }
            enum pathtear {
              description "Trace RSVP PathTear messages";
            }
            enum resvtear {
              description "Trace RSVP ResvTear messages";
            }
            enum state {
              description "Trace state transitions";
            }
            enum error {
              description "Trace error conditions";
            }
            enum route {
              description "Trace routing information";
            }
            enum lmp {
              description "Trace RSVP-LMP related interactions";
            }
            enum event {
              description "Trace RSVP related events";
            }
            enum nsr-synchronization {
              description "Trace NSR synchronization events";
            }
            enum lsp-prefix {
              description "Prefix the trace messages with LSP information";
            }
            enum enhanced-frr {
              description "Enhanced FRR related information";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
        leaf send {
          type empty;
          description "Trace transmitted packets";
        }
        leaf receive {
          type empty;
          description "Trace received packets";
        }
        leaf detail {
          type empty;
          description "Trace detailed information";
        }
        leaf disable {
          type empty;
          description "Disable this trace flag";
        }
      }
    }
    leaf refresh-time {
      type uint32 {
        range "1 .. 65535";
      }
      default "1200";
      description "Refresh time in seconds";
    }
    leaf keep-multiplier {
      type uint32 {
        range "1 .. 255";
      }
      default "3";
      description "Keep multiplier";
    }
    leaf graceful-deletion-timeout {
      type uint32 {
        range "1 .. 300";
      }
      default "30";
      description "Time to complete graceful deletion signaling";
      units seconds;
    }
    leaf setup-protection {
      type empty;
      description "Enable setup protection";
    }
    leaf no-p2mp-re-merge {
      type empty;
      description "Enable p2mp remerge";
    }
    leaf cross-credibility-cspf {
      type empty;
      description "Compute CSPF paths spanning protocols for bypass LSP, detour LSP and loose hop expansion";
    }
    container preemption {
      description "Set RSVP session preemption attributes";
      uses apply-advanced;
      choice preemption-type {
        case case_1 {
          leaf disabled {
            type empty;
            description "No RSVP session preemption";
          }
        }
        case case_2 {
          leaf normal {
            type empty;
            description "Run RSVP session preemption to accommodate new sessions";
          }
        }
        case case_3 {
          leaf aggressive {
            type empty;
            description "Run RSVP session preemption whenever necessary";
          }
        }
      }
      container soft-preemption {
        description "Options for establishing new path before tearing down a preempted LSP";
        uses apply-advanced;
        leaf cleanup-timer {
          type int32 {
            range "0 .. 10800";
          }
          description "Time a soft-preempted LSP will be maintained";
          units seconds;
        }
      }
    }
    leaf authentication-key {
      type "jt:unreadable";
      description "Authentication password";
    }
    leaf no-authentication-check {
      type empty;
      description "Skip authentication check for received messages";
    }
    container associated-bidirectional-lsp {
      description "Set associated bidirectional LSP attributes";
      uses apply-advanced;
      leaf single-sided-provisioning {
        type empty;
        description "Enable unidirectional reverse LSP setup for single sided provisioned forward LSP";
      }
    }
    leaf no-enhanced-frr-bypass {
      type empty;
      description "Disable enhanced facility backup FRR";
    }
    leaf no-node-hello-on-bypass {
      type empty;
      description "Do not send NodeID hello over bypass LSP";
    }
    container expand-flood-reflector-hop {
      description "Control expansion of flood reflector ERO strict hops";
      presence "enable expand-flood-reflector-hop";
    }
    list interface {
      description "RSVP interface options";
      key name;
      ordered-by user;
      leaf name {
        type "jt:interface-name";
        description "Interface name";
      }
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable RSVP on this interface";
          }
        }
      }
      leaf authentication-key {
        type "jt:unreadable";
        description "Authentication password";
      }
      choice aggregate-choice {
        leaf aggregate {
          type empty;
          description "Permit refresh reduction extensions on the interface";
          status deprecated;
        }
        leaf no-aggregate {
          type empty;
          description "Don't permit refresh reduction extensions on the interface";
          status deprecated;
        }
      }
      choice reliable-choice {
        leaf reliable {
          type empty;
          description "Permit reliable message delivery on the interface";
        }
        leaf no-reliable {
          type empty;
          description "Don't permit reliable message delivery on the interface";
        }
      }
      leaf hello-interval {
        type uint32 {
          range "0 .. 60";
        }
        default "9";
        description "Hello interval";
        units seconds;
      }
      container subscription {
        description "Link bandwidth percentage for RSVP reservation";
        uses subscription-type;
      }
      leaf bandwidth {
        type string;
        description "Available bandwidth for the interface units bps";
      }
      container update-threshold {
        description "Change in reserved bandwidth to trigger IGP update";
        uses apply-advanced;
        container adaptive {
          description "Tune update-threshold dynamically";
          uses apply-advanced;
          list limit {
            description "Available Bandwidth threshold limit";
            key name;
            leaf name {
              type string;
              description "Upper limit of Available bandwidth for this range";
            }
            leaf threshold-percent {
              type decimal64 {
                fraction-digits 9;
                range "0.001 .. 20";
              }
              default "10.0";
              description "Percentage change in reserved bandwidth to trigger IGP update";
              units percent;
            }
            leaf threshold-value {
              type string;
              description "Change in reserved bandwidth to trigger IGP update (will be capped at 20% of link BW)";
            }
          }
        }
        leaf threshold-percent {
          type decimal64 {
            fraction-digits 9;
            range "0.001 .. 20";
          }
          default "10.0";
          description "Percentage change in reserved bandwidth to trigger IGP update";
          units percent;
        }
        leaf threshold-value {
          type string;
          description "Change in reserved bandwidth to trigger IGP update (will be capped at 20% of link BW)";
        }
      }
      container update-threshold-max-reservable {
        description "Change in non-rsvp bandwidth to trigger IGP update ";
        uses apply-advanced;
        leaf bandwidth {
          type string;
          description "Change in non-rsvp bandwidth to trigger IGP update units bps";
        }
        leaf percent {
          type uint32 {
            range "1 .. 100";
          }
          description "Percentage change in max-reservable bandwidth to trigger IGP update";
          units percent;
        }
      }
      container non-rsvp-bandwdith {
        description "Config knobs relating to non-rsvp bandwidth";
        uses apply-advanced;
        leaf local-bw-override-threshold {
          type empty;
          description "Overide threshold and update local bandwidth with non-rsvp bandwidth usage";
        }
      }
      container link-protection {
        description "Protect traffic with a label-stacked LSP";
        presence "enable link-protection";
        uses apply-advanced;
        choice enable-disable {
          case case_1 {
            leaf disable {
              type empty;
              description "Disable link protection on this interface";
            }
          }
        }
        container bandwidth {
          description "Bandwidth for each bypass";
          uses bandwidth-type;
        }
        leaf max-bypasses {
          type uint32 {
            range "0 .. 99";
          }
          default "1";
          description "Max number of bypasses permitted for protecting this interface";
        }
        leaf subscription {
          type uint32 {
            range "1 .. 65535";
          }
          default "100";
          description "Percent of bandwidth guaranteed when admitting protected LSPs into bypasses";
        }
        leaf no-node-protection {
          type empty;
          description "Disallow node protection on this interface";
        }
        leaf optimize-timer {
          type uint32 {
            range "0 .. 65535";
          }
          default "0";
          description "Interval between bypass reoptimizations";
          units seconds;
        }
        leaf class-of-service {
          type int32 {
            range "0 .. 7";
          }
          description "Class of service for the bypass LSP";
        }
        leaf hop-limit {
          type uint32 {
            range "2 .. 255";
          }
          description "Maximum allowed router hops for bypass";
        }
        leaf no-cspf {
          type empty;
          description "Disable automatic path computation";
        }
        leaf exclude-srlg {
          type empty;
          description "Exclude SRLG links";
        }
        container priority {
          description "Preemption priorities for the bypass LSP";
          presence "enable priority";
        }
        leaf setup-priority {
          type uint32 {
            range "0 .. 7";
          }
          description "Set-up priority";
        }
        leaf reservation-priority {
          type uint32 {
            range "0 .. 7";
          }
          description "Reservation priority";
        }
        list path {
          description "Explicit route of bypass path";
          key name;
          ordered-by user;
          leaf name {
            type "jt:ipv4addr";
            description "Address of next system in path";
          }
          choice loose_strict_none {
            case case_1 {
              leaf loose {
                type empty;
                description "Next hop might not be adjacent";
              }
            }
            case case_2 {
              leaf strict {
                type empty;
                description "Next hop must be adjacent";
              }
            }
          }
        }
        container admin-group {
          description "Administrative group policy";
          uses admin_group_include_exclude;
        }
        list bypass {
          description "Bypass with specific constraints";
          key name;
          ordered-by user;
          leaf name {
            type string {
              length "1 .. 64";
            }
            description "Name of bypass";
          }
          uses apply-advanced;
          leaf to {
            type "jt:ipv4addr";
            description "Address of egress router";
          }
          container bandwidth {
            description "Bandwidth for each bypass";
            uses bandwidth-type;
          }
          container subscription {
            description "Bandwidth percent available on bypass for protected LSPs";
            presence "enable subscription";
            uses bypass-subscription-type;
          }
          leaf description {
            type string {
              length "1 .. 80";
            }
            description "Text description of bypass";
          }
          container priority {
            description "Preemption priorities for bypass";
            presence "enable priority";
          }
          leaf setup-priority {
            type uint32 {
              range "0 .. 7";
            }
            description "Set-up priority";
          }
          leaf reservation-priority {
            type uint32 {
              range "0 .. 7";
            }
            description "Reservation priority";
          }
          leaf class-of-service {
            type int32 {
              range "0 .. 7";
            }
            description "Class of service for the bypass LSP";
          }
          leaf hop-limit {
            type uint32 {
              range "2 .. 255";
            }
            description "Maximum allowed router hops for bypass";
          }
          leaf no-cspf {
            type empty;
            description "Disable automatic path computation";
          }
          leaf exclude-srlg {
            type empty;
            description "Exclude SRLG links";
          }
          list path {
            description "Explicit route of bypass path";
            key name;
            ordered-by user;
            leaf name {
              type "jt:ipv4addr";
              description "Address of next system in path";
            }
            choice loose_strict_none {
              case case_1 {
                leaf loose {
                  type empty;
                  description "Next hop might not be adjacent";
                }
              }
              case case_2 {
                leaf strict {
                  type empty;
                  description "Next hop must be adjacent";
                }
              }
            }
          }
          container admin-group {
            description "Administrative group policy";
            uses admin_group_include_exclude;
          }
        }
        container optimize {
          description "Configure compute optimization algorithm";
          uses apply-advanced;
          choice compute-algo {
            case case_1 {
              leaf bandwidth {
                type empty;
                description "Compute path optimized for available bandwidth";
              }
            }
          }
        }
      }
    }
    list peer-interface {
      description "Configuration for peer interface";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Name of peer interface";
      }
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable RSVP on this control peer";
          }
        }
      }
      leaf authentication-key {
        type "jt:unreadable";
        description "Authentication password";
      }
      choice aggregate-choice {
        leaf aggregate {
          type empty;
          description "Permit refresh reduction extensions on the interface";
          status deprecated;
        }
        leaf no-aggregate {
          type empty;
          description "Don't permit refresh reduction extensions on the interface";
          status deprecated;
        }
      }
      choice reliable-choice {
        leaf reliable {
          type empty;
          description "Permit reliable message delivery on the interface";
        }
        leaf no-reliable {
          type empty;
          description "Don't permit reliable message delivery on the interface";
        }
      }
      leaf hello-interval {
        type uint32 {
          range "0 .. 60";
        }
        default "9";
        description "Hello interval";
        units seconds;
      }
      container dynamic-bidirectional-transport {
        description "Enable dynamic setup of bidirectional packet LSP for transporting non-packet GMPLS LSP";
        presence "enable dynamic-bidirectional-transport";
        uses apply-advanced;
        leaf template {
          type string;
          description "Template for the dynamic bidirectional packet LSP";
        }
      }
    }
    list lsp-set {
      description "Configuration for lsp set";
      key name;
      ordered-by user;
      leaf name {
        type string;
        description "Name of lsp set";
      }
      uses apply-advanced;
      choice enable-disable {
        case case_1 {
          leaf disable {
            type empty;
            description "Disable this lsp set";
          }
        }
      }
      container match-criteria {
        description "Match criteria for this lsp set";
        uses lsp-set-match-type;
      }
      container traceoptions {
        description "Trace options for this lsp set";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum io-event {
                description "Trace RSVP IO task related events";
              }
              enum io-packets {
                description "Trace all RSVP periodic refresh activity";
              }
              enum packets {
                description "Trace all RSVP packets";
              }
              enum path {
                description "Trace RSVP path messages";
              }
              enum resv {
                description "Trace RSVP Resv messages";
              }
              enum pathtear {
                description "Trace RSVP PathTear messages";
              }
              enum resvtear {
                description "Trace RSVP ResvTear messages";
              }
              enum state {
                description "Trace state transitions";
              }
              enum error {
                description "Trace error conditions";
              }
              enum route {
                description "Trace routing information";
              }
              enum lmp {
                description "Trace RSVP-LMP related interactions";
              }
              enum event {
                description "Trace RSVP related events";
              }
              enum nsr-synchronization {
                description "Trace NSR synchronization events";
              }
              enum lsp-prefix {
                description "Prefix the trace messages with LSP information";
              }
              enum enhanced-frr {
                description "Enhanced FRR related information";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
          leaf send {
            type empty;
            description "Trace transmitted packets";
          }
          leaf receive {
            type empty;
            description "Trace received packets";
          }
          leaf detail {
            type empty;
            description "Trace detailed information";
          }
          leaf disable {
            type empty;
            description "Disable this trace flag";
          }
        }
      }
    }
  }
  grouping bypass-subscription-type {
    uses apply-advanced;
    leaf subscription {
      type string;
      default "100";
      description "Subscription percentage for bandwidth protection";
    }
  }
  grouping juniper-protocols-stp {
    uses apply-advanced;
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable STP";
        }
      }
    }
    leaf bpdu-destination-mac-address {
      type enumeration {
        enum provider-bridge-group {
          description "802.1ad provider bridge group address";
        }
      }
      description "Destination MAC address in the spanning tree BPDUs";
    }
    leaf bridge-priority {
      type string;
      description "Priority of the bridge (in increments of 4k - 0,4k,8k,..60k)";
    }
    leaf backup-bridge-priority {
      type string;
      description "Priority of the bridge (in increments of 4k - 4k,8k,..60k)";
    }
    leaf max-age {
      type uint16 {
        range "6 .. 40";
      }
      description "Maximum age of received protocol bpdu";
      units seconds;
    }
    leaf hello-time {
      type uint16 {
        range "1 .. 10";
      }
      description "Time interval between configuration BPDUs";
      units seconds;
    }
    leaf forward-delay {
      type uint16 {
        range "4 .. 30";
      }
      description "Time spent in listening or learning state";
      units seconds;
    }
    leaf system-identifier {
      type "jt:mac-unicast";
      description "Sytem identifier to represent this node";
    }
    container traceoptions {
      description "Tracing options for debugging protocol operation";
      uses stp-trace-options;
    }
    leaf vpls-flush-on-topology-change {
      type empty;
      description "Enable VPLS MAC flush on root protected CE interface receving topology change";
    }
    leaf priority-hold-time {
      type uint16 {
        range "1 .. 255";
      }
      description "Hold time before switching to primary priority when core domain becomes up";
      units seconds;
    }
    list system-id {
      description "System ID to IP mapping";
      key name;
      ordered-by user;
      uses system-id-ip-map;
    }
    list interface {
      description "Interface options";
      key name;
      uses stp-interface;
    }
    leaf extended-system-id {
      type uint16 {
        range "0 .. 4095";
      }
      description "Extended system identifier";
    }
    leaf force-version {
      type enumeration {
        enum stp {
          description "Spanning tree protocol";
        }
      }
      description "Force protocol version";
    }
    leaf bpdu-block-on-edge {
      type empty;
      description "Block BPDU on all interfaces configured as edge (BPDU Protect)";
    }
  }
  grouping juniper-protocols-vgd {
    uses apply-advanced;
    container traceoptions {
      description "OVSDB trace options";
      uses apply-advanced;
      leaf no-remote-trace {
        type empty;
        description "Disable remote tracing";
      }
      container file {
        description "Trace file information";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "3";
          description "Maximum number of trace files";
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
        leaf match {
          type "jt:regular-expression";
          description "Regular expression for lines to be logged";
        }
        leaf microsecond-stamp {
          type empty;
          description "Timestamp with microsecond granularity";
        }
      }
      list flag {
        description "Tracing flag parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum interface {
              description "Trace OVSDB daemon interface events";
            }
            enum configuration {
              description "Trace OVSDB daemon configuration events";
            }
            enum core {
              description "Trace OVSDB daemon core events";
            }
            enum l2-client {
              description "Trace OVSDB daemon l2-client events";
            }
            enum ovs-client {
              description "Trace OVSDB daemon ovs-client events";
            }
            enum function {
              description "Trace OVSDB daemon function events";
            }
            enum netconf-client {
              description "Trace OVSDB daemon netconf-client events";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
      }
    }
    list interfaces {
      description "Interfaces configured to be controlled by OVSDB";
      key name;
      ordered-by user;
      leaf name {
        type "jt:interface-unit";
        description "Interface name";
      }
      uses apply-advanced;
    }
    list controller {
      description "Controller's IP address and port";
      key name;
      ordered-by user;
      leaf name {
        type "jt:ipaddr";
        description "Controller's IPv4 address";
      }
      uses apply-advanced;
      container protocol {
        description "Protocol type for controller connection";
        uses apply-advanced;
        container tcp {
          description "Set protocol type to 'TCP'";
          uses apply-advanced;
          leaf port {
            type int32 {
              range "1024 .. 65535";
            }
            description "Controller's port number";
          }
        }
        container ssl {
          description "Set protocol type to 'SSL' (default)";
          uses apply-advanced;
          leaf port {
            type int32 {
              range "1024 .. 65535";
            }
            description "Controller's port number";
          }
        }
      }
      leaf maximum-backoff-duration {
        type uint32 {
          range "1000 .. 4294967295";
        }
        description "Maximum duration to wait between connection attempts";
        units milliseconds;
      }
      leaf inactivity-probe-duration {
        type uint32;
        description "Maximum idle duration before sending inactivity probe";
        units milliseconds;
      }
    }
  }
  grouping juniper-protocols-vni-options {
    uses apply-advanced;
    list vni {
      description "Per-vni options";
      key name;
      leaf name {
        type int32 {
          range "1 .. 16777214";
        }
      }
      uses apply-advanced;
      container vrf-target {
        description "VRF target community configuration";
        uses apply-advanced;
        leaf export {
          type string;
          description "Target community to use when marking routes on export";
          status deprecated;
        }
        leaf community {
          type string;
          description "Target community";
        }
      }
    }
  }
  grouping juniper-protocols-vstp {
    uses apply-advanced;
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable VSTP";
        }
      }
    }
    leaf force-version {
      type enumeration {
        enum stp {
          description "Spanning tree protocol";
        }
      }
      description "Force protocol version";
    }
    leaf bpdu-block-on-edge {
      type empty;
      description "Block BPDU on all interfaces configured as edge (BPDU Protect)";
    }
    leaf vpls-flush-on-topology-change {
      type empty;
      description "Enable VPLS MAC flush on root protected CE interface receving topology change";
    }
    leaf priority-hold-time {
      type uint16 {
        range "1 .. 255";
      }
      description "Hold time before switching to primary priority when core domain becomes up";
      units seconds;
    }
    list system-id {
      description "System ID to IP mapping";
      key name;
      ordered-by user;
      uses system-id-ip-map;
    }
    list interface {
      description "Interface options";
      key name;
      uses stp-interface;
    }
    list vlan {
      description "VLAN spanning tree options";
      key name;
      leaf name {
        type string;
        description "VLAN id or all";
      }
      uses apply-advanced;
      leaf bridge-priority {
        type string;
        description "Priority of the bridge (in increments of 4k - 0,4k,8k,..60k)";
      }
      leaf backup-bridge-priority {
        type string;
        description "Priority of the bridge (in increments of 4k - 4k,8k,..60k)";
      }
      leaf max-age {
        type uint16 {
          range "6 .. 40";
        }
        description "Maximum age of received protocol bpdu";
        units seconds;
      }
      leaf hello-time {
        type uint16 {
          range "1 .. 10";
        }
        description "Time interval between configuration BPDUs";
        units seconds;
      }
      leaf forward-delay {
        type uint16 {
          range "4 .. 30";
        }
        description "Time spent in listening or learning state";
        units seconds;
      }
      leaf system-identifier {
        type "jt:mac-unicast";
        description "Sytem identifier to represent this node";
      }
      container traceoptions {
        description "Tracing options for debugging protocol operation";
        uses stp-trace-options;
      }
      list interface {
        description "Interface options";
        key name;
        uses stp-interface;
      }
    }
    container vlan-group {
      description "Spanning tree options for group of VLANs";
      presence "enable vlan-group";
      uses apply-advanced;
      list group {
        description "Name if VLAN group";
        key name;
        ordered-by user;
        leaf name {
          type string {
            length "1 .. 63";
          }
          description "VLAN group name";
        }
        uses apply-advanced;
        leaf-list vlan {
          type string;
          description "VLAN ID or VLAN ID range [1..4094]";
          ordered-by user;
        }
        leaf bridge-priority {
          type string;
          description "Priority of the bridge (in increments of 4k - 0,4k,8k,..60k)";
        }
        leaf backup-bridge-priority {
          type string;
          description "Priority of the bridge (in increments of 4k - 4k,8k,..60k)";
        }
        leaf max-age {
          type uint16 {
            range "6 .. 40";
          }
          description "Maximum age of received protocol bpdu";
          units seconds;
        }
        leaf hello-time {
          type uint16 {
            range "1 .. 10";
          }
          description "Time interval between configuration BPDUs";
          units seconds;
        }
        leaf forward-delay {
          type uint16 {
            range "4 .. 30";
          }
          description "Time spent in listening or learning state";
          units seconds;
        }
        leaf system-identifier {
          type "jt:mac-unicast";
          description "Sytem identifier to represent this node";
        }
        container traceoptions {
          description "Tracing options for debugging protocol operation";
          uses stp-trace-options;
        }
        list interface {
          description "Interface options";
          key name;
          uses stp-interface;
        }
      }
    }
  }
  grouping ldp-sync-obj {
    uses apply-advanced;
    choice enable-disable {
      case case_1 {
        leaf disable {
          type empty;
          description "Disable LDP synchronization";
        }
      }
    }
    leaf hold-time {
      type uint32 {
        range "1 .. 65535";
      }
      description "Time during which maximum metric is advertised";
    }
  }
  grouping ldp_filter_obj {
    description "Filter to apply to tracing";
    leaf match-on {
      type enumeration {
        enum fec {
          description "Filter based on FEC associated to the traced object.";
        }
        enum address {
          description "Filter based on packet source and destination addresses.";
        }
      }
      description "Argument on which to match";
    }
    leaf-list policy {
      type "jt:policy-algebra";
      description "Filter policy";
      ordered-by user;
    }
  }
  grouping lmp_control_channel_type {
    leaf name {
      type "jt:interface-name";
      description "Control channel interface";
    }
    uses apply-advanced;
    leaf remote-address {
      type "jt:ipaddr";
      description "Control channel remote address";
    }
  }
  grouping lsp-set-match-type {
    uses apply-advanced;
    leaf lsp-name {
      type string;
      description "LSP name that matches this string";
    }
    leaf lsp-regex {
      type string;
      description "All LSPs that match this regular expression pattern";
    }
    leaf p2mp-name {
      type string;
      description "P2MP names that match this string";
    }
    leaf p2mp-regex {
      type string;
      description "P2MP names that match this regular expression pattern";
    }
    choice router-type {
      case case_1 {
        leaf egress {
          type empty;
          description "All LSPs for which this router is egress";
        }
      }
      case case_2 {
        leaf ingress {
          type empty;
          description "All LSPs for which this router is ingress";
        }
      }
      case case_3 {
        leaf transit {
          type empty;
          description "All LSPs for which this router is transit";
        }
      }
    }
  }
  grouping macro-data-type {
    leaf name {
      type string;
      description "Keyword part of the keyword-value pair";
    }
    leaf value {
      type string;
      description "Value part of the keyword-value pair";
    }
  }
  grouping mrp-trace-options {
    description "Trace options for MMRP Protocol";
    uses apply-advanced;
    container file {
      description "Trace file options";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf replace {
        type empty;
        description "Replace trace file rather than appending to it";
        status deprecated;
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "10";
        description "Maximum number of trace files";
      }
      leaf no-stamp {
        type empty;
        description "Do not timestamp trace file";
        status deprecated;
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
    }
    list flag {
      description "Tracing parameters";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum events {
            description "Trace events to the protocol state machine";
          }
          enum pdu {
            description "Trace RAPS PDU reception and transmission";
          }
          enum timers {
            description "Trace protocol timers";
          }
          enum state-machine {
            description "Trace information of the state machine";
          }
          enum socket {
            description "Trace soccket activity";
          }
          enum error {
            description "Trace all failure conditions";
          }
          enum all {
            description "Trace all";
          }
        }
      }
      leaf disable {
        type empty;
        description "Disable this trace flag";
      }
    }
  }
  grouping mstp-interface {
    leaf name {
      type string;
    }
    uses apply-advanced;
    leaf priority {
      type uint16 {
        range "0 .. 255";
      }
      description "Interface priority (in increments of 16 - 0,16,..240)";
    }
    leaf cost {
      type uint32 {
        range "1 .. 200000000";
      }
      description "Cost of the interface";
    }
    leaf mode {
      type enumeration {
        enum point-to-point {
          description "Interface mode is point-to-point";
        }
        enum shared {
          description "Interface mode is shared";
        }
      }
      description "Interface mode (P2P or shared)";
    }
    leaf edge {
      type empty;
      description "Port is an edge port";
    }
    leaf access-trunk {
      type empty;
      description "Send/Receive untagged RSTP BPDUs on this interface";
    }
    container bpdu-timeout-action {
      description "Define action on BPDU expiry (Loop Protect)";
      presence "enable bpdu-timeout-action";
      uses apply-advanced;
      leaf block {
        type empty;
        description "Block the interface";
      }
      leaf alarm {
        type empty;
        description "Generate an alarm";
      }
    }
    leaf no-root-port {
      type empty;
      description "Do not allow the interface to become root (Root Protect)";
    }
    leaf disable {
      type empty;
      description "Disable Spanning Tree on port";
    }
  }
  grouping pccd-traceoptions-type {
    description "Trace options for PCCD";
    uses apply-advanced;
    leaf no-remote-trace {
      type empty;
      description "Disable remote tracing";
    }
    container file {
      description "Trace file information";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "3";
        description "Maximum number of trace files";
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
      leaf match {
        type "jt:regular-expression";
        description "Regular expression for lines to be logged";
      }
    }
    list flag {
      description "Area of PCCD to enable debugging output";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum pccd-main {
            description "Trace main module";
          }
          enum pccd-config {
            description "Trace configuration parsing operations";
          }
          enum pccd-core {
            description "Trace PCCD's core operations";
          }
          enum pccd-ui {
            description "Trace user interface handling";
          }
          enum pccd-rpd {
            description "Trace communication with RPD";
          }
          enum pccd-functions {
            description "Trace function entries/outs";
          }
          enum pccd-nsr {
            description "Trace NSR operations";
          }
          enum all {
            description "Trace all areas of PCCD code";
          }
        }
      }
    }
  }
  grouping peer-group {
    leaf name {
      type "jt:ipv4addr";
      description "IP address for this peer";
    }
    uses apply-advanced;
    leaf local-ip-addr {
      type "jt:ipv4addr";
      description "Local IP address to use for this peer alone.";
    }
    leaf session-establishment-hold-time {
      type uint32 {
        range "45 .. 600";
      }
      description "Time within which connection must succeed with this peer";
      units seconds;
    }
    leaf-list redundancy-group-id-list {
      type uint32;
      description "List of redundacy groups this peer is part of";
      ordered-by user;
    }
    container backup-liveness-detection {
      description "Backup liveness detection";
      presence "enable backup-liveness-detection";
      uses apply-advanced;
      leaf backup-peer-ip {
        type "jt:ipv4addr";
        description "Backup livelness detection peer's IP address";
      }
    }
    container liveness-detection {
      description "Bidirectional Forwarding Detection options for the peer";
      presence "enable liveness-detection";
      uses apply-advanced;
      leaf version {
        type enumeration {
          enum 0 {
            description "BFD version 0 (deprecated)";
          }
          enum 1 {
            description "BFD version 1";
          }
          enum automatic {
            description "Choose BFD version automatically";
          }
        }
        default "automatic";
        description "BFD protocol version number";
      }
      leaf minimum-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum transmit and receive interval";
        units milliseconds;
      }
      leaf minimum-transmit-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum transmit interval";
        status deprecated;
        units milliseconds;
      }
      leaf minimum-receive-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum receive interval";
        units milliseconds;
      }
      leaf multiplier {
        type uint32 {
          range "1 .. 255";
        }
        default "3";
        description "Detection time multiplier";
      }
      leaf inline-disable {
        type empty;
        description "Disable inline mode for this BFD session";
      }
      leaf pdu-size {
        type uint32 {
          range "24 .. 9000";
        }
        default "24";
        description "BFD transport protocol payload size";
      }
      choice adaptation-choice {
        case case_1 {
          leaf no-adaptation {
            type empty;
            description "Disable adaptation";
          }
        }
      }
      container transmit-interval {
        description "Transmit-interval options";
        uses apply-advanced;
        leaf minimum-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit interval";
          units milliseconds;
        }
        leaf threshold {
          type uint32;
          description "High transmit interval triggering a trap";
          units milliseconds;
        }
      }
      container detection-time {
        description "Detection-time options";
        uses apply-advanced;
        leaf threshold {
          type uint32;
          description "High detection-time triggering a trap";
          units milliseconds;
        }
      }
    }
    leaf authentication-key {
      type string {
        length "1 .. 126";
      }
      description "MD5 authentication key";
    }
  }
  grouping periodic_oam {
    uses apply-advanced;
    container mpls-tp-mode {
      description "MPLS-TP Mode, Do not use IP addressing for OAM";
      presence "enable mpls-tp-mode";
      uses apply-advanced;
      container lsping-channel-type {
        description "Supported Control-channel types for MPLS-TP mode....";
        uses apply-advanced;
        choice action-choice {
          case case_1 {
            leaf ipv4 {
              type empty;
              description "Use channel-type IPv4(0x0021), With IP-UDP encapsulation";
            }
          }
          case case_2 {
            leaf on-demand-cv {
              type empty;
              description "Use channel-type On-Demand-CV(0x0025), Without IP-UDP encapsulation";
            }
          }
        }
      }
    }
    container bfd-port {
      description "Egress knob to select MHOP-BFD port for MPLS BFD";
      uses apply-advanced;
      leaf-list import {
        type "jt:policy-algebra";
        description "Import policy";
        ordered-by user;
      }
    }
    container bfd-liveness-detection {
      description "Bidirectional Forwarding Detection options";
      uses apply-advanced;
      leaf version {
        type enumeration {
          enum 0 {
            description "BFD version 0 (deprecated)";
          }
          enum 1 {
            description "BFD version 1";
          }
          enum automatic {
            description "Choose BFD version automatically";
          }
        }
        default "automatic";
        description "BFD protocol version number";
      }
      leaf minimum-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum transmit and receive interval";
        units milliseconds;
      }
      leaf minimum-transmit-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum transmit interval";
        status deprecated;
        units milliseconds;
      }
      leaf minimum-receive-interval {
        type uint32 {
          range "1 .. 255000";
        }
        description "Minimum receive interval";
        units milliseconds;
      }
      leaf multiplier {
        type uint32 {
          range "1 .. 255";
        }
        default "3";
        description "Detection time multiplier";
      }
      leaf inline-disable {
        type empty;
        description "Disable inline mode for this BFD session";
      }
      leaf pdu-size {
        type uint32 {
          range "24 .. 9000";
        }
        default "24";
        description "BFD transport protocol payload size";
      }
      choice adaptation-choice {
        case case_1 {
          leaf no-adaptation {
            type empty;
            description "Disable adaptation";
          }
        }
      }
      container transmit-interval {
        description "Transmit-interval options";
        uses apply-advanced;
        leaf minimum-interval {
          type uint32 {
            range "1 .. 255000";
          }
          description "Minimum transmit interval";
          units milliseconds;
        }
        leaf threshold {
          type uint32;
          description "High transmit interval triggering a trap";
          units milliseconds;
        }
      }
      container detection-time {
        description "Detection-time options";
        uses apply-advanced;
        leaf threshold {
          type uint32;
          description "High detection-time triggering a trap";
          units milliseconds;
        }
      }
      container failure-action {
        description "Action to take when BFD session goes down";
        choice action-choice {
          case case_1 {
            leaf teardown {
              type empty;
              description "Teardown label switched path and resignal";
            }
          }
          case case_2 {
            container make-before-break {
              description "Resignal the label switched path before teardown";
              presence "enable make-before-break";
              uses apply-advanced;
              leaf teardown-timeout {
                type uint32 {
                  range "0 .. 30";
                }
                description "Time to wait before teardown";
                units seconds;
              }
            }
          }
        }
      }
      leaf no-router-alert-option {
        type empty;
        description "Do not set Router-Alert options in IP header for MPLS-BFD";
      }
      leaf use-ip-ttl-1 {
        type empty;
        description "Set TTL value to 1 in IP header for MPLS-BFD";
      }
    }
    container performance-monitoring {
      description "Performance monitoring options";
      uses apply-advanced;
      container traceoptions {
        description "Trace options for PM";
        uses apply-advanced;
        container file {
          description "Trace file options";
          leaf filename {
            type string {
              length "1 .. 1024";
            }
            description "Name of file in which to write trace information";
          }
          leaf replace {
            type empty;
            description "Replace trace file rather than appending to it";
            status deprecated;
          }
          leaf size {
            type string;
            description "Maximum trace file size";
          }
          leaf files {
            type uint32 {
              range "2 .. 1000";
            }
            default "10";
            description "Maximum number of trace files";
          }
          leaf no-stamp {
            type empty;
            description "Do not timestamp trace file";
            status deprecated;
          }
          choice world-readable-choice {
            leaf world-readable {
              type empty;
              description "Allow any user to read the log file";
            }
            leaf no-world-readable {
              type empty;
              description "Don't allow any user to read the log file";
            }
          }
        }
        list flag {
          description "Tracing parameters";
          key name;
          ordered-by user;
          leaf name {
            type enumeration {
              enum init {
                description "Trace init commnad";
              }
              enum error {
                description "Trace error conditions";
              }
              enum event {
                description "Trace state machine events";
              }
              enum general {
                description "Trace general events";
              }
              enum packet {
                description "Trace various packets ";
              }
              enum timer {
                description "Trace timer processing";
              }
              enum all {
                description "Trace everything";
              }
            }
          }
        }
      }
      container querier {
        description "Querier options";
        uses apply-advanced;
        container loss {
          description "Loss measurement options";
          uses apply-advanced;
          list traffic-class {
            description "Traffic class specific options";
            key name;
            leaf name {
              type enumeration {
                enum tc-0 {
                  description "Traffic class 0";
                }
                enum tc-1 {
                  description "Traffic class 1";
                }
                enum tc-2 {
                  description "Traffic class 2";
                }
                enum tc-3 {
                  description "Traffic class 3";
                }
                enum tc-4 {
                  description "Traffic class 4";
                }
                enum tc-5 {
                  description "Traffic class 5";
                }
                enum tc-6 {
                  description "Traffic class 6";
                }
                enum tc-7 {
                  description "Traffic class 7";
                }
                enum all {
                  description "All Traffic class";
                }
                enum none {
                  description "No Traffic class";
                }
              }
              description "Traffic class value";
            }
            uses apply-advanced;
            leaf query-interval {
              type uint32 {
                range "1000 .. 4294967295";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf measurement-quantity {
              type enumeration {
                enum bytes {
                  description "Byte loss measurement";
                }
                enum packets {
                  description "Packet loss measurement";
                }
              }
              default "packets";
              description "Loss measurement quantity";
            }
            leaf average-sample-size {
              type uint16 {
                range "1 .. 30";
              }
              description "Number of samples used in average calculation";
            }
            leaf loss-threshold {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Loss threshold value";
            }
            leaf loss-threshold-window {
              type uint32 {
                range "1 .. 30";
              }
              description "Number of samples for loss threshold calculation";
            }
          }
        }
        container delay {
          description "Delay measurement options";
          uses apply-advanced;
          list traffic-class {
            description "Traffic class specific options";
            key name;
            leaf name {
              type enumeration {
                enum tc-0 {
                  description "Traffic class 0";
                }
                enum tc-1 {
                  description "Traffic class 1";
                }
                enum tc-2 {
                  description "Traffic class 2";
                }
                enum tc-3 {
                  description "Traffic class 3";
                }
                enum tc-4 {
                  description "Traffic class 4";
                }
                enum tc-5 {
                  description "Traffic class 5";
                }
                enum tc-6 {
                  description "Traffic class 6";
                }
                enum tc-7 {
                  description "Traffic class 7";
                }
                enum all {
                  description "All Traffic classes";
                }
              }
              description "Traffic class value";
            }
            uses apply-advanced;
            leaf query-interval {
              type uint32 {
                range "1000 .. 4294967295";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf padding-size {
              type uint16 {
                range "1 .. 1500";
              }
              description "Size of padding";
            }
            leaf average-sample-size {
              type uint16 {
                range "1 .. 30";
              }
              description "Number of samples used in average calculation";
            }
            leaf twcd-delay-threshold {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Two way channel delay threshold value";
              units microseconds;
            }
            leaf rtt-delay-threshold {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Round trip delay threshold value";
              units microseconds;
            }
          }
        }
        container loss-delay {
          description "Combined loss-delay measurement options";
          uses apply-advanced;
          list traffic-class {
            description "Traffic class specific options";
            key name;
            leaf name {
              type enumeration {
                enum tc-0 {
                  description "Traffic class 0";
                }
                enum tc-1 {
                  description "Traffic class 1";
                }
                enum tc-2 {
                  description "Traffic class 2";
                }
                enum tc-3 {
                  description "Traffic class 3";
                }
                enum tc-4 {
                  description "Traffic class 4";
                }
                enum tc-5 {
                  description "Traffic class 5";
                }
                enum tc-6 {
                  description "Traffic class 6";
                }
                enum tc-7 {
                  description "Traffic class 7";
                }
                enum all {
                  description "All Traffic classes";
                }
                enum none {
                  description "No Traffic class";
                }
              }
              description "Traffic class value";
            }
            uses apply-advanced;
            leaf query-interval {
              type uint32 {
                range "1000 .. 4294967295";
              }
              description "Minimum transmit interval";
              units milliseconds;
            }
            leaf measurement-quantity {
              type enumeration {
                enum bytes {
                  description "Byte loss measurement";
                }
                enum packets {
                  description "Packet loss measurement";
                }
              }
              default "packets";
              description "Loss measurement quantity";
            }
            leaf padding-size {
              type uint16 {
                range "1 .. 1500";
              }
              description "Size of padding";
            }
            leaf average-sample-size {
              type uint16 {
                range "1 .. 30";
              }
              description "Number of samples used in average calculation";
            }
            leaf loss-threshold {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Loss threshold value";
            }
            leaf loss-threshold-window {
              type uint32 {
                range "1 .. 30";
              }
              description "Number of samples for loss threshold calculation";
            }
            leaf twcd-delay-threshold {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Two way channel delay threshold value";
              units microseconds;
            }
            leaf rtt-delay-threshold {
              type uint32 {
                range "1 .. 4294967295";
              }
              description "Round trip delay threshold value";
              units microseconds;
            }
          }
        }
      }
      container responder {
        description "Responder options";
        uses apply-advanced;
        container loss {
          description "Loss measurement options";
          uses apply-advanced;
          leaf min-query-interval {
            type uint32 {
              range "1000 .. 4294967295";
            }
            description "Minimum query interval";
            units milliseconds;
          }
        }
        container delay {
          description "Delay measurement options";
          uses apply-advanced;
          leaf min-query-interval {
            type uint32 {
              range "1000 .. 4294967295";
            }
            description "Minimum query interval";
            units milliseconds;
          }
        }
      }
    }
    leaf lsp-ping-interval {
      type uint16 {
        range "30 .. 3600";
      }
      description "Time interval between LSP ping messages";
      units seconds;
    }
    leaf lsp-ping-multiplier {
      type uint8 {
        range "1 .. 5";
      }
      description "Number of ping reply missed before declaring BFD down";
    }
    container traceoptions {
      description "Trace options for MPLSOAM process";
      uses apply-advanced;
      leaf no-remote-trace {
        type empty;
        description "Disable remote tracing";
      }
      container file {
        description "Trace file information";
        leaf filename {
          type string {
            length "1 .. 1024";
          }
          description "Name of file in which to write trace information";
        }
        leaf size {
          type string;
          description "Maximum trace file size";
        }
        leaf files {
          type uint32 {
            range "2 .. 1000";
          }
          default "3";
          description "Maximum number of trace files";
        }
        choice world-readable-choice {
          leaf world-readable {
            type empty;
            description "Allow any user to read the log file";
          }
          leaf no-world-readable {
            type empty;
            description "Don't allow any user to read the log file";
          }
        }
        leaf match {
          type "jt:regular-expression";
          description "Regular expression for lines to be logged";
        }
      }
      list flag {
        description "Tracing parameters";
        key name;
        ordered-by user;
        leaf name {
          type enumeration {
            enum configuration {
              description "Trace configuration events";
            }
            enum pipe {
              description "Trace pipe activity";
            }
            enum rpc-packet-details {
              description "Trace RPC packet details";
            }
            enum database {
              description "Trace database activity";
            }
            enum network {
              description "Trace network activity";
            }
            enum traceroute {
              description "Trace traceroute activity";
            }
            enum all {
              description "Trace everything";
            }
          }
        }
      }
    }
  }
  grouping pim_bootstrap_options_type {
    uses apply-advanced;
    leaf priority {
      type uint32 {
        range "0 .. 255";
      }
      description "Eligibility to be the bootstrap router";
    }
    leaf-list import {
      type "jt:policy-algebra";
      description "Bootstrap import policy";
      ordered-by user;
    }
    leaf-list export {
      type "jt:policy-algebra";
      description "Bootstrap export policy";
      ordered-by user;
    }
  }
  grouping pim_filter_obj {
    description "Filter to apply to tracing";
    leaf match-on {
      type enumeration {
        enum prefix {
          description "Filter based on prefix";
        }
      }
      description "Argument on which to match";
    }
    leaf-list policy {
      type "jt:policy-algebra";
      description "Filter policy";
      ordered-by user;
    }
  }
  grouping pim_rp_group_range_type {
    leaf name {
      type "jt:ipprefix";
    }
    uses apply-advanced;
    leaf nexthop-hold-time {
      type uint32 {
        range "1 .. 1000";
      }
      description "Nexthop hold time in milliseconds";
      units milliseconds;
    }
  }
  grouping ppp-traceoptions-type {
    description "Trace options for PPP process";
    uses apply-advanced;
    leaf no-remote-trace {
      type empty;
      description "Disable remote tracing";
    }
    container file {
      description "Trace file information";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "3";
        description "Maximum number of trace files";
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
      leaf match {
        type "jt:regular-expression";
        description "Regular expression for lines to be logged";
      }
    }
    leaf level {
      type enumeration {
        enum error {
          description "Match error conditions";
        }
        enum warning {
          description "Match warning messages";
        }
        enum notice {
          description "Match conditions that should be handled specially";
        }
        enum info {
          description "Match informational messages";
        }
        enum verbose {
          description "Match verbose messages";
        }
        enum all {
          description "Match all levels";
        }
      }
      default "error";
      description "Level of debugging output";
    }
    list flag {
      description "Area of PPP process to enable debugging output";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum access {
            description "Trace access code";
          }
          enum address-pool {
            description "Trace address pool code";
          }
          enum auth {
            description "Trace authentication code";
          }
          enum chap {
            description "Trace CHAP code";
          }
          enum pap {
            description "Trace PAP code";
          }
          enum config {
            description "Trace configuration code";
          }
          enum ifdb {
            description "Trace interface database code";
          }
          enum lcp {
            description "Trace LCP state machine code";
          }
          enum memory {
            description "Trace memory management code";
          }
          enum message {
            description "Trace message processing code";
          }
          enum mlppp {
            description "Trace MLPPP code";
          }
          enum ncp {
            description "Trace NCP state machine code";
          }
          enum ppp {
            description "Trace PPP protocol processing code";
          }
          enum radius {
            description "Trace RADIUS processing code";
          }
          enum redundancy {
            description "Trace redundancy code";
          }
          enum rtsock {
            description "Trace routing socket code";
          }
          enum session {
            description "Trace session management code";
          }
          enum signal {
            description "Trace signal handling code";
          }
          enum timer {
            description "Trace timer code";
          }
          enum ui {
            description "Trace user interface code";
          }
          enum ci {
            description "Trace ci code";
          }
          enum all {
            description "Trace all areas of code";
          }
        }
      }
    }
  }
  grouping pppoe-traceoptions-type {
    description "Trace options for PPPoE process";
    uses apply-advanced;
    leaf no-remote-trace {
      type empty;
      description "Disable remote tracing";
    }
    container file {
      description "Trace file information";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "3";
        description "Maximum number of trace files";
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
      leaf match {
        type "jt:regular-expression";
        description "Regular expression for lines to be logged";
      }
    }
    leaf level {
      type enumeration {
        enum error {
          description "Match error conditions";
        }
        enum warning {
          description "Match warning messages";
        }
        enum notice {
          description "Match conditions that should be handled specially";
        }
        enum info {
          description "Match informational messages";
        }
        enum verbose {
          description "Match verbose messages";
        }
        enum all {
          description "Match all levels";
        }
      }
      default "error";
      description "Level of debugging output";
    }
    list flag {
      description "Area of PPPoE process to enable debugging output";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum config {
            description "Trace configuration code";
          }
          enum events {
            description "Trace event code";
          }
          enum gres {
            description "Trace GRES code";
          }
          enum init {
            description "Trace initialization code";
          }
          enum interface-db {
            description "Trace interface database code";
          }
          enum memory {
            description "Trace memory management code";
          }
          enum protocol {
            description "Trace PPPoE protocol processing code";
          }
          enum rtsock {
            description "Trace routing socket code";
          }
          enum session-db {
            description "Trace Session DB code";
          }
          enum signal {
            description "Trace signal handling code";
          }
          enum state {
            description "Trace state handling code";
          }
          enum stats {
            description "Trace Stats Handling code";
          }
          enum timer {
            description "Trace timer code";
          }
          enum ui {
            description "Trace user interface code";
          }
          enum all {
            description "Trace all areas of code";
          }
        }
      }
    }
    container filter {
      description "Trace filtering";
      presence "enable filter";
      uses apply-advanced;
      leaf aci {
        type string {
          length "1 .. 64";
        }
        description "Regular expression to match ACI";
      }
      leaf ari {
        type string {
          length "1 .. 64";
        }
        description "Regular expression to match ARI";
      }
      leaf service-name {
        type string {
          length "1 .. 64";
        }
        description "Service name";
      }
      leaf underlying-interface {
        type string;
        description "Underlying interface name";
      }
      container user {
        description "Filter by user name";
        presence "enable user";
        uses apply-advanced;
        leaf username {
          type string {
            length "1 .. 64";
          }
          description "Name of the user to be filtered";
        }
      }
    }
  }
  grouping r2cp-traceoptions-type {
    description "Trace options for R2CP process";
    uses apply-advanced;
    leaf no-remote-trace {
      type empty;
      description "Disable remote tracing";
    }
    container file {
      description "Trace file information";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "3";
        description "Maximum number of trace files";
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
      leaf match {
        type "jt:regular-expression";
        description "Regular expression for lines to be logged";
      }
    }
    leaf level {
      type enumeration {
        enum error {
          description "Match error conditions";
        }
        enum warning {
          description "Match warning messages";
        }
        enum notice {
          description "Match conditions that should be handled specially";
        }
        enum info {
          description "Match informational messages";
        }
        enum verbose {
          description "Match verbose messages";
        }
        enum all {
          description "Match all levels";
        }
      }
      default "error";
      description "Level of debugging output";
    }
    list flag {
      description "Area of R2CP process to enable debugging output";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum configuration {
            description "Trace configuration code";
          }
          enum event {
            description "Trace events";
          }
          enum interface {
            description "Trace interface processing";
          }
          enum node {
            description "Trace node table code";
          }
          enum packet {
            description "Trace packet processing";
          }
          enum rtsock {
            description "Trace routing socket code";
          }
          enum session {
            description "Trace session events";
          }
          enum socket {
            description "Trace socket calls";
          }
          enum timer {
            description "Trace timer code";
          }
          enum virtual-channel {
            description "Trace virtual channel mapping code";
          }
          enum all {
            description "Trace all areas of code";
          }
        }
      }
    }
  }
  grouping rib-inet3 {
    uses apply-advanced;
    container "inet.3" {
      description "Use inet.3 to exchange labeled unicast routes";
      presence "enable inet.3";
      uses apply-advanced;
    }
  }
  grouping rib_group_inet_type {
    description "Routing table group";
    leaf ribgroup-name {
      type string;
      description "Name of the routing table group";
    }
  }
  grouping rib_group_type {
    uses apply-advanced;
    leaf inet-old-style {
      type string;
      description "Name of the IPv4 routing table group";
      status deprecated;
    }
    leaf inet {
      type string;
      description "Name of the IPv4 routing table group";
    }
    leaf inet3 {
      type string;
      description "Name of the IPv4 inet.3 routing table group";
    }
    leaf inet6 {
      type string;
      description "Name of the IPv6 routing table group";
    }
    leaf inet63 {
      type string;
      description "Name of the IPv6 inet6.3 routing table group";
    }
  }
  grouping rip_filter_obj {
    description "Filter to apply to tracing";
    leaf match-on {
      type enumeration {
        enum prefix {
          description "Filter based on prefix";
        }
      }
      description "Argument on which to match";
    }
    leaf-list policy {
      type "jt:policy-algebra";
      description "Filter policy";
      ordered-by user;
    }
  }
  grouping stp-interface {
    leaf name {
      type string;
    }
    uses apply-advanced;
    leaf priority {
      type uint16 {
        range "0 .. 255";
      }
      description "Interface priority (in increments of 16 - 0,16,..240)";
    }
    leaf cost {
      type uint32 {
        range "1 .. 200000000";
      }
      description "Cost of the interface";
    }
    leaf mode {
      type enumeration {
        enum point-to-point {
          description "Interface mode is point-to-point";
        }
        enum shared {
          description "Interface mode is shared";
        }
      }
      description "Interface mode (P2P or shared)";
    }
    leaf edge {
      type empty;
      description "Port is an edge port";
    }
    leaf access-trunk {
      type empty;
      description "Send/Receive untagged RSTP BPDUs on this interface";
    }
    container bpdu-timeout-action {
      description "Define action on BPDU expiry (Loop Protect)";
      presence "enable bpdu-timeout-action";
      uses apply-advanced;
      leaf block {
        type empty;
        description "Block the interface";
      }
      leaf alarm {
        type empty;
        description "Generate an alarm";
      }
    }
    leaf no-root-port {
      type empty;
      description "Do not allow the interface to become root (Root Protect)";
    }
    leaf disable {
      type empty;
      description "Disable Spanning Tree on port";
    }
  }
  grouping stp-trace-options {
    description "Trace options for Spanning Tree Protocol";
    uses apply-advanced;
    container file {
      description "Trace file options";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf replace {
        type empty;
        description "Replace trace file rather than appending to it";
        status deprecated;
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "10";
        description "Maximum number of trace files";
      }
      leaf no-stamp {
        type empty;
        description "Do not timestamp trace file";
        status deprecated;
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
    }
    list flag {
      description "Tracing parameters";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum events {
            description "Trace events to the protocol state machine";
          }
          enum bpdu {
            description "Trace BPDU reception and transmission";
          }
          enum timers {
            description "Trace protocol timers";
          }
          enum port-information-state-machine {
            description "Trace port information state machine";
          }
          enum port-receive-state-machine {
            description "Trace port receive state machine";
          }
          enum port-role-select-state-machine {
            description "Trace port role selection state machine";
          }
          enum port-role-transit-state-machine {
            description "Trace port role transit state machine";
          }
          enum port-state-transit-state-machine {
            description "Trace port state transit state machine";
          }
          enum port-migration-state-machine {
            description "Trace port migration state machine";
          }
          enum port-transmit-state-machine {
            description "Trace port transmit state machine";
          }
          enum topology-change-state-machine {
            description "Trace topology change state machine";
          }
          enum bridge-detection-state-machine {
            description "Trace Bridge detection state machine";
          }
          enum state-machine-variables {
            description "Trace when state machine variables change";
          }
          enum ppmd {
            description "Trace state and events for ppmd process";
          }
          enum all-failures {
            description "Trace all failure conditions";
          }
          enum all {
            description "Trace all";
          }
        }
      }
      leaf disable {
        type empty;
        description "Disable this trace flag";
      }
    }
  }
  grouping subscription-type {
    uses apply-advanced;
    leaf link-subscription {
      type string;
      default "100";
      description "Link bandwidth percentage for RSVP reservation";
    }
    leaf ct0 {
      type string;
      default "100";
      description "Subscription percentage for traffic class 0";
    }
    leaf ct1 {
      type string;
      default "100";
      description "Subscription percentage for traffic class 1";
    }
    leaf ct2 {
      type string;
      default "100";
      description "Subscription percentage for traffic class 2";
    }
    leaf ct3 {
      type string;
      default "100";
      description "Subscription percentage for traffic class 3";
    }
    list priority {
      description "Subscription percentage for a specific priority";
      key priority-value;
      ordered-by user;
      leaf priority-value {
        type uint32 {
          range "0 .. 7";
        }
        description "Priority for which subscription percent is being configured";
      }
      uses apply-advanced;
      leaf percent {
        type string;
        description "Subscription percent for the specific priority";
      }
    }
  }
  grouping system-id-ip-map {
    leaf name {
      type "jt:mac-unicast";
    }
    uses apply-advanced;
    leaf ip-address {
      type "jt:ipv4prefix";
      description "Peer ID (IP Address)";
    }
  }
  grouping te-class-object {
    leaf traffic-class {
      type enumeration {
        enum ct0 {
          description "Traffic class 0";
        }
        enum ct1 {
          description "Traffic class 1";
        }
        enum ct2 {
          description "Traffic class 2";
        }
        enum ct3 {
          description "Traffic class 3";
        }
      }
      description "Traffic class";
    }
    leaf priority {
      type uint32 {
        range "0 .. 7";
      }
      description "Preemption priority for this class";
    }
  }
  grouping timingd-traceoptions {
    description "Trace options for PTP stack and Servo";
    uses apply-advanced;
    leaf no-remote-trace {
      type empty;
      description "Disable remote tracing";
    }
    container file {
      description "Trace file information";
      leaf filename {
        type string {
          length "1 .. 1024";
        }
        description "Name of file in which to write trace information";
      }
      leaf size {
        type string;
        description "Maximum trace file size";
      }
      leaf files {
        type uint32 {
          range "2 .. 1000";
        }
        default "3";
        description "Maximum number of trace files";
      }
      choice world-readable-choice {
        leaf world-readable {
          type empty;
          description "Allow any user to read the log file";
        }
        leaf no-world-readable {
          type empty;
          description "Don't allow any user to read the log file";
        }
      }
      leaf match {
        type "jt:regular-expression";
        description "Regular expression for lines to be logged";
      }
    }
    leaf level {
      type enumeration {
        enum error {
          description "Match error conditions";
        }
        enum warning {
          description "Match warning messages";
        }
        enum notice {
          description "Match conditions that should be handled specially";
        }
        enum info {
          description "Match informational messages";
        }
        enum verbose {
          description "Match verbose messages";
        }
        enum all {
          description "Match all levels";
        }
      }
      default "error";
      description "Level of debugging output";
    }
    list flag {
      description "Tracing parameters";
      key name;
      ordered-by user;
      leaf name {
        type enumeration {
          enum init {
            description "Trace daemon start-up related events";
          }
          enum routing-socket {
            description "Trace routing-socket events";
          }
          enum ipc {
            description "Trace IPC messages";
          }
          enum configuration {
            description "Trace configuration events";
          }
          enum timer {
            description "Trace Timer events";
          }
          enum event {
            description "Trace generic events";
          }
          enum ptp-bmc {
            description "Trace PTP BMC messages";
          }
          enum ptp-tp {
            description "Trace PTP telecom profile messages";
          }
          enum ptp-sig {
            description "Trace PTP signalling messages";
          }
          enum ptp-mgmt {
            description "Trace PTP management messages";
          }
          enum ptp-servo {
            description "Trace PTP servo messages";
          }
          enum ptp-config {
            description "Trace PTP config messages";
          }
          enum ptp-announce {
            description "Trace PTP announce messages";
          }
          enum ptp-sync {
            description "Trace PTP sync messages";
          }
          enum ptp-delay-req {
            description "Trace PTP delay-req messages";
          }
          enum ptp-delay-resp {
            description "Trace PTP delay-resp messages";
          }
          enum ptp-sig-announce {
            description "Trace PTP sig-announce messages";
          }
          enum ptp-sig-sync {
            description "Trace PTP sig-sync messages";
          }
          enum ptp-sig-delay {
            description "Trace PTP sig-delay messages";
          }
          enum ptp-tie {
            description "Trace PTP TIE messages";
          }
          enum ptp-tc {
            description "Trace PTP TC messages";
          }
          enum ptp-learned-sl {
            description "Trace PTP learned slaves messages";
          }
          enum pkt-io {
            description "Trace PTP packet IO";
          }
          enum all {
            description "Trace everything";
          }
        }
      }
    }
  }
}
